"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@opentelemetry";
exports.ids = ["vendor-chunks/@opentelemetry"];
exports.modules = {

/***/ "(instrument)/./node_modules/@opentelemetry/api-logs/build/esm/NoopLogger.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api-logs/build/esm/NoopLogger.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NOOP_LOGGER: () => (/* binding */ NOOP_LOGGER),\n/* harmony export */   NoopLogger: () => (/* binding */ NoopLogger)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass NoopLogger {\n    emit(_logRecord) { }\n}\nconst NOOP_LOGGER = new NoopLogger();\n//# sourceMappingURL=NoopLogger.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS1sb2dzL2J1aWxkL2VzbS9Ob29wTG9nZ2VyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ087QUFDUCIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9hcGktbG9ncy9idWlsZC9lc20vTm9vcExvZ2dlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuZXhwb3J0IGNsYXNzIE5vb3BMb2dnZXIge1xuICAgIGVtaXQoX2xvZ1JlY29yZCkgeyB9XG59XG5leHBvcnQgY29uc3QgTk9PUF9MT0dHRVIgPSBuZXcgTm9vcExvZ2dlcigpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Tm9vcExvZ2dlci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api-logs/build/esm/NoopLogger.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api-logs/build/esm/NoopLoggerProvider.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api-logs/build/esm/NoopLoggerProvider.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NOOP_LOGGER_PROVIDER: () => (/* binding */ NOOP_LOGGER_PROVIDER),\n/* harmony export */   NoopLoggerProvider: () => (/* binding */ NoopLoggerProvider)\n/* harmony export */ });\n/* harmony import */ var _NoopLogger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NoopLogger */ \"(instrument)/./node_modules/@opentelemetry/api-logs/build/esm/NoopLogger.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nclass NoopLoggerProvider {\n    getLogger(_name, _version, _options) {\n        return new _NoopLogger__WEBPACK_IMPORTED_MODULE_0__.NoopLogger();\n    }\n}\nconst NOOP_LOGGER_PROVIDER = new NoopLoggerProvider();\n//# sourceMappingURL=NoopLoggerProvider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS1sb2dzL2J1aWxkL2VzbS9Ob29wTG9nZ2VyUHJvdmlkZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQzBDO0FBQ25DO0FBQ1A7QUFDQSxtQkFBbUIsbURBQVU7QUFDN0I7QUFDQTtBQUNPO0FBQ1AiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvYXBpLWxvZ3MvYnVpbGQvZXNtL05vb3BMb2dnZXJQcm92aWRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgTm9vcExvZ2dlciB9IGZyb20gJy4vTm9vcExvZ2dlcic7XG5leHBvcnQgY2xhc3MgTm9vcExvZ2dlclByb3ZpZGVyIHtcbiAgICBnZXRMb2dnZXIoX25hbWUsIF92ZXJzaW9uLCBfb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IE5vb3BMb2dnZXIoKTtcbiAgICB9XG59XG5leHBvcnQgY29uc3QgTk9PUF9MT0dHRVJfUFJPVklERVIgPSBuZXcgTm9vcExvZ2dlclByb3ZpZGVyKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Ob29wTG9nZ2VyUHJvdmlkZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api-logs/build/esm/NoopLoggerProvider.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api-logs/build/esm/ProxyLogger.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api-logs/build/esm/ProxyLogger.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ProxyLogger: () => (/* binding */ ProxyLogger)\n/* harmony export */ });\n/* harmony import */ var _NoopLogger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NoopLogger */ \"(instrument)/./node_modules/@opentelemetry/api-logs/build/esm/NoopLogger.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nclass ProxyLogger {\n    constructor(_provider, name, version, options) {\n        this._provider = _provider;\n        this.name = name;\n        this.version = version;\n        this.options = options;\n    }\n    /**\n     * Emit a log record. This method should only be used by log appenders.\n     *\n     * @param logRecord\n     */\n    emit(logRecord) {\n        this._getLogger().emit(logRecord);\n    }\n    /**\n     * Try to get a logger from the proxy logger provider.\n     * If the proxy logger provider has no delegate, return a noop logger.\n     */\n    _getLogger() {\n        if (this._delegate) {\n            return this._delegate;\n        }\n        const logger = this._provider.getDelegateLogger(this.name, this.version, this.options);\n        if (!logger) {\n            return _NoopLogger__WEBPACK_IMPORTED_MODULE_0__.NOOP_LOGGER;\n        }\n        this._delegate = logger;\n        return this._delegate;\n    }\n}\n//# sourceMappingURL=ProxyLogger.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS1sb2dzL2J1aWxkL2VzbS9Qcm94eUxvZ2dlci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUMyQztBQUNwQztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixvREFBVztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvYXBpLWxvZ3MvYnVpbGQvZXNtL1Byb3h5TG9nZ2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBOT09QX0xPR0dFUiB9IGZyb20gJy4vTm9vcExvZ2dlcic7XG5leHBvcnQgY2xhc3MgUHJveHlMb2dnZXIge1xuICAgIGNvbnN0cnVjdG9yKF9wcm92aWRlciwgbmFtZSwgdmVyc2lvbiwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLl9wcm92aWRlciA9IF9wcm92aWRlcjtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG4gICAgLyoqXG4gICAgICogRW1pdCBhIGxvZyByZWNvcmQuIFRoaXMgbWV0aG9kIHNob3VsZCBvbmx5IGJlIHVzZWQgYnkgbG9nIGFwcGVuZGVycy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBsb2dSZWNvcmRcbiAgICAgKi9cbiAgICBlbWl0KGxvZ1JlY29yZCkge1xuICAgICAgICB0aGlzLl9nZXRMb2dnZXIoKS5lbWl0KGxvZ1JlY29yZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRyeSB0byBnZXQgYSBsb2dnZXIgZnJvbSB0aGUgcHJveHkgbG9nZ2VyIHByb3ZpZGVyLlxuICAgICAqIElmIHRoZSBwcm94eSBsb2dnZXIgcHJvdmlkZXIgaGFzIG5vIGRlbGVnYXRlLCByZXR1cm4gYSBub29wIGxvZ2dlci5cbiAgICAgKi9cbiAgICBfZ2V0TG9nZ2VyKCkge1xuICAgICAgICBpZiAodGhpcy5fZGVsZWdhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9kZWxlZ2F0ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsb2dnZXIgPSB0aGlzLl9wcm92aWRlci5nZXREZWxlZ2F0ZUxvZ2dlcih0aGlzLm5hbWUsIHRoaXMudmVyc2lvbiwgdGhpcy5vcHRpb25zKTtcbiAgICAgICAgaWYgKCFsb2dnZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBOT09QX0xPR0dFUjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9kZWxlZ2F0ZSA9IGxvZ2dlcjtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlbGVnYXRlO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVByb3h5TG9nZ2VyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api-logs/build/esm/ProxyLogger.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api-logs/build/esm/ProxyLoggerProvider.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api-logs/build/esm/ProxyLoggerProvider.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ProxyLoggerProvider: () => (/* binding */ ProxyLoggerProvider)\n/* harmony export */ });\n/* harmony import */ var _NoopLoggerProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./NoopLoggerProvider */ \"(instrument)/./node_modules/@opentelemetry/api-logs/build/esm/NoopLoggerProvider.js\");\n/* harmony import */ var _ProxyLogger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ProxyLogger */ \"(instrument)/./node_modules/@opentelemetry/api-logs/build/esm/ProxyLogger.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nclass ProxyLoggerProvider {\n    getLogger(name, version, options) {\n        var _a;\n        return ((_a = this.getDelegateLogger(name, version, options)) !== null && _a !== void 0 ? _a : new _ProxyLogger__WEBPACK_IMPORTED_MODULE_0__.ProxyLogger(this, name, version, options));\n    }\n    getDelegate() {\n        var _a;\n        return (_a = this._delegate) !== null && _a !== void 0 ? _a : _NoopLoggerProvider__WEBPACK_IMPORTED_MODULE_1__.NOOP_LOGGER_PROVIDER;\n    }\n    /**\n     * Set the delegate logger provider\n     */\n    setDelegate(delegate) {\n        this._delegate = delegate;\n    }\n    getDelegateLogger(name, version, options) {\n        var _a;\n        return (_a = this._delegate) === null || _a === void 0 ? void 0 : _a.getLogger(name, version, options);\n    }\n}\n//# sourceMappingURL=ProxyLoggerProvider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS1sb2dzL2J1aWxkL2VzbS9Qcm94eUxvZ2dlclByb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUM0RDtBQUNoQjtBQUNyQztBQUNQO0FBQ0E7QUFDQSwyR0FBMkcscURBQVc7QUFDdEg7QUFDQTtBQUNBO0FBQ0Esc0VBQXNFLHFFQUFvQjtBQUMxRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9hcGktbG9ncy9idWlsZC9lc20vUHJveHlMb2dnZXJQcm92aWRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgTk9PUF9MT0dHRVJfUFJPVklERVIgfSBmcm9tICcuL05vb3BMb2dnZXJQcm92aWRlcic7XG5pbXBvcnQgeyBQcm94eUxvZ2dlciB9IGZyb20gJy4vUHJveHlMb2dnZXInO1xuZXhwb3J0IGNsYXNzIFByb3h5TG9nZ2VyUHJvdmlkZXIge1xuICAgIGdldExvZ2dlcihuYW1lLCB2ZXJzaW9uLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuICgoX2EgPSB0aGlzLmdldERlbGVnYXRlTG9nZ2VyKG5hbWUsIHZlcnNpb24sIG9wdGlvbnMpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBuZXcgUHJveHlMb2dnZXIodGhpcywgbmFtZSwgdmVyc2lvbiwgb3B0aW9ucykpO1xuICAgIH1cbiAgICBnZXREZWxlZ2F0ZSgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gdGhpcy5fZGVsZWdhdGUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IE5PT1BfTE9HR0VSX1BST1ZJREVSO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGRlbGVnYXRlIGxvZ2dlciBwcm92aWRlclxuICAgICAqL1xuICAgIHNldERlbGVnYXRlKGRlbGVnYXRlKSB7XG4gICAgICAgIHRoaXMuX2RlbGVnYXRlID0gZGVsZWdhdGU7XG4gICAgfVxuICAgIGdldERlbGVnYXRlTG9nZ2VyKG5hbWUsIHZlcnNpb24sIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gdGhpcy5fZGVsZWdhdGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5nZXRMb2dnZXIobmFtZSwgdmVyc2lvbiwgb3B0aW9ucyk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UHJveHlMb2dnZXJQcm92aWRlci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api-logs/build/esm/ProxyLoggerProvider.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api-logs/build/esm/api/logs.js":
/*!********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api-logs/build/esm/api/logs.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LogsAPI: () => (/* binding */ LogsAPI)\n/* harmony export */ });\n/* harmony import */ var _internal_global_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../internal/global-utils */ \"(instrument)/./node_modules/@opentelemetry/api-logs/build/esm/internal/global-utils.js\");\n/* harmony import */ var _NoopLoggerProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../NoopLoggerProvider */ \"(instrument)/./node_modules/@opentelemetry/api-logs/build/esm/NoopLoggerProvider.js\");\n/* harmony import */ var _ProxyLoggerProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ProxyLoggerProvider */ \"(instrument)/./node_modules/@opentelemetry/api-logs/build/esm/ProxyLoggerProvider.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nclass LogsAPI {\n    constructor() {\n        this._proxyLoggerProvider = new _ProxyLoggerProvider__WEBPACK_IMPORTED_MODULE_0__.ProxyLoggerProvider();\n    }\n    static getInstance() {\n        if (!this._instance) {\n            this._instance = new LogsAPI();\n        }\n        return this._instance;\n    }\n    setGlobalLoggerProvider(provider) {\n        if (_internal_global_utils__WEBPACK_IMPORTED_MODULE_1__._global[_internal_global_utils__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_LOGS_API_KEY]) {\n            return this.getLoggerProvider();\n        }\n        _internal_global_utils__WEBPACK_IMPORTED_MODULE_1__._global[_internal_global_utils__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_LOGS_API_KEY] = (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_1__.makeGetter)(_internal_global_utils__WEBPACK_IMPORTED_MODULE_1__.API_BACKWARDS_COMPATIBILITY_VERSION, provider, _NoopLoggerProvider__WEBPACK_IMPORTED_MODULE_2__.NOOP_LOGGER_PROVIDER);\n        this._proxyLoggerProvider.setDelegate(provider);\n        return provider;\n    }\n    /**\n     * Returns the global logger provider.\n     *\n     * @returns LoggerProvider\n     */\n    getLoggerProvider() {\n        var _a, _b;\n        return ((_b = (_a = _internal_global_utils__WEBPACK_IMPORTED_MODULE_1__._global[_internal_global_utils__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_LOGS_API_KEY]) === null || _a === void 0 ? void 0 : _a.call(_internal_global_utils__WEBPACK_IMPORTED_MODULE_1__._global, _internal_global_utils__WEBPACK_IMPORTED_MODULE_1__.API_BACKWARDS_COMPATIBILITY_VERSION)) !== null && _b !== void 0 ? _b : this._proxyLoggerProvider);\n    }\n    /**\n     * Returns a logger from the global logger provider.\n     *\n     * @returns Logger\n     */\n    getLogger(name, version, options) {\n        return this.getLoggerProvider().getLogger(name, version, options);\n    }\n    /** Remove the global logger provider */\n    disable() {\n        delete _internal_global_utils__WEBPACK_IMPORTED_MODULE_1__._global[_internal_global_utils__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_LOGS_API_KEY];\n        this._proxyLoggerProvider = new _ProxyLoggerProvider__WEBPACK_IMPORTED_MODULE_0__.ProxyLoggerProvider();\n    }\n}\n//# sourceMappingURL=logs.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS1sb2dzL2J1aWxkL2VzbS9hcGkvbG9ncy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQzBIO0FBQzdEO0FBQ0E7QUFDdEQ7QUFDUDtBQUNBLHdDQUF3QyxxRUFBbUI7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksMkRBQU8sQ0FBQyx1RUFBbUI7QUFDdkM7QUFDQTtBQUNBLFFBQVEsMkRBQU8sQ0FBQyx1RUFBbUIsSUFBSSxrRUFBVSxDQUFDLHVGQUFtQyxZQUFZLHFFQUFvQjtBQUNySDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QiwyREFBTyxDQUFDLHVFQUFtQixnREFBZ0QsMkRBQU8sRUFBRSx1RkFBbUM7QUFDbko7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsMkRBQU8sQ0FBQyx1RUFBbUI7QUFDMUMsd0NBQXdDLHFFQUFtQjtBQUMzRDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvYXBpLWxvZ3MvYnVpbGQvZXNtL2FwaS9sb2dzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBBUElfQkFDS1dBUkRTX0NPTVBBVElCSUxJVFlfVkVSU0lPTiwgR0xPQkFMX0xPR1NfQVBJX0tFWSwgX2dsb2JhbCwgbWFrZUdldHRlciwgfSBmcm9tICcuLi9pbnRlcm5hbC9nbG9iYWwtdXRpbHMnO1xuaW1wb3J0IHsgTk9PUF9MT0dHRVJfUFJPVklERVIgfSBmcm9tICcuLi9Ob29wTG9nZ2VyUHJvdmlkZXInO1xuaW1wb3J0IHsgUHJveHlMb2dnZXJQcm92aWRlciB9IGZyb20gJy4uL1Byb3h5TG9nZ2VyUHJvdmlkZXInO1xuZXhwb3J0IGNsYXNzIExvZ3NBUEkge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLl9wcm94eUxvZ2dlclByb3ZpZGVyID0gbmV3IFByb3h5TG9nZ2VyUHJvdmlkZXIoKTtcbiAgICB9XG4gICAgc3RhdGljIGdldEluc3RhbmNlKCkge1xuICAgICAgICBpZiAoIXRoaXMuX2luc3RhbmNlKSB7XG4gICAgICAgICAgICB0aGlzLl9pbnN0YW5jZSA9IG5ldyBMb2dzQVBJKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2luc3RhbmNlO1xuICAgIH1cbiAgICBzZXRHbG9iYWxMb2dnZXJQcm92aWRlcihwcm92aWRlcikge1xuICAgICAgICBpZiAoX2dsb2JhbFtHTE9CQUxfTE9HU19BUElfS0VZXSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TG9nZ2VyUHJvdmlkZXIoKTtcbiAgICAgICAgfVxuICAgICAgICBfZ2xvYmFsW0dMT0JBTF9MT0dTX0FQSV9LRVldID0gbWFrZUdldHRlcihBUElfQkFDS1dBUkRTX0NPTVBBVElCSUxJVFlfVkVSU0lPTiwgcHJvdmlkZXIsIE5PT1BfTE9HR0VSX1BST1ZJREVSKTtcbiAgICAgICAgdGhpcy5fcHJveHlMb2dnZXJQcm92aWRlci5zZXREZWxlZ2F0ZShwcm92aWRlcik7XG4gICAgICAgIHJldHVybiBwcm92aWRlcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgZ2xvYmFsIGxvZ2dlciBwcm92aWRlci5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIExvZ2dlclByb3ZpZGVyXG4gICAgICovXG4gICAgZ2V0TG9nZ2VyUHJvdmlkZXIoKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHJldHVybiAoKF9iID0gKF9hID0gX2dsb2JhbFtHTE9CQUxfTE9HU19BUElfS0VZXSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwoX2dsb2JhbCwgQVBJX0JBQ0tXQVJEU19DT01QQVRJQklMSVRZX1ZFUlNJT04pKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiB0aGlzLl9wcm94eUxvZ2dlclByb3ZpZGVyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGxvZ2dlciBmcm9tIHRoZSBnbG9iYWwgbG9nZ2VyIHByb3ZpZGVyLlxuICAgICAqXG4gICAgICogQHJldHVybnMgTG9nZ2VyXG4gICAgICovXG4gICAgZ2V0TG9nZ2VyKG5hbWUsIHZlcnNpb24sIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TG9nZ2VyUHJvdmlkZXIoKS5nZXRMb2dnZXIobmFtZSwgdmVyc2lvbiwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKiBSZW1vdmUgdGhlIGdsb2JhbCBsb2dnZXIgcHJvdmlkZXIgKi9cbiAgICBkaXNhYmxlKCkge1xuICAgICAgICBkZWxldGUgX2dsb2JhbFtHTE9CQUxfTE9HU19BUElfS0VZXTtcbiAgICAgICAgdGhpcy5fcHJveHlMb2dnZXJQcm92aWRlciA9IG5ldyBQcm94eUxvZ2dlclByb3ZpZGVyKCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9ncy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api-logs/build/esm/api/logs.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api-logs/build/esm/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@opentelemetry/api-logs/build/esm/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NOOP_LOGGER: () => (/* reexport safe */ _NoopLogger__WEBPACK_IMPORTED_MODULE_1__.NOOP_LOGGER),\n/* harmony export */   NOOP_LOGGER_PROVIDER: () => (/* reexport safe */ _NoopLoggerProvider__WEBPACK_IMPORTED_MODULE_2__.NOOP_LOGGER_PROVIDER),\n/* harmony export */   NoopLogger: () => (/* reexport safe */ _NoopLogger__WEBPACK_IMPORTED_MODULE_1__.NoopLogger),\n/* harmony export */   NoopLoggerProvider: () => (/* reexport safe */ _NoopLoggerProvider__WEBPACK_IMPORTED_MODULE_2__.NoopLoggerProvider),\n/* harmony export */   ProxyLogger: () => (/* reexport safe */ _ProxyLogger__WEBPACK_IMPORTED_MODULE_3__.ProxyLogger),\n/* harmony export */   ProxyLoggerProvider: () => (/* reexport safe */ _ProxyLoggerProvider__WEBPACK_IMPORTED_MODULE_4__.ProxyLoggerProvider),\n/* harmony export */   SeverityNumber: () => (/* reexport safe */ _types_LogRecord__WEBPACK_IMPORTED_MODULE_0__.SeverityNumber),\n/* harmony export */   logs: () => (/* binding */ logs)\n/* harmony export */ });\n/* harmony import */ var _types_LogRecord__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types/LogRecord */ \"(instrument)/./node_modules/@opentelemetry/api-logs/build/esm/types/LogRecord.js\");\n/* harmony import */ var _NoopLogger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./NoopLogger */ \"(instrument)/./node_modules/@opentelemetry/api-logs/build/esm/NoopLogger.js\");\n/* harmony import */ var _NoopLoggerProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./NoopLoggerProvider */ \"(instrument)/./node_modules/@opentelemetry/api-logs/build/esm/NoopLoggerProvider.js\");\n/* harmony import */ var _ProxyLogger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ProxyLogger */ \"(instrument)/./node_modules/@opentelemetry/api-logs/build/esm/ProxyLogger.js\");\n/* harmony import */ var _ProxyLoggerProvider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ProxyLoggerProvider */ \"(instrument)/./node_modules/@opentelemetry/api-logs/build/esm/ProxyLoggerProvider.js\");\n/* harmony import */ var _api_logs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./api/logs */ \"(instrument)/./node_modules/@opentelemetry/api-logs/build/esm/api/logs.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\nconst logs = _api_logs__WEBPACK_IMPORTED_MODULE_5__.LogsAPI.getInstance();\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS1sb2dzL2J1aWxkL2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNtRDtBQUNJO0FBQ3lCO0FBQ3BDO0FBQ2dCO0FBQ3ZCO0FBQzlCLGFBQWEsOENBQU87QUFDM0IiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvYXBpLWxvZ3MvYnVpbGQvZXNtL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5leHBvcnQgeyBTZXZlcml0eU51bWJlciB9IGZyb20gJy4vdHlwZXMvTG9nUmVjb3JkJztcbmV4cG9ydCB7IE5PT1BfTE9HR0VSLCBOb29wTG9nZ2VyIH0gZnJvbSAnLi9Ob29wTG9nZ2VyJztcbmV4cG9ydCB7IE5PT1BfTE9HR0VSX1BST1ZJREVSLCBOb29wTG9nZ2VyUHJvdmlkZXIgfSBmcm9tICcuL05vb3BMb2dnZXJQcm92aWRlcic7XG5leHBvcnQgeyBQcm94eUxvZ2dlciB9IGZyb20gJy4vUHJveHlMb2dnZXInO1xuZXhwb3J0IHsgUHJveHlMb2dnZXJQcm92aWRlciB9IGZyb20gJy4vUHJveHlMb2dnZXJQcm92aWRlcic7XG5pbXBvcnQgeyBMb2dzQVBJIH0gZnJvbSAnLi9hcGkvbG9ncyc7XG5leHBvcnQgY29uc3QgbG9ncyA9IExvZ3NBUEkuZ2V0SW5zdGFuY2UoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api-logs/build/esm/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api-logs/build/esm/internal/global-utils.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api-logs/build/esm/internal/global-utils.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   API_BACKWARDS_COMPATIBILITY_VERSION: () => (/* binding */ API_BACKWARDS_COMPATIBILITY_VERSION),\n/* harmony export */   GLOBAL_LOGS_API_KEY: () => (/* binding */ GLOBAL_LOGS_API_KEY),\n/* harmony export */   _global: () => (/* binding */ _global),\n/* harmony export */   makeGetter: () => (/* binding */ makeGetter)\n/* harmony export */ });\n/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../platform */ \"(instrument)/./node_modules/@opentelemetry/api-logs/build/esm/platform/node/globalThis.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst GLOBAL_LOGS_API_KEY = Symbol.for('io.opentelemetry.js.api.logs');\nconst _global = _platform__WEBPACK_IMPORTED_MODULE_0__._globalThis;\n/**\n * Make a function which accepts a version integer and returns the instance of an API if the version\n * is compatible, or a fallback version (usually NOOP) if it is not.\n *\n * @param requiredVersion Backwards compatibility version which is required to return the instance\n * @param instance Instance which should be returned if the required version is compatible\n * @param fallback Fallback instance, usually NOOP, which will be returned if the required version is not compatible\n */\nfunction makeGetter(requiredVersion, instance, fallback) {\n    return (version) => version === requiredVersion ? instance : fallback;\n}\n/**\n * A number which should be incremented each time a backwards incompatible\n * change is made to the API. This number is used when an API package\n * attempts to access the global API to ensure it is getting a compatible\n * version. If the global API is not compatible with the API package\n * attempting to get it, a NOOP API implementation will be returned.\n */\nconst API_BACKWARDS_COMPATIBILITY_VERSION = 1;\n//# sourceMappingURL=global-utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS1sb2dzL2J1aWxkL2VzbS9pbnRlcm5hbC9nbG9iYWwtdXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDMEM7QUFDbkM7QUFDQSxnQkFBZ0Isa0RBQVc7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9hcGktbG9ncy9idWlsZC9lc20vaW50ZXJuYWwvZ2xvYmFsLXV0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBfZ2xvYmFsVGhpcyB9IGZyb20gJy4uL3BsYXRmb3JtJztcbmV4cG9ydCBjb25zdCBHTE9CQUxfTE9HU19BUElfS0VZID0gU3ltYm9sLmZvcignaW8ub3BlbnRlbGVtZXRyeS5qcy5hcGkubG9ncycpO1xuZXhwb3J0IGNvbnN0IF9nbG9iYWwgPSBfZ2xvYmFsVGhpcztcbi8qKlxuICogTWFrZSBhIGZ1bmN0aW9uIHdoaWNoIGFjY2VwdHMgYSB2ZXJzaW9uIGludGVnZXIgYW5kIHJldHVybnMgdGhlIGluc3RhbmNlIG9mIGFuIEFQSSBpZiB0aGUgdmVyc2lvblxuICogaXMgY29tcGF0aWJsZSwgb3IgYSBmYWxsYmFjayB2ZXJzaW9uICh1c3VhbGx5IE5PT1ApIGlmIGl0IGlzIG5vdC5cbiAqXG4gKiBAcGFyYW0gcmVxdWlyZWRWZXJzaW9uIEJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHZlcnNpb24gd2hpY2ggaXMgcmVxdWlyZWQgdG8gcmV0dXJuIHRoZSBpbnN0YW5jZVxuICogQHBhcmFtIGluc3RhbmNlIEluc3RhbmNlIHdoaWNoIHNob3VsZCBiZSByZXR1cm5lZCBpZiB0aGUgcmVxdWlyZWQgdmVyc2lvbiBpcyBjb21wYXRpYmxlXG4gKiBAcGFyYW0gZmFsbGJhY2sgRmFsbGJhY2sgaW5zdGFuY2UsIHVzdWFsbHkgTk9PUCwgd2hpY2ggd2lsbCBiZSByZXR1cm5lZCBpZiB0aGUgcmVxdWlyZWQgdmVyc2lvbiBpcyBub3QgY29tcGF0aWJsZVxuICovXG5leHBvcnQgZnVuY3Rpb24gbWFrZUdldHRlcihyZXF1aXJlZFZlcnNpb24sIGluc3RhbmNlLCBmYWxsYmFjaykge1xuICAgIHJldHVybiAodmVyc2lvbikgPT4gdmVyc2lvbiA9PT0gcmVxdWlyZWRWZXJzaW9uID8gaW5zdGFuY2UgOiBmYWxsYmFjaztcbn1cbi8qKlxuICogQSBudW1iZXIgd2hpY2ggc2hvdWxkIGJlIGluY3JlbWVudGVkIGVhY2ggdGltZSBhIGJhY2t3YXJkcyBpbmNvbXBhdGlibGVcbiAqIGNoYW5nZSBpcyBtYWRlIHRvIHRoZSBBUEkuIFRoaXMgbnVtYmVyIGlzIHVzZWQgd2hlbiBhbiBBUEkgcGFja2FnZVxuICogYXR0ZW1wdHMgdG8gYWNjZXNzIHRoZSBnbG9iYWwgQVBJIHRvIGVuc3VyZSBpdCBpcyBnZXR0aW5nIGEgY29tcGF0aWJsZVxuICogdmVyc2lvbi4gSWYgdGhlIGdsb2JhbCBBUEkgaXMgbm90IGNvbXBhdGlibGUgd2l0aCB0aGUgQVBJIHBhY2thZ2VcbiAqIGF0dGVtcHRpbmcgdG8gZ2V0IGl0LCBhIE5PT1AgQVBJIGltcGxlbWVudGF0aW9uIHdpbGwgYmUgcmV0dXJuZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBBUElfQkFDS1dBUkRTX0NPTVBBVElCSUxJVFlfVkVSU0lPTiA9IDE7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nbG9iYWwtdXRpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api-logs/build/esm/internal/global-utils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api-logs/build/esm/platform/node/globalThis.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api-logs/build/esm/platform/node/globalThis.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _globalThis: () => (/* binding */ _globalThis)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** only globals that common to node and browsers are allowed */\n// eslint-disable-next-line node/no-unsupported-features/es-builtins\nconst _globalThis = typeof globalThis === 'object' ? globalThis : global;\n//# sourceMappingURL=globalThis.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS1sb2dzL2J1aWxkL2VzbS9wbGF0Zm9ybS9ub2RlL2dsb2JhbFRoaXMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS1sb2dzL2J1aWxkL2VzbS9wbGF0Zm9ybS9ub2RlL2dsb2JhbFRoaXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKiBvbmx5IGdsb2JhbHMgdGhhdCBjb21tb24gdG8gbm9kZSBhbmQgYnJvd3NlcnMgYXJlIGFsbG93ZWQgKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL2VzLWJ1aWx0aW5zXG5leHBvcnQgY29uc3QgX2dsb2JhbFRoaXMgPSB0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcgPyBnbG9iYWxUaGlzIDogZ2xvYmFsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2xvYmFsVGhpcy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api-logs/build/esm/platform/node/globalThis.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api-logs/build/esm/types/LogRecord.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api-logs/build/esm/types/LogRecord.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SeverityNumber: () => (/* binding */ SeverityNumber)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar SeverityNumber;\n(function (SeverityNumber) {\n    SeverityNumber[SeverityNumber[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    SeverityNumber[SeverityNumber[\"TRACE\"] = 1] = \"TRACE\";\n    SeverityNumber[SeverityNumber[\"TRACE2\"] = 2] = \"TRACE2\";\n    SeverityNumber[SeverityNumber[\"TRACE3\"] = 3] = \"TRACE3\";\n    SeverityNumber[SeverityNumber[\"TRACE4\"] = 4] = \"TRACE4\";\n    SeverityNumber[SeverityNumber[\"DEBUG\"] = 5] = \"DEBUG\";\n    SeverityNumber[SeverityNumber[\"DEBUG2\"] = 6] = \"DEBUG2\";\n    SeverityNumber[SeverityNumber[\"DEBUG3\"] = 7] = \"DEBUG3\";\n    SeverityNumber[SeverityNumber[\"DEBUG4\"] = 8] = \"DEBUG4\";\n    SeverityNumber[SeverityNumber[\"INFO\"] = 9] = \"INFO\";\n    SeverityNumber[SeverityNumber[\"INFO2\"] = 10] = \"INFO2\";\n    SeverityNumber[SeverityNumber[\"INFO3\"] = 11] = \"INFO3\";\n    SeverityNumber[SeverityNumber[\"INFO4\"] = 12] = \"INFO4\";\n    SeverityNumber[SeverityNumber[\"WARN\"] = 13] = \"WARN\";\n    SeverityNumber[SeverityNumber[\"WARN2\"] = 14] = \"WARN2\";\n    SeverityNumber[SeverityNumber[\"WARN3\"] = 15] = \"WARN3\";\n    SeverityNumber[SeverityNumber[\"WARN4\"] = 16] = \"WARN4\";\n    SeverityNumber[SeverityNumber[\"ERROR\"] = 17] = \"ERROR\";\n    SeverityNumber[SeverityNumber[\"ERROR2\"] = 18] = \"ERROR2\";\n    SeverityNumber[SeverityNumber[\"ERROR3\"] = 19] = \"ERROR3\";\n    SeverityNumber[SeverityNumber[\"ERROR4\"] = 20] = \"ERROR4\";\n    SeverityNumber[SeverityNumber[\"FATAL\"] = 21] = \"FATAL\";\n    SeverityNumber[SeverityNumber[\"FATAL2\"] = 22] = \"FATAL2\";\n    SeverityNumber[SeverityNumber[\"FATAL3\"] = 23] = \"FATAL3\";\n    SeverityNumber[SeverityNumber[\"FATAL4\"] = 24] = \"FATAL4\";\n})(SeverityNumber || (SeverityNumber = {}));\n//# sourceMappingURL=LogRecord.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS1sb2dzL2J1aWxkL2VzbS90eXBlcy9Mb2dSZWNvcmQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsd0NBQXdDO0FBQ3pDIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS1sb2dzL2J1aWxkL2VzbS90eXBlcy9Mb2dSZWNvcmQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmV4cG9ydCB2YXIgU2V2ZXJpdHlOdW1iZXI7XG4oZnVuY3Rpb24gKFNldmVyaXR5TnVtYmVyKSB7XG4gICAgU2V2ZXJpdHlOdW1iZXJbU2V2ZXJpdHlOdW1iZXJbXCJVTlNQRUNJRklFRFwiXSA9IDBdID0gXCJVTlNQRUNJRklFRFwiO1xuICAgIFNldmVyaXR5TnVtYmVyW1NldmVyaXR5TnVtYmVyW1wiVFJBQ0VcIl0gPSAxXSA9IFwiVFJBQ0VcIjtcbiAgICBTZXZlcml0eU51bWJlcltTZXZlcml0eU51bWJlcltcIlRSQUNFMlwiXSA9IDJdID0gXCJUUkFDRTJcIjtcbiAgICBTZXZlcml0eU51bWJlcltTZXZlcml0eU51bWJlcltcIlRSQUNFM1wiXSA9IDNdID0gXCJUUkFDRTNcIjtcbiAgICBTZXZlcml0eU51bWJlcltTZXZlcml0eU51bWJlcltcIlRSQUNFNFwiXSA9IDRdID0gXCJUUkFDRTRcIjtcbiAgICBTZXZlcml0eU51bWJlcltTZXZlcml0eU51bWJlcltcIkRFQlVHXCJdID0gNV0gPSBcIkRFQlVHXCI7XG4gICAgU2V2ZXJpdHlOdW1iZXJbU2V2ZXJpdHlOdW1iZXJbXCJERUJVRzJcIl0gPSA2XSA9IFwiREVCVUcyXCI7XG4gICAgU2V2ZXJpdHlOdW1iZXJbU2V2ZXJpdHlOdW1iZXJbXCJERUJVRzNcIl0gPSA3XSA9IFwiREVCVUczXCI7XG4gICAgU2V2ZXJpdHlOdW1iZXJbU2V2ZXJpdHlOdW1iZXJbXCJERUJVRzRcIl0gPSA4XSA9IFwiREVCVUc0XCI7XG4gICAgU2V2ZXJpdHlOdW1iZXJbU2V2ZXJpdHlOdW1iZXJbXCJJTkZPXCJdID0gOV0gPSBcIklORk9cIjtcbiAgICBTZXZlcml0eU51bWJlcltTZXZlcml0eU51bWJlcltcIklORk8yXCJdID0gMTBdID0gXCJJTkZPMlwiO1xuICAgIFNldmVyaXR5TnVtYmVyW1NldmVyaXR5TnVtYmVyW1wiSU5GTzNcIl0gPSAxMV0gPSBcIklORk8zXCI7XG4gICAgU2V2ZXJpdHlOdW1iZXJbU2V2ZXJpdHlOdW1iZXJbXCJJTkZPNFwiXSA9IDEyXSA9IFwiSU5GTzRcIjtcbiAgICBTZXZlcml0eU51bWJlcltTZXZlcml0eU51bWJlcltcIldBUk5cIl0gPSAxM10gPSBcIldBUk5cIjtcbiAgICBTZXZlcml0eU51bWJlcltTZXZlcml0eU51bWJlcltcIldBUk4yXCJdID0gMTRdID0gXCJXQVJOMlwiO1xuICAgIFNldmVyaXR5TnVtYmVyW1NldmVyaXR5TnVtYmVyW1wiV0FSTjNcIl0gPSAxNV0gPSBcIldBUk4zXCI7XG4gICAgU2V2ZXJpdHlOdW1iZXJbU2V2ZXJpdHlOdW1iZXJbXCJXQVJONFwiXSA9IDE2XSA9IFwiV0FSTjRcIjtcbiAgICBTZXZlcml0eU51bWJlcltTZXZlcml0eU51bWJlcltcIkVSUk9SXCJdID0gMTddID0gXCJFUlJPUlwiO1xuICAgIFNldmVyaXR5TnVtYmVyW1NldmVyaXR5TnVtYmVyW1wiRVJST1IyXCJdID0gMThdID0gXCJFUlJPUjJcIjtcbiAgICBTZXZlcml0eU51bWJlcltTZXZlcml0eU51bWJlcltcIkVSUk9SM1wiXSA9IDE5XSA9IFwiRVJST1IzXCI7XG4gICAgU2V2ZXJpdHlOdW1iZXJbU2V2ZXJpdHlOdW1iZXJbXCJFUlJPUjRcIl0gPSAyMF0gPSBcIkVSUk9SNFwiO1xuICAgIFNldmVyaXR5TnVtYmVyW1NldmVyaXR5TnVtYmVyW1wiRkFUQUxcIl0gPSAyMV0gPSBcIkZBVEFMXCI7XG4gICAgU2V2ZXJpdHlOdW1iZXJbU2V2ZXJpdHlOdW1iZXJbXCJGQVRBTDJcIl0gPSAyMl0gPSBcIkZBVEFMMlwiO1xuICAgIFNldmVyaXR5TnVtYmVyW1NldmVyaXR5TnVtYmVyW1wiRkFUQUwzXCJdID0gMjNdID0gXCJGQVRBTDNcIjtcbiAgICBTZXZlcml0eU51bWJlcltTZXZlcml0eU51bWJlcltcIkZBVEFMNFwiXSA9IDI0XSA9IFwiRkFUQUw0XCI7XG59KShTZXZlcml0eU51bWJlciB8fCAoU2V2ZXJpdHlOdW1iZXIgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TG9nUmVjb3JkLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api-logs/build/esm/types/LogRecord.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/api/context.js":
/*!******************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/api/context.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContextAPI: () => (/* binding */ ContextAPI)\n/* harmony export */ });\n/* harmony import */ var _context_NoopContextManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../context/NoopContextManager */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/context/NoopContextManager.js\");\n/* harmony import */ var _internal_global_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../internal/global-utils */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/internal/global-utils.js\");\n/* harmony import */ var _diag__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./diag */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/api/diag.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (undefined && undefined.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\n\n\n\nvar API_NAME = 'context';\nvar NOOP_CONTEXT_MANAGER = new _context_NoopContextManager__WEBPACK_IMPORTED_MODULE_0__.NoopContextManager();\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Context API\n */\nvar ContextAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function ContextAPI() {\n    }\n    /** Get the singleton instance of the Context API */\n    ContextAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new ContextAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current context manager.\n     *\n     * @returns true if the context manager was successfully registered, else false\n     */\n    ContextAPI.prototype.setGlobalContextManager = function (contextManager) {\n        return (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_1__.registerGlobal)(API_NAME, contextManager, _diag__WEBPACK_IMPORTED_MODULE_2__.DiagAPI.instance());\n    };\n    /**\n     * Get the currently active context\n     */\n    ContextAPI.prototype.active = function () {\n        return this._getContextManager().active();\n    };\n    /**\n     * Execute a function with an active context\n     *\n     * @param context context to be active during function execution\n     * @param fn function to execute in a context\n     * @param thisArg optional receiver to be used for calling fn\n     * @param args optional arguments forwarded to fn\n     */\n    ContextAPI.prototype.with = function (context, fn, thisArg) {\n        var _a;\n        var args = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            args[_i - 3] = arguments[_i];\n        }\n        return (_a = this._getContextManager()).with.apply(_a, __spreadArray([context, fn, thisArg], __read(args), false));\n    };\n    /**\n     * Bind a context to a target function or event emitter\n     *\n     * @param context context to bind to the event emitter or function. Defaults to the currently active context\n     * @param target function or event emitter to bind\n     */\n    ContextAPI.prototype.bind = function (context, target) {\n        return this._getContextManager().bind(context, target);\n    };\n    ContextAPI.prototype._getContextManager = function () {\n        return (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_1__.getGlobal)(API_NAME) || NOOP_CONTEXT_MANAGER;\n    };\n    /** Disable and remove the global context manager */\n    ContextAPI.prototype.disable = function () {\n        this._getContextManager().disable();\n        (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_1__.unregisterGlobal)(API_NAME, _diag__WEBPACK_IMPORTED_MODULE_2__.DiagAPI.instance());\n    };\n    return ContextAPI;\n}());\n\n//# sourceMappingURL=context.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vYXBpL2NvbnRleHQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsU0FBSSxJQUFJLFNBQUk7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLE1BQU07QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLFNBQUksSUFBSSxTQUFJO0FBQ2pDLDZFQUE2RSxPQUFPO0FBQ3BGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ21FO0FBQ3FCO0FBQ3ZEO0FBQ2pDO0FBQ0EsK0JBQStCLDJFQUFrQjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxzRUFBYywyQkFBMkIsMENBQU87QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLHVCQUF1QjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxpRUFBUztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsd0VBQWdCLFdBQVcsMENBQU87QUFDMUM7QUFDQTtBQUNBLENBQUM7QUFDcUI7QUFDdEIiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvYXBpL2J1aWxkL2VzbS9hcGkvY29udGV4dC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xudmFyIF9fcmVhZCA9ICh0aGlzICYmIHRoaXMuX19yZWFkKSB8fCBmdW5jdGlvbiAobywgbikge1xuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcbiAgICBpZiAoIW0pIHJldHVybiBvO1xuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xuICAgIHRyeSB7XG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxuICAgIH1cbiAgICByZXR1cm4gYXI7XG59O1xudmFyIF9fc3ByZWFkQXJyYXkgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXkpIHx8IGZ1bmN0aW9uICh0bywgZnJvbSwgcGFjaykge1xuICAgIGlmIChwYWNrIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIGZvciAodmFyIGkgPSAwLCBsID0gZnJvbS5sZW5ndGgsIGFyOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGlmIChhciB8fCAhKGkgaW4gZnJvbSkpIHtcbiAgICAgICAgICAgIGlmICghYXIpIGFyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSwgMCwgaSk7XG4gICAgICAgICAgICBhcltpXSA9IGZyb21baV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRvLmNvbmNhdChhciB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tKSk7XG59O1xuaW1wb3J0IHsgTm9vcENvbnRleHRNYW5hZ2VyIH0gZnJvbSAnLi4vY29udGV4dC9Ob29wQ29udGV4dE1hbmFnZXInO1xuaW1wb3J0IHsgZ2V0R2xvYmFsLCByZWdpc3Rlckdsb2JhbCwgdW5yZWdpc3Rlckdsb2JhbCwgfSBmcm9tICcuLi9pbnRlcm5hbC9nbG9iYWwtdXRpbHMnO1xuaW1wb3J0IHsgRGlhZ0FQSSB9IGZyb20gJy4vZGlhZyc7XG52YXIgQVBJX05BTUUgPSAnY29udGV4dCc7XG52YXIgTk9PUF9DT05URVhUX01BTkFHRVIgPSBuZXcgTm9vcENvbnRleHRNYW5hZ2VyKCk7XG4vKipcbiAqIFNpbmdsZXRvbiBvYmplY3Qgd2hpY2ggcmVwcmVzZW50cyB0aGUgZW50cnkgcG9pbnQgdG8gdGhlIE9wZW5UZWxlbWV0cnkgQ29udGV4dCBBUElcbiAqL1xudmFyIENvbnRleHRBUEkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqIEVtcHR5IHByaXZhdGUgY29uc3RydWN0b3IgcHJldmVudHMgZW5kIHVzZXJzIGZyb20gY29uc3RydWN0aW5nIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBBUEkgKi9cbiAgICBmdW5jdGlvbiBDb250ZXh0QVBJKCkge1xuICAgIH1cbiAgICAvKiogR2V0IHRoZSBzaW5nbGV0b24gaW5zdGFuY2Ugb2YgdGhlIENvbnRleHQgQVBJICovXG4gICAgQ29udGV4dEFQSS5nZXRJbnN0YW5jZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9pbnN0YW5jZSkge1xuICAgICAgICAgICAgdGhpcy5faW5zdGFuY2UgPSBuZXcgQ29udGV4dEFQSSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldCB0aGUgY3VycmVudCBjb250ZXh0IG1hbmFnZXIuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIHRoZSBjb250ZXh0IG1hbmFnZXIgd2FzIHN1Y2Nlc3NmdWxseSByZWdpc3RlcmVkLCBlbHNlIGZhbHNlXG4gICAgICovXG4gICAgQ29udGV4dEFQSS5wcm90b3R5cGUuc2V0R2xvYmFsQ29udGV4dE1hbmFnZXIgPSBmdW5jdGlvbiAoY29udGV4dE1hbmFnZXIpIHtcbiAgICAgICAgcmV0dXJuIHJlZ2lzdGVyR2xvYmFsKEFQSV9OQU1FLCBjb250ZXh0TWFuYWdlciwgRGlhZ0FQSS5pbnN0YW5jZSgpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY3VycmVudGx5IGFjdGl2ZSBjb250ZXh0XG4gICAgICovXG4gICAgQ29udGV4dEFQSS5wcm90b3R5cGUuYWN0aXZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0Q29udGV4dE1hbmFnZXIoKS5hY3RpdmUoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEV4ZWN1dGUgYSBmdW5jdGlvbiB3aXRoIGFuIGFjdGl2ZSBjb250ZXh0XG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29udGV4dCBjb250ZXh0IHRvIGJlIGFjdGl2ZSBkdXJpbmcgZnVuY3Rpb24gZXhlY3V0aW9uXG4gICAgICogQHBhcmFtIGZuIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgaW4gYSBjb250ZXh0XG4gICAgICogQHBhcmFtIHRoaXNBcmcgb3B0aW9uYWwgcmVjZWl2ZXIgdG8gYmUgdXNlZCBmb3IgY2FsbGluZyBmblxuICAgICAqIEBwYXJhbSBhcmdzIG9wdGlvbmFsIGFyZ3VtZW50cyBmb3J3YXJkZWQgdG8gZm5cbiAgICAgKi9cbiAgICBDb250ZXh0QVBJLnByb3RvdHlwZS53aXRoID0gZnVuY3Rpb24gKGNvbnRleHQsIGZuLCB0aGlzQXJnKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAzOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2kgLSAzXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChfYSA9IHRoaXMuX2dldENvbnRleHRNYW5hZ2VyKCkpLndpdGguYXBwbHkoX2EsIF9fc3ByZWFkQXJyYXkoW2NvbnRleHQsIGZuLCB0aGlzQXJnXSwgX19yZWFkKGFyZ3MpLCBmYWxzZSkpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQmluZCBhIGNvbnRleHQgdG8gYSB0YXJnZXQgZnVuY3Rpb24gb3IgZXZlbnQgZW1pdHRlclxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbnRleHQgY29udGV4dCB0byBiaW5kIHRvIHRoZSBldmVudCBlbWl0dGVyIG9yIGZ1bmN0aW9uLiBEZWZhdWx0cyB0byB0aGUgY3VycmVudGx5IGFjdGl2ZSBjb250ZXh0XG4gICAgICogQHBhcmFtIHRhcmdldCBmdW5jdGlvbiBvciBldmVudCBlbWl0dGVyIHRvIGJpbmRcbiAgICAgKi9cbiAgICBDb250ZXh0QVBJLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKGNvbnRleHQsIHRhcmdldCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0Q29udGV4dE1hbmFnZXIoKS5iaW5kKGNvbnRleHQsIHRhcmdldCk7XG4gICAgfTtcbiAgICBDb250ZXh0QVBJLnByb3RvdHlwZS5fZ2V0Q29udGV4dE1hbmFnZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBnZXRHbG9iYWwoQVBJX05BTUUpIHx8IE5PT1BfQ09OVEVYVF9NQU5BR0VSO1xuICAgIH07XG4gICAgLyoqIERpc2FibGUgYW5kIHJlbW92ZSB0aGUgZ2xvYmFsIGNvbnRleHQgbWFuYWdlciAqL1xuICAgIENvbnRleHRBUEkucHJvdG90eXBlLmRpc2FibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2dldENvbnRleHRNYW5hZ2VyKCkuZGlzYWJsZSgpO1xuICAgICAgICB1bnJlZ2lzdGVyR2xvYmFsKEFQSV9OQU1FLCBEaWFnQVBJLmluc3RhbmNlKCkpO1xuICAgIH07XG4gICAgcmV0dXJuIENvbnRleHRBUEk7XG59KCkpO1xuZXhwb3J0IHsgQ29udGV4dEFQSSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29udGV4dC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/api/context.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/api/diag.js":
/*!***************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/api/diag.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DiagAPI: () => (/* binding */ DiagAPI)\n/* harmony export */ });\n/* harmony import */ var _diag_ComponentLogger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../diag/ComponentLogger */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/diag/ComponentLogger.js\");\n/* harmony import */ var _diag_internal_logLevelLogger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../diag/internal/logLevelLogger */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/diag/internal/logLevelLogger.js\");\n/* harmony import */ var _diag_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../diag/types */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/diag/types.js\");\n/* harmony import */ var _internal_global_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/global-utils */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/internal/global-utils.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (undefined && undefined.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\n\n\n\n\nvar API_NAME = 'diag';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry internal\n * diagnostic API\n */\nvar DiagAPI = /** @class */ (function () {\n    /**\n     * Private internal constructor\n     * @private\n     */\n    function DiagAPI() {\n        function _logProxy(funcName) {\n            return function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                var logger = (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_0__.getGlobal)('diag');\n                // shortcut if logger not set\n                if (!logger)\n                    return;\n                return logger[funcName].apply(logger, __spreadArray([], __read(args), false));\n            };\n        }\n        // Using self local variable for minification purposes as 'this' cannot be minified\n        var self = this;\n        // DiagAPI specific functions\n        var setLogger = function (logger, optionsOrLogLevel) {\n            var _a, _b, _c;\n            if (optionsOrLogLevel === void 0) { optionsOrLogLevel = { logLevel: _diag_types__WEBPACK_IMPORTED_MODULE_1__.DiagLogLevel.INFO }; }\n            if (logger === self) {\n                // There isn't much we can do here.\n                // Logging to the console might break the user application.\n                // Try to log to self. If a logger was previously registered it will receive the log.\n                var err = new Error('Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation');\n                self.error((_a = err.stack) !== null && _a !== void 0 ? _a : err.message);\n                return false;\n            }\n            if (typeof optionsOrLogLevel === 'number') {\n                optionsOrLogLevel = {\n                    logLevel: optionsOrLogLevel,\n                };\n            }\n            var oldLogger = (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_0__.getGlobal)('diag');\n            var newLogger = (0,_diag_internal_logLevelLogger__WEBPACK_IMPORTED_MODULE_2__.createLogLevelDiagLogger)((_b = optionsOrLogLevel.logLevel) !== null && _b !== void 0 ? _b : _diag_types__WEBPACK_IMPORTED_MODULE_1__.DiagLogLevel.INFO, logger);\n            // There already is an logger registered. We'll let it know before overwriting it.\n            if (oldLogger && !optionsOrLogLevel.suppressOverrideMessage) {\n                var stack = (_c = new Error().stack) !== null && _c !== void 0 ? _c : '<failed to generate stacktrace>';\n                oldLogger.warn(\"Current logger will be overwritten from \" + stack);\n                newLogger.warn(\"Current logger will overwrite one already registered from \" + stack);\n            }\n            return (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_0__.registerGlobal)('diag', newLogger, self, true);\n        };\n        self.setLogger = setLogger;\n        self.disable = function () {\n            (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_0__.unregisterGlobal)(API_NAME, self);\n        };\n        self.createComponentLogger = function (options) {\n            return new _diag_ComponentLogger__WEBPACK_IMPORTED_MODULE_3__.DiagComponentLogger(options);\n        };\n        self.verbose = _logProxy('verbose');\n        self.debug = _logProxy('debug');\n        self.info = _logProxy('info');\n        self.warn = _logProxy('warn');\n        self.error = _logProxy('error');\n    }\n    /** Get the singleton instance of the DiagAPI API */\n    DiagAPI.instance = function () {\n        if (!this._instance) {\n            this._instance = new DiagAPI();\n        }\n        return this._instance;\n    };\n    return DiagAPI;\n}());\n\n//# sourceMappingURL=diag.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/api/diag.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/api/metrics.js":
/*!******************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/api/metrics.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MetricsAPI: () => (/* binding */ MetricsAPI)\n/* harmony export */ });\n/* harmony import */ var _metrics_NoopMeterProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../metrics/NoopMeterProvider */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/metrics/NoopMeterProvider.js\");\n/* harmony import */ var _internal_global_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/global-utils */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/internal/global-utils.js\");\n/* harmony import */ var _diag__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./diag */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/api/diag.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nvar API_NAME = 'metrics';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Metrics API\n */\nvar MetricsAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function MetricsAPI() {\n    }\n    /** Get the singleton instance of the Metrics API */\n    MetricsAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new MetricsAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current global meter provider.\n     * Returns true if the meter provider was successfully registered, else false.\n     */\n    MetricsAPI.prototype.setGlobalMeterProvider = function (provider) {\n        return (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_0__.registerGlobal)(API_NAME, provider, _diag__WEBPACK_IMPORTED_MODULE_1__.DiagAPI.instance());\n    };\n    /**\n     * Returns the global meter provider.\n     */\n    MetricsAPI.prototype.getMeterProvider = function () {\n        return (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_0__.getGlobal)(API_NAME) || _metrics_NoopMeterProvider__WEBPACK_IMPORTED_MODULE_2__.NOOP_METER_PROVIDER;\n    };\n    /**\n     * Returns a meter from the global meter provider.\n     */\n    MetricsAPI.prototype.getMeter = function (name, version, options) {\n        return this.getMeterProvider().getMeter(name, version, options);\n    };\n    /** Remove the global meter provider */\n    MetricsAPI.prototype.disable = function () {\n        (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_0__.unregisterGlobal)(API_NAME, _diag__WEBPACK_IMPORTED_MODULE_1__.DiagAPI.instance());\n    };\n    return MetricsAPI;\n}());\n\n//# sourceMappingURL=metrics.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vYXBpL21ldHJpY3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNtRTtBQUNxQjtBQUN2RDtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxzRUFBYyxxQkFBcUIsMENBQU87QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsaUVBQVMsY0FBYywyRUFBbUI7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSx3RUFBZ0IsV0FBVywwQ0FBTztBQUMxQztBQUNBO0FBQ0EsQ0FBQztBQUNxQjtBQUN0QiIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9hcGkvYnVpbGQvZXNtL2FwaS9tZXRyaWNzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBOT09QX01FVEVSX1BST1ZJREVSIH0gZnJvbSAnLi4vbWV0cmljcy9Ob29wTWV0ZXJQcm92aWRlcic7XG5pbXBvcnQgeyBnZXRHbG9iYWwsIHJlZ2lzdGVyR2xvYmFsLCB1bnJlZ2lzdGVyR2xvYmFsLCB9IGZyb20gJy4uL2ludGVybmFsL2dsb2JhbC11dGlscyc7XG5pbXBvcnQgeyBEaWFnQVBJIH0gZnJvbSAnLi9kaWFnJztcbnZhciBBUElfTkFNRSA9ICdtZXRyaWNzJztcbi8qKlxuICogU2luZ2xldG9uIG9iamVjdCB3aGljaCByZXByZXNlbnRzIHRoZSBlbnRyeSBwb2ludCB0byB0aGUgT3BlblRlbGVtZXRyeSBNZXRyaWNzIEFQSVxuICovXG52YXIgTWV0cmljc0FQSSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKiogRW1wdHkgcHJpdmF0ZSBjb25zdHJ1Y3RvciBwcmV2ZW50cyBlbmQgdXNlcnMgZnJvbSBjb25zdHJ1Y3RpbmcgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIEFQSSAqL1xuICAgIGZ1bmN0aW9uIE1ldHJpY3NBUEkoKSB7XG4gICAgfVxuICAgIC8qKiBHZXQgdGhlIHNpbmdsZXRvbiBpbnN0YW5jZSBvZiB0aGUgTWV0cmljcyBBUEkgKi9cbiAgICBNZXRyaWNzQVBJLmdldEluc3RhbmNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuX2luc3RhbmNlKSB7XG4gICAgICAgICAgICB0aGlzLl9pbnN0YW5jZSA9IG5ldyBNZXRyaWNzQVBJKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2luc3RhbmNlO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBjdXJyZW50IGdsb2JhbCBtZXRlciBwcm92aWRlci5cbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIG1ldGVyIHByb3ZpZGVyIHdhcyBzdWNjZXNzZnVsbHkgcmVnaXN0ZXJlZCwgZWxzZSBmYWxzZS5cbiAgICAgKi9cbiAgICBNZXRyaWNzQVBJLnByb3RvdHlwZS5zZXRHbG9iYWxNZXRlclByb3ZpZGVyID0gZnVuY3Rpb24gKHByb3ZpZGVyKSB7XG4gICAgICAgIHJldHVybiByZWdpc3Rlckdsb2JhbChBUElfTkFNRSwgcHJvdmlkZXIsIERpYWdBUEkuaW5zdGFuY2UoKSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBnbG9iYWwgbWV0ZXIgcHJvdmlkZXIuXG4gICAgICovXG4gICAgTWV0cmljc0FQSS5wcm90b3R5cGUuZ2V0TWV0ZXJQcm92aWRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGdldEdsb2JhbChBUElfTkFNRSkgfHwgTk9PUF9NRVRFUl9QUk9WSURFUjtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBtZXRlciBmcm9tIHRoZSBnbG9iYWwgbWV0ZXIgcHJvdmlkZXIuXG4gICAgICovXG4gICAgTWV0cmljc0FQSS5wcm90b3R5cGUuZ2V0TWV0ZXIgPSBmdW5jdGlvbiAobmFtZSwgdmVyc2lvbiwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRNZXRlclByb3ZpZGVyKCkuZ2V0TWV0ZXIobmFtZSwgdmVyc2lvbiwgb3B0aW9ucyk7XG4gICAgfTtcbiAgICAvKiogUmVtb3ZlIHRoZSBnbG9iYWwgbWV0ZXIgcHJvdmlkZXIgKi9cbiAgICBNZXRyaWNzQVBJLnByb3RvdHlwZS5kaXNhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB1bnJlZ2lzdGVyR2xvYmFsKEFQSV9OQU1FLCBEaWFnQVBJLmluc3RhbmNlKCkpO1xuICAgIH07XG4gICAgcmV0dXJuIE1ldHJpY3NBUEk7XG59KCkpO1xuZXhwb3J0IHsgTWV0cmljc0FQSSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWV0cmljcy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/api/metrics.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/api/propagation.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/api/propagation.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PropagationAPI: () => (/* binding */ PropagationAPI)\n/* harmony export */ });\n/* harmony import */ var _internal_global_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../internal/global-utils */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/internal/global-utils.js\");\n/* harmony import */ var _propagation_NoopTextMapPropagator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../propagation/NoopTextMapPropagator */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/propagation/NoopTextMapPropagator.js\");\n/* harmony import */ var _propagation_TextMapPropagator__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../propagation/TextMapPropagator */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/propagation/TextMapPropagator.js\");\n/* harmony import */ var _baggage_context_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../baggage/context-helpers */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/baggage/context-helpers.js\");\n/* harmony import */ var _baggage_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../baggage/utils */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/baggage/utils.js\");\n/* harmony import */ var _diag__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./diag */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/api/diag.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\nvar API_NAME = 'propagation';\nvar NOOP_TEXT_MAP_PROPAGATOR = new _propagation_NoopTextMapPropagator__WEBPACK_IMPORTED_MODULE_0__.NoopTextMapPropagator();\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Propagation API\n */\nvar PropagationAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function PropagationAPI() {\n        this.createBaggage = _baggage_utils__WEBPACK_IMPORTED_MODULE_1__.createBaggage;\n        this.getBaggage = _baggage_context_helpers__WEBPACK_IMPORTED_MODULE_2__.getBaggage;\n        this.getActiveBaggage = _baggage_context_helpers__WEBPACK_IMPORTED_MODULE_2__.getActiveBaggage;\n        this.setBaggage = _baggage_context_helpers__WEBPACK_IMPORTED_MODULE_2__.setBaggage;\n        this.deleteBaggage = _baggage_context_helpers__WEBPACK_IMPORTED_MODULE_2__.deleteBaggage;\n    }\n    /** Get the singleton instance of the Propagator API */\n    PropagationAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new PropagationAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current propagator.\n     *\n     * @returns true if the propagator was successfully registered, else false\n     */\n    PropagationAPI.prototype.setGlobalPropagator = function (propagator) {\n        return (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_3__.registerGlobal)(API_NAME, propagator, _diag__WEBPACK_IMPORTED_MODULE_4__.DiagAPI.instance());\n    };\n    /**\n     * Inject context into a carrier to be propagated inter-process\n     *\n     * @param context Context carrying tracing data to inject\n     * @param carrier carrier to inject context into\n     * @param setter Function used to set values on the carrier\n     */\n    PropagationAPI.prototype.inject = function (context, carrier, setter) {\n        if (setter === void 0) { setter = _propagation_TextMapPropagator__WEBPACK_IMPORTED_MODULE_5__.defaultTextMapSetter; }\n        return this._getGlobalPropagator().inject(context, carrier, setter);\n    };\n    /**\n     * Extract context from a carrier\n     *\n     * @param context Context which the newly created context will inherit from\n     * @param carrier Carrier to extract context from\n     * @param getter Function used to extract keys from a carrier\n     */\n    PropagationAPI.prototype.extract = function (context, carrier, getter) {\n        if (getter === void 0) { getter = _propagation_TextMapPropagator__WEBPACK_IMPORTED_MODULE_5__.defaultTextMapGetter; }\n        return this._getGlobalPropagator().extract(context, carrier, getter);\n    };\n    /**\n     * Return a list of all fields which may be used by the propagator.\n     */\n    PropagationAPI.prototype.fields = function () {\n        return this._getGlobalPropagator().fields();\n    };\n    /** Remove the global propagator */\n    PropagationAPI.prototype.disable = function () {\n        (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_3__.unregisterGlobal)(API_NAME, _diag__WEBPACK_IMPORTED_MODULE_4__.DiagAPI.instance());\n    };\n    PropagationAPI.prototype._getGlobalPropagator = function () {\n        return (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_3__.getGlobal)(API_NAME) || NOOP_TEXT_MAP_PROPAGATOR;\n    };\n    return PropagationAPI;\n}());\n\n//# sourceMappingURL=propagation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vYXBpL3Byb3BhZ2F0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDd0Y7QUFDWDtBQUNrQjtBQUNPO0FBQ3JEO0FBQ2hCO0FBQ2pDO0FBQ0EsbUNBQW1DLHFGQUFxQjtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIseURBQWE7QUFDMUMsMEJBQTBCLGdFQUFVO0FBQ3BDLGdDQUFnQyxzRUFBZ0I7QUFDaEQsMEJBQTBCLGdFQUFVO0FBQ3BDLDZCQUE2QixtRUFBYTtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxzRUFBYyx1QkFBdUIsMENBQU87QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLFNBQVMsZ0ZBQW9CO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLFNBQVMsZ0ZBQW9CO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSx3RUFBZ0IsV0FBVywwQ0FBTztBQUMxQztBQUNBO0FBQ0EsZUFBZSxpRUFBUztBQUN4QjtBQUNBO0FBQ0EsQ0FBQztBQUN5QjtBQUMxQiIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9hcGkvYnVpbGQvZXNtL2FwaS9wcm9wYWdhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgZ2V0R2xvYmFsLCByZWdpc3Rlckdsb2JhbCwgdW5yZWdpc3Rlckdsb2JhbCwgfSBmcm9tICcuLi9pbnRlcm5hbC9nbG9iYWwtdXRpbHMnO1xuaW1wb3J0IHsgTm9vcFRleHRNYXBQcm9wYWdhdG9yIH0gZnJvbSAnLi4vcHJvcGFnYXRpb24vTm9vcFRleHRNYXBQcm9wYWdhdG9yJztcbmltcG9ydCB7IGRlZmF1bHRUZXh0TWFwR2V0dGVyLCBkZWZhdWx0VGV4dE1hcFNldHRlciwgfSBmcm9tICcuLi9wcm9wYWdhdGlvbi9UZXh0TWFwUHJvcGFnYXRvcic7XG5pbXBvcnQgeyBnZXRCYWdnYWdlLCBnZXRBY3RpdmVCYWdnYWdlLCBzZXRCYWdnYWdlLCBkZWxldGVCYWdnYWdlLCB9IGZyb20gJy4uL2JhZ2dhZ2UvY29udGV4dC1oZWxwZXJzJztcbmltcG9ydCB7IGNyZWF0ZUJhZ2dhZ2UgfSBmcm9tICcuLi9iYWdnYWdlL3V0aWxzJztcbmltcG9ydCB7IERpYWdBUEkgfSBmcm9tICcuL2RpYWcnO1xudmFyIEFQSV9OQU1FID0gJ3Byb3BhZ2F0aW9uJztcbnZhciBOT09QX1RFWFRfTUFQX1BST1BBR0FUT1IgPSBuZXcgTm9vcFRleHRNYXBQcm9wYWdhdG9yKCk7XG4vKipcbiAqIFNpbmdsZXRvbiBvYmplY3Qgd2hpY2ggcmVwcmVzZW50cyB0aGUgZW50cnkgcG9pbnQgdG8gdGhlIE9wZW5UZWxlbWV0cnkgUHJvcGFnYXRpb24gQVBJXG4gKi9cbnZhciBQcm9wYWdhdGlvbkFQSSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKiogRW1wdHkgcHJpdmF0ZSBjb25zdHJ1Y3RvciBwcmV2ZW50cyBlbmQgdXNlcnMgZnJvbSBjb25zdHJ1Y3RpbmcgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIEFQSSAqL1xuICAgIGZ1bmN0aW9uIFByb3BhZ2F0aW9uQVBJKCkge1xuICAgICAgICB0aGlzLmNyZWF0ZUJhZ2dhZ2UgPSBjcmVhdGVCYWdnYWdlO1xuICAgICAgICB0aGlzLmdldEJhZ2dhZ2UgPSBnZXRCYWdnYWdlO1xuICAgICAgICB0aGlzLmdldEFjdGl2ZUJhZ2dhZ2UgPSBnZXRBY3RpdmVCYWdnYWdlO1xuICAgICAgICB0aGlzLnNldEJhZ2dhZ2UgPSBzZXRCYWdnYWdlO1xuICAgICAgICB0aGlzLmRlbGV0ZUJhZ2dhZ2UgPSBkZWxldGVCYWdnYWdlO1xuICAgIH1cbiAgICAvKiogR2V0IHRoZSBzaW5nbGV0b24gaW5zdGFuY2Ugb2YgdGhlIFByb3BhZ2F0b3IgQVBJICovXG4gICAgUHJvcGFnYXRpb25BUEkuZ2V0SW5zdGFuY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5faW5zdGFuY2UpIHtcbiAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlID0gbmV3IFByb3BhZ2F0aW9uQVBJKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2luc3RhbmNlO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBjdXJyZW50IHByb3BhZ2F0b3IuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIHRoZSBwcm9wYWdhdG9yIHdhcyBzdWNjZXNzZnVsbHkgcmVnaXN0ZXJlZCwgZWxzZSBmYWxzZVxuICAgICAqL1xuICAgIFByb3BhZ2F0aW9uQVBJLnByb3RvdHlwZS5zZXRHbG9iYWxQcm9wYWdhdG9yID0gZnVuY3Rpb24gKHByb3BhZ2F0b3IpIHtcbiAgICAgICAgcmV0dXJuIHJlZ2lzdGVyR2xvYmFsKEFQSV9OQU1FLCBwcm9wYWdhdG9yLCBEaWFnQVBJLmluc3RhbmNlKCkpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogSW5qZWN0IGNvbnRleHQgaW50byBhIGNhcnJpZXIgdG8gYmUgcHJvcGFnYXRlZCBpbnRlci1wcm9jZXNzXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29udGV4dCBDb250ZXh0IGNhcnJ5aW5nIHRyYWNpbmcgZGF0YSB0byBpbmplY3RcbiAgICAgKiBAcGFyYW0gY2FycmllciBjYXJyaWVyIHRvIGluamVjdCBjb250ZXh0IGludG9cbiAgICAgKiBAcGFyYW0gc2V0dGVyIEZ1bmN0aW9uIHVzZWQgdG8gc2V0IHZhbHVlcyBvbiB0aGUgY2FycmllclxuICAgICAqL1xuICAgIFByb3BhZ2F0aW9uQVBJLnByb3RvdHlwZS5pbmplY3QgPSBmdW5jdGlvbiAoY29udGV4dCwgY2Fycmllciwgc2V0dGVyKSB7XG4gICAgICAgIGlmIChzZXR0ZXIgPT09IHZvaWQgMCkgeyBzZXR0ZXIgPSBkZWZhdWx0VGV4dE1hcFNldHRlcjsgfVxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0R2xvYmFsUHJvcGFnYXRvcigpLmluamVjdChjb250ZXh0LCBjYXJyaWVyLCBzZXR0ZXIpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRXh0cmFjdCBjb250ZXh0IGZyb20gYSBjYXJyaWVyXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29udGV4dCBDb250ZXh0IHdoaWNoIHRoZSBuZXdseSBjcmVhdGVkIGNvbnRleHQgd2lsbCBpbmhlcml0IGZyb21cbiAgICAgKiBAcGFyYW0gY2FycmllciBDYXJyaWVyIHRvIGV4dHJhY3QgY29udGV4dCBmcm9tXG4gICAgICogQHBhcmFtIGdldHRlciBGdW5jdGlvbiB1c2VkIHRvIGV4dHJhY3Qga2V5cyBmcm9tIGEgY2FycmllclxuICAgICAqL1xuICAgIFByb3BhZ2F0aW9uQVBJLnByb3RvdHlwZS5leHRyYWN0ID0gZnVuY3Rpb24gKGNvbnRleHQsIGNhcnJpZXIsIGdldHRlcikge1xuICAgICAgICBpZiAoZ2V0dGVyID09PSB2b2lkIDApIHsgZ2V0dGVyID0gZGVmYXVsdFRleHRNYXBHZXR0ZXI7IH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldEdsb2JhbFByb3BhZ2F0b3IoKS5leHRyYWN0KGNvbnRleHQsIGNhcnJpZXIsIGdldHRlcik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYSBsaXN0IG9mIGFsbCBmaWVsZHMgd2hpY2ggbWF5IGJlIHVzZWQgYnkgdGhlIHByb3BhZ2F0b3IuXG4gICAgICovXG4gICAgUHJvcGFnYXRpb25BUEkucHJvdG90eXBlLmZpZWxkcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldEdsb2JhbFByb3BhZ2F0b3IoKS5maWVsZHMoKTtcbiAgICB9O1xuICAgIC8qKiBSZW1vdmUgdGhlIGdsb2JhbCBwcm9wYWdhdG9yICovXG4gICAgUHJvcGFnYXRpb25BUEkucHJvdG90eXBlLmRpc2FibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHVucmVnaXN0ZXJHbG9iYWwoQVBJX05BTUUsIERpYWdBUEkuaW5zdGFuY2UoKSk7XG4gICAgfTtcbiAgICBQcm9wYWdhdGlvbkFQSS5wcm90b3R5cGUuX2dldEdsb2JhbFByb3BhZ2F0b3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBnZXRHbG9iYWwoQVBJX05BTUUpIHx8IE5PT1BfVEVYVF9NQVBfUFJPUEFHQVRPUjtcbiAgICB9O1xuICAgIHJldHVybiBQcm9wYWdhdGlvbkFQSTtcbn0oKSk7XG5leHBvcnQgeyBQcm9wYWdhdGlvbkFQSSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvcGFnYXRpb24uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/api/propagation.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/api/trace.js":
/*!****************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/api/trace.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TraceAPI: () => (/* binding */ TraceAPI)\n/* harmony export */ });\n/* harmony import */ var _internal_global_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../internal/global-utils */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/internal/global-utils.js\");\n/* harmony import */ var _trace_ProxyTracerProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../trace/ProxyTracerProvider */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/ProxyTracerProvider.js\");\n/* harmony import */ var _trace_spancontext_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../trace/spancontext-utils */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js\");\n/* harmony import */ var _trace_context_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../trace/context-utils */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/context-utils.js\");\n/* harmony import */ var _diag__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./diag */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/api/diag.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\nvar API_NAME = 'trace';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Tracing API\n */\nvar TraceAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function TraceAPI() {\n        this._proxyTracerProvider = new _trace_ProxyTracerProvider__WEBPACK_IMPORTED_MODULE_0__.ProxyTracerProvider();\n        this.wrapSpanContext = _trace_spancontext_utils__WEBPACK_IMPORTED_MODULE_1__.wrapSpanContext;\n        this.isSpanContextValid = _trace_spancontext_utils__WEBPACK_IMPORTED_MODULE_1__.isSpanContextValid;\n        this.deleteSpan = _trace_context_utils__WEBPACK_IMPORTED_MODULE_2__.deleteSpan;\n        this.getSpan = _trace_context_utils__WEBPACK_IMPORTED_MODULE_2__.getSpan;\n        this.getActiveSpan = _trace_context_utils__WEBPACK_IMPORTED_MODULE_2__.getActiveSpan;\n        this.getSpanContext = _trace_context_utils__WEBPACK_IMPORTED_MODULE_2__.getSpanContext;\n        this.setSpan = _trace_context_utils__WEBPACK_IMPORTED_MODULE_2__.setSpan;\n        this.setSpanContext = _trace_context_utils__WEBPACK_IMPORTED_MODULE_2__.setSpanContext;\n    }\n    /** Get the singleton instance of the Trace API */\n    TraceAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new TraceAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current global tracer.\n     *\n     * @returns true if the tracer provider was successfully registered, else false\n     */\n    TraceAPI.prototype.setGlobalTracerProvider = function (provider) {\n        var success = (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_3__.registerGlobal)(API_NAME, this._proxyTracerProvider, _diag__WEBPACK_IMPORTED_MODULE_4__.DiagAPI.instance());\n        if (success) {\n            this._proxyTracerProvider.setDelegate(provider);\n        }\n        return success;\n    };\n    /**\n     * Returns the global tracer provider.\n     */\n    TraceAPI.prototype.getTracerProvider = function () {\n        return (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_3__.getGlobal)(API_NAME) || this._proxyTracerProvider;\n    };\n    /**\n     * Returns a tracer from the global tracer provider.\n     */\n    TraceAPI.prototype.getTracer = function (name, version) {\n        return this.getTracerProvider().getTracer(name, version);\n    };\n    /** Remove the global tracer provider */\n    TraceAPI.prototype.disable = function () {\n        (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_3__.unregisterGlobal)(API_NAME, _diag__WEBPACK_IMPORTED_MODULE_4__.DiagAPI.instance());\n        this._proxyTracerProvider = new _trace_ProxyTracerProvider__WEBPACK_IMPORTED_MODULE_0__.ProxyTracerProvider();\n    };\n    return TraceAPI;\n}());\n\n//# sourceMappingURL=trace.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vYXBpL3RyYWNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN3RjtBQUNyQjtBQUNlO0FBQ29DO0FBQ3JGO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLDJFQUFtQjtBQUMzRCwrQkFBK0IscUVBQWU7QUFDOUMsa0NBQWtDLHdFQUFrQjtBQUNwRCwwQkFBMEIsNERBQVU7QUFDcEMsdUJBQXVCLHlEQUFPO0FBQzlCLDZCQUE2QiwrREFBYTtBQUMxQyw4QkFBOEIsZ0VBQWM7QUFDNUMsdUJBQXVCLHlEQUFPO0FBQzlCLDhCQUE4QixnRUFBYztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHNFQUFjLHNDQUFzQywwQ0FBTztBQUNqRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGlFQUFTO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsd0VBQWdCLFdBQVcsMENBQU87QUFDMUMsd0NBQXdDLDJFQUFtQjtBQUMzRDtBQUNBO0FBQ0EsQ0FBQztBQUNtQjtBQUNwQiIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9hcGkvYnVpbGQvZXNtL2FwaS90cmFjZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgZ2V0R2xvYmFsLCByZWdpc3Rlckdsb2JhbCwgdW5yZWdpc3Rlckdsb2JhbCwgfSBmcm9tICcuLi9pbnRlcm5hbC9nbG9iYWwtdXRpbHMnO1xuaW1wb3J0IHsgUHJveHlUcmFjZXJQcm92aWRlciB9IGZyb20gJy4uL3RyYWNlL1Byb3h5VHJhY2VyUHJvdmlkZXInO1xuaW1wb3J0IHsgaXNTcGFuQ29udGV4dFZhbGlkLCB3cmFwU3BhbkNvbnRleHQsIH0gZnJvbSAnLi4vdHJhY2Uvc3BhbmNvbnRleHQtdXRpbHMnO1xuaW1wb3J0IHsgZGVsZXRlU3BhbiwgZ2V0QWN0aXZlU3BhbiwgZ2V0U3BhbiwgZ2V0U3BhbkNvbnRleHQsIHNldFNwYW4sIHNldFNwYW5Db250ZXh0LCB9IGZyb20gJy4uL3RyYWNlL2NvbnRleHQtdXRpbHMnO1xuaW1wb3J0IHsgRGlhZ0FQSSB9IGZyb20gJy4vZGlhZyc7XG52YXIgQVBJX05BTUUgPSAndHJhY2UnO1xuLyoqXG4gKiBTaW5nbGV0b24gb2JqZWN0IHdoaWNoIHJlcHJlc2VudHMgdGhlIGVudHJ5IHBvaW50IHRvIHRoZSBPcGVuVGVsZW1ldHJ5IFRyYWNpbmcgQVBJXG4gKi9cbnZhciBUcmFjZUFQSSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKiogRW1wdHkgcHJpdmF0ZSBjb25zdHJ1Y3RvciBwcmV2ZW50cyBlbmQgdXNlcnMgZnJvbSBjb25zdHJ1Y3RpbmcgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIEFQSSAqL1xuICAgIGZ1bmN0aW9uIFRyYWNlQVBJKCkge1xuICAgICAgICB0aGlzLl9wcm94eVRyYWNlclByb3ZpZGVyID0gbmV3IFByb3h5VHJhY2VyUHJvdmlkZXIoKTtcbiAgICAgICAgdGhpcy53cmFwU3BhbkNvbnRleHQgPSB3cmFwU3BhbkNvbnRleHQ7XG4gICAgICAgIHRoaXMuaXNTcGFuQ29udGV4dFZhbGlkID0gaXNTcGFuQ29udGV4dFZhbGlkO1xuICAgICAgICB0aGlzLmRlbGV0ZVNwYW4gPSBkZWxldGVTcGFuO1xuICAgICAgICB0aGlzLmdldFNwYW4gPSBnZXRTcGFuO1xuICAgICAgICB0aGlzLmdldEFjdGl2ZVNwYW4gPSBnZXRBY3RpdmVTcGFuO1xuICAgICAgICB0aGlzLmdldFNwYW5Db250ZXh0ID0gZ2V0U3BhbkNvbnRleHQ7XG4gICAgICAgIHRoaXMuc2V0U3BhbiA9IHNldFNwYW47XG4gICAgICAgIHRoaXMuc2V0U3BhbkNvbnRleHQgPSBzZXRTcGFuQ29udGV4dDtcbiAgICB9XG4gICAgLyoqIEdldCB0aGUgc2luZ2xldG9uIGluc3RhbmNlIG9mIHRoZSBUcmFjZSBBUEkgKi9cbiAgICBUcmFjZUFQSS5nZXRJbnN0YW5jZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9pbnN0YW5jZSkge1xuICAgICAgICAgICAgdGhpcy5faW5zdGFuY2UgPSBuZXcgVHJhY2VBUEkoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5faW5zdGFuY2U7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGN1cnJlbnQgZ2xvYmFsIHRyYWNlci5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHRydWUgaWYgdGhlIHRyYWNlciBwcm92aWRlciB3YXMgc3VjY2Vzc2Z1bGx5IHJlZ2lzdGVyZWQsIGVsc2UgZmFsc2VcbiAgICAgKi9cbiAgICBUcmFjZUFQSS5wcm90b3R5cGUuc2V0R2xvYmFsVHJhY2VyUHJvdmlkZXIgPSBmdW5jdGlvbiAocHJvdmlkZXIpIHtcbiAgICAgICAgdmFyIHN1Y2Nlc3MgPSByZWdpc3Rlckdsb2JhbChBUElfTkFNRSwgdGhpcy5fcHJveHlUcmFjZXJQcm92aWRlciwgRGlhZ0FQSS5pbnN0YW5jZSgpKTtcbiAgICAgICAgaWYgKHN1Y2Nlc3MpIHtcbiAgICAgICAgICAgIHRoaXMuX3Byb3h5VHJhY2VyUHJvdmlkZXIuc2V0RGVsZWdhdGUocHJvdmlkZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdWNjZXNzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgZ2xvYmFsIHRyYWNlciBwcm92aWRlci5cbiAgICAgKi9cbiAgICBUcmFjZUFQSS5wcm90b3R5cGUuZ2V0VHJhY2VyUHJvdmlkZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBnZXRHbG9iYWwoQVBJX05BTUUpIHx8IHRoaXMuX3Byb3h5VHJhY2VyUHJvdmlkZXI7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgdHJhY2VyIGZyb20gdGhlIGdsb2JhbCB0cmFjZXIgcHJvdmlkZXIuXG4gICAgICovXG4gICAgVHJhY2VBUEkucHJvdG90eXBlLmdldFRyYWNlciA9IGZ1bmN0aW9uIChuYW1lLCB2ZXJzaW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFRyYWNlclByb3ZpZGVyKCkuZ2V0VHJhY2VyKG5hbWUsIHZlcnNpb24pO1xuICAgIH07XG4gICAgLyoqIFJlbW92ZSB0aGUgZ2xvYmFsIHRyYWNlciBwcm92aWRlciAqL1xuICAgIFRyYWNlQVBJLnByb3RvdHlwZS5kaXNhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB1bnJlZ2lzdGVyR2xvYmFsKEFQSV9OQU1FLCBEaWFnQVBJLmluc3RhbmNlKCkpO1xuICAgICAgICB0aGlzLl9wcm94eVRyYWNlclByb3ZpZGVyID0gbmV3IFByb3h5VHJhY2VyUHJvdmlkZXIoKTtcbiAgICB9O1xuICAgIHJldHVybiBUcmFjZUFQSTtcbn0oKSk7XG5leHBvcnQgeyBUcmFjZUFQSSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhY2UuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/api/trace.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/baggage/context-helpers.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/baggage/context-helpers.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deleteBaggage: () => (/* binding */ deleteBaggage),\n/* harmony export */   getActiveBaggage: () => (/* binding */ getActiveBaggage),\n/* harmony export */   getBaggage: () => (/* binding */ getBaggage),\n/* harmony export */   setBaggage: () => (/* binding */ setBaggage)\n/* harmony export */ });\n/* harmony import */ var _api_context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../api/context */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/api/context.js\");\n/* harmony import */ var _context_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../context/context */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/context/context.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Baggage key\n */\nvar BAGGAGE_KEY = (0,_context_context__WEBPACK_IMPORTED_MODULE_0__.createContextKey)('OpenTelemetry Baggage Key');\n/**\n * Retrieve the current baggage from the given context\n *\n * @param {Context} Context that manage all context values\n * @returns {Baggage} Extracted baggage from the context\n */\nfunction getBaggage(context) {\n    return context.getValue(BAGGAGE_KEY) || undefined;\n}\n/**\n * Retrieve the current baggage from the active/current context\n *\n * @returns {Baggage} Extracted baggage from the context\n */\nfunction getActiveBaggage() {\n    return getBaggage(_api_context__WEBPACK_IMPORTED_MODULE_1__.ContextAPI.getInstance().active());\n}\n/**\n * Store a baggage in the given context\n *\n * @param {Context} Context that manage all context values\n * @param {Baggage} baggage that will be set in the actual context\n */\nfunction setBaggage(context, baggage) {\n    return context.setValue(BAGGAGE_KEY, baggage);\n}\n/**\n * Delete the baggage stored in the given context\n *\n * @param {Context} Context that manage all context values\n */\nfunction deleteBaggage(context) {\n    return context.deleteValue(BAGGAGE_KEY);\n}\n//# sourceMappingURL=context-helpers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vYmFnZ2FnZS9jb250ZXh0LWhlbHBlcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQzRDO0FBQ1U7QUFDdEQ7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGtFQUFnQjtBQUNsQztBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEIsYUFBYSxTQUFTO0FBQ3RCO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxTQUFTO0FBQ3RCO0FBQ087QUFDUCxzQkFBc0Isb0RBQVU7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEIsV0FBVyxTQUFTO0FBQ3BCO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ087QUFDUDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvYXBpL2J1aWxkL2VzbS9iYWdnYWdlL2NvbnRleHQtaGVscGVycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgQ29udGV4dEFQSSB9IGZyb20gJy4uL2FwaS9jb250ZXh0JztcbmltcG9ydCB7IGNyZWF0ZUNvbnRleHRLZXkgfSBmcm9tICcuLi9jb250ZXh0L2NvbnRleHQnO1xuLyoqXG4gKiBCYWdnYWdlIGtleVxuICovXG52YXIgQkFHR0FHRV9LRVkgPSBjcmVhdGVDb250ZXh0S2V5KCdPcGVuVGVsZW1ldHJ5IEJhZ2dhZ2UgS2V5Jyk7XG4vKipcbiAqIFJldHJpZXZlIHRoZSBjdXJyZW50IGJhZ2dhZ2UgZnJvbSB0aGUgZ2l2ZW4gY29udGV4dFxuICpcbiAqIEBwYXJhbSB7Q29udGV4dH0gQ29udGV4dCB0aGF0IG1hbmFnZSBhbGwgY29udGV4dCB2YWx1ZXNcbiAqIEByZXR1cm5zIHtCYWdnYWdlfSBFeHRyYWN0ZWQgYmFnZ2FnZSBmcm9tIHRoZSBjb250ZXh0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRCYWdnYWdlKGNvbnRleHQpIHtcbiAgICByZXR1cm4gY29udGV4dC5nZXRWYWx1ZShCQUdHQUdFX0tFWSkgfHwgdW5kZWZpbmVkO1xufVxuLyoqXG4gKiBSZXRyaWV2ZSB0aGUgY3VycmVudCBiYWdnYWdlIGZyb20gdGhlIGFjdGl2ZS9jdXJyZW50IGNvbnRleHRcbiAqXG4gKiBAcmV0dXJucyB7QmFnZ2FnZX0gRXh0cmFjdGVkIGJhZ2dhZ2UgZnJvbSB0aGUgY29udGV4dFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWN0aXZlQmFnZ2FnZSgpIHtcbiAgICByZXR1cm4gZ2V0QmFnZ2FnZShDb250ZXh0QVBJLmdldEluc3RhbmNlKCkuYWN0aXZlKCkpO1xufVxuLyoqXG4gKiBTdG9yZSBhIGJhZ2dhZ2UgaW4gdGhlIGdpdmVuIGNvbnRleHRcbiAqXG4gKiBAcGFyYW0ge0NvbnRleHR9IENvbnRleHQgdGhhdCBtYW5hZ2UgYWxsIGNvbnRleHQgdmFsdWVzXG4gKiBAcGFyYW0ge0JhZ2dhZ2V9IGJhZ2dhZ2UgdGhhdCB3aWxsIGJlIHNldCBpbiB0aGUgYWN0dWFsIGNvbnRleHRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldEJhZ2dhZ2UoY29udGV4dCwgYmFnZ2FnZSkge1xuICAgIHJldHVybiBjb250ZXh0LnNldFZhbHVlKEJBR0dBR0VfS0VZLCBiYWdnYWdlKTtcbn1cbi8qKlxuICogRGVsZXRlIHRoZSBiYWdnYWdlIHN0b3JlZCBpbiB0aGUgZ2l2ZW4gY29udGV4dFxuICpcbiAqIEBwYXJhbSB7Q29udGV4dH0gQ29udGV4dCB0aGF0IG1hbmFnZSBhbGwgY29udGV4dCB2YWx1ZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlbGV0ZUJhZ2dhZ2UoY29udGV4dCkge1xuICAgIHJldHVybiBjb250ZXh0LmRlbGV0ZVZhbHVlKEJBR0dBR0VfS0VZKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnRleHQtaGVscGVycy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/baggage/context-helpers.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/baggage/internal/baggage-impl.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/baggage/internal/baggage-impl.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaggageImpl: () => (/* binding */ BaggageImpl)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (undefined && undefined.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __values = (undefined && undefined.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar BaggageImpl = /** @class */ (function () {\n    function BaggageImpl(entries) {\n        this._entries = entries ? new Map(entries) : new Map();\n    }\n    BaggageImpl.prototype.getEntry = function (key) {\n        var entry = this._entries.get(key);\n        if (!entry) {\n            return undefined;\n        }\n        return Object.assign({}, entry);\n    };\n    BaggageImpl.prototype.getAllEntries = function () {\n        return Array.from(this._entries.entries()).map(function (_a) {\n            var _b = __read(_a, 2), k = _b[0], v = _b[1];\n            return [k, v];\n        });\n    };\n    BaggageImpl.prototype.setEntry = function (key, entry) {\n        var newBaggage = new BaggageImpl(this._entries);\n        newBaggage._entries.set(key, entry);\n        return newBaggage;\n    };\n    BaggageImpl.prototype.removeEntry = function (key) {\n        var newBaggage = new BaggageImpl(this._entries);\n        newBaggage._entries.delete(key);\n        return newBaggage;\n    };\n    BaggageImpl.prototype.removeEntries = function () {\n        var e_1, _a;\n        var keys = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            keys[_i] = arguments[_i];\n        }\n        var newBaggage = new BaggageImpl(this._entries);\n        try {\n            for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {\n                var key = keys_1_1.value;\n                newBaggage._entries.delete(key);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return newBaggage;\n    };\n    BaggageImpl.prototype.clear = function () {\n        return new BaggageImpl();\n    };\n    return BaggageImpl;\n}());\n\n//# sourceMappingURL=baggage-impl.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vYmFnZ2FnZS9pbnRlcm5hbC9iYWdnYWdlLWltcGwuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsU0FBSSxJQUFJLFNBQUk7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLE1BQU07QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFNBQUksSUFBSSxTQUFJO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLHVCQUF1QjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdFQUF3RSxnQkFBZ0I7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsUUFBUTtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDc0I7QUFDdkIiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvYXBpL2J1aWxkL2VzbS9iYWdnYWdlL2ludGVybmFsL2JhZ2dhZ2UtaW1wbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xudmFyIF9fcmVhZCA9ICh0aGlzICYmIHRoaXMuX19yZWFkKSB8fCBmdW5jdGlvbiAobywgbikge1xuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcbiAgICBpZiAoIW0pIHJldHVybiBvO1xuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xuICAgIHRyeSB7XG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxuICAgIH1cbiAgICByZXR1cm4gYXI7XG59O1xudmFyIF9fdmFsdWVzID0gKHRoaXMgJiYgdGhpcy5fX3ZhbHVlcykgfHwgZnVuY3Rpb24obykge1xuICAgIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XG4gICAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xuICAgICAgICB9XG4gICAgfTtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XG59O1xudmFyIEJhZ2dhZ2VJbXBsID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEJhZ2dhZ2VJbXBsKGVudHJpZXMpIHtcbiAgICAgICAgdGhpcy5fZW50cmllcyA9IGVudHJpZXMgPyBuZXcgTWFwKGVudHJpZXMpIDogbmV3IE1hcCgpO1xuICAgIH1cbiAgICBCYWdnYWdlSW1wbC5wcm90b3R5cGUuZ2V0RW50cnkgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMuX2VudHJpZXMuZ2V0KGtleSk7XG4gICAgICAgIGlmICghZW50cnkpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGVudHJ5KTtcbiAgICB9O1xuICAgIEJhZ2dhZ2VJbXBsLnByb3RvdHlwZS5nZXRBbGxFbnRyaWVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLl9lbnRyaWVzLmVudHJpZXMoKSkubWFwKGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgdmFyIF9iID0gX19yZWFkKF9hLCAyKSwgayA9IF9iWzBdLCB2ID0gX2JbMV07XG4gICAgICAgICAgICByZXR1cm4gW2ssIHZdO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEJhZ2dhZ2VJbXBsLnByb3RvdHlwZS5zZXRFbnRyeSA9IGZ1bmN0aW9uIChrZXksIGVudHJ5KSB7XG4gICAgICAgIHZhciBuZXdCYWdnYWdlID0gbmV3IEJhZ2dhZ2VJbXBsKHRoaXMuX2VudHJpZXMpO1xuICAgICAgICBuZXdCYWdnYWdlLl9lbnRyaWVzLnNldChrZXksIGVudHJ5KTtcbiAgICAgICAgcmV0dXJuIG5ld0JhZ2dhZ2U7XG4gICAgfTtcbiAgICBCYWdnYWdlSW1wbC5wcm90b3R5cGUucmVtb3ZlRW50cnkgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciBuZXdCYWdnYWdlID0gbmV3IEJhZ2dhZ2VJbXBsKHRoaXMuX2VudHJpZXMpO1xuICAgICAgICBuZXdCYWdnYWdlLl9lbnRyaWVzLmRlbGV0ZShrZXkpO1xuICAgICAgICByZXR1cm4gbmV3QmFnZ2FnZTtcbiAgICB9O1xuICAgIEJhZ2dhZ2VJbXBsLnByb3RvdHlwZS5yZW1vdmVFbnRyaWVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZV8xLCBfYTtcbiAgICAgICAgdmFyIGtleXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGtleXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbmV3QmFnZ2FnZSA9IG5ldyBCYWdnYWdlSW1wbCh0aGlzLl9lbnRyaWVzKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZvciAodmFyIGtleXNfMSA9IF9fdmFsdWVzKGtleXMpLCBrZXlzXzFfMSA9IGtleXNfMS5uZXh0KCk7ICFrZXlzXzFfMS5kb25lOyBrZXlzXzFfMSA9IGtleXNfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0ga2V5c18xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgbmV3QmFnZ2FnZS5fZW50cmllcy5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKGtleXNfMV8xICYmICFrZXlzXzFfMS5kb25lICYmIChfYSA9IGtleXNfMS5yZXR1cm4pKSBfYS5jYWxsKGtleXNfMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ld0JhZ2dhZ2U7XG4gICAgfTtcbiAgICBCYWdnYWdlSW1wbC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgQmFnZ2FnZUltcGwoKTtcbiAgICB9O1xuICAgIHJldHVybiBCYWdnYWdlSW1wbDtcbn0oKSk7XG5leHBvcnQgeyBCYWdnYWdlSW1wbCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFnZ2FnZS1pbXBsLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/baggage/internal/baggage-impl.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/baggage/internal/symbol.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/baggage/internal/symbol.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   baggageEntryMetadataSymbol: () => (/* binding */ baggageEntryMetadataSymbol)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Symbol used to make BaggageEntryMetadata an opaque type\n */\nvar baggageEntryMetadataSymbol = Symbol('BaggageEntryMetadata');\n//# sourceMappingURL=symbol.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vYmFnZ2FnZS9pbnRlcm5hbC9zeW1ib2wuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvYXBpL2J1aWxkL2VzbS9iYWdnYWdlL2ludGVybmFsL3N5bWJvbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBTeW1ib2wgdXNlZCB0byBtYWtlIEJhZ2dhZ2VFbnRyeU1ldGFkYXRhIGFuIG9wYXF1ZSB0eXBlXG4gKi9cbmV4cG9ydCB2YXIgYmFnZ2FnZUVudHJ5TWV0YWRhdGFTeW1ib2wgPSBTeW1ib2woJ0JhZ2dhZ2VFbnRyeU1ldGFkYXRhJyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zeW1ib2wuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/baggage/internal/symbol.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/baggage/utils.js":
/*!********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/baggage/utils.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   baggageEntryMetadataFromString: () => (/* binding */ baggageEntryMetadataFromString),\n/* harmony export */   createBaggage: () => (/* binding */ createBaggage)\n/* harmony export */ });\n/* harmony import */ var _api_diag__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../api/diag */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/api/diag.js\");\n/* harmony import */ var _internal_baggage_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/baggage-impl */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/baggage/internal/baggage-impl.js\");\n/* harmony import */ var _internal_symbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/symbol */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/baggage/internal/symbol.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nvar diag = _api_diag__WEBPACK_IMPORTED_MODULE_0__.DiagAPI.instance();\n/**\n * Create a new Baggage with optional entries\n *\n * @param entries An array of baggage entries the new baggage should contain\n */\nfunction createBaggage(entries) {\n    if (entries === void 0) { entries = {}; }\n    return new _internal_baggage_impl__WEBPACK_IMPORTED_MODULE_1__.BaggageImpl(new Map(Object.entries(entries)));\n}\n/**\n * Create a serializable BaggageEntryMetadata object from a string.\n *\n * @param str string metadata. Format is currently not defined by the spec and has no special meaning.\n *\n */\nfunction baggageEntryMetadataFromString(str) {\n    if (typeof str !== 'string') {\n        diag.error(\"Cannot create baggage metadata from unknown type: \" + typeof str);\n        str = '';\n    }\n    return {\n        __TYPE__: _internal_symbol__WEBPACK_IMPORTED_MODULE_2__.baggageEntryMetadataSymbol,\n        toString: function () {\n            return str;\n        },\n    };\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vYmFnZ2FnZS91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNzQztBQUNnQjtBQUNTO0FBQy9ELFdBQVcsOENBQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsOEJBQThCO0FBQzlCLGVBQWUsK0RBQVc7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isd0VBQTBCO0FBQzVDO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vYmFnZ2FnZS91dGlscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgRGlhZ0FQSSB9IGZyb20gJy4uL2FwaS9kaWFnJztcbmltcG9ydCB7IEJhZ2dhZ2VJbXBsIH0gZnJvbSAnLi9pbnRlcm5hbC9iYWdnYWdlLWltcGwnO1xuaW1wb3J0IHsgYmFnZ2FnZUVudHJ5TWV0YWRhdGFTeW1ib2wgfSBmcm9tICcuL2ludGVybmFsL3N5bWJvbCc7XG52YXIgZGlhZyA9IERpYWdBUEkuaW5zdGFuY2UoKTtcbi8qKlxuICogQ3JlYXRlIGEgbmV3IEJhZ2dhZ2Ugd2l0aCBvcHRpb25hbCBlbnRyaWVzXG4gKlxuICogQHBhcmFtIGVudHJpZXMgQW4gYXJyYXkgb2YgYmFnZ2FnZSBlbnRyaWVzIHRoZSBuZXcgYmFnZ2FnZSBzaG91bGQgY29udGFpblxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQmFnZ2FnZShlbnRyaWVzKSB7XG4gICAgaWYgKGVudHJpZXMgPT09IHZvaWQgMCkgeyBlbnRyaWVzID0ge307IH1cbiAgICByZXR1cm4gbmV3IEJhZ2dhZ2VJbXBsKG5ldyBNYXAoT2JqZWN0LmVudHJpZXMoZW50cmllcykpKTtcbn1cbi8qKlxuICogQ3JlYXRlIGEgc2VyaWFsaXphYmxlIEJhZ2dhZ2VFbnRyeU1ldGFkYXRhIG9iamVjdCBmcm9tIGEgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSBzdHIgc3RyaW5nIG1ldGFkYXRhLiBGb3JtYXQgaXMgY3VycmVudGx5IG5vdCBkZWZpbmVkIGJ5IHRoZSBzcGVjIGFuZCBoYXMgbm8gc3BlY2lhbCBtZWFuaW5nLlxuICpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJhZ2dhZ2VFbnRyeU1ldGFkYXRhRnJvbVN0cmluZyhzdHIpIHtcbiAgICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgZGlhZy5lcnJvcihcIkNhbm5vdCBjcmVhdGUgYmFnZ2FnZSBtZXRhZGF0YSBmcm9tIHVua25vd24gdHlwZTogXCIgKyB0eXBlb2Ygc3RyKTtcbiAgICAgICAgc3RyID0gJyc7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIF9fVFlQRV9fOiBiYWdnYWdlRW50cnlNZXRhZGF0YVN5bWJvbCxcbiAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHI7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/baggage/utils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/context-api.js":
/*!******************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/context-api.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   context: () => (/* binding */ context)\n/* harmony export */ });\n/* harmony import */ var _api_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api/context */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/api/context.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\n\n/** Entrypoint for context API */\nvar context = _api_context__WEBPACK_IMPORTED_MODULE_0__.ContextAPI.getInstance();\n//# sourceMappingURL=context-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vY29udGV4dC1hcGkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQzJDO0FBQzNDO0FBQ08sY0FBYyxvREFBVTtBQUMvQiIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9hcGkvYnVpbGQvZXNtL2NvbnRleHQtYXBpLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vLyBTcGxpdCBtb2R1bGUtbGV2ZWwgdmFyaWFibGUgZGVmaW5pdGlvbiBpbnRvIHNlcGFyYXRlIGZpbGVzIHRvIGFsbG93XG4vLyB0cmVlLXNoYWtpbmcgb24gZWFjaCBhcGkgaW5zdGFuY2UuXG5pbXBvcnQgeyBDb250ZXh0QVBJIH0gZnJvbSAnLi9hcGkvY29udGV4dCc7XG4vKiogRW50cnlwb2ludCBmb3IgY29udGV4dCBBUEkgKi9cbmV4cG9ydCB2YXIgY29udGV4dCA9IENvbnRleHRBUEkuZ2V0SW5zdGFuY2UoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnRleHQtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/context-api.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/context/NoopContextManager.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/context/NoopContextManager.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NoopContextManager: () => (/* binding */ NoopContextManager)\n/* harmony export */ });\n/* harmony import */ var _context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./context */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/context/context.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (undefined && undefined.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nvar NoopContextManager = /** @class */ (function () {\n    function NoopContextManager() {\n    }\n    NoopContextManager.prototype.active = function () {\n        return _context__WEBPACK_IMPORTED_MODULE_0__.ROOT_CONTEXT;\n    };\n    NoopContextManager.prototype.with = function (_context, fn, thisArg) {\n        var args = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            args[_i - 3] = arguments[_i];\n        }\n        return fn.call.apply(fn, __spreadArray([thisArg], __read(args), false));\n    };\n    NoopContextManager.prototype.bind = function (_context, target) {\n        return target;\n    };\n    NoopContextManager.prototype.enable = function () {\n        return this;\n    };\n    NoopContextManager.prototype.disable = function () {\n        return this;\n    };\n    return NoopContextManager;\n}());\n\n//# sourceMappingURL=NoopContextManager.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vY29udGV4dC9Ob29wQ29udGV4dE1hbmFnZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFNBQUksSUFBSSxTQUFJO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixNQUFNO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixTQUFJLElBQUksU0FBSTtBQUNqQyw2RUFBNkUsT0FBTztBQUNwRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsa0RBQVk7QUFDM0I7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLHVCQUF1QjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUM2QjtBQUM5QiIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9hcGkvYnVpbGQvZXNtL2NvbnRleHQvTm9vcENvbnRleHRNYW5hZ2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG52YXIgX19yZWFkID0gKHRoaXMgJiYgdGhpcy5fX3JlYWQpIHx8IGZ1bmN0aW9uIChvLCBuKSB7XG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xuICAgIGlmICghbSkgcmV0dXJuIG87XG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XG4gICAgdHJ5IHtcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XG4gICAgfVxuICAgIHJldHVybiBhcjtcbn07XG52YXIgX19zcHJlYWRBcnJheSA9ICh0aGlzICYmIHRoaXMuX19zcHJlYWRBcnJheSkgfHwgZnVuY3Rpb24gKHRvLCBmcm9tLCBwYWNrKSB7XG4gICAgaWYgKHBhY2sgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikgZm9yICh2YXIgaSA9IDAsIGwgPSBmcm9tLmxlbmd0aCwgYXI7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgaWYgKGFyIHx8ICEoaSBpbiBmcm9tKSkge1xuICAgICAgICAgICAgaWYgKCFhcikgYXIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tLCAwLCBpKTtcbiAgICAgICAgICAgIGFyW2ldID0gZnJvbVtpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdG8uY29uY2F0KGFyIHx8IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20pKTtcbn07XG5pbXBvcnQgeyBST09UX0NPTlRFWFQgfSBmcm9tICcuL2NvbnRleHQnO1xudmFyIE5vb3BDb250ZXh0TWFuYWdlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBOb29wQ29udGV4dE1hbmFnZXIoKSB7XG4gICAgfVxuICAgIE5vb3BDb250ZXh0TWFuYWdlci5wcm90b3R5cGUuYWN0aXZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gUk9PVF9DT05URVhUO1xuICAgIH07XG4gICAgTm9vcENvbnRleHRNYW5hZ2VyLnByb3RvdHlwZS53aXRoID0gZnVuY3Rpb24gKF9jb250ZXh0LCBmbiwgdGhpc0FyZykge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDM7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaSAtIDNdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm4uY2FsbC5hcHBseShmbiwgX19zcHJlYWRBcnJheShbdGhpc0FyZ10sIF9fcmVhZChhcmdzKSwgZmFsc2UpKTtcbiAgICB9O1xuICAgIE5vb3BDb250ZXh0TWFuYWdlci5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIChfY29udGV4dCwgdGFyZ2V0KSB7XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfTtcbiAgICBOb29wQ29udGV4dE1hbmFnZXIucHJvdG90eXBlLmVuYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBOb29wQ29udGV4dE1hbmFnZXIucHJvdG90eXBlLmRpc2FibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgcmV0dXJuIE5vb3BDb250ZXh0TWFuYWdlcjtcbn0oKSk7XG5leHBvcnQgeyBOb29wQ29udGV4dE1hbmFnZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU5vb3BDb250ZXh0TWFuYWdlci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/context/NoopContextManager.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/context/context.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/context/context.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ROOT_CONTEXT: () => (/* binding */ ROOT_CONTEXT),\n/* harmony export */   createContextKey: () => (/* binding */ createContextKey)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Get a key to uniquely identify a context value */\nfunction createContextKey(description) {\n    // The specification states that for the same input, multiple calls should\n    // return different keys. Due to the nature of the JS dependency management\n    // system, this creates problems where multiple versions of some package\n    // could hold different keys for the same property.\n    //\n    // Therefore, we use Symbol.for which returns the same key for the same input.\n    return Symbol.for(description);\n}\nvar BaseContext = /** @class */ (function () {\n    /**\n     * Construct a new context which inherits values from an optional parent context.\n     *\n     * @param parentContext a context from which to inherit values\n     */\n    function BaseContext(parentContext) {\n        // for minification\n        var self = this;\n        self._currentContext = parentContext ? new Map(parentContext) : new Map();\n        self.getValue = function (key) { return self._currentContext.get(key); };\n        self.setValue = function (key, value) {\n            var context = new BaseContext(self._currentContext);\n            context._currentContext.set(key, value);\n            return context;\n        };\n        self.deleteValue = function (key) {\n            var context = new BaseContext(self._currentContext);\n            context._currentContext.delete(key);\n            return context;\n        };\n    }\n    return BaseContext;\n}());\n/** The root context is used as the default parent context when there is no active context */\nvar ROOT_CONTEXT = new BaseContext();\n//# sourceMappingURL=context.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vY29udGV4dC9jb250ZXh0LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDTztBQUNQIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vY29udGV4dC9jb250ZXh0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKiogR2V0IGEga2V5IHRvIHVuaXF1ZWx5IGlkZW50aWZ5IGEgY29udGV4dCB2YWx1ZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbnRleHRLZXkoZGVzY3JpcHRpb24pIHtcbiAgICAvLyBUaGUgc3BlY2lmaWNhdGlvbiBzdGF0ZXMgdGhhdCBmb3IgdGhlIHNhbWUgaW5wdXQsIG11bHRpcGxlIGNhbGxzIHNob3VsZFxuICAgIC8vIHJldHVybiBkaWZmZXJlbnQga2V5cy4gRHVlIHRvIHRoZSBuYXR1cmUgb2YgdGhlIEpTIGRlcGVuZGVuY3kgbWFuYWdlbWVudFxuICAgIC8vIHN5c3RlbSwgdGhpcyBjcmVhdGVzIHByb2JsZW1zIHdoZXJlIG11bHRpcGxlIHZlcnNpb25zIG9mIHNvbWUgcGFja2FnZVxuICAgIC8vIGNvdWxkIGhvbGQgZGlmZmVyZW50IGtleXMgZm9yIHRoZSBzYW1lIHByb3BlcnR5LlxuICAgIC8vXG4gICAgLy8gVGhlcmVmb3JlLCB3ZSB1c2UgU3ltYm9sLmZvciB3aGljaCByZXR1cm5zIHRoZSBzYW1lIGtleSBmb3IgdGhlIHNhbWUgaW5wdXQuXG4gICAgcmV0dXJuIFN5bWJvbC5mb3IoZGVzY3JpcHRpb24pO1xufVxudmFyIEJhc2VDb250ZXh0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdCBhIG5ldyBjb250ZXh0IHdoaWNoIGluaGVyaXRzIHZhbHVlcyBmcm9tIGFuIG9wdGlvbmFsIHBhcmVudCBjb250ZXh0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhcmVudENvbnRleHQgYSBjb250ZXh0IGZyb20gd2hpY2ggdG8gaW5oZXJpdCB2YWx1ZXNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBCYXNlQ29udGV4dChwYXJlbnRDb250ZXh0KSB7XG4gICAgICAgIC8vIGZvciBtaW5pZmljYXRpb25cbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICBzZWxmLl9jdXJyZW50Q29udGV4dCA9IHBhcmVudENvbnRleHQgPyBuZXcgTWFwKHBhcmVudENvbnRleHQpIDogbmV3IE1hcCgpO1xuICAgICAgICBzZWxmLmdldFZhbHVlID0gZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gc2VsZi5fY3VycmVudENvbnRleHQuZ2V0KGtleSk7IH07XG4gICAgICAgIHNlbGYuc2V0VmFsdWUgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIGNvbnRleHQgPSBuZXcgQmFzZUNvbnRleHQoc2VsZi5fY3VycmVudENvbnRleHQpO1xuICAgICAgICAgICAgY29udGV4dC5fY3VycmVudENvbnRleHQuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQ7XG4gICAgICAgIH07XG4gICAgICAgIHNlbGYuZGVsZXRlVmFsdWUgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICB2YXIgY29udGV4dCA9IG5ldyBCYXNlQ29udGV4dChzZWxmLl9jdXJyZW50Q29udGV4dCk7XG4gICAgICAgICAgICBjb250ZXh0Ll9jdXJyZW50Q29udGV4dC5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgIHJldHVybiBjb250ZXh0O1xuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gQmFzZUNvbnRleHQ7XG59KCkpO1xuLyoqIFRoZSByb290IGNvbnRleHQgaXMgdXNlZCBhcyB0aGUgZGVmYXVsdCBwYXJlbnQgY29udGV4dCB3aGVuIHRoZXJlIGlzIG5vIGFjdGl2ZSBjb250ZXh0ICovXG5leHBvcnQgdmFyIFJPT1RfQ09OVEVYVCA9IG5ldyBCYXNlQ29udGV4dCgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29udGV4dC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/context/context.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/diag-api.js":
/*!***************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/diag-api.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   diag: () => (/* binding */ diag)\n/* harmony export */ });\n/* harmony import */ var _api_diag__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api/diag */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/api/diag.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\n\n/**\n * Entrypoint for Diag API.\n * Defines Diagnostic handler used for internal diagnostic logging operations.\n * The default provides a Noop DiagLogger implementation which may be changed via the\n * diag.setLogger(logger: DiagLogger) function.\n */\nvar diag = _api_diag__WEBPACK_IMPORTED_MODULE_0__.DiagAPI.instance();\n//# sourceMappingURL=diag-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vZGlhZy1hcGkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3FDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFdBQVcsOENBQU87QUFDekIiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvYXBpL2J1aWxkL2VzbS9kaWFnLWFwaS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLy8gU3BsaXQgbW9kdWxlLWxldmVsIHZhcmlhYmxlIGRlZmluaXRpb24gaW50byBzZXBhcmF0ZSBmaWxlcyB0byBhbGxvd1xuLy8gdHJlZS1zaGFraW5nIG9uIGVhY2ggYXBpIGluc3RhbmNlLlxuaW1wb3J0IHsgRGlhZ0FQSSB9IGZyb20gJy4vYXBpL2RpYWcnO1xuLyoqXG4gKiBFbnRyeXBvaW50IGZvciBEaWFnIEFQSS5cbiAqIERlZmluZXMgRGlhZ25vc3RpYyBoYW5kbGVyIHVzZWQgZm9yIGludGVybmFsIGRpYWdub3N0aWMgbG9nZ2luZyBvcGVyYXRpb25zLlxuICogVGhlIGRlZmF1bHQgcHJvdmlkZXMgYSBOb29wIERpYWdMb2dnZXIgaW1wbGVtZW50YXRpb24gd2hpY2ggbWF5IGJlIGNoYW5nZWQgdmlhIHRoZVxuICogZGlhZy5zZXRMb2dnZXIobG9nZ2VyOiBEaWFnTG9nZ2VyKSBmdW5jdGlvbi5cbiAqL1xuZXhwb3J0IHZhciBkaWFnID0gRGlhZ0FQSS5pbnN0YW5jZSgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGlhZy1hcGkuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/diag-api.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/diag/ComponentLogger.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/diag/ComponentLogger.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DiagComponentLogger: () => (/* binding */ DiagComponentLogger)\n/* harmony export */ });\n/* harmony import */ var _internal_global_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/global-utils */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/internal/global-utils.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (undefined && undefined.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\n\n/**\n * Component Logger which is meant to be used as part of any component which\n * will add automatically additional namespace in front of the log message.\n * It will then forward all message to global diag logger\n * @example\n * const cLogger = diag.createComponentLogger({ namespace: '@opentelemetry/instrumentation-http' });\n * cLogger.debug('test');\n * // @opentelemetry/instrumentation-http test\n */\nvar DiagComponentLogger = /** @class */ (function () {\n    function DiagComponentLogger(props) {\n        this._namespace = props.namespace || 'DiagComponentLogger';\n    }\n    DiagComponentLogger.prototype.debug = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('debug', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.error = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('error', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.info = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('info', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.warn = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('warn', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.verbose = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('verbose', this._namespace, args);\n    };\n    return DiagComponentLogger;\n}());\n\nfunction logProxy(funcName, namespace, args) {\n    var logger = (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_0__.getGlobal)('diag');\n    // shortcut if logger not set\n    if (!logger) {\n        return;\n    }\n    args.unshift(namespace);\n    return logger[funcName].apply(logger, __spreadArray([], __read(args), false));\n}\n//# sourceMappingURL=ComponentLogger.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vZGlhZy9Db21wb25lbnRMb2dnZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFNBQUksSUFBSSxTQUFJO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixNQUFNO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixTQUFJLElBQUksU0FBSTtBQUNqQyw2RUFBNkUsT0FBTztBQUNwRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNxRDtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELGtEQUFrRDtBQUNsRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsdUJBQXVCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qix1QkFBdUI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLHVCQUF1QjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsdUJBQXVCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qix1QkFBdUI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDOEI7QUFDL0I7QUFDQSxpQkFBaUIsaUVBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9hcGkvYnVpbGQvZXNtL2RpYWcvQ29tcG9uZW50TG9nZ2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG52YXIgX19yZWFkID0gKHRoaXMgJiYgdGhpcy5fX3JlYWQpIHx8IGZ1bmN0aW9uIChvLCBuKSB7XG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xuICAgIGlmICghbSkgcmV0dXJuIG87XG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XG4gICAgdHJ5IHtcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XG4gICAgfVxuICAgIHJldHVybiBhcjtcbn07XG52YXIgX19zcHJlYWRBcnJheSA9ICh0aGlzICYmIHRoaXMuX19zcHJlYWRBcnJheSkgfHwgZnVuY3Rpb24gKHRvLCBmcm9tLCBwYWNrKSB7XG4gICAgaWYgKHBhY2sgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikgZm9yICh2YXIgaSA9IDAsIGwgPSBmcm9tLmxlbmd0aCwgYXI7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgaWYgKGFyIHx8ICEoaSBpbiBmcm9tKSkge1xuICAgICAgICAgICAgaWYgKCFhcikgYXIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tLCAwLCBpKTtcbiAgICAgICAgICAgIGFyW2ldID0gZnJvbVtpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdG8uY29uY2F0KGFyIHx8IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20pKTtcbn07XG5pbXBvcnQgeyBnZXRHbG9iYWwgfSBmcm9tICcuLi9pbnRlcm5hbC9nbG9iYWwtdXRpbHMnO1xuLyoqXG4gKiBDb21wb25lbnQgTG9nZ2VyIHdoaWNoIGlzIG1lYW50IHRvIGJlIHVzZWQgYXMgcGFydCBvZiBhbnkgY29tcG9uZW50IHdoaWNoXG4gKiB3aWxsIGFkZCBhdXRvbWF0aWNhbGx5IGFkZGl0aW9uYWwgbmFtZXNwYWNlIGluIGZyb250IG9mIHRoZSBsb2cgbWVzc2FnZS5cbiAqIEl0IHdpbGwgdGhlbiBmb3J3YXJkIGFsbCBtZXNzYWdlIHRvIGdsb2JhbCBkaWFnIGxvZ2dlclxuICogQGV4YW1wbGVcbiAqIGNvbnN0IGNMb2dnZXIgPSBkaWFnLmNyZWF0ZUNvbXBvbmVudExvZ2dlcih7IG5hbWVzcGFjZTogJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1odHRwJyB9KTtcbiAqIGNMb2dnZXIuZGVidWcoJ3Rlc3QnKTtcbiAqIC8vIEBvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1odHRwIHRlc3RcbiAqL1xudmFyIERpYWdDb21wb25lbnRMb2dnZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGlhZ0NvbXBvbmVudExvZ2dlcihwcm9wcykge1xuICAgICAgICB0aGlzLl9uYW1lc3BhY2UgPSBwcm9wcy5uYW1lc3BhY2UgfHwgJ0RpYWdDb21wb25lbnRMb2dnZXInO1xuICAgIH1cbiAgICBEaWFnQ29tcG9uZW50TG9nZ2VyLnByb3RvdHlwZS5kZWJ1ZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG9nUHJveHkoJ2RlYnVnJywgdGhpcy5fbmFtZXNwYWNlLCBhcmdzKTtcbiAgICB9O1xuICAgIERpYWdDb21wb25lbnRMb2dnZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsb2dQcm94eSgnZXJyb3InLCB0aGlzLl9uYW1lc3BhY2UsIGFyZ3MpO1xuICAgIH07XG4gICAgRGlhZ0NvbXBvbmVudExvZ2dlci5wcm90b3R5cGUuaW5mbyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG9nUHJveHkoJ2luZm8nLCB0aGlzLl9uYW1lc3BhY2UsIGFyZ3MpO1xuICAgIH07XG4gICAgRGlhZ0NvbXBvbmVudExvZ2dlci5wcm90b3R5cGUud2FybiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG9nUHJveHkoJ3dhcm4nLCB0aGlzLl9uYW1lc3BhY2UsIGFyZ3MpO1xuICAgIH07XG4gICAgRGlhZ0NvbXBvbmVudExvZ2dlci5wcm90b3R5cGUudmVyYm9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG9nUHJveHkoJ3ZlcmJvc2UnLCB0aGlzLl9uYW1lc3BhY2UsIGFyZ3MpO1xuICAgIH07XG4gICAgcmV0dXJuIERpYWdDb21wb25lbnRMb2dnZXI7XG59KCkpO1xuZXhwb3J0IHsgRGlhZ0NvbXBvbmVudExvZ2dlciB9O1xuZnVuY3Rpb24gbG9nUHJveHkoZnVuY05hbWUsIG5hbWVzcGFjZSwgYXJncykge1xuICAgIHZhciBsb2dnZXIgPSBnZXRHbG9iYWwoJ2RpYWcnKTtcbiAgICAvLyBzaG9ydGN1dCBpZiBsb2dnZXIgbm90IHNldFxuICAgIGlmICghbG9nZ2VyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYXJncy51bnNoaWZ0KG5hbWVzcGFjZSk7XG4gICAgcmV0dXJuIGxvZ2dlcltmdW5jTmFtZV0uYXBwbHkobG9nZ2VyLCBfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQoYXJncyksIGZhbHNlKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Db21wb25lbnRMb2dnZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/diag/ComponentLogger.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/diag/consoleLogger.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/diag/consoleLogger.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DiagConsoleLogger: () => (/* binding */ DiagConsoleLogger)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar consoleMap = [\n    { n: 'error', c: 'error' },\n    { n: 'warn', c: 'warn' },\n    { n: 'info', c: 'info' },\n    { n: 'debug', c: 'debug' },\n    { n: 'verbose', c: 'trace' },\n];\n/**\n * A simple Immutable Console based diagnostic logger which will output any messages to the Console.\n * If you want to limit the amount of logging to a specific level or lower use the\n * {@link createLogLevelDiagLogger}\n */\nvar DiagConsoleLogger = /** @class */ (function () {\n    function DiagConsoleLogger() {\n        function _consoleFunc(funcName) {\n            return function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                if (console) {\n                    // Some environments only expose the console when the F12 developer console is open\n                    // eslint-disable-next-line no-console\n                    var theFunc = console[funcName];\n                    if (typeof theFunc !== 'function') {\n                        // Not all environments support all functions\n                        // eslint-disable-next-line no-console\n                        theFunc = console.log;\n                    }\n                    // One last final check\n                    if (typeof theFunc === 'function') {\n                        return theFunc.apply(console, args);\n                    }\n                }\n            };\n        }\n        for (var i = 0; i < consoleMap.length; i++) {\n            this[consoleMap[i].n] = _consoleFunc(consoleMap[i].c);\n        }\n    }\n    return DiagConsoleLogger;\n}());\n\n//# sourceMappingURL=consoleLogger.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vZGlhZy9jb25zb2xlTG9nZ2VyLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sd0JBQXdCO0FBQzlCLE1BQU0sc0JBQXNCO0FBQzVCLE1BQU0sc0JBQXNCO0FBQzVCLE1BQU0sd0JBQXdCO0FBQzlCLE1BQU0sMEJBQTBCO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyx1QkFBdUI7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHVCQUF1QjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDNEI7QUFDN0IiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvYXBpL2J1aWxkL2VzbS9kaWFnL2NvbnNvbGVMb2dnZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBjb25zb2xlTWFwID0gW1xuICAgIHsgbjogJ2Vycm9yJywgYzogJ2Vycm9yJyB9LFxuICAgIHsgbjogJ3dhcm4nLCBjOiAnd2FybicgfSxcbiAgICB7IG46ICdpbmZvJywgYzogJ2luZm8nIH0sXG4gICAgeyBuOiAnZGVidWcnLCBjOiAnZGVidWcnIH0sXG4gICAgeyBuOiAndmVyYm9zZScsIGM6ICd0cmFjZScgfSxcbl07XG4vKipcbiAqIEEgc2ltcGxlIEltbXV0YWJsZSBDb25zb2xlIGJhc2VkIGRpYWdub3N0aWMgbG9nZ2VyIHdoaWNoIHdpbGwgb3V0cHV0IGFueSBtZXNzYWdlcyB0byB0aGUgQ29uc29sZS5cbiAqIElmIHlvdSB3YW50IHRvIGxpbWl0IHRoZSBhbW91bnQgb2YgbG9nZ2luZyB0byBhIHNwZWNpZmljIGxldmVsIG9yIGxvd2VyIHVzZSB0aGVcbiAqIHtAbGluayBjcmVhdGVMb2dMZXZlbERpYWdMb2dnZXJ9XG4gKi9cbnZhciBEaWFnQ29uc29sZUxvZ2dlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEaWFnQ29uc29sZUxvZ2dlcigpIHtcbiAgICAgICAgZnVuY3Rpb24gX2NvbnNvbGVGdW5jKGZ1bmNOYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY29uc29sZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBTb21lIGVudmlyb25tZW50cyBvbmx5IGV4cG9zZSB0aGUgY29uc29sZSB3aGVuIHRoZSBGMTIgZGV2ZWxvcGVyIGNvbnNvbGUgaXMgb3BlblxuICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgICAgICAgICAgICB2YXIgdGhlRnVuYyA9IGNvbnNvbGVbZnVuY05hbWVdO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRoZUZ1bmMgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vdCBhbGwgZW52aXJvbm1lbnRzIHN1cHBvcnQgYWxsIGZ1bmN0aW9uc1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoZUZ1bmMgPSBjb25zb2xlLmxvZztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBPbmUgbGFzdCBmaW5hbCBjaGVja1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRoZUZ1bmMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGVGdW5jLmFwcGx5KGNvbnNvbGUsIGFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbnNvbGVNYXAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXNbY29uc29sZU1hcFtpXS5uXSA9IF9jb25zb2xlRnVuYyhjb25zb2xlTWFwW2ldLmMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBEaWFnQ29uc29sZUxvZ2dlcjtcbn0oKSk7XG5leHBvcnQgeyBEaWFnQ29uc29sZUxvZ2dlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc29sZUxvZ2dlci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/diag/consoleLogger.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/diag/internal/logLevelLogger.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/diag/internal/logLevelLogger.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createLogLevelDiagLogger: () => (/* binding */ createLogLevelDiagLogger)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/diag/types.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nfunction createLogLevelDiagLogger(maxLevel, logger) {\n    if (maxLevel < _types__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.NONE) {\n        maxLevel = _types__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.NONE;\n    }\n    else if (maxLevel > _types__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.ALL) {\n        maxLevel = _types__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.ALL;\n    }\n    // In case the logger is null or undefined\n    logger = logger || {};\n    function _filterFunc(funcName, theLevel) {\n        var theFunc = logger[funcName];\n        if (typeof theFunc === 'function' && maxLevel >= theLevel) {\n            return theFunc.bind(logger);\n        }\n        return function () { };\n    }\n    return {\n        error: _filterFunc('error', _types__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.ERROR),\n        warn: _filterFunc('warn', _types__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.WARN),\n        info: _filterFunc('info', _types__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.INFO),\n        debug: _filterFunc('debug', _types__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.DEBUG),\n        verbose: _filterFunc('verbose', _types__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.VERBOSE),\n    };\n}\n//# sourceMappingURL=logLevelLogger.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vZGlhZy9pbnRlcm5hbC9sb2dMZXZlbExvZ2dlci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN3QztBQUNqQztBQUNQLG1CQUFtQixnREFBWTtBQUMvQixtQkFBbUIsZ0RBQVk7QUFDL0I7QUFDQSx3QkFBd0IsZ0RBQVk7QUFDcEMsbUJBQW1CLGdEQUFZO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsZ0RBQVk7QUFDaEQsa0NBQWtDLGdEQUFZO0FBQzlDLGtDQUFrQyxnREFBWTtBQUM5QyxvQ0FBb0MsZ0RBQVk7QUFDaEQsd0NBQXdDLGdEQUFZO0FBQ3BEO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9hcGkvYnVpbGQvZXNtL2RpYWcvaW50ZXJuYWwvbG9nTGV2ZWxMb2dnZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IERpYWdMb2dMZXZlbCB9IGZyb20gJy4uL3R5cGVzJztcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVMb2dMZXZlbERpYWdMb2dnZXIobWF4TGV2ZWwsIGxvZ2dlcikge1xuICAgIGlmIChtYXhMZXZlbCA8IERpYWdMb2dMZXZlbC5OT05FKSB7XG4gICAgICAgIG1heExldmVsID0gRGlhZ0xvZ0xldmVsLk5PTkU7XG4gICAgfVxuICAgIGVsc2UgaWYgKG1heExldmVsID4gRGlhZ0xvZ0xldmVsLkFMTCkge1xuICAgICAgICBtYXhMZXZlbCA9IERpYWdMb2dMZXZlbC5BTEw7XG4gICAgfVxuICAgIC8vIEluIGNhc2UgdGhlIGxvZ2dlciBpcyBudWxsIG9yIHVuZGVmaW5lZFxuICAgIGxvZ2dlciA9IGxvZ2dlciB8fCB7fTtcbiAgICBmdW5jdGlvbiBfZmlsdGVyRnVuYyhmdW5jTmFtZSwgdGhlTGV2ZWwpIHtcbiAgICAgICAgdmFyIHRoZUZ1bmMgPSBsb2dnZXJbZnVuY05hbWVdO1xuICAgICAgICBpZiAodHlwZW9mIHRoZUZ1bmMgPT09ICdmdW5jdGlvbicgJiYgbWF4TGV2ZWwgPj0gdGhlTGV2ZWwpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGVGdW5jLmJpbmQobG9nZ2VyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBlcnJvcjogX2ZpbHRlckZ1bmMoJ2Vycm9yJywgRGlhZ0xvZ0xldmVsLkVSUk9SKSxcbiAgICAgICAgd2FybjogX2ZpbHRlckZ1bmMoJ3dhcm4nLCBEaWFnTG9nTGV2ZWwuV0FSTiksXG4gICAgICAgIGluZm86IF9maWx0ZXJGdW5jKCdpbmZvJywgRGlhZ0xvZ0xldmVsLklORk8pLFxuICAgICAgICBkZWJ1ZzogX2ZpbHRlckZ1bmMoJ2RlYnVnJywgRGlhZ0xvZ0xldmVsLkRFQlVHKSxcbiAgICAgICAgdmVyYm9zZTogX2ZpbHRlckZ1bmMoJ3ZlcmJvc2UnLCBEaWFnTG9nTGV2ZWwuVkVSQk9TRSksXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvZ0xldmVsTG9nZ2VyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/diag/internal/logLevelLogger.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/diag/types.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/diag/types.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DiagLogLevel: () => (/* binding */ DiagLogLevel)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Defines the available internal logging levels for the diagnostic logger, the numeric values\n * of the levels are defined to match the original values from the initial LogLevel to avoid\n * compatibility/migration issues for any implementation that assume the numeric ordering.\n */\nvar DiagLogLevel;\n(function (DiagLogLevel) {\n    /** Diagnostic Logging level setting to disable all logging (except and forced logs) */\n    DiagLogLevel[DiagLogLevel[\"NONE\"] = 0] = \"NONE\";\n    /** Identifies an error scenario */\n    DiagLogLevel[DiagLogLevel[\"ERROR\"] = 30] = \"ERROR\";\n    /** Identifies a warning scenario */\n    DiagLogLevel[DiagLogLevel[\"WARN\"] = 50] = \"WARN\";\n    /** General informational log message */\n    DiagLogLevel[DiagLogLevel[\"INFO\"] = 60] = \"INFO\";\n    /** General debug log message */\n    DiagLogLevel[DiagLogLevel[\"DEBUG\"] = 70] = \"DEBUG\";\n    /**\n     * Detailed trace level logging should only be used for development, should only be set\n     * in a development environment.\n     */\n    DiagLogLevel[DiagLogLevel[\"VERBOSE\"] = 80] = \"VERBOSE\";\n    /** Used to set the logging level to include all logging */\n    DiagLogLevel[DiagLogLevel[\"ALL\"] = 9999] = \"ALL\";\n})(DiagLogLevel || (DiagLogLevel = {}));\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vZGlhZy90eXBlcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxvQ0FBb0M7QUFDckMiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvYXBpL2J1aWxkL2VzbS9kaWFnL3R5cGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIERlZmluZXMgdGhlIGF2YWlsYWJsZSBpbnRlcm5hbCBsb2dnaW5nIGxldmVscyBmb3IgdGhlIGRpYWdub3N0aWMgbG9nZ2VyLCB0aGUgbnVtZXJpYyB2YWx1ZXNcbiAqIG9mIHRoZSBsZXZlbHMgYXJlIGRlZmluZWQgdG8gbWF0Y2ggdGhlIG9yaWdpbmFsIHZhbHVlcyBmcm9tIHRoZSBpbml0aWFsIExvZ0xldmVsIHRvIGF2b2lkXG4gKiBjb21wYXRpYmlsaXR5L21pZ3JhdGlvbiBpc3N1ZXMgZm9yIGFueSBpbXBsZW1lbnRhdGlvbiB0aGF0IGFzc3VtZSB0aGUgbnVtZXJpYyBvcmRlcmluZy5cbiAqL1xuZXhwb3J0IHZhciBEaWFnTG9nTGV2ZWw7XG4oZnVuY3Rpb24gKERpYWdMb2dMZXZlbCkge1xuICAgIC8qKiBEaWFnbm9zdGljIExvZ2dpbmcgbGV2ZWwgc2V0dGluZyB0byBkaXNhYmxlIGFsbCBsb2dnaW5nIChleGNlcHQgYW5kIGZvcmNlZCBsb2dzKSAqL1xuICAgIERpYWdMb2dMZXZlbFtEaWFnTG9nTGV2ZWxbXCJOT05FXCJdID0gMF0gPSBcIk5PTkVcIjtcbiAgICAvKiogSWRlbnRpZmllcyBhbiBlcnJvciBzY2VuYXJpbyAqL1xuICAgIERpYWdMb2dMZXZlbFtEaWFnTG9nTGV2ZWxbXCJFUlJPUlwiXSA9IDMwXSA9IFwiRVJST1JcIjtcbiAgICAvKiogSWRlbnRpZmllcyBhIHdhcm5pbmcgc2NlbmFyaW8gKi9cbiAgICBEaWFnTG9nTGV2ZWxbRGlhZ0xvZ0xldmVsW1wiV0FSTlwiXSA9IDUwXSA9IFwiV0FSTlwiO1xuICAgIC8qKiBHZW5lcmFsIGluZm9ybWF0aW9uYWwgbG9nIG1lc3NhZ2UgKi9cbiAgICBEaWFnTG9nTGV2ZWxbRGlhZ0xvZ0xldmVsW1wiSU5GT1wiXSA9IDYwXSA9IFwiSU5GT1wiO1xuICAgIC8qKiBHZW5lcmFsIGRlYnVnIGxvZyBtZXNzYWdlICovXG4gICAgRGlhZ0xvZ0xldmVsW0RpYWdMb2dMZXZlbFtcIkRFQlVHXCJdID0gNzBdID0gXCJERUJVR1wiO1xuICAgIC8qKlxuICAgICAqIERldGFpbGVkIHRyYWNlIGxldmVsIGxvZ2dpbmcgc2hvdWxkIG9ubHkgYmUgdXNlZCBmb3IgZGV2ZWxvcG1lbnQsIHNob3VsZCBvbmx5IGJlIHNldFxuICAgICAqIGluIGEgZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnQuXG4gICAgICovXG4gICAgRGlhZ0xvZ0xldmVsW0RpYWdMb2dMZXZlbFtcIlZFUkJPU0VcIl0gPSA4MF0gPSBcIlZFUkJPU0VcIjtcbiAgICAvKiogVXNlZCB0byBzZXQgdGhlIGxvZ2dpbmcgbGV2ZWwgdG8gaW5jbHVkZSBhbGwgbG9nZ2luZyAqL1xuICAgIERpYWdMb2dMZXZlbFtEaWFnTG9nTGV2ZWxbXCJBTExcIl0gPSA5OTk5XSA9IFwiQUxMXCI7XG59KShEaWFnTG9nTGV2ZWwgfHwgKERpYWdMb2dMZXZlbCA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/diag/types.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DiagConsoleLogger: () => (/* reexport safe */ _diag_consoleLogger__WEBPACK_IMPORTED_MODULE_2__.DiagConsoleLogger),\n/* harmony export */   DiagLogLevel: () => (/* reexport safe */ _diag_types__WEBPACK_IMPORTED_MODULE_3__.DiagLogLevel),\n/* harmony export */   INVALID_SPANID: () => (/* reexport safe */ _trace_invalid_span_constants__WEBPACK_IMPORTED_MODULE_15__.INVALID_SPANID),\n/* harmony export */   INVALID_SPAN_CONTEXT: () => (/* reexport safe */ _trace_invalid_span_constants__WEBPACK_IMPORTED_MODULE_15__.INVALID_SPAN_CONTEXT),\n/* harmony export */   INVALID_TRACEID: () => (/* reexport safe */ _trace_invalid_span_constants__WEBPACK_IMPORTED_MODULE_15__.INVALID_TRACEID),\n/* harmony export */   ProxyTracer: () => (/* reexport safe */ _trace_ProxyTracer__WEBPACK_IMPORTED_MODULE_7__.ProxyTracer),\n/* harmony export */   ProxyTracerProvider: () => (/* reexport safe */ _trace_ProxyTracerProvider__WEBPACK_IMPORTED_MODULE_8__.ProxyTracerProvider),\n/* harmony export */   ROOT_CONTEXT: () => (/* reexport safe */ _context_context__WEBPACK_IMPORTED_MODULE_1__.ROOT_CONTEXT),\n/* harmony export */   SamplingDecision: () => (/* reexport safe */ _trace_SamplingResult__WEBPACK_IMPORTED_MODULE_9__.SamplingDecision),\n/* harmony export */   SpanKind: () => (/* reexport safe */ _trace_span_kind__WEBPACK_IMPORTED_MODULE_10__.SpanKind),\n/* harmony export */   SpanStatusCode: () => (/* reexport safe */ _trace_status__WEBPACK_IMPORTED_MODULE_11__.SpanStatusCode),\n/* harmony export */   TraceFlags: () => (/* reexport safe */ _trace_trace_flags__WEBPACK_IMPORTED_MODULE_12__.TraceFlags),\n/* harmony export */   ValueType: () => (/* reexport safe */ _metrics_Metric__WEBPACK_IMPORTED_MODULE_5__.ValueType),\n/* harmony export */   baggageEntryMetadataFromString: () => (/* reexport safe */ _baggage_utils__WEBPACK_IMPORTED_MODULE_0__.baggageEntryMetadataFromString),\n/* harmony export */   context: () => (/* reexport safe */ _context_api__WEBPACK_IMPORTED_MODULE_16__.context),\n/* harmony export */   createContextKey: () => (/* reexport safe */ _context_context__WEBPACK_IMPORTED_MODULE_1__.createContextKey),\n/* harmony export */   createNoopMeter: () => (/* reexport safe */ _metrics_NoopMeter__WEBPACK_IMPORTED_MODULE_4__.createNoopMeter),\n/* harmony export */   createTraceState: () => (/* reexport safe */ _trace_internal_utils__WEBPACK_IMPORTED_MODULE_13__.createTraceState),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   defaultTextMapGetter: () => (/* reexport safe */ _propagation_TextMapPropagator__WEBPACK_IMPORTED_MODULE_6__.defaultTextMapGetter),\n/* harmony export */   defaultTextMapSetter: () => (/* reexport safe */ _propagation_TextMapPropagator__WEBPACK_IMPORTED_MODULE_6__.defaultTextMapSetter),\n/* harmony export */   diag: () => (/* reexport safe */ _diag_api__WEBPACK_IMPORTED_MODULE_17__.diag),\n/* harmony export */   isSpanContextValid: () => (/* reexport safe */ _trace_spancontext_utils__WEBPACK_IMPORTED_MODULE_14__.isSpanContextValid),\n/* harmony export */   isValidSpanId: () => (/* reexport safe */ _trace_spancontext_utils__WEBPACK_IMPORTED_MODULE_14__.isValidSpanId),\n/* harmony export */   isValidTraceId: () => (/* reexport safe */ _trace_spancontext_utils__WEBPACK_IMPORTED_MODULE_14__.isValidTraceId),\n/* harmony export */   metrics: () => (/* reexport safe */ _metrics_api__WEBPACK_IMPORTED_MODULE_18__.metrics),\n/* harmony export */   propagation: () => (/* reexport safe */ _propagation_api__WEBPACK_IMPORTED_MODULE_19__.propagation),\n/* harmony export */   trace: () => (/* reexport safe */ _trace_api__WEBPACK_IMPORTED_MODULE_20__.trace)\n/* harmony export */ });\n/* harmony import */ var _baggage_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./baggage/utils */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/baggage/utils.js\");\n/* harmony import */ var _context_context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./context/context */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/context/context.js\");\n/* harmony import */ var _diag_consoleLogger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./diag/consoleLogger */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/diag/consoleLogger.js\");\n/* harmony import */ var _diag_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./diag/types */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/diag/types.js\");\n/* harmony import */ var _metrics_NoopMeter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./metrics/NoopMeter */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/metrics/NoopMeter.js\");\n/* harmony import */ var _metrics_Metric__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./metrics/Metric */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/metrics/Metric.js\");\n/* harmony import */ var _propagation_TextMapPropagator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./propagation/TextMapPropagator */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/propagation/TextMapPropagator.js\");\n/* harmony import */ var _trace_ProxyTracer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./trace/ProxyTracer */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/ProxyTracer.js\");\n/* harmony import */ var _trace_ProxyTracerProvider__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./trace/ProxyTracerProvider */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/ProxyTracerProvider.js\");\n/* harmony import */ var _trace_SamplingResult__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./trace/SamplingResult */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/SamplingResult.js\");\n/* harmony import */ var _trace_span_kind__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./trace/span_kind */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/span_kind.js\");\n/* harmony import */ var _trace_status__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./trace/status */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/status.js\");\n/* harmony import */ var _trace_trace_flags__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./trace/trace_flags */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js\");\n/* harmony import */ var _trace_internal_utils__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./trace/internal/utils */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/internal/utils.js\");\n/* harmony import */ var _trace_spancontext_utils__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./trace/spancontext-utils */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js\");\n/* harmony import */ var _trace_invalid_span_constants__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./trace/invalid-span-constants */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js\");\n/* harmony import */ var _context_api__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./context-api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/context-api.js\");\n/* harmony import */ var _diag_api__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./diag-api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/diag-api.js\");\n/* harmony import */ var _metrics_api__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./metrics-api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/metrics-api.js\");\n/* harmony import */ var _propagation_api__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./propagation-api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/propagation-api.js\");\n/* harmony import */ var _trace_api__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./trace-api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace-api.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Context APIs\n\n// Diag APIs\n\n\n// Metrics APIs\n\n\n// Propagation APIs\n\n\n\n\n\n\n\n\n\n\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\n\n\n\n\n\n// Named export.\n\n// Default export.\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    context: _context_api__WEBPACK_IMPORTED_MODULE_16__.context,\n    diag: _diag_api__WEBPACK_IMPORTED_MODULE_17__.diag,\n    metrics: _metrics_api__WEBPACK_IMPORTED_MODULE_18__.metrics,\n    propagation: _propagation_api__WEBPACK_IMPORTED_MODULE_19__.propagation,\n    trace: _trace_api__WEBPACK_IMPORTED_MODULE_20__.trace,\n});\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNpRTtBQUNqRTtBQUNtRTtBQUNuRTtBQUN5RDtBQUNaO0FBQzdDO0FBQ3NEO0FBQ1I7QUFDOUM7QUFDOEY7QUFDNUM7QUFDZ0I7QUFDUjtBQUNiO0FBQ0c7QUFDQztBQUNTO0FBQ3FDO0FBQ1M7QUFDeEc7QUFDQTtBQUN3QztBQUNOO0FBQ007QUFDUTtBQUNaO0FBQ3BDO0FBQ3NEO0FBQ3REO0FBQ0EsaUVBQWU7QUFDZixhQUFhLGtEQUFPO0FBQ3BCLFVBQVUsNENBQUk7QUFDZCxhQUFhLGtEQUFPO0FBQ3BCLGlCQUFpQiwwREFBVztBQUM1QixXQUFXLDhDQUFLO0FBQ2hCLENBQUMsRUFBQztBQUNGIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmV4cG9ydCB7IGJhZ2dhZ2VFbnRyeU1ldGFkYXRhRnJvbVN0cmluZyB9IGZyb20gJy4vYmFnZ2FnZS91dGlscyc7XG4vLyBDb250ZXh0IEFQSXNcbmV4cG9ydCB7IGNyZWF0ZUNvbnRleHRLZXksIFJPT1RfQ09OVEVYVCB9IGZyb20gJy4vY29udGV4dC9jb250ZXh0Jztcbi8vIERpYWcgQVBJc1xuZXhwb3J0IHsgRGlhZ0NvbnNvbGVMb2dnZXIgfSBmcm9tICcuL2RpYWcvY29uc29sZUxvZ2dlcic7XG5leHBvcnQgeyBEaWFnTG9nTGV2ZWwsIH0gZnJvbSAnLi9kaWFnL3R5cGVzJztcbi8vIE1ldHJpY3MgQVBJc1xuZXhwb3J0IHsgY3JlYXRlTm9vcE1ldGVyIH0gZnJvbSAnLi9tZXRyaWNzL05vb3BNZXRlcic7XG5leHBvcnQgeyBWYWx1ZVR5cGUsIH0gZnJvbSAnLi9tZXRyaWNzL01ldHJpYyc7XG4vLyBQcm9wYWdhdGlvbiBBUElzXG5leHBvcnQgeyBkZWZhdWx0VGV4dE1hcEdldHRlciwgZGVmYXVsdFRleHRNYXBTZXR0ZXIsIH0gZnJvbSAnLi9wcm9wYWdhdGlvbi9UZXh0TWFwUHJvcGFnYXRvcic7XG5leHBvcnQgeyBQcm94eVRyYWNlciB9IGZyb20gJy4vdHJhY2UvUHJveHlUcmFjZXInO1xuZXhwb3J0IHsgUHJveHlUcmFjZXJQcm92aWRlciB9IGZyb20gJy4vdHJhY2UvUHJveHlUcmFjZXJQcm92aWRlcic7XG5leHBvcnQgeyBTYW1wbGluZ0RlY2lzaW9uIH0gZnJvbSAnLi90cmFjZS9TYW1wbGluZ1Jlc3VsdCc7XG5leHBvcnQgeyBTcGFuS2luZCB9IGZyb20gJy4vdHJhY2Uvc3Bhbl9raW5kJztcbmV4cG9ydCB7IFNwYW5TdGF0dXNDb2RlIH0gZnJvbSAnLi90cmFjZS9zdGF0dXMnO1xuZXhwb3J0IHsgVHJhY2VGbGFncyB9IGZyb20gJy4vdHJhY2UvdHJhY2VfZmxhZ3MnO1xuZXhwb3J0IHsgY3JlYXRlVHJhY2VTdGF0ZSB9IGZyb20gJy4vdHJhY2UvaW50ZXJuYWwvdXRpbHMnO1xuZXhwb3J0IHsgaXNTcGFuQ29udGV4dFZhbGlkLCBpc1ZhbGlkVHJhY2VJZCwgaXNWYWxpZFNwYW5JZCwgfSBmcm9tICcuL3RyYWNlL3NwYW5jb250ZXh0LXV0aWxzJztcbmV4cG9ydCB7IElOVkFMSURfU1BBTklELCBJTlZBTElEX1RSQUNFSUQsIElOVkFMSURfU1BBTl9DT05URVhULCB9IGZyb20gJy4vdHJhY2UvaW52YWxpZC1zcGFuLWNvbnN0YW50cyc7XG4vLyBTcGxpdCBtb2R1bGUtbGV2ZWwgdmFyaWFibGUgZGVmaW5pdGlvbiBpbnRvIHNlcGFyYXRlIGZpbGVzIHRvIGFsbG93XG4vLyB0cmVlLXNoYWtpbmcgb24gZWFjaCBhcGkgaW5zdGFuY2UuXG5pbXBvcnQgeyBjb250ZXh0IH0gZnJvbSAnLi9jb250ZXh0LWFwaSc7XG5pbXBvcnQgeyBkaWFnIH0gZnJvbSAnLi9kaWFnLWFwaSc7XG5pbXBvcnQgeyBtZXRyaWNzIH0gZnJvbSAnLi9tZXRyaWNzLWFwaSc7XG5pbXBvcnQgeyBwcm9wYWdhdGlvbiB9IGZyb20gJy4vcHJvcGFnYXRpb24tYXBpJztcbmltcG9ydCB7IHRyYWNlIH0gZnJvbSAnLi90cmFjZS1hcGknO1xuLy8gTmFtZWQgZXhwb3J0LlxuZXhwb3J0IHsgY29udGV4dCwgZGlhZywgbWV0cmljcywgcHJvcGFnYXRpb24sIHRyYWNlIH07XG4vLyBEZWZhdWx0IGV4cG9ydC5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBjb250ZXh0OiBjb250ZXh0LFxuICAgIGRpYWc6IGRpYWcsXG4gICAgbWV0cmljczogbWV0cmljcyxcbiAgICBwcm9wYWdhdGlvbjogcHJvcGFnYXRpb24sXG4gICAgdHJhY2U6IHRyYWNlLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/internal/global-utils.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/internal/global-utils.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getGlobal: () => (/* binding */ getGlobal),\n/* harmony export */   registerGlobal: () => (/* binding */ registerGlobal),\n/* harmony export */   unregisterGlobal: () => (/* binding */ unregisterGlobal)\n/* harmony export */ });\n/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../platform */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/platform/node/globalThis.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../version */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/version.js\");\n/* harmony import */ var _semver__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./semver */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/internal/semver.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nvar major = _version__WEBPACK_IMPORTED_MODULE_0__.VERSION.split('.')[0];\nvar GLOBAL_OPENTELEMETRY_API_KEY = Symbol.for(\"opentelemetry.js.api.\" + major);\nvar _global = _platform__WEBPACK_IMPORTED_MODULE_1__._globalThis;\nfunction registerGlobal(type, instance, diag, allowOverride) {\n    var _a;\n    if (allowOverride === void 0) { allowOverride = false; }\n    var api = (_global[GLOBAL_OPENTELEMETRY_API_KEY] = (_a = _global[GLOBAL_OPENTELEMETRY_API_KEY]) !== null && _a !== void 0 ? _a : {\n        version: _version__WEBPACK_IMPORTED_MODULE_0__.VERSION,\n    });\n    if (!allowOverride && api[type]) {\n        // already registered an API of this type\n        var err = new Error(\"@opentelemetry/api: Attempted duplicate registration of API: \" + type);\n        diag.error(err.stack || err.message);\n        return false;\n    }\n    if (api.version !== _version__WEBPACK_IMPORTED_MODULE_0__.VERSION) {\n        // All registered APIs must be of the same version exactly\n        var err = new Error(\"@opentelemetry/api: Registration of version v\" + api.version + \" for \" + type + \" does not match previously registered API v\" + _version__WEBPACK_IMPORTED_MODULE_0__.VERSION);\n        diag.error(err.stack || err.message);\n        return false;\n    }\n    api[type] = instance;\n    diag.debug(\"@opentelemetry/api: Registered a global for \" + type + \" v\" + _version__WEBPACK_IMPORTED_MODULE_0__.VERSION + \".\");\n    return true;\n}\nfunction getGlobal(type) {\n    var _a, _b;\n    var globalVersion = (_a = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _a === void 0 ? void 0 : _a.version;\n    if (!globalVersion || !(0,_semver__WEBPACK_IMPORTED_MODULE_2__.isCompatible)(globalVersion)) {\n        return;\n    }\n    return (_b = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _b === void 0 ? void 0 : _b[type];\n}\nfunction unregisterGlobal(type, diag) {\n    diag.debug(\"@opentelemetry/api: Unregistering a global for \" + type + \" v\" + _version__WEBPACK_IMPORTED_MODULE_0__.VERSION + \".\");\n    var api = _global[GLOBAL_OPENTELEMETRY_API_KEY];\n    if (api) {\n        delete api[type];\n    }\n}\n//# sourceMappingURL=global-utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vaW50ZXJuYWwvZ2xvYmFsLXV0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUMwQztBQUNMO0FBQ0c7QUFDeEMsWUFBWSw2Q0FBTztBQUNuQjtBQUNBLGNBQWMsa0RBQVc7QUFDbEI7QUFDUDtBQUNBLG9DQUFvQztBQUNwQztBQUNBLGlCQUFpQiw2Q0FBTztBQUN4QixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLDZDQUFPO0FBQy9CO0FBQ0EsNkpBQTZKLDZDQUFPO0FBQ3BLO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEVBQThFLDZDQUFPO0FBQ3JGO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSwyQkFBMkIscURBQVk7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLGlGQUFpRiw2Q0FBTztBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvYXBpL2J1aWxkL2VzbS9pbnRlcm5hbC9nbG9iYWwtdXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IF9nbG9iYWxUaGlzIH0gZnJvbSAnLi4vcGxhdGZvcm0nO1xuaW1wb3J0IHsgVkVSU0lPTiB9IGZyb20gJy4uL3ZlcnNpb24nO1xuaW1wb3J0IHsgaXNDb21wYXRpYmxlIH0gZnJvbSAnLi9zZW12ZXInO1xudmFyIG1ham9yID0gVkVSU0lPTi5zcGxpdCgnLicpWzBdO1xudmFyIEdMT0JBTF9PUEVOVEVMRU1FVFJZX0FQSV9LRVkgPSBTeW1ib2wuZm9yKFwib3BlbnRlbGVtZXRyeS5qcy5hcGkuXCIgKyBtYWpvcik7XG52YXIgX2dsb2JhbCA9IF9nbG9iYWxUaGlzO1xuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyR2xvYmFsKHR5cGUsIGluc3RhbmNlLCBkaWFnLCBhbGxvd092ZXJyaWRlKSB7XG4gICAgdmFyIF9hO1xuICAgIGlmIChhbGxvd092ZXJyaWRlID09PSB2b2lkIDApIHsgYWxsb3dPdmVycmlkZSA9IGZhbHNlOyB9XG4gICAgdmFyIGFwaSA9IChfZ2xvYmFsW0dMT0JBTF9PUEVOVEVMRU1FVFJZX0FQSV9LRVldID0gKF9hID0gX2dsb2JhbFtHTE9CQUxfT1BFTlRFTEVNRVRSWV9BUElfS0VZXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDoge1xuICAgICAgICB2ZXJzaW9uOiBWRVJTSU9OLFxuICAgIH0pO1xuICAgIGlmICghYWxsb3dPdmVycmlkZSAmJiBhcGlbdHlwZV0pIHtcbiAgICAgICAgLy8gYWxyZWFkeSByZWdpc3RlcmVkIGFuIEFQSSBvZiB0aGlzIHR5cGVcbiAgICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcihcIkBvcGVudGVsZW1ldHJ5L2FwaTogQXR0ZW1wdGVkIGR1cGxpY2F0ZSByZWdpc3RyYXRpb24gb2YgQVBJOiBcIiArIHR5cGUpO1xuICAgICAgICBkaWFnLmVycm9yKGVyci5zdGFjayB8fCBlcnIubWVzc2FnZSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGFwaS52ZXJzaW9uICE9PSBWRVJTSU9OKSB7XG4gICAgICAgIC8vIEFsbCByZWdpc3RlcmVkIEFQSXMgbXVzdCBiZSBvZiB0aGUgc2FtZSB2ZXJzaW9uIGV4YWN0bHlcbiAgICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcihcIkBvcGVudGVsZW1ldHJ5L2FwaTogUmVnaXN0cmF0aW9uIG9mIHZlcnNpb24gdlwiICsgYXBpLnZlcnNpb24gKyBcIiBmb3IgXCIgKyB0eXBlICsgXCIgZG9lcyBub3QgbWF0Y2ggcHJldmlvdXNseSByZWdpc3RlcmVkIEFQSSB2XCIgKyBWRVJTSU9OKTtcbiAgICAgICAgZGlhZy5lcnJvcihlcnIuc3RhY2sgfHwgZXJyLm1lc3NhZ2UpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGFwaVt0eXBlXSA9IGluc3RhbmNlO1xuICAgIGRpYWcuZGVidWcoXCJAb3BlbnRlbGVtZXRyeS9hcGk6IFJlZ2lzdGVyZWQgYSBnbG9iYWwgZm9yIFwiICsgdHlwZSArIFwiIHZcIiArIFZFUlNJT04gKyBcIi5cIik7XG4gICAgcmV0dXJuIHRydWU7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0R2xvYmFsKHR5cGUpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIHZhciBnbG9iYWxWZXJzaW9uID0gKF9hID0gX2dsb2JhbFtHTE9CQUxfT1BFTlRFTEVNRVRSWV9BUElfS0VZXSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnZlcnNpb247XG4gICAgaWYgKCFnbG9iYWxWZXJzaW9uIHx8ICFpc0NvbXBhdGlibGUoZ2xvYmFsVmVyc2lvbikpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gKF9iID0gX2dsb2JhbFtHTE9CQUxfT1BFTlRFTEVNRVRSWV9BUElfS0VZXSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iW3R5cGVdO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHVucmVnaXN0ZXJHbG9iYWwodHlwZSwgZGlhZykge1xuICAgIGRpYWcuZGVidWcoXCJAb3BlbnRlbGVtZXRyeS9hcGk6IFVucmVnaXN0ZXJpbmcgYSBnbG9iYWwgZm9yIFwiICsgdHlwZSArIFwiIHZcIiArIFZFUlNJT04gKyBcIi5cIik7XG4gICAgdmFyIGFwaSA9IF9nbG9iYWxbR0xPQkFMX09QRU5URUxFTUVUUllfQVBJX0tFWV07XG4gICAgaWYgKGFwaSkge1xuICAgICAgICBkZWxldGUgYXBpW3R5cGVdO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdsb2JhbC11dGlscy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/internal/global-utils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/internal/semver.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/internal/semver.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _makeCompatibilityCheck: () => (/* binding */ _makeCompatibilityCheck),\n/* harmony export */   isCompatible: () => (/* binding */ isCompatible)\n/* harmony export */ });\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../version */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/version.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar re = /^(\\d+)\\.(\\d+)\\.(\\d+)(-(.+))?$/;\n/**\n * Create a function to test an API version to see if it is compatible with the provided ownVersion.\n *\n * The returned function has the following semantics:\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param ownVersion version which should be checked against\n */\nfunction _makeCompatibilityCheck(ownVersion) {\n    var acceptedVersions = new Set([ownVersion]);\n    var rejectedVersions = new Set();\n    var myVersionMatch = ownVersion.match(re);\n    if (!myVersionMatch) {\n        // we cannot guarantee compatibility so we always return noop\n        return function () { return false; };\n    }\n    var ownVersionParsed = {\n        major: +myVersionMatch[1],\n        minor: +myVersionMatch[2],\n        patch: +myVersionMatch[3],\n        prerelease: myVersionMatch[4],\n    };\n    // if ownVersion has a prerelease tag, versions must match exactly\n    if (ownVersionParsed.prerelease != null) {\n        return function isExactmatch(globalVersion) {\n            return globalVersion === ownVersion;\n        };\n    }\n    function _reject(v) {\n        rejectedVersions.add(v);\n        return false;\n    }\n    function _accept(v) {\n        acceptedVersions.add(v);\n        return true;\n    }\n    return function isCompatible(globalVersion) {\n        if (acceptedVersions.has(globalVersion)) {\n            return true;\n        }\n        if (rejectedVersions.has(globalVersion)) {\n            return false;\n        }\n        var globalVersionMatch = globalVersion.match(re);\n        if (!globalVersionMatch) {\n            // cannot parse other version\n            // we cannot guarantee compatibility so we always noop\n            return _reject(globalVersion);\n        }\n        var globalVersionParsed = {\n            major: +globalVersionMatch[1],\n            minor: +globalVersionMatch[2],\n            patch: +globalVersionMatch[3],\n            prerelease: globalVersionMatch[4],\n        };\n        // if globalVersion has a prerelease tag, versions must match exactly\n        if (globalVersionParsed.prerelease != null) {\n            return _reject(globalVersion);\n        }\n        // major versions must match\n        if (ownVersionParsed.major !== globalVersionParsed.major) {\n            return _reject(globalVersion);\n        }\n        if (ownVersionParsed.major === 0) {\n            if (ownVersionParsed.minor === globalVersionParsed.minor &&\n                ownVersionParsed.patch <= globalVersionParsed.patch) {\n                return _accept(globalVersion);\n            }\n            return _reject(globalVersion);\n        }\n        if (ownVersionParsed.minor <= globalVersionParsed.minor) {\n            return _accept(globalVersion);\n        }\n        return _reject(globalVersion);\n    };\n}\n/**\n * Test an API version to see if it is compatible with this API.\n *\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param version version of the API requesting an instance of the global API\n */\nvar isCompatible = _makeCompatibilityCheck(_version__WEBPACK_IMPORTED_MODULE_0__.VERSION);\n//# sourceMappingURL=semver.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/internal/semver.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/metrics-api.js":
/*!******************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/metrics-api.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   metrics: () => (/* binding */ metrics)\n/* harmony export */ });\n/* harmony import */ var _api_metrics__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api/metrics */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/api/metrics.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\n\n/** Entrypoint for metrics API */\nvar metrics = _api_metrics__WEBPACK_IMPORTED_MODULE_0__.MetricsAPI.getInstance();\n//# sourceMappingURL=metrics-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vbWV0cmljcy1hcGkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQzJDO0FBQzNDO0FBQ08sY0FBYyxvREFBVTtBQUMvQiIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9hcGkvYnVpbGQvZXNtL21ldHJpY3MtYXBpLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vLyBTcGxpdCBtb2R1bGUtbGV2ZWwgdmFyaWFibGUgZGVmaW5pdGlvbiBpbnRvIHNlcGFyYXRlIGZpbGVzIHRvIGFsbG93XG4vLyB0cmVlLXNoYWtpbmcgb24gZWFjaCBhcGkgaW5zdGFuY2UuXG5pbXBvcnQgeyBNZXRyaWNzQVBJIH0gZnJvbSAnLi9hcGkvbWV0cmljcyc7XG4vKiogRW50cnlwb2ludCBmb3IgbWV0cmljcyBBUEkgKi9cbmV4cG9ydCB2YXIgbWV0cmljcyA9IE1ldHJpY3NBUEkuZ2V0SW5zdGFuY2UoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1ldHJpY3MtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/metrics-api.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/metrics/Metric.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/metrics/Metric.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ValueType: () => (/* binding */ ValueType)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** The Type of value. It describes how the data is reported. */\nvar ValueType;\n(function (ValueType) {\n    ValueType[ValueType[\"INT\"] = 0] = \"INT\";\n    ValueType[ValueType[\"DOUBLE\"] = 1] = \"DOUBLE\";\n})(ValueType || (ValueType = {}));\n//# sourceMappingURL=Metric.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vbWV0cmljcy9NZXRyaWMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxDQUFDLDhCQUE4QjtBQUMvQiIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9hcGkvYnVpbGQvZXNtL21ldHJpY3MvTWV0cmljLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKiogVGhlIFR5cGUgb2YgdmFsdWUuIEl0IGRlc2NyaWJlcyBob3cgdGhlIGRhdGEgaXMgcmVwb3J0ZWQuICovXG5leHBvcnQgdmFyIFZhbHVlVHlwZTtcbihmdW5jdGlvbiAoVmFsdWVUeXBlKSB7XG4gICAgVmFsdWVUeXBlW1ZhbHVlVHlwZVtcIklOVFwiXSA9IDBdID0gXCJJTlRcIjtcbiAgICBWYWx1ZVR5cGVbVmFsdWVUeXBlW1wiRE9VQkxFXCJdID0gMV0gPSBcIkRPVUJMRVwiO1xufSkoVmFsdWVUeXBlIHx8IChWYWx1ZVR5cGUgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TWV0cmljLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/metrics/Metric.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/metrics/NoopMeter.js":
/*!************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/metrics/NoopMeter.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NOOP_COUNTER_METRIC: () => (/* binding */ NOOP_COUNTER_METRIC),\n/* harmony export */   NOOP_GAUGE_METRIC: () => (/* binding */ NOOP_GAUGE_METRIC),\n/* harmony export */   NOOP_HISTOGRAM_METRIC: () => (/* binding */ NOOP_HISTOGRAM_METRIC),\n/* harmony export */   NOOP_METER: () => (/* binding */ NOOP_METER),\n/* harmony export */   NOOP_OBSERVABLE_COUNTER_METRIC: () => (/* binding */ NOOP_OBSERVABLE_COUNTER_METRIC),\n/* harmony export */   NOOP_OBSERVABLE_GAUGE_METRIC: () => (/* binding */ NOOP_OBSERVABLE_GAUGE_METRIC),\n/* harmony export */   NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC: () => (/* binding */ NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC),\n/* harmony export */   NOOP_UP_DOWN_COUNTER_METRIC: () => (/* binding */ NOOP_UP_DOWN_COUNTER_METRIC),\n/* harmony export */   NoopCounterMetric: () => (/* binding */ NoopCounterMetric),\n/* harmony export */   NoopGaugeMetric: () => (/* binding */ NoopGaugeMetric),\n/* harmony export */   NoopHistogramMetric: () => (/* binding */ NoopHistogramMetric),\n/* harmony export */   NoopMeter: () => (/* binding */ NoopMeter),\n/* harmony export */   NoopMetric: () => (/* binding */ NoopMetric),\n/* harmony export */   NoopObservableCounterMetric: () => (/* binding */ NoopObservableCounterMetric),\n/* harmony export */   NoopObservableGaugeMetric: () => (/* binding */ NoopObservableGaugeMetric),\n/* harmony export */   NoopObservableMetric: () => (/* binding */ NoopObservableMetric),\n/* harmony export */   NoopObservableUpDownCounterMetric: () => (/* binding */ NoopObservableUpDownCounterMetric),\n/* harmony export */   NoopUpDownCounterMetric: () => (/* binding */ NoopUpDownCounterMetric),\n/* harmony export */   createNoopMeter: () => (/* binding */ createNoopMeter)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * NoopMeter is a noop implementation of the {@link Meter} interface. It reuses\n * constant NoopMetrics for all of its methods.\n */\nvar NoopMeter = /** @class */ (function () {\n    function NoopMeter() {\n    }\n    /**\n     * @see {@link Meter.createGauge}\n     */\n    NoopMeter.prototype.createGauge = function (_name, _options) {\n        return NOOP_GAUGE_METRIC;\n    };\n    /**\n     * @see {@link Meter.createHistogram}\n     */\n    NoopMeter.prototype.createHistogram = function (_name, _options) {\n        return NOOP_HISTOGRAM_METRIC;\n    };\n    /**\n     * @see {@link Meter.createCounter}\n     */\n    NoopMeter.prototype.createCounter = function (_name, _options) {\n        return NOOP_COUNTER_METRIC;\n    };\n    /**\n     * @see {@link Meter.createUpDownCounter}\n     */\n    NoopMeter.prototype.createUpDownCounter = function (_name, _options) {\n        return NOOP_UP_DOWN_COUNTER_METRIC;\n    };\n    /**\n     * @see {@link Meter.createObservableGauge}\n     */\n    NoopMeter.prototype.createObservableGauge = function (_name, _options) {\n        return NOOP_OBSERVABLE_GAUGE_METRIC;\n    };\n    /**\n     * @see {@link Meter.createObservableCounter}\n     */\n    NoopMeter.prototype.createObservableCounter = function (_name, _options) {\n        return NOOP_OBSERVABLE_COUNTER_METRIC;\n    };\n    /**\n     * @see {@link Meter.createObservableUpDownCounter}\n     */\n    NoopMeter.prototype.createObservableUpDownCounter = function (_name, _options) {\n        return NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC;\n    };\n    /**\n     * @see {@link Meter.addBatchObservableCallback}\n     */\n    NoopMeter.prototype.addBatchObservableCallback = function (_callback, _observables) { };\n    /**\n     * @see {@link Meter.removeBatchObservableCallback}\n     */\n    NoopMeter.prototype.removeBatchObservableCallback = function (_callback) { };\n    return NoopMeter;\n}());\n\nvar NoopMetric = /** @class */ (function () {\n    function NoopMetric() {\n    }\n    return NoopMetric;\n}());\n\nvar NoopCounterMetric = /** @class */ (function (_super) {\n    __extends(NoopCounterMetric, _super);\n    function NoopCounterMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NoopCounterMetric.prototype.add = function (_value, _attributes) { };\n    return NoopCounterMetric;\n}(NoopMetric));\n\nvar NoopUpDownCounterMetric = /** @class */ (function (_super) {\n    __extends(NoopUpDownCounterMetric, _super);\n    function NoopUpDownCounterMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NoopUpDownCounterMetric.prototype.add = function (_value, _attributes) { };\n    return NoopUpDownCounterMetric;\n}(NoopMetric));\n\nvar NoopGaugeMetric = /** @class */ (function (_super) {\n    __extends(NoopGaugeMetric, _super);\n    function NoopGaugeMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NoopGaugeMetric.prototype.record = function (_value, _attributes) { };\n    return NoopGaugeMetric;\n}(NoopMetric));\n\nvar NoopHistogramMetric = /** @class */ (function (_super) {\n    __extends(NoopHistogramMetric, _super);\n    function NoopHistogramMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NoopHistogramMetric.prototype.record = function (_value, _attributes) { };\n    return NoopHistogramMetric;\n}(NoopMetric));\n\nvar NoopObservableMetric = /** @class */ (function () {\n    function NoopObservableMetric() {\n    }\n    NoopObservableMetric.prototype.addCallback = function (_callback) { };\n    NoopObservableMetric.prototype.removeCallback = function (_callback) { };\n    return NoopObservableMetric;\n}());\n\nvar NoopObservableCounterMetric = /** @class */ (function (_super) {\n    __extends(NoopObservableCounterMetric, _super);\n    function NoopObservableCounterMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return NoopObservableCounterMetric;\n}(NoopObservableMetric));\n\nvar NoopObservableGaugeMetric = /** @class */ (function (_super) {\n    __extends(NoopObservableGaugeMetric, _super);\n    function NoopObservableGaugeMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return NoopObservableGaugeMetric;\n}(NoopObservableMetric));\n\nvar NoopObservableUpDownCounterMetric = /** @class */ (function (_super) {\n    __extends(NoopObservableUpDownCounterMetric, _super);\n    function NoopObservableUpDownCounterMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return NoopObservableUpDownCounterMetric;\n}(NoopObservableMetric));\n\nvar NOOP_METER = new NoopMeter();\n// Synchronous instruments\nvar NOOP_COUNTER_METRIC = new NoopCounterMetric();\nvar NOOP_GAUGE_METRIC = new NoopGaugeMetric();\nvar NOOP_HISTOGRAM_METRIC = new NoopHistogramMetric();\nvar NOOP_UP_DOWN_COUNTER_METRIC = new NoopUpDownCounterMetric();\n// Asynchronous instruments\nvar NOOP_OBSERVABLE_COUNTER_METRIC = new NoopObservableCounterMetric();\nvar NOOP_OBSERVABLE_GAUGE_METRIC = new NoopObservableGaugeMetric();\nvar NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC = new NoopObservableUpDownCounterMetric();\n/**\n * Create a no-op Meter\n */\nfunction createNoopMeter() {\n    return NOOP_METER;\n}\n//# sourceMappingURL=NoopMeter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/metrics/NoopMeter.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/metrics/NoopMeterProvider.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/metrics/NoopMeterProvider.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NOOP_METER_PROVIDER: () => (/* binding */ NOOP_METER_PROVIDER),\n/* harmony export */   NoopMeterProvider: () => (/* binding */ NoopMeterProvider)\n/* harmony export */ });\n/* harmony import */ var _NoopMeter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NoopMeter */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/metrics/NoopMeter.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * An implementation of the {@link MeterProvider} which returns an impotent Meter\n * for all calls to `getMeter`\n */\nvar NoopMeterProvider = /** @class */ (function () {\n    function NoopMeterProvider() {\n    }\n    NoopMeterProvider.prototype.getMeter = function (_name, _version, _options) {\n        return _NoopMeter__WEBPACK_IMPORTED_MODULE_0__.NOOP_METER;\n    };\n    return NoopMeterProvider;\n}());\n\nvar NOOP_METER_PROVIDER = new NoopMeterProvider();\n//# sourceMappingURL=NoopMeterProvider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vbWV0cmljcy9Ob29wTWV0ZXJQcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDeUM7QUFDekM7QUFDQSw2QkFBNkIscUJBQXFCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsa0RBQVU7QUFDekI7QUFDQTtBQUNBLENBQUM7QUFDNEI7QUFDdEI7QUFDUCIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9hcGkvYnVpbGQvZXNtL21ldHJpY3MvTm9vcE1ldGVyUHJvdmlkZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IE5PT1BfTUVURVIgfSBmcm9tICcuL05vb3BNZXRlcic7XG4vKipcbiAqIEFuIGltcGxlbWVudGF0aW9uIG9mIHRoZSB7QGxpbmsgTWV0ZXJQcm92aWRlcn0gd2hpY2ggcmV0dXJucyBhbiBpbXBvdGVudCBNZXRlclxuICogZm9yIGFsbCBjYWxscyB0byBgZ2V0TWV0ZXJgXG4gKi9cbnZhciBOb29wTWV0ZXJQcm92aWRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBOb29wTWV0ZXJQcm92aWRlcigpIHtcbiAgICB9XG4gICAgTm9vcE1ldGVyUHJvdmlkZXIucHJvdG90eXBlLmdldE1ldGVyID0gZnVuY3Rpb24gKF9uYW1lLCBfdmVyc2lvbiwgX29wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIE5PT1BfTUVURVI7XG4gICAgfTtcbiAgICByZXR1cm4gTm9vcE1ldGVyUHJvdmlkZXI7XG59KCkpO1xuZXhwb3J0IHsgTm9vcE1ldGVyUHJvdmlkZXIgfTtcbmV4cG9ydCB2YXIgTk9PUF9NRVRFUl9QUk9WSURFUiA9IG5ldyBOb29wTWV0ZXJQcm92aWRlcigpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Tm9vcE1ldGVyUHJvdmlkZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/metrics/NoopMeterProvider.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/platform/node/globalThis.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/platform/node/globalThis.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _globalThis: () => (/* binding */ _globalThis)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** only globals that common to node and browsers are allowed */\n// eslint-disable-next-line node/no-unsupported-features/es-builtins\nvar _globalThis = typeof globalThis === 'object' ? globalThis : global;\n//# sourceMappingURL=globalThis.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vcGxhdGZvcm0vbm9kZS9nbG9iYWxUaGlzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9hcGkvYnVpbGQvZXNtL3BsYXRmb3JtL25vZGUvZ2xvYmFsVGhpcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqIG9ubHkgZ2xvYmFscyB0aGF0IGNvbW1vbiB0byBub2RlIGFuZCBicm93c2VycyBhcmUgYWxsb3dlZCAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vZGUvbm8tdW5zdXBwb3J0ZWQtZmVhdHVyZXMvZXMtYnVpbHRpbnNcbmV4cG9ydCB2YXIgX2dsb2JhbFRoaXMgPSB0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcgPyBnbG9iYWxUaGlzIDogZ2xvYmFsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2xvYmFsVGhpcy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/platform/node/globalThis.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/propagation-api.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/propagation-api.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   propagation: () => (/* binding */ propagation)\n/* harmony export */ });\n/* harmony import */ var _api_propagation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api/propagation */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/api/propagation.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\n\n/** Entrypoint for propagation API */\nvar propagation = _api_propagation__WEBPACK_IMPORTED_MODULE_0__.PropagationAPI.getInstance();\n//# sourceMappingURL=propagation-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vcHJvcGFnYXRpb24tYXBpLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNtRDtBQUNuRDtBQUNPLGtCQUFrQiw0REFBYztBQUN2QyIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9hcGkvYnVpbGQvZXNtL3Byb3BhZ2F0aW9uLWFwaS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLy8gU3BsaXQgbW9kdWxlLWxldmVsIHZhcmlhYmxlIGRlZmluaXRpb24gaW50byBzZXBhcmF0ZSBmaWxlcyB0byBhbGxvd1xuLy8gdHJlZS1zaGFraW5nIG9uIGVhY2ggYXBpIGluc3RhbmNlLlxuaW1wb3J0IHsgUHJvcGFnYXRpb25BUEkgfSBmcm9tICcuL2FwaS9wcm9wYWdhdGlvbic7XG4vKiogRW50cnlwb2ludCBmb3IgcHJvcGFnYXRpb24gQVBJICovXG5leHBvcnQgdmFyIHByb3BhZ2F0aW9uID0gUHJvcGFnYXRpb25BUEkuZ2V0SW5zdGFuY2UoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3BhZ2F0aW9uLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/propagation-api.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/propagation/NoopTextMapPropagator.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/propagation/NoopTextMapPropagator.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NoopTextMapPropagator: () => (/* binding */ NoopTextMapPropagator)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * No-op implementations of {@link TextMapPropagator}.\n */\nvar NoopTextMapPropagator = /** @class */ (function () {\n    function NoopTextMapPropagator() {\n    }\n    /** Noop inject function does nothing */\n    NoopTextMapPropagator.prototype.inject = function (_context, _carrier) { };\n    /** Noop extract function does nothing and returns the input context */\n    NoopTextMapPropagator.prototype.extract = function (context, _carrier) {\n        return context;\n    };\n    NoopTextMapPropagator.prototype.fields = function () {\n        return [];\n    };\n    return NoopTextMapPropagator;\n}());\n\n//# sourceMappingURL=NoopTextMapPropagator.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vcHJvcGFnYXRpb24vTm9vcFRleHRNYXBQcm9wYWdhdG9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qix3QkFBd0I7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDZ0M7QUFDakMiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvYXBpL2J1aWxkL2VzbS9wcm9wYWdhdGlvbi9Ob29wVGV4dE1hcFByb3BhZ2F0b3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogTm8tb3AgaW1wbGVtZW50YXRpb25zIG9mIHtAbGluayBUZXh0TWFwUHJvcGFnYXRvcn0uXG4gKi9cbnZhciBOb29wVGV4dE1hcFByb3BhZ2F0b3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTm9vcFRleHRNYXBQcm9wYWdhdG9yKCkge1xuICAgIH1cbiAgICAvKiogTm9vcCBpbmplY3QgZnVuY3Rpb24gZG9lcyBub3RoaW5nICovXG4gICAgTm9vcFRleHRNYXBQcm9wYWdhdG9yLnByb3RvdHlwZS5pbmplY3QgPSBmdW5jdGlvbiAoX2NvbnRleHQsIF9jYXJyaWVyKSB7IH07XG4gICAgLyoqIE5vb3AgZXh0cmFjdCBmdW5jdGlvbiBkb2VzIG5vdGhpbmcgYW5kIHJldHVybnMgdGhlIGlucHV0IGNvbnRleHQgKi9cbiAgICBOb29wVGV4dE1hcFByb3BhZ2F0b3IucHJvdG90eXBlLmV4dHJhY3QgPSBmdW5jdGlvbiAoY29udGV4dCwgX2NhcnJpZXIpIHtcbiAgICAgICAgcmV0dXJuIGNvbnRleHQ7XG4gICAgfTtcbiAgICBOb29wVGV4dE1hcFByb3BhZ2F0b3IucHJvdG90eXBlLmZpZWxkcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH07XG4gICAgcmV0dXJuIE5vb3BUZXh0TWFwUHJvcGFnYXRvcjtcbn0oKSk7XG5leHBvcnQgeyBOb29wVGV4dE1hcFByb3BhZ2F0b3IgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU5vb3BUZXh0TWFwUHJvcGFnYXRvci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/propagation/NoopTextMapPropagator.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/propagation/TextMapPropagator.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/propagation/TextMapPropagator.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultTextMapGetter: () => (/* binding */ defaultTextMapGetter),\n/* harmony export */   defaultTextMapSetter: () => (/* binding */ defaultTextMapSetter)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar defaultTextMapGetter = {\n    get: function (carrier, key) {\n        if (carrier == null) {\n            return undefined;\n        }\n        return carrier[key];\n    },\n    keys: function (carrier) {\n        if (carrier == null) {\n            return [];\n        }\n        return Object.keys(carrier);\n    },\n};\nvar defaultTextMapSetter = {\n    set: function (carrier, key, value) {\n        if (carrier == null) {\n            return;\n        }\n        carrier[key] = value;\n    },\n};\n//# sourceMappingURL=TextMapPropagator.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vcHJvcGFnYXRpb24vVGV4dE1hcFByb3BhZ2F0b3IuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vcHJvcGFnYXRpb24vVGV4dE1hcFByb3BhZ2F0b3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmV4cG9ydCB2YXIgZGVmYXVsdFRleHRNYXBHZXR0ZXIgPSB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoY2Fycmllciwga2V5KSB7XG4gICAgICAgIGlmIChjYXJyaWVyID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNhcnJpZXJba2V5XTtcbiAgICB9LFxuICAgIGtleXM6IGZ1bmN0aW9uIChjYXJyaWVyKSB7XG4gICAgICAgIGlmIChjYXJyaWVyID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMoY2Fycmllcik7XG4gICAgfSxcbn07XG5leHBvcnQgdmFyIGRlZmF1bHRUZXh0TWFwU2V0dGVyID0ge1xuICAgIHNldDogZnVuY3Rpb24gKGNhcnJpZXIsIGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGNhcnJpZXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNhcnJpZXJba2V5XSA9IHZhbHVlO1xuICAgIH0sXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VGV4dE1hcFByb3BhZ2F0b3IuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/propagation/TextMapPropagator.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/trace-api.js":
/*!****************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace-api.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   trace: () => (/* binding */ trace)\n/* harmony export */ });\n/* harmony import */ var _api_trace__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api/trace */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/api/trace.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\n\n/** Entrypoint for trace API */\nvar trace = _api_trace__WEBPACK_IMPORTED_MODULE_0__.TraceAPI.getInstance();\n//# sourceMappingURL=trace-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vdHJhY2UtYXBpLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN1QztBQUN2QztBQUNPLFlBQVksZ0RBQVE7QUFDM0IiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvYXBpL2J1aWxkL2VzbS90cmFjZS1hcGkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8vIFNwbGl0IG1vZHVsZS1sZXZlbCB2YXJpYWJsZSBkZWZpbml0aW9uIGludG8gc2VwYXJhdGUgZmlsZXMgdG8gYWxsb3dcbi8vIHRyZWUtc2hha2luZyBvbiBlYWNoIGFwaSBpbnN0YW5jZS5cbmltcG9ydCB7IFRyYWNlQVBJIH0gZnJvbSAnLi9hcGkvdHJhY2UnO1xuLyoqIEVudHJ5cG9pbnQgZm9yIHRyYWNlIEFQSSAqL1xuZXhwb3J0IHZhciB0cmFjZSA9IFRyYWNlQVBJLmdldEluc3RhbmNlKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmFjZS1hcGkuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/trace-api.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NonRecordingSpan: () => (/* binding */ NonRecordingSpan)\n/* harmony export */ });\n/* harmony import */ var _invalid_span_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./invalid-span-constants */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The NonRecordingSpan is the default {@link Span} that is used when no Span\n * implementation is available. All operations are no-op including context\n * propagation.\n */\nvar NonRecordingSpan = /** @class */ (function () {\n    function NonRecordingSpan(_spanContext) {\n        if (_spanContext === void 0) { _spanContext = _invalid_span_constants__WEBPACK_IMPORTED_MODULE_0__.INVALID_SPAN_CONTEXT; }\n        this._spanContext = _spanContext;\n    }\n    // Returns a SpanContext.\n    NonRecordingSpan.prototype.spanContext = function () {\n        return this._spanContext;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.setAttribute = function (_key, _value) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.setAttributes = function (_attributes) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.addEvent = function (_name, _attributes) {\n        return this;\n    };\n    NonRecordingSpan.prototype.addLink = function (_link) {\n        return this;\n    };\n    NonRecordingSpan.prototype.addLinks = function (_links) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.setStatus = function (_status) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.updateName = function (_name) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.end = function (_endTime) { };\n    // isRecording always returns false for NonRecordingSpan.\n    NonRecordingSpan.prototype.isRecording = function () {\n        return false;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.recordException = function (_exception, _time) { };\n    return NonRecordingSpan;\n}());\n\n//# sourceMappingURL=NonRecordingSpan.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vdHJhY2UvTm9uUmVjb3JkaW5nU3Bhbi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNnRTtBQUNoRTtBQUNBLHdDQUF3QyxZQUFZO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsZUFBZSx5RUFBb0I7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDMkI7QUFDNUIiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvYXBpL2J1aWxkL2VzbS90cmFjZS9Ob25SZWNvcmRpbmdTcGFuLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBJTlZBTElEX1NQQU5fQ09OVEVYVCB9IGZyb20gJy4vaW52YWxpZC1zcGFuLWNvbnN0YW50cyc7XG4vKipcbiAqIFRoZSBOb25SZWNvcmRpbmdTcGFuIGlzIHRoZSBkZWZhdWx0IHtAbGluayBTcGFufSB0aGF0IGlzIHVzZWQgd2hlbiBubyBTcGFuXG4gKiBpbXBsZW1lbnRhdGlvbiBpcyBhdmFpbGFibGUuIEFsbCBvcGVyYXRpb25zIGFyZSBuby1vcCBpbmNsdWRpbmcgY29udGV4dFxuICogcHJvcGFnYXRpb24uXG4gKi9cbnZhciBOb25SZWNvcmRpbmdTcGFuID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE5vblJlY29yZGluZ1NwYW4oX3NwYW5Db250ZXh0KSB7XG4gICAgICAgIGlmIChfc3BhbkNvbnRleHQgPT09IHZvaWQgMCkgeyBfc3BhbkNvbnRleHQgPSBJTlZBTElEX1NQQU5fQ09OVEVYVDsgfVxuICAgICAgICB0aGlzLl9zcGFuQ29udGV4dCA9IF9zcGFuQ29udGV4dDtcbiAgICB9XG4gICAgLy8gUmV0dXJucyBhIFNwYW5Db250ZXh0LlxuICAgIE5vblJlY29yZGluZ1NwYW4ucHJvdG90eXBlLnNwYW5Db250ZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3BhbkNvbnRleHQ7XG4gICAgfTtcbiAgICAvLyBCeSBkZWZhdWx0IGRvZXMgbm90aGluZ1xuICAgIE5vblJlY29yZGluZ1NwYW4ucHJvdG90eXBlLnNldEF0dHJpYnV0ZSA9IGZ1bmN0aW9uIChfa2V5LCBfdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvLyBCeSBkZWZhdWx0IGRvZXMgbm90aGluZ1xuICAgIE5vblJlY29yZGluZ1NwYW4ucHJvdG90eXBlLnNldEF0dHJpYnV0ZXMgPSBmdW5jdGlvbiAoX2F0dHJpYnV0ZXMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvLyBCeSBkZWZhdWx0IGRvZXMgbm90aGluZ1xuICAgIE5vblJlY29yZGluZ1NwYW4ucHJvdG90eXBlLmFkZEV2ZW50ID0gZnVuY3Rpb24gKF9uYW1lLCBfYXR0cmlidXRlcykge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIE5vblJlY29yZGluZ1NwYW4ucHJvdG90eXBlLmFkZExpbmsgPSBmdW5jdGlvbiAoX2xpbmspIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBOb25SZWNvcmRpbmdTcGFuLnByb3RvdHlwZS5hZGRMaW5rcyA9IGZ1bmN0aW9uIChfbGlua3MpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvLyBCeSBkZWZhdWx0IGRvZXMgbm90aGluZ1xuICAgIE5vblJlY29yZGluZ1NwYW4ucHJvdG90eXBlLnNldFN0YXR1cyA9IGZ1bmN0aW9uIChfc3RhdHVzKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLy8gQnkgZGVmYXVsdCBkb2VzIG5vdGhpbmdcbiAgICBOb25SZWNvcmRpbmdTcGFuLnByb3RvdHlwZS51cGRhdGVOYW1lID0gZnVuY3Rpb24gKF9uYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLy8gQnkgZGVmYXVsdCBkb2VzIG5vdGhpbmdcbiAgICBOb25SZWNvcmRpbmdTcGFuLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbiAoX2VuZFRpbWUpIHsgfTtcbiAgICAvLyBpc1JlY29yZGluZyBhbHdheXMgcmV0dXJucyBmYWxzZSBmb3IgTm9uUmVjb3JkaW5nU3Bhbi5cbiAgICBOb25SZWNvcmRpbmdTcGFuLnByb3RvdHlwZS5pc1JlY29yZGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgLy8gQnkgZGVmYXVsdCBkb2VzIG5vdGhpbmdcbiAgICBOb25SZWNvcmRpbmdTcGFuLnByb3RvdHlwZS5yZWNvcmRFeGNlcHRpb24gPSBmdW5jdGlvbiAoX2V4Y2VwdGlvbiwgX3RpbWUpIHsgfTtcbiAgICByZXR1cm4gTm9uUmVjb3JkaW5nU3Bhbjtcbn0oKSk7XG5leHBvcnQgeyBOb25SZWNvcmRpbmdTcGFuIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Ob25SZWNvcmRpbmdTcGFuLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/NoopTracer.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/NoopTracer.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NoopTracer: () => (/* binding */ NoopTracer)\n/* harmony export */ });\n/* harmony import */ var _api_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../api/context */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/api/context.js\");\n/* harmony import */ var _trace_context_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../trace/context-utils */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/context-utils.js\");\n/* harmony import */ var _NonRecordingSpan__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./NonRecordingSpan */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js\");\n/* harmony import */ var _spancontext_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./spancontext-utils */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\nvar contextApi = _api_context__WEBPACK_IMPORTED_MODULE_0__.ContextAPI.getInstance();\n/**\n * No-op implementations of {@link Tracer}.\n */\nvar NoopTracer = /** @class */ (function () {\n    function NoopTracer() {\n    }\n    // startSpan starts a noop span.\n    NoopTracer.prototype.startSpan = function (name, options, context) {\n        if (context === void 0) { context = contextApi.active(); }\n        var root = Boolean(options === null || options === void 0 ? void 0 : options.root);\n        if (root) {\n            return new _NonRecordingSpan__WEBPACK_IMPORTED_MODULE_1__.NonRecordingSpan();\n        }\n        var parentFromContext = context && (0,_trace_context_utils__WEBPACK_IMPORTED_MODULE_2__.getSpanContext)(context);\n        if (isSpanContext(parentFromContext) &&\n            (0,_spancontext_utils__WEBPACK_IMPORTED_MODULE_3__.isSpanContextValid)(parentFromContext)) {\n            return new _NonRecordingSpan__WEBPACK_IMPORTED_MODULE_1__.NonRecordingSpan(parentFromContext);\n        }\n        else {\n            return new _NonRecordingSpan__WEBPACK_IMPORTED_MODULE_1__.NonRecordingSpan();\n        }\n    };\n    NoopTracer.prototype.startActiveSpan = function (name, arg2, arg3, arg4) {\n        var opts;\n        var ctx;\n        var fn;\n        if (arguments.length < 2) {\n            return;\n        }\n        else if (arguments.length === 2) {\n            fn = arg2;\n        }\n        else if (arguments.length === 3) {\n            opts = arg2;\n            fn = arg3;\n        }\n        else {\n            opts = arg2;\n            ctx = arg3;\n            fn = arg4;\n        }\n        var parentContext = ctx !== null && ctx !== void 0 ? ctx : contextApi.active();\n        var span = this.startSpan(name, opts, parentContext);\n        var contextWithSpanSet = (0,_trace_context_utils__WEBPACK_IMPORTED_MODULE_2__.setSpan)(parentContext, span);\n        return contextApi.with(contextWithSpanSet, fn, undefined, span);\n    };\n    return NoopTracer;\n}());\n\nfunction isSpanContext(spanContext) {\n    return (typeof spanContext === 'object' &&\n        typeof spanContext['spanId'] === 'string' &&\n        typeof spanContext['traceId'] === 'string' &&\n        typeof spanContext['traceFlags'] === 'number');\n}\n//# sourceMappingURL=NoopTracer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vdHJhY2UvTm9vcFRyYWNlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUM0QztBQUNxQjtBQUNYO0FBQ0c7QUFDekQsaUJBQWlCLG9EQUFVO0FBQzNCO0FBQ0EsNkJBQTZCLGFBQWE7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQSx1QkFBdUIsK0RBQWdCO0FBQ3ZDO0FBQ0EsMkNBQTJDLG9FQUFjO0FBQ3pEO0FBQ0EsWUFBWSxzRUFBa0I7QUFDOUIsdUJBQXVCLCtEQUFnQjtBQUN2QztBQUNBO0FBQ0EsdUJBQXVCLCtEQUFnQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLDZEQUFPO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDcUI7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvYXBpL2J1aWxkL2VzbS90cmFjZS9Ob29wVHJhY2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBDb250ZXh0QVBJIH0gZnJvbSAnLi4vYXBpL2NvbnRleHQnO1xuaW1wb3J0IHsgZ2V0U3BhbkNvbnRleHQsIHNldFNwYW4gfSBmcm9tICcuLi90cmFjZS9jb250ZXh0LXV0aWxzJztcbmltcG9ydCB7IE5vblJlY29yZGluZ1NwYW4gfSBmcm9tICcuL05vblJlY29yZGluZ1NwYW4nO1xuaW1wb3J0IHsgaXNTcGFuQ29udGV4dFZhbGlkIH0gZnJvbSAnLi9zcGFuY29udGV4dC11dGlscyc7XG52YXIgY29udGV4dEFwaSA9IENvbnRleHRBUEkuZ2V0SW5zdGFuY2UoKTtcbi8qKlxuICogTm8tb3AgaW1wbGVtZW50YXRpb25zIG9mIHtAbGluayBUcmFjZXJ9LlxuICovXG52YXIgTm9vcFRyYWNlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBOb29wVHJhY2VyKCkge1xuICAgIH1cbiAgICAvLyBzdGFydFNwYW4gc3RhcnRzIGEgbm9vcCBzcGFuLlxuICAgIE5vb3BUcmFjZXIucHJvdG90eXBlLnN0YXJ0U3BhbiA9IGZ1bmN0aW9uIChuYW1lLCBvcHRpb25zLCBjb250ZXh0KSB7XG4gICAgICAgIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHsgY29udGV4dCA9IGNvbnRleHRBcGkuYWN0aXZlKCk7IH1cbiAgICAgICAgdmFyIHJvb3QgPSBCb29sZWFuKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5yb290KTtcbiAgICAgICAgaWYgKHJvb3QpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgTm9uUmVjb3JkaW5nU3BhbigpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwYXJlbnRGcm9tQ29udGV4dCA9IGNvbnRleHQgJiYgZ2V0U3BhbkNvbnRleHQoY29udGV4dCk7XG4gICAgICAgIGlmIChpc1NwYW5Db250ZXh0KHBhcmVudEZyb21Db250ZXh0KSAmJlxuICAgICAgICAgICAgaXNTcGFuQ29udGV4dFZhbGlkKHBhcmVudEZyb21Db250ZXh0KSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBOb25SZWNvcmRpbmdTcGFuKHBhcmVudEZyb21Db250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgTm9uUmVjb3JkaW5nU3BhbigpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBOb29wVHJhY2VyLnByb3RvdHlwZS5zdGFydEFjdGl2ZVNwYW4gPSBmdW5jdGlvbiAobmFtZSwgYXJnMiwgYXJnMywgYXJnNCkge1xuICAgICAgICB2YXIgb3B0cztcbiAgICAgICAgdmFyIGN0eDtcbiAgICAgICAgdmFyIGZuO1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICBmbiA9IGFyZzI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMykge1xuICAgICAgICAgICAgb3B0cyA9IGFyZzI7XG4gICAgICAgICAgICBmbiA9IGFyZzM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvcHRzID0gYXJnMjtcbiAgICAgICAgICAgIGN0eCA9IGFyZzM7XG4gICAgICAgICAgICBmbiA9IGFyZzQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHBhcmVudENvbnRleHQgPSBjdHggIT09IG51bGwgJiYgY3R4ICE9PSB2b2lkIDAgPyBjdHggOiBjb250ZXh0QXBpLmFjdGl2ZSgpO1xuICAgICAgICB2YXIgc3BhbiA9IHRoaXMuc3RhcnRTcGFuKG5hbWUsIG9wdHMsIHBhcmVudENvbnRleHQpO1xuICAgICAgICB2YXIgY29udGV4dFdpdGhTcGFuU2V0ID0gc2V0U3BhbihwYXJlbnRDb250ZXh0LCBzcGFuKTtcbiAgICAgICAgcmV0dXJuIGNvbnRleHRBcGkud2l0aChjb250ZXh0V2l0aFNwYW5TZXQsIGZuLCB1bmRlZmluZWQsIHNwYW4pO1xuICAgIH07XG4gICAgcmV0dXJuIE5vb3BUcmFjZXI7XG59KCkpO1xuZXhwb3J0IHsgTm9vcFRyYWNlciB9O1xuZnVuY3Rpb24gaXNTcGFuQ29udGV4dChzcGFuQ29udGV4dCkge1xuICAgIHJldHVybiAodHlwZW9mIHNwYW5Db250ZXh0ID09PSAnb2JqZWN0JyAmJlxuICAgICAgICB0eXBlb2Ygc3BhbkNvbnRleHRbJ3NwYW5JZCddID09PSAnc3RyaW5nJyAmJlxuICAgICAgICB0eXBlb2Ygc3BhbkNvbnRleHRbJ3RyYWNlSWQnXSA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgdHlwZW9mIHNwYW5Db250ZXh0Wyd0cmFjZUZsYWdzJ10gPT09ICdudW1iZXInKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU5vb3BUcmFjZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/NoopTracer.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/NoopTracerProvider.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/NoopTracerProvider.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NoopTracerProvider: () => (/* binding */ NoopTracerProvider)\n/* harmony export */ });\n/* harmony import */ var _NoopTracer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NoopTracer */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/NoopTracer.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * An implementation of the {@link TracerProvider} which returns an impotent\n * Tracer for all calls to `getTracer`.\n *\n * All operations are no-op.\n */\nvar NoopTracerProvider = /** @class */ (function () {\n    function NoopTracerProvider() {\n    }\n    NoopTracerProvider.prototype.getTracer = function (_name, _version, _options) {\n        return new _NoopTracer__WEBPACK_IMPORTED_MODULE_0__.NoopTracer();\n    };\n    return NoopTracerProvider;\n}());\n\n//# sourceMappingURL=NoopTracerProvider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vdHJhY2UvTm9vcFRyYWNlclByb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQzBDO0FBQzFDO0FBQ0EsNkJBQTZCLHNCQUFzQjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLG1EQUFVO0FBQzdCO0FBQ0E7QUFDQSxDQUFDO0FBQzZCO0FBQzlCIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vdHJhY2UvTm9vcFRyYWNlclByb3ZpZGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBOb29wVHJhY2VyIH0gZnJvbSAnLi9Ob29wVHJhY2VyJztcbi8qKlxuICogQW4gaW1wbGVtZW50YXRpb24gb2YgdGhlIHtAbGluayBUcmFjZXJQcm92aWRlcn0gd2hpY2ggcmV0dXJucyBhbiBpbXBvdGVudFxuICogVHJhY2VyIGZvciBhbGwgY2FsbHMgdG8gYGdldFRyYWNlcmAuXG4gKlxuICogQWxsIG9wZXJhdGlvbnMgYXJlIG5vLW9wLlxuICovXG52YXIgTm9vcFRyYWNlclByb3ZpZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE5vb3BUcmFjZXJQcm92aWRlcigpIHtcbiAgICB9XG4gICAgTm9vcFRyYWNlclByb3ZpZGVyLnByb3RvdHlwZS5nZXRUcmFjZXIgPSBmdW5jdGlvbiAoX25hbWUsIF92ZXJzaW9uLCBfb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IE5vb3BUcmFjZXIoKTtcbiAgICB9O1xuICAgIHJldHVybiBOb29wVHJhY2VyUHJvdmlkZXI7XG59KCkpO1xuZXhwb3J0IHsgTm9vcFRyYWNlclByb3ZpZGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Ob29wVHJhY2VyUHJvdmlkZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/NoopTracerProvider.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/ProxyTracer.js":
/*!************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/ProxyTracer.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ProxyTracer: () => (/* binding */ ProxyTracer)\n/* harmony export */ });\n/* harmony import */ var _NoopTracer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NoopTracer */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/NoopTracer.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar NOOP_TRACER = new _NoopTracer__WEBPACK_IMPORTED_MODULE_0__.NoopTracer();\n/**\n * Proxy tracer provided by the proxy tracer provider\n */\nvar ProxyTracer = /** @class */ (function () {\n    function ProxyTracer(_provider, name, version, options) {\n        this._provider = _provider;\n        this.name = name;\n        this.version = version;\n        this.options = options;\n    }\n    ProxyTracer.prototype.startSpan = function (name, options, context) {\n        return this._getTracer().startSpan(name, options, context);\n    };\n    ProxyTracer.prototype.startActiveSpan = function (_name, _options, _context, _fn) {\n        var tracer = this._getTracer();\n        return Reflect.apply(tracer.startActiveSpan, tracer, arguments);\n    };\n    /**\n     * Try to get a tracer from the proxy tracer provider.\n     * If the proxy tracer provider has no delegate, return a noop tracer.\n     */\n    ProxyTracer.prototype._getTracer = function () {\n        if (this._delegate) {\n            return this._delegate;\n        }\n        var tracer = this._provider.getDelegateTracer(this.name, this.version, this.options);\n        if (!tracer) {\n            return NOOP_TRACER;\n        }\n        this._delegate = tracer;\n        return this._delegate;\n    };\n    return ProxyTracer;\n}());\n\n//# sourceMappingURL=ProxyTracer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vdHJhY2UvUHJveHlUcmFjZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDMEM7QUFDMUMsc0JBQXNCLG1EQUFVO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDc0I7QUFDdkIiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvYXBpL2J1aWxkL2VzbS90cmFjZS9Qcm94eVRyYWNlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgTm9vcFRyYWNlciB9IGZyb20gJy4vTm9vcFRyYWNlcic7XG52YXIgTk9PUF9UUkFDRVIgPSBuZXcgTm9vcFRyYWNlcigpO1xuLyoqXG4gKiBQcm94eSB0cmFjZXIgcHJvdmlkZWQgYnkgdGhlIHByb3h5IHRyYWNlciBwcm92aWRlclxuICovXG52YXIgUHJveHlUcmFjZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUHJveHlUcmFjZXIoX3Byb3ZpZGVyLCBuYW1lLCB2ZXJzaW9uLCBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuX3Byb3ZpZGVyID0gX3Byb3ZpZGVyO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLnZlcnNpb24gPSB2ZXJzaW9uO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbiAgICBQcm94eVRyYWNlci5wcm90b3R5cGUuc3RhcnRTcGFuID0gZnVuY3Rpb24gKG5hbWUsIG9wdGlvbnMsIGNvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldFRyYWNlcigpLnN0YXJ0U3BhbihuYW1lLCBvcHRpb25zLCBjb250ZXh0KTtcbiAgICB9O1xuICAgIFByb3h5VHJhY2VyLnByb3RvdHlwZS5zdGFydEFjdGl2ZVNwYW4gPSBmdW5jdGlvbiAoX25hbWUsIF9vcHRpb25zLCBfY29udGV4dCwgX2ZuKSB7XG4gICAgICAgIHZhciB0cmFjZXIgPSB0aGlzLl9nZXRUcmFjZXIoKTtcbiAgICAgICAgcmV0dXJuIFJlZmxlY3QuYXBwbHkodHJhY2VyLnN0YXJ0QWN0aXZlU3BhbiwgdHJhY2VyLCBhcmd1bWVudHMpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVHJ5IHRvIGdldCBhIHRyYWNlciBmcm9tIHRoZSBwcm94eSB0cmFjZXIgcHJvdmlkZXIuXG4gICAgICogSWYgdGhlIHByb3h5IHRyYWNlciBwcm92aWRlciBoYXMgbm8gZGVsZWdhdGUsIHJldHVybiBhIG5vb3AgdHJhY2VyLlxuICAgICAqL1xuICAgIFByb3h5VHJhY2VyLnByb3RvdHlwZS5fZ2V0VHJhY2VyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5fZGVsZWdhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9kZWxlZ2F0ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdHJhY2VyID0gdGhpcy5fcHJvdmlkZXIuZ2V0RGVsZWdhdGVUcmFjZXIodGhpcy5uYW1lLCB0aGlzLnZlcnNpb24sIHRoaXMub3B0aW9ucyk7XG4gICAgICAgIGlmICghdHJhY2VyKSB7XG4gICAgICAgICAgICByZXR1cm4gTk9PUF9UUkFDRVI7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZGVsZWdhdGUgPSB0cmFjZXI7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWxlZ2F0ZTtcbiAgICB9O1xuICAgIHJldHVybiBQcm94eVRyYWNlcjtcbn0oKSk7XG5leHBvcnQgeyBQcm94eVRyYWNlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UHJveHlUcmFjZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/ProxyTracer.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/ProxyTracerProvider.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/ProxyTracerProvider.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ProxyTracerProvider: () => (/* binding */ ProxyTracerProvider)\n/* harmony export */ });\n/* harmony import */ var _ProxyTracer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ProxyTracer */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/ProxyTracer.js\");\n/* harmony import */ var _NoopTracerProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NoopTracerProvider */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/NoopTracerProvider.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar NOOP_TRACER_PROVIDER = new _NoopTracerProvider__WEBPACK_IMPORTED_MODULE_0__.NoopTracerProvider();\n/**\n * Tracer provider which provides {@link ProxyTracer}s.\n *\n * Before a delegate is set, tracers provided are NoOp.\n *   When a delegate is set, traces are provided from the delegate.\n *   When a delegate is set after tracers have already been provided,\n *   all tracers already provided will use the provided delegate implementation.\n */\nvar ProxyTracerProvider = /** @class */ (function () {\n    function ProxyTracerProvider() {\n    }\n    /**\n     * Get a {@link ProxyTracer}\n     */\n    ProxyTracerProvider.prototype.getTracer = function (name, version, options) {\n        var _a;\n        return ((_a = this.getDelegateTracer(name, version, options)) !== null && _a !== void 0 ? _a : new _ProxyTracer__WEBPACK_IMPORTED_MODULE_1__.ProxyTracer(this, name, version, options));\n    };\n    ProxyTracerProvider.prototype.getDelegate = function () {\n        var _a;\n        return (_a = this._delegate) !== null && _a !== void 0 ? _a : NOOP_TRACER_PROVIDER;\n    };\n    /**\n     * Set the delegate tracer provider\n     */\n    ProxyTracerProvider.prototype.setDelegate = function (delegate) {\n        this._delegate = delegate;\n    };\n    ProxyTracerProvider.prototype.getDelegateTracer = function (name, version, options) {\n        var _a;\n        return (_a = this._delegate) === null || _a === void 0 ? void 0 : _a.getTracer(name, version, options);\n    };\n    return ProxyTracerProvider;\n}());\n\n//# sourceMappingURL=ProxyTracerProvider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vdHJhY2UvUHJveHlUcmFjZXJQcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDNEM7QUFDYztBQUMxRCwrQkFBK0IsbUVBQWtCO0FBQ2pEO0FBQ0EsbUNBQW1DLGtCQUFrQjtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQSwyR0FBMkcscURBQVc7QUFDdEg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQzhCO0FBQy9CIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vdHJhY2UvUHJveHlUcmFjZXJQcm92aWRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgUHJveHlUcmFjZXIgfSBmcm9tICcuL1Byb3h5VHJhY2VyJztcbmltcG9ydCB7IE5vb3BUcmFjZXJQcm92aWRlciB9IGZyb20gJy4vTm9vcFRyYWNlclByb3ZpZGVyJztcbnZhciBOT09QX1RSQUNFUl9QUk9WSURFUiA9IG5ldyBOb29wVHJhY2VyUHJvdmlkZXIoKTtcbi8qKlxuICogVHJhY2VyIHByb3ZpZGVyIHdoaWNoIHByb3ZpZGVzIHtAbGluayBQcm94eVRyYWNlcn1zLlxuICpcbiAqIEJlZm9yZSBhIGRlbGVnYXRlIGlzIHNldCwgdHJhY2VycyBwcm92aWRlZCBhcmUgTm9PcC5cbiAqICAgV2hlbiBhIGRlbGVnYXRlIGlzIHNldCwgdHJhY2VzIGFyZSBwcm92aWRlZCBmcm9tIHRoZSBkZWxlZ2F0ZS5cbiAqICAgV2hlbiBhIGRlbGVnYXRlIGlzIHNldCBhZnRlciB0cmFjZXJzIGhhdmUgYWxyZWFkeSBiZWVuIHByb3ZpZGVkLFxuICogICBhbGwgdHJhY2VycyBhbHJlYWR5IHByb3ZpZGVkIHdpbGwgdXNlIHRoZSBwcm92aWRlZCBkZWxlZ2F0ZSBpbXBsZW1lbnRhdGlvbi5cbiAqL1xudmFyIFByb3h5VHJhY2VyUHJvdmlkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUHJveHlUcmFjZXJQcm92aWRlcigpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IGEge0BsaW5rIFByb3h5VHJhY2VyfVxuICAgICAqL1xuICAgIFByb3h5VHJhY2VyUHJvdmlkZXIucHJvdG90eXBlLmdldFRyYWNlciA9IGZ1bmN0aW9uIChuYW1lLCB2ZXJzaW9uLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuICgoX2EgPSB0aGlzLmdldERlbGVnYXRlVHJhY2VyKG5hbWUsIHZlcnNpb24sIG9wdGlvbnMpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBuZXcgUHJveHlUcmFjZXIodGhpcywgbmFtZSwgdmVyc2lvbiwgb3B0aW9ucykpO1xuICAgIH07XG4gICAgUHJveHlUcmFjZXJQcm92aWRlci5wcm90b3R5cGUuZ2V0RGVsZWdhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuIChfYSA9IHRoaXMuX2RlbGVnYXRlKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBOT09QX1RSQUNFUl9QUk9WSURFUjtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldCB0aGUgZGVsZWdhdGUgdHJhY2VyIHByb3ZpZGVyXG4gICAgICovXG4gICAgUHJveHlUcmFjZXJQcm92aWRlci5wcm90b3R5cGUuc2V0RGVsZWdhdGUgPSBmdW5jdGlvbiAoZGVsZWdhdGUpIHtcbiAgICAgICAgdGhpcy5fZGVsZWdhdGUgPSBkZWxlZ2F0ZTtcbiAgICB9O1xuICAgIFByb3h5VHJhY2VyUHJvdmlkZXIucHJvdG90eXBlLmdldERlbGVnYXRlVHJhY2VyID0gZnVuY3Rpb24gKG5hbWUsIHZlcnNpb24sIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gdGhpcy5fZGVsZWdhdGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5nZXRUcmFjZXIobmFtZSwgdmVyc2lvbiwgb3B0aW9ucyk7XG4gICAgfTtcbiAgICByZXR1cm4gUHJveHlUcmFjZXJQcm92aWRlcjtcbn0oKSk7XG5leHBvcnQgeyBQcm94eVRyYWNlclByb3ZpZGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Qcm94eVRyYWNlclByb3ZpZGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/ProxyTracerProvider.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/SamplingResult.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/SamplingResult.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SamplingDecision: () => (/* binding */ SamplingDecision)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @deprecated use the one declared in @opentelemetry/sdk-trace-base instead.\n * A sampling decision that determines how a {@link Span} will be recorded\n * and collected.\n */\nvar SamplingDecision;\n(function (SamplingDecision) {\n    /**\n     * `Span.isRecording() === false`, span will not be recorded and all events\n     * and attributes will be dropped.\n     */\n    SamplingDecision[SamplingDecision[\"NOT_RECORD\"] = 0] = \"NOT_RECORD\";\n    /**\n     * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}\n     * MUST NOT be set.\n     */\n    SamplingDecision[SamplingDecision[\"RECORD\"] = 1] = \"RECORD\";\n    /**\n     * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}\n     * MUST be set.\n     */\n    SamplingDecision[SamplingDecision[\"RECORD_AND_SAMPLED\"] = 2] = \"RECORD_AND_SAMPLED\";\n})(SamplingDecision || (SamplingDecision = {}));\n//# sourceMappingURL=SamplingResult.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vdHJhY2UvU2FtcGxpbmdSZXN1bHQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsWUFBWTtBQUMxRDtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZEQUE2RDtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDREQUE0RDtBQUM1RDtBQUNBO0FBQ0E7QUFDQSxDQUFDLDRDQUE0QztBQUM3QyIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9hcGkvYnVpbGQvZXNtL3RyYWNlL1NhbXBsaW5nUmVzdWx0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEBkZXByZWNhdGVkIHVzZSB0aGUgb25lIGRlY2xhcmVkIGluIEBvcGVudGVsZW1ldHJ5L3Nkay10cmFjZS1iYXNlIGluc3RlYWQuXG4gKiBBIHNhbXBsaW5nIGRlY2lzaW9uIHRoYXQgZGV0ZXJtaW5lcyBob3cgYSB7QGxpbmsgU3Bhbn0gd2lsbCBiZSByZWNvcmRlZFxuICogYW5kIGNvbGxlY3RlZC5cbiAqL1xuZXhwb3J0IHZhciBTYW1wbGluZ0RlY2lzaW9uO1xuKGZ1bmN0aW9uIChTYW1wbGluZ0RlY2lzaW9uKSB7XG4gICAgLyoqXG4gICAgICogYFNwYW4uaXNSZWNvcmRpbmcoKSA9PT0gZmFsc2VgLCBzcGFuIHdpbGwgbm90IGJlIHJlY29yZGVkIGFuZCBhbGwgZXZlbnRzXG4gICAgICogYW5kIGF0dHJpYnV0ZXMgd2lsbCBiZSBkcm9wcGVkLlxuICAgICAqL1xuICAgIFNhbXBsaW5nRGVjaXNpb25bU2FtcGxpbmdEZWNpc2lvbltcIk5PVF9SRUNPUkRcIl0gPSAwXSA9IFwiTk9UX1JFQ09SRFwiO1xuICAgIC8qKlxuICAgICAqIGBTcGFuLmlzUmVjb3JkaW5nKCkgPT09IHRydWVgLCBidXQgYFNhbXBsZWRgIGZsYWcgaW4ge0BsaW5rIFRyYWNlRmxhZ3N9XG4gICAgICogTVVTVCBOT1QgYmUgc2V0LlxuICAgICAqL1xuICAgIFNhbXBsaW5nRGVjaXNpb25bU2FtcGxpbmdEZWNpc2lvbltcIlJFQ09SRFwiXSA9IDFdID0gXCJSRUNPUkRcIjtcbiAgICAvKipcbiAgICAgKiBgU3Bhbi5pc1JlY29yZGluZygpID09PSB0cnVlYCBBTkQgYFNhbXBsZWRgIGZsYWcgaW4ge0BsaW5rIFRyYWNlRmxhZ3N9XG4gICAgICogTVVTVCBiZSBzZXQuXG4gICAgICovXG4gICAgU2FtcGxpbmdEZWNpc2lvbltTYW1wbGluZ0RlY2lzaW9uW1wiUkVDT1JEX0FORF9TQU1QTEVEXCJdID0gMl0gPSBcIlJFQ09SRF9BTkRfU0FNUExFRFwiO1xufSkoU2FtcGxpbmdEZWNpc2lvbiB8fCAoU2FtcGxpbmdEZWNpc2lvbiA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TYW1wbGluZ1Jlc3VsdC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/SamplingResult.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/context-utils.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/context-utils.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deleteSpan: () => (/* binding */ deleteSpan),\n/* harmony export */   getActiveSpan: () => (/* binding */ getActiveSpan),\n/* harmony export */   getSpan: () => (/* binding */ getSpan),\n/* harmony export */   getSpanContext: () => (/* binding */ getSpanContext),\n/* harmony export */   setSpan: () => (/* binding */ setSpan),\n/* harmony export */   setSpanContext: () => (/* binding */ setSpanContext)\n/* harmony export */ });\n/* harmony import */ var _context_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../context/context */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/context/context.js\");\n/* harmony import */ var _NonRecordingSpan__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./NonRecordingSpan */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js\");\n/* harmony import */ var _api_context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../api/context */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/api/context.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * span key\n */\nvar SPAN_KEY = (0,_context_context__WEBPACK_IMPORTED_MODULE_0__.createContextKey)('OpenTelemetry Context Key SPAN');\n/**\n * Return the span if one exists\n *\n * @param context context to get span from\n */\nfunction getSpan(context) {\n    return context.getValue(SPAN_KEY) || undefined;\n}\n/**\n * Gets the span from the current context, if one exists.\n */\nfunction getActiveSpan() {\n    return getSpan(_api_context__WEBPACK_IMPORTED_MODULE_1__.ContextAPI.getInstance().active());\n}\n/**\n * Set the span on a context\n *\n * @param context context to use as parent\n * @param span span to set active\n */\nfunction setSpan(context, span) {\n    return context.setValue(SPAN_KEY, span);\n}\n/**\n * Remove current span stored in the context\n *\n * @param context context to delete span from\n */\nfunction deleteSpan(context) {\n    return context.deleteValue(SPAN_KEY);\n}\n/**\n * Wrap span context in a NoopSpan and set as span in a new\n * context\n *\n * @param context context to set active span on\n * @param spanContext span context to be wrapped\n */\nfunction setSpanContext(context, spanContext) {\n    return setSpan(context, new _NonRecordingSpan__WEBPACK_IMPORTED_MODULE_2__.NonRecordingSpan(spanContext));\n}\n/**\n * Get the span context of the span if it exists.\n *\n * @param context context to get values from\n */\nfunction getSpanContext(context) {\n    var _a;\n    return (_a = getSpan(context)) === null || _a === void 0 ? void 0 : _a.spanContext();\n}\n//# sourceMappingURL=context-utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vdHJhY2UvY29udGV4dC11dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDc0Q7QUFDQTtBQUNWO0FBQzVDO0FBQ0E7QUFDQTtBQUNBLGVBQWUsa0VBQWdCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLG1CQUFtQixvREFBVTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsZ0NBQWdDLCtEQUFnQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vdHJhY2UvY29udGV4dC11dGlscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgY3JlYXRlQ29udGV4dEtleSB9IGZyb20gJy4uL2NvbnRleHQvY29udGV4dCc7XG5pbXBvcnQgeyBOb25SZWNvcmRpbmdTcGFuIH0gZnJvbSAnLi9Ob25SZWNvcmRpbmdTcGFuJztcbmltcG9ydCB7IENvbnRleHRBUEkgfSBmcm9tICcuLi9hcGkvY29udGV4dCc7XG4vKipcbiAqIHNwYW4ga2V5XG4gKi9cbnZhciBTUEFOX0tFWSA9IGNyZWF0ZUNvbnRleHRLZXkoJ09wZW5UZWxlbWV0cnkgQ29udGV4dCBLZXkgU1BBTicpO1xuLyoqXG4gKiBSZXR1cm4gdGhlIHNwYW4gaWYgb25lIGV4aXN0c1xuICpcbiAqIEBwYXJhbSBjb250ZXh0IGNvbnRleHQgdG8gZ2V0IHNwYW4gZnJvbVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3Bhbihjb250ZXh0KSB7XG4gICAgcmV0dXJuIGNvbnRleHQuZ2V0VmFsdWUoU1BBTl9LRVkpIHx8IHVuZGVmaW5lZDtcbn1cbi8qKlxuICogR2V0cyB0aGUgc3BhbiBmcm9tIHRoZSBjdXJyZW50IGNvbnRleHQsIGlmIG9uZSBleGlzdHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRBY3RpdmVTcGFuKCkge1xuICAgIHJldHVybiBnZXRTcGFuKENvbnRleHRBUEkuZ2V0SW5zdGFuY2UoKS5hY3RpdmUoKSk7XG59XG4vKipcbiAqIFNldCB0aGUgc3BhbiBvbiBhIGNvbnRleHRcbiAqXG4gKiBAcGFyYW0gY29udGV4dCBjb250ZXh0IHRvIHVzZSBhcyBwYXJlbnRcbiAqIEBwYXJhbSBzcGFuIHNwYW4gdG8gc2V0IGFjdGl2ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0U3Bhbihjb250ZXh0LCBzcGFuKSB7XG4gICAgcmV0dXJuIGNvbnRleHQuc2V0VmFsdWUoU1BBTl9LRVksIHNwYW4pO1xufVxuLyoqXG4gKiBSZW1vdmUgY3VycmVudCBzcGFuIHN0b3JlZCBpbiB0aGUgY29udGV4dFxuICpcbiAqIEBwYXJhbSBjb250ZXh0IGNvbnRleHQgdG8gZGVsZXRlIHNwYW4gZnJvbVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVsZXRlU3Bhbihjb250ZXh0KSB7XG4gICAgcmV0dXJuIGNvbnRleHQuZGVsZXRlVmFsdWUoU1BBTl9LRVkpO1xufVxuLyoqXG4gKiBXcmFwIHNwYW4gY29udGV4dCBpbiBhIE5vb3BTcGFuIGFuZCBzZXQgYXMgc3BhbiBpbiBhIG5ld1xuICogY29udGV4dFxuICpcbiAqIEBwYXJhbSBjb250ZXh0IGNvbnRleHQgdG8gc2V0IGFjdGl2ZSBzcGFuIG9uXG4gKiBAcGFyYW0gc3BhbkNvbnRleHQgc3BhbiBjb250ZXh0IHRvIGJlIHdyYXBwZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldFNwYW5Db250ZXh0KGNvbnRleHQsIHNwYW5Db250ZXh0KSB7XG4gICAgcmV0dXJuIHNldFNwYW4oY29udGV4dCwgbmV3IE5vblJlY29yZGluZ1NwYW4oc3BhbkNvbnRleHQpKTtcbn1cbi8qKlxuICogR2V0IHRoZSBzcGFuIGNvbnRleHQgb2YgdGhlIHNwYW4gaWYgaXQgZXhpc3RzLlxuICpcbiAqIEBwYXJhbSBjb250ZXh0IGNvbnRleHQgdG8gZ2V0IHZhbHVlcyBmcm9tXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTcGFuQ29udGV4dChjb250ZXh0KSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiAoX2EgPSBnZXRTcGFuKGNvbnRleHQpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3BhbkNvbnRleHQoKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnRleHQtdXRpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/context-utils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/internal/tracestate-impl.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/internal/tracestate-impl.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TraceStateImpl: () => (/* binding */ TraceStateImpl)\n/* harmony export */ });\n/* harmony import */ var _tracestate_validators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tracestate-validators */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/internal/tracestate-validators.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar MAX_TRACE_STATE_ITEMS = 32;\nvar MAX_TRACE_STATE_LEN = 512;\nvar LIST_MEMBERS_SEPARATOR = ',';\nvar LIST_MEMBER_KEY_VALUE_SPLITTER = '=';\n/**\n * TraceState must be a class and not a simple object type because of the spec\n * requirement (https://www.w3.org/TR/trace-context/#tracestate-field).\n *\n * Here is the list of allowed mutations:\n * - New key-value pair should be added into the beginning of the list\n * - The value of any key can be updated. Modified keys MUST be moved to the\n * beginning of the list.\n */\nvar TraceStateImpl = /** @class */ (function () {\n    function TraceStateImpl(rawTraceState) {\n        this._internalState = new Map();\n        if (rawTraceState)\n            this._parse(rawTraceState);\n    }\n    TraceStateImpl.prototype.set = function (key, value) {\n        // TODO: Benchmark the different approaches(map vs list) and\n        // use the faster one.\n        var traceState = this._clone();\n        if (traceState._internalState.has(key)) {\n            traceState._internalState.delete(key);\n        }\n        traceState._internalState.set(key, value);\n        return traceState;\n    };\n    TraceStateImpl.prototype.unset = function (key) {\n        var traceState = this._clone();\n        traceState._internalState.delete(key);\n        return traceState;\n    };\n    TraceStateImpl.prototype.get = function (key) {\n        return this._internalState.get(key);\n    };\n    TraceStateImpl.prototype.serialize = function () {\n        var _this = this;\n        return this._keys()\n            .reduce(function (agg, key) {\n            agg.push(key + LIST_MEMBER_KEY_VALUE_SPLITTER + _this.get(key));\n            return agg;\n        }, [])\n            .join(LIST_MEMBERS_SEPARATOR);\n    };\n    TraceStateImpl.prototype._parse = function (rawTraceState) {\n        if (rawTraceState.length > MAX_TRACE_STATE_LEN)\n            return;\n        this._internalState = rawTraceState\n            .split(LIST_MEMBERS_SEPARATOR)\n            .reverse() // Store in reverse so new keys (.set(...)) will be placed at the beginning\n            .reduce(function (agg, part) {\n            var listMember = part.trim(); // Optional Whitespace (OWS) handling\n            var i = listMember.indexOf(LIST_MEMBER_KEY_VALUE_SPLITTER);\n            if (i !== -1) {\n                var key = listMember.slice(0, i);\n                var value = listMember.slice(i + 1, part.length);\n                if ((0,_tracestate_validators__WEBPACK_IMPORTED_MODULE_0__.validateKey)(key) && (0,_tracestate_validators__WEBPACK_IMPORTED_MODULE_0__.validateValue)(value)) {\n                    agg.set(key, value);\n                }\n                else {\n                    // TODO: Consider to add warning log\n                }\n            }\n            return agg;\n        }, new Map());\n        // Because of the reverse() requirement, trunc must be done after map is created\n        if (this._internalState.size > MAX_TRACE_STATE_ITEMS) {\n            this._internalState = new Map(Array.from(this._internalState.entries())\n                .reverse() // Use reverse same as original tracestate parse chain\n                .slice(0, MAX_TRACE_STATE_ITEMS));\n        }\n    };\n    TraceStateImpl.prototype._keys = function () {\n        return Array.from(this._internalState.keys()).reverse();\n    };\n    TraceStateImpl.prototype._clone = function () {\n        var traceState = new TraceStateImpl();\n        traceState._internalState = new Map(this._internalState);\n        return traceState;\n    };\n    return TraceStateImpl;\n}());\n\n//# sourceMappingURL=tracestate-impl.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vdHJhY2UvaW50ZXJuYWwvdHJhY2VzdGF0ZS1pbXBsLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3FFO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixtRUFBVyxTQUFTLHFFQUFhO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUN5QjtBQUMxQiIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9hcGkvYnVpbGQvZXNtL3RyYWNlL2ludGVybmFsL3RyYWNlc3RhdGUtaW1wbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgdmFsaWRhdGVLZXksIHZhbGlkYXRlVmFsdWUgfSBmcm9tICcuL3RyYWNlc3RhdGUtdmFsaWRhdG9ycyc7XG52YXIgTUFYX1RSQUNFX1NUQVRFX0lURU1TID0gMzI7XG52YXIgTUFYX1RSQUNFX1NUQVRFX0xFTiA9IDUxMjtcbnZhciBMSVNUX01FTUJFUlNfU0VQQVJBVE9SID0gJywnO1xudmFyIExJU1RfTUVNQkVSX0tFWV9WQUxVRV9TUExJVFRFUiA9ICc9Jztcbi8qKlxuICogVHJhY2VTdGF0ZSBtdXN0IGJlIGEgY2xhc3MgYW5kIG5vdCBhIHNpbXBsZSBvYmplY3QgdHlwZSBiZWNhdXNlIG9mIHRoZSBzcGVjXG4gKiByZXF1aXJlbWVudCAoaHR0cHM6Ly93d3cudzMub3JnL1RSL3RyYWNlLWNvbnRleHQvI3RyYWNlc3RhdGUtZmllbGQpLlxuICpcbiAqIEhlcmUgaXMgdGhlIGxpc3Qgb2YgYWxsb3dlZCBtdXRhdGlvbnM6XG4gKiAtIE5ldyBrZXktdmFsdWUgcGFpciBzaG91bGQgYmUgYWRkZWQgaW50byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBsaXN0XG4gKiAtIFRoZSB2YWx1ZSBvZiBhbnkga2V5IGNhbiBiZSB1cGRhdGVkLiBNb2RpZmllZCBrZXlzIE1VU1QgYmUgbW92ZWQgdG8gdGhlXG4gKiBiZWdpbm5pbmcgb2YgdGhlIGxpc3QuXG4gKi9cbnZhciBUcmFjZVN0YXRlSW1wbCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUcmFjZVN0YXRlSW1wbChyYXdUcmFjZVN0YXRlKSB7XG4gICAgICAgIHRoaXMuX2ludGVybmFsU3RhdGUgPSBuZXcgTWFwKCk7XG4gICAgICAgIGlmIChyYXdUcmFjZVN0YXRlKVxuICAgICAgICAgICAgdGhpcy5fcGFyc2UocmF3VHJhY2VTdGF0ZSk7XG4gICAgfVxuICAgIFRyYWNlU3RhdGVJbXBsLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICAvLyBUT0RPOiBCZW5jaG1hcmsgdGhlIGRpZmZlcmVudCBhcHByb2FjaGVzKG1hcCB2cyBsaXN0KSBhbmRcbiAgICAgICAgLy8gdXNlIHRoZSBmYXN0ZXIgb25lLlxuICAgICAgICB2YXIgdHJhY2VTdGF0ZSA9IHRoaXMuX2Nsb25lKCk7XG4gICAgICAgIGlmICh0cmFjZVN0YXRlLl9pbnRlcm5hbFN0YXRlLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICB0cmFjZVN0YXRlLl9pbnRlcm5hbFN0YXRlLmRlbGV0ZShrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHRyYWNlU3RhdGUuX2ludGVybmFsU3RhdGUuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gdHJhY2VTdGF0ZTtcbiAgICB9O1xuICAgIFRyYWNlU3RhdGVJbXBsLnByb3RvdHlwZS51bnNldCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIHRyYWNlU3RhdGUgPSB0aGlzLl9jbG9uZSgpO1xuICAgICAgICB0cmFjZVN0YXRlLl9pbnRlcm5hbFN0YXRlLmRlbGV0ZShrZXkpO1xuICAgICAgICByZXR1cm4gdHJhY2VTdGF0ZTtcbiAgICB9O1xuICAgIFRyYWNlU3RhdGVJbXBsLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnRlcm5hbFN0YXRlLmdldChrZXkpO1xuICAgIH07XG4gICAgVHJhY2VTdGF0ZUltcGwucHJvdG90eXBlLnNlcmlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHRoaXMuX2tleXMoKVxuICAgICAgICAgICAgLnJlZHVjZShmdW5jdGlvbiAoYWdnLCBrZXkpIHtcbiAgICAgICAgICAgIGFnZy5wdXNoKGtleSArIExJU1RfTUVNQkVSX0tFWV9WQUxVRV9TUExJVFRFUiArIF90aGlzLmdldChrZXkpKTtcbiAgICAgICAgICAgIHJldHVybiBhZ2c7XG4gICAgICAgIH0sIFtdKVxuICAgICAgICAgICAgLmpvaW4oTElTVF9NRU1CRVJTX1NFUEFSQVRPUik7XG4gICAgfTtcbiAgICBUcmFjZVN0YXRlSW1wbC5wcm90b3R5cGUuX3BhcnNlID0gZnVuY3Rpb24gKHJhd1RyYWNlU3RhdGUpIHtcbiAgICAgICAgaWYgKHJhd1RyYWNlU3RhdGUubGVuZ3RoID4gTUFYX1RSQUNFX1NUQVRFX0xFTilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5faW50ZXJuYWxTdGF0ZSA9IHJhd1RyYWNlU3RhdGVcbiAgICAgICAgICAgIC5zcGxpdChMSVNUX01FTUJFUlNfU0VQQVJBVE9SKVxuICAgICAgICAgICAgLnJldmVyc2UoKSAvLyBTdG9yZSBpbiByZXZlcnNlIHNvIG5ldyBrZXlzICguc2V0KC4uLikpIHdpbGwgYmUgcGxhY2VkIGF0IHRoZSBiZWdpbm5pbmdcbiAgICAgICAgICAgIC5yZWR1Y2UoZnVuY3Rpb24gKGFnZywgcGFydCkge1xuICAgICAgICAgICAgdmFyIGxpc3RNZW1iZXIgPSBwYXJ0LnRyaW0oKTsgLy8gT3B0aW9uYWwgV2hpdGVzcGFjZSAoT1dTKSBoYW5kbGluZ1xuICAgICAgICAgICAgdmFyIGkgPSBsaXN0TWVtYmVyLmluZGV4T2YoTElTVF9NRU1CRVJfS0VZX1ZBTFVFX1NQTElUVEVSKTtcbiAgICAgICAgICAgIGlmIChpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHZhciBrZXkgPSBsaXN0TWVtYmVyLnNsaWNlKDAsIGkpO1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGxpc3RNZW1iZXIuc2xpY2UoaSArIDEsIHBhcnQubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBpZiAodmFsaWRhdGVLZXkoa2V5KSAmJiB2YWxpZGF0ZVZhbHVlKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICBhZ2cuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogQ29uc2lkZXIgdG8gYWRkIHdhcm5pbmcgbG9nXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFnZztcbiAgICAgICAgfSwgbmV3IE1hcCgpKTtcbiAgICAgICAgLy8gQmVjYXVzZSBvZiB0aGUgcmV2ZXJzZSgpIHJlcXVpcmVtZW50LCB0cnVuYyBtdXN0IGJlIGRvbmUgYWZ0ZXIgbWFwIGlzIGNyZWF0ZWRcbiAgICAgICAgaWYgKHRoaXMuX2ludGVybmFsU3RhdGUuc2l6ZSA+IE1BWF9UUkFDRV9TVEFURV9JVEVNUykge1xuICAgICAgICAgICAgdGhpcy5faW50ZXJuYWxTdGF0ZSA9IG5ldyBNYXAoQXJyYXkuZnJvbSh0aGlzLl9pbnRlcm5hbFN0YXRlLmVudHJpZXMoKSlcbiAgICAgICAgICAgICAgICAucmV2ZXJzZSgpIC8vIFVzZSByZXZlcnNlIHNhbWUgYXMgb3JpZ2luYWwgdHJhY2VzdGF0ZSBwYXJzZSBjaGFpblxuICAgICAgICAgICAgICAgIC5zbGljZSgwLCBNQVhfVFJBQ0VfU1RBVEVfSVRFTVMpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVHJhY2VTdGF0ZUltcGwucHJvdG90eXBlLl9rZXlzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLl9pbnRlcm5hbFN0YXRlLmtleXMoKSkucmV2ZXJzZSgpO1xuICAgIH07XG4gICAgVHJhY2VTdGF0ZUltcGwucHJvdG90eXBlLl9jbG9uZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRyYWNlU3RhdGUgPSBuZXcgVHJhY2VTdGF0ZUltcGwoKTtcbiAgICAgICAgdHJhY2VTdGF0ZS5faW50ZXJuYWxTdGF0ZSA9IG5ldyBNYXAodGhpcy5faW50ZXJuYWxTdGF0ZSk7XG4gICAgICAgIHJldHVybiB0cmFjZVN0YXRlO1xuICAgIH07XG4gICAgcmV0dXJuIFRyYWNlU3RhdGVJbXBsO1xufSgpKTtcbmV4cG9ydCB7IFRyYWNlU3RhdGVJbXBsIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmFjZXN0YXRlLWltcGwuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/internal/tracestate-impl.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/internal/tracestate-validators.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/internal/tracestate-validators.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   validateKey: () => (/* binding */ validateKey),\n/* harmony export */   validateValue: () => (/* binding */ validateValue)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar VALID_KEY_CHAR_RANGE = '[_0-9a-z-*/]';\nvar VALID_KEY = \"[a-z]\" + VALID_KEY_CHAR_RANGE + \"{0,255}\";\nvar VALID_VENDOR_KEY = \"[a-z0-9]\" + VALID_KEY_CHAR_RANGE + \"{0,240}@[a-z]\" + VALID_KEY_CHAR_RANGE + \"{0,13}\";\nvar VALID_KEY_REGEX = new RegExp(\"^(?:\" + VALID_KEY + \"|\" + VALID_VENDOR_KEY + \")$\");\nvar VALID_VALUE_BASE_REGEX = /^[ -~]{0,255}[!-~]$/;\nvar INVALID_VALUE_COMMA_EQUAL_REGEX = /,|=/;\n/**\n * Key is opaque string up to 256 characters printable. It MUST begin with a\n * lowercase letter, and can only contain lowercase letters a-z, digits 0-9,\n * underscores _, dashes -, asterisks *, and forward slashes /.\n * For multi-tenant vendor scenarios, an at sign (@) can be used to prefix the\n * vendor name. Vendors SHOULD set the tenant ID at the beginning of the key.\n * see https://www.w3.org/TR/trace-context/#key\n */\nfunction validateKey(key) {\n    return VALID_KEY_REGEX.test(key);\n}\n/**\n * Value is opaque string up to 256 characters printable ASCII RFC0020\n * characters (i.e., the range 0x20 to 0x7E) except comma , and =.\n */\nfunction validateValue(value) {\n    return (VALID_VALUE_BASE_REGEX.test(value) &&\n        !INVALID_VALUE_COMMA_EQUAL_REGEX.test(value));\n}\n//# sourceMappingURL=tracestate-validators.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vdHJhY2UvaW50ZXJuYWwvdHJhY2VzdGF0ZS12YWxpZGF0b3JzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQsTUFBTTtBQUN6RCw2REFBNkQsTUFBTSxtQ0FBbUMsS0FBSztBQUMzRztBQUNBLHFDQUFxQyxNQUFNO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9hcGkvYnVpbGQvZXNtL3RyYWNlL2ludGVybmFsL3RyYWNlc3RhdGUtdmFsaWRhdG9ycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xudmFyIFZBTElEX0tFWV9DSEFSX1JBTkdFID0gJ1tfMC05YS16LSovXSc7XG52YXIgVkFMSURfS0VZID0gXCJbYS16XVwiICsgVkFMSURfS0VZX0NIQVJfUkFOR0UgKyBcInswLDI1NX1cIjtcbnZhciBWQUxJRF9WRU5ET1JfS0VZID0gXCJbYS16MC05XVwiICsgVkFMSURfS0VZX0NIQVJfUkFOR0UgKyBcInswLDI0MH1AW2Etel1cIiArIFZBTElEX0tFWV9DSEFSX1JBTkdFICsgXCJ7MCwxM31cIjtcbnZhciBWQUxJRF9LRVlfUkVHRVggPSBuZXcgUmVnRXhwKFwiXig/OlwiICsgVkFMSURfS0VZICsgXCJ8XCIgKyBWQUxJRF9WRU5ET1JfS0VZICsgXCIpJFwiKTtcbnZhciBWQUxJRF9WQUxVRV9CQVNFX1JFR0VYID0gL15bIC1+XXswLDI1NX1bIS1+XSQvO1xudmFyIElOVkFMSURfVkFMVUVfQ09NTUFfRVFVQUxfUkVHRVggPSAvLHw9Lztcbi8qKlxuICogS2V5IGlzIG9wYXF1ZSBzdHJpbmcgdXAgdG8gMjU2IGNoYXJhY3RlcnMgcHJpbnRhYmxlLiBJdCBNVVNUIGJlZ2luIHdpdGggYVxuICogbG93ZXJjYXNlIGxldHRlciwgYW5kIGNhbiBvbmx5IGNvbnRhaW4gbG93ZXJjYXNlIGxldHRlcnMgYS16LCBkaWdpdHMgMC05LFxuICogdW5kZXJzY29yZXMgXywgZGFzaGVzIC0sIGFzdGVyaXNrcyAqLCBhbmQgZm9yd2FyZCBzbGFzaGVzIC8uXG4gKiBGb3IgbXVsdGktdGVuYW50IHZlbmRvciBzY2VuYXJpb3MsIGFuIGF0IHNpZ24gKEApIGNhbiBiZSB1c2VkIHRvIHByZWZpeCB0aGVcbiAqIHZlbmRvciBuYW1lLiBWZW5kb3JzIFNIT1VMRCBzZXQgdGhlIHRlbmFudCBJRCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBrZXkuXG4gKiBzZWUgaHR0cHM6Ly93d3cudzMub3JnL1RSL3RyYWNlLWNvbnRleHQvI2tleVxuICovXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVLZXkoa2V5KSB7XG4gICAgcmV0dXJuIFZBTElEX0tFWV9SRUdFWC50ZXN0KGtleSk7XG59XG4vKipcbiAqIFZhbHVlIGlzIG9wYXF1ZSBzdHJpbmcgdXAgdG8gMjU2IGNoYXJhY3RlcnMgcHJpbnRhYmxlIEFTQ0lJIFJGQzAwMjBcbiAqIGNoYXJhY3RlcnMgKGkuZS4sIHRoZSByYW5nZSAweDIwIHRvIDB4N0UpIGV4Y2VwdCBjb21tYSAsIGFuZCA9LlxuICovXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVWYWx1ZSh2YWx1ZSkge1xuICAgIHJldHVybiAoVkFMSURfVkFMVUVfQkFTRV9SRUdFWC50ZXN0KHZhbHVlKSAmJlxuICAgICAgICAhSU5WQUxJRF9WQUxVRV9DT01NQV9FUVVBTF9SRUdFWC50ZXN0KHZhbHVlKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmFjZXN0YXRlLXZhbGlkYXRvcnMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/internal/tracestate-validators.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/internal/utils.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/internal/utils.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createTraceState: () => (/* binding */ createTraceState)\n/* harmony export */ });\n/* harmony import */ var _tracestate_impl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tracestate-impl */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/internal/tracestate-impl.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nfunction createTraceState(rawTraceState) {\n    return new _tracestate_impl__WEBPACK_IMPORTED_MODULE_0__.TraceStateImpl(rawTraceState);\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vdHJhY2UvaW50ZXJuYWwvdXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDbUQ7QUFDNUM7QUFDUCxlQUFlLDREQUFjO0FBQzdCO0FBQ0EiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvYXBpL2J1aWxkL2VzbS90cmFjZS9pbnRlcm5hbC91dGlscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgVHJhY2VTdGF0ZUltcGwgfSBmcm9tICcuL3RyYWNlc3RhdGUtaW1wbCc7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVHJhY2VTdGF0ZShyYXdUcmFjZVN0YXRlKSB7XG4gICAgcmV0dXJuIG5ldyBUcmFjZVN0YXRlSW1wbChyYXdUcmFjZVN0YXRlKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/internal/utils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   INVALID_SPANID: () => (/* binding */ INVALID_SPANID),\n/* harmony export */   INVALID_SPAN_CONTEXT: () => (/* binding */ INVALID_SPAN_CONTEXT),\n/* harmony export */   INVALID_TRACEID: () => (/* binding */ INVALID_TRACEID)\n/* harmony export */ });\n/* harmony import */ var _trace_flags__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./trace_flags */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar INVALID_SPANID = '0000000000000000';\nvar INVALID_TRACEID = '00000000000000000000000000000000';\nvar INVALID_SPAN_CONTEXT = {\n    traceId: INVALID_TRACEID,\n    spanId: INVALID_SPANID,\n    traceFlags: _trace_flags__WEBPACK_IMPORTED_MODULE_0__.TraceFlags.NONE,\n};\n//# sourceMappingURL=invalid-span-constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vdHJhY2UvaW52YWxpZC1zcGFuLWNvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQzJDO0FBQ3BDO0FBQ0E7QUFDQTtBQUNQO0FBQ0E7QUFDQSxnQkFBZ0Isb0RBQVU7QUFDMUI7QUFDQSIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9hcGkvYnVpbGQvZXNtL3RyYWNlL2ludmFsaWQtc3Bhbi1jb25zdGFudHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IFRyYWNlRmxhZ3MgfSBmcm9tICcuL3RyYWNlX2ZsYWdzJztcbmV4cG9ydCB2YXIgSU5WQUxJRF9TUEFOSUQgPSAnMDAwMDAwMDAwMDAwMDAwMCc7XG5leHBvcnQgdmFyIElOVkFMSURfVFJBQ0VJRCA9ICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCc7XG5leHBvcnQgdmFyIElOVkFMSURfU1BBTl9DT05URVhUID0ge1xuICAgIHRyYWNlSWQ6IElOVkFMSURfVFJBQ0VJRCxcbiAgICBzcGFuSWQ6IElOVkFMSURfU1BBTklELFxuICAgIHRyYWNlRmxhZ3M6IFRyYWNlRmxhZ3MuTk9ORSxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnZhbGlkLXNwYW4tY29uc3RhbnRzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/span_kind.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/span_kind.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SpanKind: () => (/* binding */ SpanKind)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar SpanKind;\n(function (SpanKind) {\n    /** Default value. Indicates that the span is used internally. */\n    SpanKind[SpanKind[\"INTERNAL\"] = 0] = \"INTERNAL\";\n    /**\n     * Indicates that the span covers server-side handling of an RPC or other\n     * remote request.\n     */\n    SpanKind[SpanKind[\"SERVER\"] = 1] = \"SERVER\";\n    /**\n     * Indicates that the span covers the client-side wrapper around an RPC or\n     * other remote request.\n     */\n    SpanKind[SpanKind[\"CLIENT\"] = 2] = \"CLIENT\";\n    /**\n     * Indicates that the span describes producer sending a message to a\n     * broker. Unlike client and server, there is no direct critical path latency\n     * relationship between producer and consumer spans.\n     */\n    SpanKind[SpanKind[\"PRODUCER\"] = 3] = \"PRODUCER\";\n    /**\n     * Indicates that the span describes consumer receiving a message from a\n     * broker. Unlike client and server, there is no direct critical path latency\n     * relationship between producer and consumer spans.\n     */\n    SpanKind[SpanKind[\"CONSUMER\"] = 4] = \"CONSUMER\";\n})(SpanKind || (SpanKind = {}));\n//# sourceMappingURL=span_kind.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vdHJhY2Uvc3Bhbl9raW5kLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw0QkFBNEI7QUFDN0IiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvYXBpL2J1aWxkL2VzbS90cmFjZS9zcGFuX2tpbmQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmV4cG9ydCB2YXIgU3BhbktpbmQ7XG4oZnVuY3Rpb24gKFNwYW5LaW5kKSB7XG4gICAgLyoqIERlZmF1bHQgdmFsdWUuIEluZGljYXRlcyB0aGF0IHRoZSBzcGFuIGlzIHVzZWQgaW50ZXJuYWxseS4gKi9cbiAgICBTcGFuS2luZFtTcGFuS2luZFtcIklOVEVSTkFMXCJdID0gMF0gPSBcIklOVEVSTkFMXCI7XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHRoYXQgdGhlIHNwYW4gY292ZXJzIHNlcnZlci1zaWRlIGhhbmRsaW5nIG9mIGFuIFJQQyBvciBvdGhlclxuICAgICAqIHJlbW90ZSByZXF1ZXN0LlxuICAgICAqL1xuICAgIFNwYW5LaW5kW1NwYW5LaW5kW1wiU0VSVkVSXCJdID0gMV0gPSBcIlNFUlZFUlwiO1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB0aGF0IHRoZSBzcGFuIGNvdmVycyB0aGUgY2xpZW50LXNpZGUgd3JhcHBlciBhcm91bmQgYW4gUlBDIG9yXG4gICAgICogb3RoZXIgcmVtb3RlIHJlcXVlc3QuXG4gICAgICovXG4gICAgU3BhbktpbmRbU3BhbktpbmRbXCJDTElFTlRcIl0gPSAyXSA9IFwiQ0xJRU5UXCI7XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHRoYXQgdGhlIHNwYW4gZGVzY3JpYmVzIHByb2R1Y2VyIHNlbmRpbmcgYSBtZXNzYWdlIHRvIGFcbiAgICAgKiBicm9rZXIuIFVubGlrZSBjbGllbnQgYW5kIHNlcnZlciwgdGhlcmUgaXMgbm8gZGlyZWN0IGNyaXRpY2FsIHBhdGggbGF0ZW5jeVxuICAgICAqIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHByb2R1Y2VyIGFuZCBjb25zdW1lciBzcGFucy5cbiAgICAgKi9cbiAgICBTcGFuS2luZFtTcGFuS2luZFtcIlBST0RVQ0VSXCJdID0gM10gPSBcIlBST0RVQ0VSXCI7XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHRoYXQgdGhlIHNwYW4gZGVzY3JpYmVzIGNvbnN1bWVyIHJlY2VpdmluZyBhIG1lc3NhZ2UgZnJvbSBhXG4gICAgICogYnJva2VyLiBVbmxpa2UgY2xpZW50IGFuZCBzZXJ2ZXIsIHRoZXJlIGlzIG5vIGRpcmVjdCBjcml0aWNhbCBwYXRoIGxhdGVuY3lcbiAgICAgKiByZWxhdGlvbnNoaXAgYmV0d2VlbiBwcm9kdWNlciBhbmQgY29uc3VtZXIgc3BhbnMuXG4gICAgICovXG4gICAgU3BhbktpbmRbU3BhbktpbmRbXCJDT05TVU1FUlwiXSA9IDRdID0gXCJDT05TVU1FUlwiO1xufSkoU3BhbktpbmQgfHwgKFNwYW5LaW5kID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNwYW5fa2luZC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/span_kind.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isSpanContextValid: () => (/* binding */ isSpanContextValid),\n/* harmony export */   isValidSpanId: () => (/* binding */ isValidSpanId),\n/* harmony export */   isValidTraceId: () => (/* binding */ isValidTraceId),\n/* harmony export */   wrapSpanContext: () => (/* binding */ wrapSpanContext)\n/* harmony export */ });\n/* harmony import */ var _invalid_span_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./invalid-span-constants */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js\");\n/* harmony import */ var _NonRecordingSpan__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./NonRecordingSpan */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar VALID_TRACEID_REGEX = /^([0-9a-f]{32})$/i;\nvar VALID_SPANID_REGEX = /^[0-9a-f]{16}$/i;\nfunction isValidTraceId(traceId) {\n    return VALID_TRACEID_REGEX.test(traceId) && traceId !== _invalid_span_constants__WEBPACK_IMPORTED_MODULE_0__.INVALID_TRACEID;\n}\nfunction isValidSpanId(spanId) {\n    return VALID_SPANID_REGEX.test(spanId) && spanId !== _invalid_span_constants__WEBPACK_IMPORTED_MODULE_0__.INVALID_SPANID;\n}\n/**\n * Returns true if this {@link SpanContext} is valid.\n * @return true if this {@link SpanContext} is valid.\n */\nfunction isSpanContextValid(spanContext) {\n    return (isValidTraceId(spanContext.traceId) && isValidSpanId(spanContext.spanId));\n}\n/**\n * Wrap the given {@link SpanContext} in a new non-recording {@link Span}\n *\n * @param spanContext span context to be wrapped\n * @returns a new non-recording {@link Span} with the provided context\n */\nfunction wrapSpanContext(spanContext) {\n    return new _NonRecordingSpan__WEBPACK_IMPORTED_MODULE_1__.NonRecordingSpan(spanContext);\n}\n//# sourceMappingURL=spancontext-utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vdHJhY2Uvc3BhbmNvbnRleHQtdXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQzJFO0FBQ3JCO0FBQ3RELHNDQUFzQyxHQUFHO0FBQ3pDLG9DQUFvQyxHQUFHO0FBQ2hDO0FBQ1AsNERBQTRELG9FQUFlO0FBQzNFO0FBQ087QUFDUCx5REFBeUQsbUVBQWM7QUFDdkU7QUFDQTtBQUNBLHlCQUF5QixtQkFBbUI7QUFDNUMseUJBQXlCLG1CQUFtQjtBQUM1QztBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLG1CQUFtQix3QkFBd0I7QUFDOUQ7QUFDQTtBQUNBLGlDQUFpQyxZQUFZO0FBQzdDO0FBQ087QUFDUCxlQUFlLCtEQUFnQjtBQUMvQjtBQUNBIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vdHJhY2Uvc3BhbmNvbnRleHQtdXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IElOVkFMSURfU1BBTklELCBJTlZBTElEX1RSQUNFSUQgfSBmcm9tICcuL2ludmFsaWQtc3Bhbi1jb25zdGFudHMnO1xuaW1wb3J0IHsgTm9uUmVjb3JkaW5nU3BhbiB9IGZyb20gJy4vTm9uUmVjb3JkaW5nU3Bhbic7XG52YXIgVkFMSURfVFJBQ0VJRF9SRUdFWCA9IC9eKFswLTlhLWZdezMyfSkkL2k7XG52YXIgVkFMSURfU1BBTklEX1JFR0VYID0gL15bMC05YS1mXXsxNn0kL2k7XG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZFRyYWNlSWQodHJhY2VJZCkge1xuICAgIHJldHVybiBWQUxJRF9UUkFDRUlEX1JFR0VYLnRlc3QodHJhY2VJZCkgJiYgdHJhY2VJZCAhPT0gSU5WQUxJRF9UUkFDRUlEO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRTcGFuSWQoc3BhbklkKSB7XG4gICAgcmV0dXJuIFZBTElEX1NQQU5JRF9SRUdFWC50ZXN0KHNwYW5JZCkgJiYgc3BhbklkICE9PSBJTlZBTElEX1NQQU5JRDtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoaXMge0BsaW5rIFNwYW5Db250ZXh0fSBpcyB2YWxpZC5cbiAqIEByZXR1cm4gdHJ1ZSBpZiB0aGlzIHtAbGluayBTcGFuQ29udGV4dH0gaXMgdmFsaWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1NwYW5Db250ZXh0VmFsaWQoc3BhbkNvbnRleHQpIHtcbiAgICByZXR1cm4gKGlzVmFsaWRUcmFjZUlkKHNwYW5Db250ZXh0LnRyYWNlSWQpICYmIGlzVmFsaWRTcGFuSWQoc3BhbkNvbnRleHQuc3BhbklkKSk7XG59XG4vKipcbiAqIFdyYXAgdGhlIGdpdmVuIHtAbGluayBTcGFuQ29udGV4dH0gaW4gYSBuZXcgbm9uLXJlY29yZGluZyB7QGxpbmsgU3Bhbn1cbiAqXG4gKiBAcGFyYW0gc3BhbkNvbnRleHQgc3BhbiBjb250ZXh0IHRvIGJlIHdyYXBwZWRcbiAqIEByZXR1cm5zIGEgbmV3IG5vbi1yZWNvcmRpbmcge0BsaW5rIFNwYW59IHdpdGggdGhlIHByb3ZpZGVkIGNvbnRleHRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdyYXBTcGFuQ29udGV4dChzcGFuQ29udGV4dCkge1xuICAgIHJldHVybiBuZXcgTm9uUmVjb3JkaW5nU3BhbihzcGFuQ29udGV4dCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zcGFuY29udGV4dC11dGlscy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/status.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/status.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SpanStatusCode: () => (/* binding */ SpanStatusCode)\n/* harmony export */ });\n/**\n * An enumeration of status codes.\n */\nvar SpanStatusCode;\n(function (SpanStatusCode) {\n    /**\n     * The default status.\n     */\n    SpanStatusCode[SpanStatusCode[\"UNSET\"] = 0] = \"UNSET\";\n    /**\n     * The operation has been validated by an Application developer or\n     * Operator to have completed successfully.\n     */\n    SpanStatusCode[SpanStatusCode[\"OK\"] = 1] = \"OK\";\n    /**\n     * The operation contains an error.\n     */\n    SpanStatusCode[SpanStatusCode[\"ERROR\"] = 2] = \"ERROR\";\n})(SpanStatusCode || (SpanStatusCode = {}));\n//# sourceMappingURL=status.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vdHJhY2Uvc3RhdHVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHdDQUF3QztBQUN6QyIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9hcGkvYnVpbGQvZXNtL3RyYWNlL3N0YXR1cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEFuIGVudW1lcmF0aW9uIG9mIHN0YXR1cyBjb2Rlcy5cbiAqL1xuZXhwb3J0IHZhciBTcGFuU3RhdHVzQ29kZTtcbihmdW5jdGlvbiAoU3BhblN0YXR1c0NvZGUpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgZGVmYXVsdCBzdGF0dXMuXG4gICAgICovXG4gICAgU3BhblN0YXR1c0NvZGVbU3BhblN0YXR1c0NvZGVbXCJVTlNFVFwiXSA9IDBdID0gXCJVTlNFVFwiO1xuICAgIC8qKlxuICAgICAqIFRoZSBvcGVyYXRpb24gaGFzIGJlZW4gdmFsaWRhdGVkIGJ5IGFuIEFwcGxpY2F0aW9uIGRldmVsb3BlciBvclxuICAgICAqIE9wZXJhdG9yIHRvIGhhdmUgY29tcGxldGVkIHN1Y2Nlc3NmdWxseS5cbiAgICAgKi9cbiAgICBTcGFuU3RhdHVzQ29kZVtTcGFuU3RhdHVzQ29kZVtcIk9LXCJdID0gMV0gPSBcIk9LXCI7XG4gICAgLyoqXG4gICAgICogVGhlIG9wZXJhdGlvbiBjb250YWlucyBhbiBlcnJvci5cbiAgICAgKi9cbiAgICBTcGFuU3RhdHVzQ29kZVtTcGFuU3RhdHVzQ29kZVtcIkVSUk9SXCJdID0gMl0gPSBcIkVSUk9SXCI7XG59KShTcGFuU3RhdHVzQ29kZSB8fCAoU3BhblN0YXR1c0NvZGUgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhdHVzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/status.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js":
/*!************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TraceFlags: () => (/* binding */ TraceFlags)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar TraceFlags;\n(function (TraceFlags) {\n    /** Represents no flag set. */\n    TraceFlags[TraceFlags[\"NONE\"] = 0] = \"NONE\";\n    /** Bit to represent whether trace is sampled in trace flags. */\n    TraceFlags[TraceFlags[\"SAMPLED\"] = 1] = \"SAMPLED\";\n})(TraceFlags || (TraceFlags = {}));\n//# sourceMappingURL=trace_flags.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vdHJhY2UvdHJhY2VfZmxhZ3MuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsZ0NBQWdDO0FBQ2pDIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vdHJhY2UvdHJhY2VfZmxhZ3MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmV4cG9ydCB2YXIgVHJhY2VGbGFncztcbihmdW5jdGlvbiAoVHJhY2VGbGFncykge1xuICAgIC8qKiBSZXByZXNlbnRzIG5vIGZsYWcgc2V0LiAqL1xuICAgIFRyYWNlRmxhZ3NbVHJhY2VGbGFnc1tcIk5PTkVcIl0gPSAwXSA9IFwiTk9ORVwiO1xuICAgIC8qKiBCaXQgdG8gcmVwcmVzZW50IHdoZXRoZXIgdHJhY2UgaXMgc2FtcGxlZCBpbiB0cmFjZSBmbGFncy4gKi9cbiAgICBUcmFjZUZsYWdzW1RyYWNlRmxhZ3NbXCJTQU1QTEVEXCJdID0gMV0gPSBcIlNBTVBMRURcIjtcbn0pKFRyYWNlRmxhZ3MgfHwgKFRyYWNlRmxhZ3MgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhY2VfZmxhZ3MuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/version.js":
/*!**************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/version.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VERSION: () => (/* binding */ VERSION)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// this is autogenerated file, see scripts/version-update.js\nvar VERSION = '1.9.0';\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vdmVyc2lvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLy8gdGhpcyBpcyBhdXRvZ2VuZXJhdGVkIGZpbGUsIHNlZSBzY3JpcHRzL3ZlcnNpb24tdXBkYXRlLmpzXG5leHBvcnQgdmFyIFZFUlNJT04gPSAnMS45LjAnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/version.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/context-async-hooks/build/src/AbstractAsyncHooksContextManager.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/context-async-hooks/build/src/AbstractAsyncHooksContextManager.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AbstractAsyncHooksContextManager = void 0;\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst ADD_LISTENER_METHODS = [\n    'addListener',\n    'on',\n    'once',\n    'prependListener',\n    'prependOnceListener',\n];\nclass AbstractAsyncHooksContextManager {\n    /**\n     * Binds a the certain context or the active one to the target function and then returns the target\n     * @param context A context (span) to be bind to target\n     * @param target a function or event emitter. When target or one of its callbacks is called,\n     *  the provided context will be used as the active context for the duration of the call.\n     */\n    bind(context, target) {\n        if (target instanceof events_1.EventEmitter) {\n            return this._bindEventEmitter(context, target);\n        }\n        if (typeof target === 'function') {\n            return this._bindFunction(context, target);\n        }\n        return target;\n    }\n    _bindFunction(context, target) {\n        const manager = this;\n        const contextWrapper = function (...args) {\n            return manager.with(context, () => target.apply(this, args));\n        };\n        Object.defineProperty(contextWrapper, 'length', {\n            enumerable: false,\n            configurable: true,\n            writable: false,\n            value: target.length,\n        });\n        /**\n         * It isn't possible to tell Typescript that contextWrapper is the same as T\n         * so we forced to cast as any here.\n         */\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return contextWrapper;\n    }\n    /**\n     * By default, EventEmitter call their callback with their context, which we do\n     * not want, instead we will bind a specific context to all callbacks that\n     * go through it.\n     * @param context the context we want to bind\n     * @param ee EventEmitter an instance of EventEmitter to patch\n     */\n    _bindEventEmitter(context, ee) {\n        const map = this._getPatchMap(ee);\n        if (map !== undefined)\n            return ee;\n        this._createPatchMap(ee);\n        // patch methods that add a listener to propagate context\n        ADD_LISTENER_METHODS.forEach(methodName => {\n            if (ee[methodName] === undefined)\n                return;\n            ee[methodName] = this._patchAddListener(ee, ee[methodName], context);\n        });\n        // patch methods that remove a listener\n        if (typeof ee.removeListener === 'function') {\n            ee.removeListener = this._patchRemoveListener(ee, ee.removeListener);\n        }\n        if (typeof ee.off === 'function') {\n            ee.off = this._patchRemoveListener(ee, ee.off);\n        }\n        // patch method that remove all listeners\n        if (typeof ee.removeAllListeners === 'function') {\n            ee.removeAllListeners = this._patchRemoveAllListeners(ee, ee.removeAllListeners);\n        }\n        return ee;\n    }\n    /**\n     * Patch methods that remove a given listener so that we match the \"patched\"\n     * version of that listener (the one that propagate context).\n     * @param ee EventEmitter instance\n     * @param original reference to the patched method\n     */\n    _patchRemoveListener(ee, original) {\n        const contextManager = this;\n        return function (event, listener) {\n            const events = contextManager._getPatchMap(ee)?.[event];\n            if (events === undefined) {\n                return original.call(this, event, listener);\n            }\n            const patchedListener = events.get(listener);\n            return original.call(this, event, patchedListener || listener);\n        };\n    }\n    /**\n     * Patch methods that remove all listeners so we remove our\n     * internal references for a given event.\n     * @param ee EventEmitter instance\n     * @param original reference to the patched method\n     */\n    _patchRemoveAllListeners(ee, original) {\n        const contextManager = this;\n        return function (event) {\n            const map = contextManager._getPatchMap(ee);\n            if (map !== undefined) {\n                if (arguments.length === 0) {\n                    contextManager._createPatchMap(ee);\n                }\n                else if (map[event] !== undefined) {\n                    delete map[event];\n                }\n            }\n            return original.apply(this, arguments);\n        };\n    }\n    /**\n     * Patch methods on an event emitter instance that can add listeners so we\n     * can force them to propagate a given context.\n     * @param ee EventEmitter instance\n     * @param original reference to the patched method\n     * @param [context] context to propagate when calling listeners\n     */\n    _patchAddListener(ee, original, context) {\n        const contextManager = this;\n        return function (event, listener) {\n            /**\n             * This check is required to prevent double-wrapping the listener.\n             * The implementation for ee.once wraps the listener and calls ee.on.\n             * Without this check, we would wrap that wrapped listener.\n             * This causes an issue because ee.removeListener depends on the onceWrapper\n             * to properly remove the listener. If we wrap their wrapper, we break\n             * that detection.\n             */\n            if (contextManager._wrapped) {\n                return original.call(this, event, listener);\n            }\n            let map = contextManager._getPatchMap(ee);\n            if (map === undefined) {\n                map = contextManager._createPatchMap(ee);\n            }\n            let listeners = map[event];\n            if (listeners === undefined) {\n                listeners = new WeakMap();\n                map[event] = listeners;\n            }\n            const patchedListener = contextManager.bind(context, listener);\n            // store a weak reference of the user listener to ours\n            listeners.set(listener, patchedListener);\n            /**\n             * See comment at the start of this function for the explanation of this property.\n             */\n            contextManager._wrapped = true;\n            try {\n                return original.call(this, event, patchedListener);\n            }\n            finally {\n                contextManager._wrapped = false;\n            }\n        };\n    }\n    _createPatchMap(ee) {\n        const map = Object.create(null);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        ee[this._kOtListeners] = map;\n        return map;\n    }\n    _getPatchMap(ee) {\n        return ee[this._kOtListeners];\n    }\n    _kOtListeners = Symbol('OtListeners');\n    _wrapped = false;\n}\nexports.AbstractAsyncHooksContextManager = AbstractAsyncHooksContextManager;\n//# sourceMappingURL=AbstractAsyncHooksContextManager.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvbnRleHQtYXN5bmMtaG9va3MvYnVpbGQvc3JjL0Fic3RyYWN0QXN5bmNIb29rc0NvbnRleHRNYW5hZ2VyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHdDQUF3QztBQUN4QyxpQkFBaUIsbUJBQU8sQ0FBQyxzQkFBUTtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QztBQUN4QyIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9jb250ZXh0LWFzeW5jLWhvb2tzL2J1aWxkL3NyYy9BYnN0cmFjdEFzeW5jSG9va3NDb250ZXh0TWFuYWdlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFic3RyYWN0QXN5bmNIb29rc0NvbnRleHRNYW5hZ2VyID0gdm9pZCAwO1xuY29uc3QgZXZlbnRzXzEgPSByZXF1aXJlKFwiZXZlbnRzXCIpO1xuY29uc3QgQUREX0xJU1RFTkVSX01FVEhPRFMgPSBbXG4gICAgJ2FkZExpc3RlbmVyJyxcbiAgICAnb24nLFxuICAgICdvbmNlJyxcbiAgICAncHJlcGVuZExpc3RlbmVyJyxcbiAgICAncHJlcGVuZE9uY2VMaXN0ZW5lcicsXG5dO1xuY2xhc3MgQWJzdHJhY3RBc3luY0hvb2tzQ29udGV4dE1hbmFnZXIge1xuICAgIC8qKlxuICAgICAqIEJpbmRzIGEgdGhlIGNlcnRhaW4gY29udGV4dCBvciB0aGUgYWN0aXZlIG9uZSB0byB0aGUgdGFyZ2V0IGZ1bmN0aW9uIGFuZCB0aGVuIHJldHVybnMgdGhlIHRhcmdldFxuICAgICAqIEBwYXJhbSBjb250ZXh0IEEgY29udGV4dCAoc3BhbikgdG8gYmUgYmluZCB0byB0YXJnZXRcbiAgICAgKiBAcGFyYW0gdGFyZ2V0IGEgZnVuY3Rpb24gb3IgZXZlbnQgZW1pdHRlci4gV2hlbiB0YXJnZXQgb3Igb25lIG9mIGl0cyBjYWxsYmFja3MgaXMgY2FsbGVkLFxuICAgICAqICB0aGUgcHJvdmlkZWQgY29udGV4dCB3aWxsIGJlIHVzZWQgYXMgdGhlIGFjdGl2ZSBjb250ZXh0IGZvciB0aGUgZHVyYXRpb24gb2YgdGhlIGNhbGwuXG4gICAgICovXG4gICAgYmluZChjb250ZXh0LCB0YXJnZXQpIHtcbiAgICAgICAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIGV2ZW50c18xLkV2ZW50RW1pdHRlcikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2JpbmRFdmVudEVtaXR0ZXIoY29udGV4dCwgdGFyZ2V0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2JpbmRGdW5jdGlvbihjb250ZXh0LCB0YXJnZXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuICAgIF9iaW5kRnVuY3Rpb24oY29udGV4dCwgdGFyZ2V0KSB7XG4gICAgICAgIGNvbnN0IG1hbmFnZXIgPSB0aGlzO1xuICAgICAgICBjb25zdCBjb250ZXh0V3JhcHBlciA9IGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgICAgICByZXR1cm4gbWFuYWdlci53aXRoKGNvbnRleHQsICgpID0+IHRhcmdldC5hcHBseSh0aGlzLCBhcmdzKSk7XG4gICAgICAgIH07XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb250ZXh0V3JhcHBlciwgJ2xlbmd0aCcsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgdmFsdWU6IHRhcmdldC5sZW5ndGgsXG4gICAgICAgIH0pO1xuICAgICAgICAvKipcbiAgICAgICAgICogSXQgaXNuJ3QgcG9zc2libGUgdG8gdGVsbCBUeXBlc2NyaXB0IHRoYXQgY29udGV4dFdyYXBwZXIgaXMgdGhlIHNhbWUgYXMgVFxuICAgICAgICAgKiBzbyB3ZSBmb3JjZWQgdG8gY2FzdCBhcyBhbnkgaGVyZS5cbiAgICAgICAgICovXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIHJldHVybiBjb250ZXh0V3JhcHBlcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQnkgZGVmYXVsdCwgRXZlbnRFbWl0dGVyIGNhbGwgdGhlaXIgY2FsbGJhY2sgd2l0aCB0aGVpciBjb250ZXh0LCB3aGljaCB3ZSBkb1xuICAgICAqIG5vdCB3YW50LCBpbnN0ZWFkIHdlIHdpbGwgYmluZCBhIHNwZWNpZmljIGNvbnRleHQgdG8gYWxsIGNhbGxiYWNrcyB0aGF0XG4gICAgICogZ28gdGhyb3VnaCBpdC5cbiAgICAgKiBAcGFyYW0gY29udGV4dCB0aGUgY29udGV4dCB3ZSB3YW50IHRvIGJpbmRcbiAgICAgKiBAcGFyYW0gZWUgRXZlbnRFbWl0dGVyIGFuIGluc3RhbmNlIG9mIEV2ZW50RW1pdHRlciB0byBwYXRjaFxuICAgICAqL1xuICAgIF9iaW5kRXZlbnRFbWl0dGVyKGNvbnRleHQsIGVlKSB7XG4gICAgICAgIGNvbnN0IG1hcCA9IHRoaXMuX2dldFBhdGNoTWFwKGVlKTtcbiAgICAgICAgaWYgKG1hcCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIGVlO1xuICAgICAgICB0aGlzLl9jcmVhdGVQYXRjaE1hcChlZSk7XG4gICAgICAgIC8vIHBhdGNoIG1ldGhvZHMgdGhhdCBhZGQgYSBsaXN0ZW5lciB0byBwcm9wYWdhdGUgY29udGV4dFxuICAgICAgICBBRERfTElTVEVORVJfTUVUSE9EUy5mb3JFYWNoKG1ldGhvZE5hbWUgPT4ge1xuICAgICAgICAgICAgaWYgKGVlW21ldGhvZE5hbWVdID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgZWVbbWV0aG9kTmFtZV0gPSB0aGlzLl9wYXRjaEFkZExpc3RlbmVyKGVlLCBlZVttZXRob2ROYW1lXSwgY29udGV4dCk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBwYXRjaCBtZXRob2RzIHRoYXQgcmVtb3ZlIGEgbGlzdGVuZXJcbiAgICAgICAgaWYgKHR5cGVvZiBlZS5yZW1vdmVMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgZWUucmVtb3ZlTGlzdGVuZXIgPSB0aGlzLl9wYXRjaFJlbW92ZUxpc3RlbmVyKGVlLCBlZS5yZW1vdmVMaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBlZS5vZmYgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGVlLm9mZiA9IHRoaXMuX3BhdGNoUmVtb3ZlTGlzdGVuZXIoZWUsIGVlLm9mZik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcGF0Y2ggbWV0aG9kIHRoYXQgcmVtb3ZlIGFsbCBsaXN0ZW5lcnNcbiAgICAgICAgaWYgKHR5cGVvZiBlZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGVlLnJlbW92ZUFsbExpc3RlbmVycyA9IHRoaXMuX3BhdGNoUmVtb3ZlQWxsTGlzdGVuZXJzKGVlLCBlZS5yZW1vdmVBbGxMaXN0ZW5lcnMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGF0Y2ggbWV0aG9kcyB0aGF0IHJlbW92ZSBhIGdpdmVuIGxpc3RlbmVyIHNvIHRoYXQgd2UgbWF0Y2ggdGhlIFwicGF0Y2hlZFwiXG4gICAgICogdmVyc2lvbiBvZiB0aGF0IGxpc3RlbmVyICh0aGUgb25lIHRoYXQgcHJvcGFnYXRlIGNvbnRleHQpLlxuICAgICAqIEBwYXJhbSBlZSBFdmVudEVtaXR0ZXIgaW5zdGFuY2VcbiAgICAgKiBAcGFyYW0gb3JpZ2luYWwgcmVmZXJlbmNlIHRvIHRoZSBwYXRjaGVkIG1ldGhvZFxuICAgICAqL1xuICAgIF9wYXRjaFJlbW92ZUxpc3RlbmVyKGVlLCBvcmlnaW5hbCkge1xuICAgICAgICBjb25zdCBjb250ZXh0TWFuYWdlciA9IHRoaXM7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQsIGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBjb25zdCBldmVudHMgPSBjb250ZXh0TWFuYWdlci5fZ2V0UGF0Y2hNYXAoZWUpPy5bZXZlbnRdO1xuICAgICAgICAgICAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsLmNhbGwodGhpcywgZXZlbnQsIGxpc3RlbmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHBhdGNoZWRMaXN0ZW5lciA9IGV2ZW50cy5nZXQobGlzdGVuZXIpO1xuICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsLmNhbGwodGhpcywgZXZlbnQsIHBhdGNoZWRMaXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBhdGNoIG1ldGhvZHMgdGhhdCByZW1vdmUgYWxsIGxpc3RlbmVycyBzbyB3ZSByZW1vdmUgb3VyXG4gICAgICogaW50ZXJuYWwgcmVmZXJlbmNlcyBmb3IgYSBnaXZlbiBldmVudC5cbiAgICAgKiBAcGFyYW0gZWUgRXZlbnRFbWl0dGVyIGluc3RhbmNlXG4gICAgICogQHBhcmFtIG9yaWdpbmFsIHJlZmVyZW5jZSB0byB0aGUgcGF0Y2hlZCBtZXRob2RcbiAgICAgKi9cbiAgICBfcGF0Y2hSZW1vdmVBbGxMaXN0ZW5lcnMoZWUsIG9yaWdpbmFsKSB7XG4gICAgICAgIGNvbnN0IGNvbnRleHRNYW5hZ2VyID0gdGhpcztcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgY29uc3QgbWFwID0gY29udGV4dE1hbmFnZXIuX2dldFBhdGNoTWFwKGVlKTtcbiAgICAgICAgICAgIGlmIChtYXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHRNYW5hZ2VyLl9jcmVhdGVQYXRjaE1hcChlZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG1hcFtldmVudF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgbWFwW2V2ZW50XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb3JpZ2luYWwuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGF0Y2ggbWV0aG9kcyBvbiBhbiBldmVudCBlbWl0dGVyIGluc3RhbmNlIHRoYXQgY2FuIGFkZCBsaXN0ZW5lcnMgc28gd2VcbiAgICAgKiBjYW4gZm9yY2UgdGhlbSB0byBwcm9wYWdhdGUgYSBnaXZlbiBjb250ZXh0LlxuICAgICAqIEBwYXJhbSBlZSBFdmVudEVtaXR0ZXIgaW5zdGFuY2VcbiAgICAgKiBAcGFyYW0gb3JpZ2luYWwgcmVmZXJlbmNlIHRvIHRoZSBwYXRjaGVkIG1ldGhvZFxuICAgICAqIEBwYXJhbSBbY29udGV4dF0gY29udGV4dCB0byBwcm9wYWdhdGUgd2hlbiBjYWxsaW5nIGxpc3RlbmVyc1xuICAgICAqL1xuICAgIF9wYXRjaEFkZExpc3RlbmVyKGVlLCBvcmlnaW5hbCwgY29udGV4dCkge1xuICAgICAgICBjb25zdCBjb250ZXh0TWFuYWdlciA9IHRoaXM7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQsIGxpc3RlbmVyKSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRoaXMgY2hlY2sgaXMgcmVxdWlyZWQgdG8gcHJldmVudCBkb3VibGUtd3JhcHBpbmcgdGhlIGxpc3RlbmVyLlxuICAgICAgICAgICAgICogVGhlIGltcGxlbWVudGF0aW9uIGZvciBlZS5vbmNlIHdyYXBzIHRoZSBsaXN0ZW5lciBhbmQgY2FsbHMgZWUub24uXG4gICAgICAgICAgICAgKiBXaXRob3V0IHRoaXMgY2hlY2ssIHdlIHdvdWxkIHdyYXAgdGhhdCB3cmFwcGVkIGxpc3RlbmVyLlxuICAgICAgICAgICAgICogVGhpcyBjYXVzZXMgYW4gaXNzdWUgYmVjYXVzZSBlZS5yZW1vdmVMaXN0ZW5lciBkZXBlbmRzIG9uIHRoZSBvbmNlV3JhcHBlclxuICAgICAgICAgICAgICogdG8gcHJvcGVybHkgcmVtb3ZlIHRoZSBsaXN0ZW5lci4gSWYgd2Ugd3JhcCB0aGVpciB3cmFwcGVyLCB3ZSBicmVha1xuICAgICAgICAgICAgICogdGhhdCBkZXRlY3Rpb24uXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmIChjb250ZXh0TWFuYWdlci5fd3JhcHBlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbC5jYWxsKHRoaXMsIGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgbWFwID0gY29udGV4dE1hbmFnZXIuX2dldFBhdGNoTWFwKGVlKTtcbiAgICAgICAgICAgIGlmIChtYXAgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIG1hcCA9IGNvbnRleHRNYW5hZ2VyLl9jcmVhdGVQYXRjaE1hcChlZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgbGlzdGVuZXJzID0gbWFwW2V2ZW50XTtcbiAgICAgICAgICAgIGlmIChsaXN0ZW5lcnMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGxpc3RlbmVycyA9IG5ldyBXZWFrTWFwKCk7XG4gICAgICAgICAgICAgICAgbWFwW2V2ZW50XSA9IGxpc3RlbmVycztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHBhdGNoZWRMaXN0ZW5lciA9IGNvbnRleHRNYW5hZ2VyLmJpbmQoY29udGV4dCwgbGlzdGVuZXIpO1xuICAgICAgICAgICAgLy8gc3RvcmUgYSB3ZWFrIHJlZmVyZW5jZSBvZiB0aGUgdXNlciBsaXN0ZW5lciB0byBvdXJzXG4gICAgICAgICAgICBsaXN0ZW5lcnMuc2V0KGxpc3RlbmVyLCBwYXRjaGVkTGlzdGVuZXIpO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTZWUgY29tbWVudCBhdCB0aGUgc3RhcnQgb2YgdGhpcyBmdW5jdGlvbiBmb3IgdGhlIGV4cGxhbmF0aW9uIG9mIHRoaXMgcHJvcGVydHkuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvbnRleHRNYW5hZ2VyLl93cmFwcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsLmNhbGwodGhpcywgZXZlbnQsIHBhdGNoZWRMaXN0ZW5lcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICBjb250ZXh0TWFuYWdlci5fd3JhcHBlZCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICBfY3JlYXRlUGF0Y2hNYXAoZWUpIHtcbiAgICAgICAgY29uc3QgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgZWVbdGhpcy5fa090TGlzdGVuZXJzXSA9IG1hcDtcbiAgICAgICAgcmV0dXJuIG1hcDtcbiAgICB9XG4gICAgX2dldFBhdGNoTWFwKGVlKSB7XG4gICAgICAgIHJldHVybiBlZVt0aGlzLl9rT3RMaXN0ZW5lcnNdO1xuICAgIH1cbiAgICBfa090TGlzdGVuZXJzID0gU3ltYm9sKCdPdExpc3RlbmVycycpO1xuICAgIF93cmFwcGVkID0gZmFsc2U7XG59XG5leHBvcnRzLkFic3RyYWN0QXN5bmNIb29rc0NvbnRleHRNYW5hZ2VyID0gQWJzdHJhY3RBc3luY0hvb2tzQ29udGV4dE1hbmFnZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BYnN0cmFjdEFzeW5jSG9va3NDb250ZXh0TWFuYWdlci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/context-async-hooks/build/src/AbstractAsyncHooksContextManager.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/context-async-hooks/build/src/AsyncHooksContextManager.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/context-async-hooks/build/src/AsyncHooksContextManager.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AsyncHooksContextManager = void 0;\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst asyncHooks = __webpack_require__(/*! async_hooks */ \"async_hooks\");\nconst AbstractAsyncHooksContextManager_1 = __webpack_require__(/*! ./AbstractAsyncHooksContextManager */ \"(instrument)/./node_modules/@opentelemetry/context-async-hooks/build/src/AbstractAsyncHooksContextManager.js\");\nclass AsyncHooksContextManager extends AbstractAsyncHooksContextManager_1.AbstractAsyncHooksContextManager {\n    _asyncHook;\n    _contexts = new Map();\n    _stack = [];\n    constructor() {\n        super();\n        this._asyncHook = asyncHooks.createHook({\n            init: this._init.bind(this),\n            before: this._before.bind(this),\n            after: this._after.bind(this),\n            destroy: this._destroy.bind(this),\n            promiseResolve: this._destroy.bind(this),\n        });\n    }\n    active() {\n        return this._stack[this._stack.length - 1] ?? api_1.ROOT_CONTEXT;\n    }\n    with(context, fn, thisArg, ...args) {\n        this._enterContext(context);\n        try {\n            return fn.call(thisArg, ...args);\n        }\n        finally {\n            this._exitContext();\n        }\n    }\n    enable() {\n        this._asyncHook.enable();\n        return this;\n    }\n    disable() {\n        this._asyncHook.disable();\n        this._contexts.clear();\n        this._stack = [];\n        return this;\n    }\n    /**\n     * Init hook will be called when userland create a async context, setting the\n     * context as the current one if it exist.\n     * @param uid id of the async context\n     * @param type the resource type\n     */\n    _init(uid, type) {\n        // ignore TIMERWRAP as they combine timers with same timeout which can lead to\n        // false context propagation. TIMERWRAP has been removed in node 11\n        // every timer has it's own `Timeout` resource anyway which is used to propagate\n        // context.\n        if (type === 'TIMERWRAP')\n            return;\n        const context = this._stack[this._stack.length - 1];\n        if (context !== undefined) {\n            this._contexts.set(uid, context);\n        }\n    }\n    /**\n     * Destroy hook will be called when a given context is no longer used so we can\n     * remove its attached context.\n     * @param uid uid of the async context\n     */\n    _destroy(uid) {\n        this._contexts.delete(uid);\n    }\n    /**\n     * Before hook is called just before executing a async context.\n     * @param uid uid of the async context\n     */\n    _before(uid) {\n        const context = this._contexts.get(uid);\n        if (context !== undefined) {\n            this._enterContext(context);\n        }\n    }\n    /**\n     * After hook is called just after completing the execution of a async context.\n     */\n    _after() {\n        this._exitContext();\n    }\n    /**\n     * Set the given context as active\n     */\n    _enterContext(context) {\n        this._stack.push(context);\n    }\n    /**\n     * Remove the context at the root of the stack\n     */\n    _exitContext() {\n        this._stack.pop();\n    }\n}\nexports.AsyncHooksContextManager = AsyncHooksContextManager;\n//# sourceMappingURL=AsyncHooksContextManager.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvbnRleHQtYXN5bmMtaG9va3MvYnVpbGQvc3JjL0FzeW5jSG9va3NDb250ZXh0TWFuYWdlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQ0FBZ0M7QUFDaEMsY0FBYyxtQkFBTyxDQUFDLDZGQUFvQjtBQUMxQyxtQkFBbUIsbUJBQU8sQ0FBQyxnQ0FBYTtBQUN4QywyQ0FBMkMsbUJBQU8sQ0FBQyx3SkFBb0M7QUFDdkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQyIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9jb250ZXh0LWFzeW5jLWhvb2tzL2J1aWxkL3NyYy9Bc3luY0hvb2tzQ29udGV4dE1hbmFnZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Bc3luY0hvb2tzQ29udGV4dE1hbmFnZXIgPSB2b2lkIDA7XG5jb25zdCBhcGlfMSA9IHJlcXVpcmUoXCJAb3BlbnRlbGVtZXRyeS9hcGlcIik7XG5jb25zdCBhc3luY0hvb2tzID0gcmVxdWlyZShcImFzeW5jX2hvb2tzXCIpO1xuY29uc3QgQWJzdHJhY3RBc3luY0hvb2tzQ29udGV4dE1hbmFnZXJfMSA9IHJlcXVpcmUoXCIuL0Fic3RyYWN0QXN5bmNIb29rc0NvbnRleHRNYW5hZ2VyXCIpO1xuY2xhc3MgQXN5bmNIb29rc0NvbnRleHRNYW5hZ2VyIGV4dGVuZHMgQWJzdHJhY3RBc3luY0hvb2tzQ29udGV4dE1hbmFnZXJfMS5BYnN0cmFjdEFzeW5jSG9va3NDb250ZXh0TWFuYWdlciB7XG4gICAgX2FzeW5jSG9vaztcbiAgICBfY29udGV4dHMgPSBuZXcgTWFwKCk7XG4gICAgX3N0YWNrID0gW107XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuX2FzeW5jSG9vayA9IGFzeW5jSG9va3MuY3JlYXRlSG9vayh7XG4gICAgICAgICAgICBpbml0OiB0aGlzLl9pbml0LmJpbmQodGhpcyksXG4gICAgICAgICAgICBiZWZvcmU6IHRoaXMuX2JlZm9yZS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgYWZ0ZXI6IHRoaXMuX2FmdGVyLmJpbmQodGhpcyksXG4gICAgICAgICAgICBkZXN0cm95OiB0aGlzLl9kZXN0cm95LmJpbmQodGhpcyksXG4gICAgICAgICAgICBwcm9taXNlUmVzb2x2ZTogdGhpcy5fZGVzdHJveS5iaW5kKHRoaXMpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgYWN0aXZlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3RhY2tbdGhpcy5fc3RhY2subGVuZ3RoIC0gMV0gPz8gYXBpXzEuUk9PVF9DT05URVhUO1xuICAgIH1cbiAgICB3aXRoKGNvbnRleHQsIGZuLCB0aGlzQXJnLCAuLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuX2VudGVyQ29udGV4dChjb250ZXh0KTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBmbi5jYWxsKHRoaXNBcmcsIC4uLmFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdGhpcy5fZXhpdENvbnRleHQoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbmFibGUoKSB7XG4gICAgICAgIHRoaXMuX2FzeW5jSG9vay5lbmFibGUoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGRpc2FibGUoKSB7XG4gICAgICAgIHRoaXMuX2FzeW5jSG9vay5kaXNhYmxlKCk7XG4gICAgICAgIHRoaXMuX2NvbnRleHRzLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuX3N0YWNrID0gW107XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbml0IGhvb2sgd2lsbCBiZSBjYWxsZWQgd2hlbiB1c2VybGFuZCBjcmVhdGUgYSBhc3luYyBjb250ZXh0LCBzZXR0aW5nIHRoZVxuICAgICAqIGNvbnRleHQgYXMgdGhlIGN1cnJlbnQgb25lIGlmIGl0IGV4aXN0LlxuICAgICAqIEBwYXJhbSB1aWQgaWQgb2YgdGhlIGFzeW5jIGNvbnRleHRcbiAgICAgKiBAcGFyYW0gdHlwZSB0aGUgcmVzb3VyY2UgdHlwZVxuICAgICAqL1xuICAgIF9pbml0KHVpZCwgdHlwZSkge1xuICAgICAgICAvLyBpZ25vcmUgVElNRVJXUkFQIGFzIHRoZXkgY29tYmluZSB0aW1lcnMgd2l0aCBzYW1lIHRpbWVvdXQgd2hpY2ggY2FuIGxlYWQgdG9cbiAgICAgICAgLy8gZmFsc2UgY29udGV4dCBwcm9wYWdhdGlvbi4gVElNRVJXUkFQIGhhcyBiZWVuIHJlbW92ZWQgaW4gbm9kZSAxMVxuICAgICAgICAvLyBldmVyeSB0aW1lciBoYXMgaXQncyBvd24gYFRpbWVvdXRgIHJlc291cmNlIGFueXdheSB3aGljaCBpcyB1c2VkIHRvIHByb3BhZ2F0ZVxuICAgICAgICAvLyBjb250ZXh0LlxuICAgICAgICBpZiAodHlwZSA9PT0gJ1RJTUVSV1JBUCcpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLl9zdGFja1t0aGlzLl9zdGFjay5sZW5ndGggLSAxXTtcbiAgICAgICAgaWYgKGNvbnRleHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dHMuc2V0KHVpZCwgY29udGV4dCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVzdHJveSBob29rIHdpbGwgYmUgY2FsbGVkIHdoZW4gYSBnaXZlbiBjb250ZXh0IGlzIG5vIGxvbmdlciB1c2VkIHNvIHdlIGNhblxuICAgICAqIHJlbW92ZSBpdHMgYXR0YWNoZWQgY29udGV4dC5cbiAgICAgKiBAcGFyYW0gdWlkIHVpZCBvZiB0aGUgYXN5bmMgY29udGV4dFxuICAgICAqL1xuICAgIF9kZXN0cm95KHVpZCkge1xuICAgICAgICB0aGlzLl9jb250ZXh0cy5kZWxldGUodWlkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQmVmb3JlIGhvb2sgaXMgY2FsbGVkIGp1c3QgYmVmb3JlIGV4ZWN1dGluZyBhIGFzeW5jIGNvbnRleHQuXG4gICAgICogQHBhcmFtIHVpZCB1aWQgb2YgdGhlIGFzeW5jIGNvbnRleHRcbiAgICAgKi9cbiAgICBfYmVmb3JlKHVpZCkge1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5fY29udGV4dHMuZ2V0KHVpZCk7XG4gICAgICAgIGlmIChjb250ZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2VudGVyQ29udGV4dChjb250ZXh0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZnRlciBob29rIGlzIGNhbGxlZCBqdXN0IGFmdGVyIGNvbXBsZXRpbmcgdGhlIGV4ZWN1dGlvbiBvZiBhIGFzeW5jIGNvbnRleHQuXG4gICAgICovXG4gICAgX2FmdGVyKCkge1xuICAgICAgICB0aGlzLl9leGl0Q29udGV4dCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGdpdmVuIGNvbnRleHQgYXMgYWN0aXZlXG4gICAgICovXG4gICAgX2VudGVyQ29udGV4dChjb250ZXh0KSB7XG4gICAgICAgIHRoaXMuX3N0YWNrLnB1c2goY29udGV4dCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbW92ZSB0aGUgY29udGV4dCBhdCB0aGUgcm9vdCBvZiB0aGUgc3RhY2tcbiAgICAgKi9cbiAgICBfZXhpdENvbnRleHQoKSB7XG4gICAgICAgIHRoaXMuX3N0YWNrLnBvcCgpO1xuICAgIH1cbn1cbmV4cG9ydHMuQXN5bmNIb29rc0NvbnRleHRNYW5hZ2VyID0gQXN5bmNIb29rc0NvbnRleHRNYW5hZ2VyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXN5bmNIb29rc0NvbnRleHRNYW5hZ2VyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/context-async-hooks/build/src/AsyncHooksContextManager.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/context-async-hooks/build/src/AsyncLocalStorageContextManager.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/context-async-hooks/build/src/AsyncLocalStorageContextManager.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AsyncLocalStorageContextManager = void 0;\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst async_hooks_1 = __webpack_require__(/*! async_hooks */ \"async_hooks\");\nconst AbstractAsyncHooksContextManager_1 = __webpack_require__(/*! ./AbstractAsyncHooksContextManager */ \"(instrument)/./node_modules/@opentelemetry/context-async-hooks/build/src/AbstractAsyncHooksContextManager.js\");\nclass AsyncLocalStorageContextManager extends AbstractAsyncHooksContextManager_1.AbstractAsyncHooksContextManager {\n    _asyncLocalStorage;\n    constructor() {\n        super();\n        this._asyncLocalStorage = new async_hooks_1.AsyncLocalStorage();\n    }\n    active() {\n        return this._asyncLocalStorage.getStore() ?? api_1.ROOT_CONTEXT;\n    }\n    with(context, fn, thisArg, ...args) {\n        const cb = thisArg == null ? fn : fn.bind(thisArg);\n        return this._asyncLocalStorage.run(context, cb, ...args);\n    }\n    enable() {\n        return this;\n    }\n    disable() {\n        this._asyncLocalStorage.disable();\n        return this;\n    }\n}\nexports.AsyncLocalStorageContextManager = AsyncLocalStorageContextManager;\n//# sourceMappingURL=AsyncLocalStorageContextManager.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvbnRleHQtYXN5bmMtaG9va3MvYnVpbGQvc3JjL0FzeW5jTG9jYWxTdG9yYWdlQ29udGV4dE1hbmFnZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsdUNBQXVDO0FBQ3ZDLGNBQWMsbUJBQU8sQ0FBQyw2RkFBb0I7QUFDMUMsc0JBQXNCLG1CQUFPLENBQUMsZ0NBQWE7QUFDM0MsMkNBQTJDLG1CQUFPLENBQUMsd0pBQW9DO0FBQ3ZGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QztBQUN2QyIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9jb250ZXh0LWFzeW5jLWhvb2tzL2J1aWxkL3NyYy9Bc3luY0xvY2FsU3RvcmFnZUNvbnRleHRNYW5hZ2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXN5bmNMb2NhbFN0b3JhZ2VDb250ZXh0TWFuYWdlciA9IHZvaWQgMDtcbmNvbnN0IGFwaV8xID0gcmVxdWlyZShcIkBvcGVudGVsZW1ldHJ5L2FwaVwiKTtcbmNvbnN0IGFzeW5jX2hvb2tzXzEgPSByZXF1aXJlKFwiYXN5bmNfaG9va3NcIik7XG5jb25zdCBBYnN0cmFjdEFzeW5jSG9va3NDb250ZXh0TWFuYWdlcl8xID0gcmVxdWlyZShcIi4vQWJzdHJhY3RBc3luY0hvb2tzQ29udGV4dE1hbmFnZXJcIik7XG5jbGFzcyBBc3luY0xvY2FsU3RvcmFnZUNvbnRleHRNYW5hZ2VyIGV4dGVuZHMgQWJzdHJhY3RBc3luY0hvb2tzQ29udGV4dE1hbmFnZXJfMS5BYnN0cmFjdEFzeW5jSG9va3NDb250ZXh0TWFuYWdlciB7XG4gICAgX2FzeW5jTG9jYWxTdG9yYWdlO1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl9hc3luY0xvY2FsU3RvcmFnZSA9IG5ldyBhc3luY19ob29rc18xLkFzeW5jTG9jYWxTdG9yYWdlKCk7XG4gICAgfVxuICAgIGFjdGl2ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FzeW5jTG9jYWxTdG9yYWdlLmdldFN0b3JlKCkgPz8gYXBpXzEuUk9PVF9DT05URVhUO1xuICAgIH1cbiAgICB3aXRoKGNvbnRleHQsIGZuLCB0aGlzQXJnLCAuLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IGNiID0gdGhpc0FyZyA9PSBudWxsID8gZm4gOiBmbi5iaW5kKHRoaXNBcmcpO1xuICAgICAgICByZXR1cm4gdGhpcy5fYXN5bmNMb2NhbFN0b3JhZ2UucnVuKGNvbnRleHQsIGNiLCAuLi5hcmdzKTtcbiAgICB9XG4gICAgZW5hYmxlKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZGlzYWJsZSgpIHtcbiAgICAgICAgdGhpcy5fYXN5bmNMb2NhbFN0b3JhZ2UuZGlzYWJsZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5leHBvcnRzLkFzeW5jTG9jYWxTdG9yYWdlQ29udGV4dE1hbmFnZXIgPSBBc3luY0xvY2FsU3RvcmFnZUNvbnRleHRNYW5hZ2VyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXN5bmNMb2NhbFN0b3JhZ2VDb250ZXh0TWFuYWdlci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/context-async-hooks/build/src/AsyncLocalStorageContextManager.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/context-async-hooks/build/src/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@opentelemetry/context-async-hooks/build/src/index.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AsyncLocalStorageContextManager = exports.AsyncHooksContextManager = void 0;\nvar AsyncHooksContextManager_1 = __webpack_require__(/*! ./AsyncHooksContextManager */ \"(instrument)/./node_modules/@opentelemetry/context-async-hooks/build/src/AsyncHooksContextManager.js\");\nObject.defineProperty(exports, \"AsyncHooksContextManager\", ({ enumerable: true, get: function () { return AsyncHooksContextManager_1.AsyncHooksContextManager; } }));\nvar AsyncLocalStorageContextManager_1 = __webpack_require__(/*! ./AsyncLocalStorageContextManager */ \"(instrument)/./node_modules/@opentelemetry/context-async-hooks/build/src/AsyncLocalStorageContextManager.js\");\nObject.defineProperty(exports, \"AsyncLocalStorageContextManager\", ({ enumerable: true, get: function () { return AsyncLocalStorageContextManager_1.AsyncLocalStorageContextManager; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvbnRleHQtYXN5bmMtaG9va3MvYnVpbGQvc3JjL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHVDQUF1QyxHQUFHLGdDQUFnQztBQUMxRSxpQ0FBaUMsbUJBQU8sQ0FBQyx3SUFBNEI7QUFDckUsNERBQTJELEVBQUUscUNBQXFDLCtEQUErRCxFQUFDO0FBQ2xLLHdDQUF3QyxtQkFBTyxDQUFDLHNKQUFtQztBQUNuRixtRUFBa0UsRUFBRSxxQ0FBcUMsNkVBQTZFLEVBQUM7QUFDdkwiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvY29udGV4dC1hc3luYy1ob29rcy9idWlsZC9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Bc3luY0xvY2FsU3RvcmFnZUNvbnRleHRNYW5hZ2VyID0gZXhwb3J0cy5Bc3luY0hvb2tzQ29udGV4dE1hbmFnZXIgPSB2b2lkIDA7XG52YXIgQXN5bmNIb29rc0NvbnRleHRNYW5hZ2VyXzEgPSByZXF1aXJlKFwiLi9Bc3luY0hvb2tzQ29udGV4dE1hbmFnZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJBc3luY0hvb2tzQ29udGV4dE1hbmFnZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEFzeW5jSG9va3NDb250ZXh0TWFuYWdlcl8xLkFzeW5jSG9va3NDb250ZXh0TWFuYWdlcjsgfSB9KTtcbnZhciBBc3luY0xvY2FsU3RvcmFnZUNvbnRleHRNYW5hZ2VyXzEgPSByZXF1aXJlKFwiLi9Bc3luY0xvY2FsU3RvcmFnZUNvbnRleHRNYW5hZ2VyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQXN5bmNMb2NhbFN0b3JhZ2VDb250ZXh0TWFuYWdlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQXN5bmNMb2NhbFN0b3JhZ2VDb250ZXh0TWFuYWdlcl8xLkFzeW5jTG9jYWxTdG9yYWdlQ29udGV4dE1hbmFnZXI7IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/context-async-hooks/build/src/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/core/build/esm/ExportResult.js":
/*!********************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/ExportResult.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExportResultCode: () => (/* binding */ ExportResultCode)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar ExportResultCode;\n(function (ExportResultCode) {\n    ExportResultCode[ExportResultCode[\"SUCCESS\"] = 0] = \"SUCCESS\";\n    ExportResultCode[ExportResultCode[\"FAILED\"] = 1] = \"FAILED\";\n})(ExportResultCode || (ExportResultCode = {}));\n//# sourceMappingURL=ExportResult.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvcmUvYnVpbGQvZXNtL0V4cG9ydFJlc3VsdC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxDQUFDLDRDQUE0QztBQUM3QyIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9jb3JlL2J1aWxkL2VzbS9FeHBvcnRSZXN1bHQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmV4cG9ydCB2YXIgRXhwb3J0UmVzdWx0Q29kZTtcbihmdW5jdGlvbiAoRXhwb3J0UmVzdWx0Q29kZSkge1xuICAgIEV4cG9ydFJlc3VsdENvZGVbRXhwb3J0UmVzdWx0Q29kZVtcIlNVQ0NFU1NcIl0gPSAwXSA9IFwiU1VDQ0VTU1wiO1xuICAgIEV4cG9ydFJlc3VsdENvZGVbRXhwb3J0UmVzdWx0Q29kZVtcIkZBSUxFRFwiXSA9IDFdID0gXCJGQUlMRURcIjtcbn0pKEV4cG9ydFJlc3VsdENvZGUgfHwgKEV4cG9ydFJlc3VsdENvZGUgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RXhwb3J0UmVzdWx0LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/core/build/esm/ExportResult.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/core/build/esm/baggage/constants.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/baggage/constants.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BAGGAGE_HEADER: () => (/* binding */ BAGGAGE_HEADER),\n/* harmony export */   BAGGAGE_ITEMS_SEPARATOR: () => (/* binding */ BAGGAGE_ITEMS_SEPARATOR),\n/* harmony export */   BAGGAGE_KEY_PAIR_SEPARATOR: () => (/* binding */ BAGGAGE_KEY_PAIR_SEPARATOR),\n/* harmony export */   BAGGAGE_MAX_NAME_VALUE_PAIRS: () => (/* binding */ BAGGAGE_MAX_NAME_VALUE_PAIRS),\n/* harmony export */   BAGGAGE_MAX_PER_NAME_VALUE_PAIRS: () => (/* binding */ BAGGAGE_MAX_PER_NAME_VALUE_PAIRS),\n/* harmony export */   BAGGAGE_MAX_TOTAL_LENGTH: () => (/* binding */ BAGGAGE_MAX_TOTAL_LENGTH),\n/* harmony export */   BAGGAGE_PROPERTIES_SEPARATOR: () => (/* binding */ BAGGAGE_PROPERTIES_SEPARATOR)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst BAGGAGE_KEY_PAIR_SEPARATOR = '=';\nconst BAGGAGE_PROPERTIES_SEPARATOR = ';';\nconst BAGGAGE_ITEMS_SEPARATOR = ',';\n// Name of the http header used to propagate the baggage\nconst BAGGAGE_HEADER = 'baggage';\n// Maximum number of name-value pairs allowed by w3c spec\nconst BAGGAGE_MAX_NAME_VALUE_PAIRS = 180;\n// Maximum number of bytes per a single name-value pair allowed by w3c spec\nconst BAGGAGE_MAX_PER_NAME_VALUE_PAIRS = 4096;\n// Maximum total length of all name-value pairs allowed by w3c spec\nconst BAGGAGE_MAX_TOTAL_LENGTH = 8192;\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvcmUvYnVpbGQvZXNtL2JhZ2dhZ2UvY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNBLHVDQUF1QztBQUN2QztBQUNQO0FBQ087QUFDUDtBQUNPO0FBQ1A7QUFDTztBQUNQO0FBQ087QUFDUCIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9jb3JlL2J1aWxkL2VzbS9iYWdnYWdlL2NvbnN0YW50cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuZXhwb3J0IGNvbnN0IEJBR0dBR0VfS0VZX1BBSVJfU0VQQVJBVE9SID0gJz0nO1xuZXhwb3J0IGNvbnN0IEJBR0dBR0VfUFJPUEVSVElFU19TRVBBUkFUT1IgPSAnOyc7XG5leHBvcnQgY29uc3QgQkFHR0FHRV9JVEVNU19TRVBBUkFUT1IgPSAnLCc7XG4vLyBOYW1lIG9mIHRoZSBodHRwIGhlYWRlciB1c2VkIHRvIHByb3BhZ2F0ZSB0aGUgYmFnZ2FnZVxuZXhwb3J0IGNvbnN0IEJBR0dBR0VfSEVBREVSID0gJ2JhZ2dhZ2UnO1xuLy8gTWF4aW11bSBudW1iZXIgb2YgbmFtZS12YWx1ZSBwYWlycyBhbGxvd2VkIGJ5IHczYyBzcGVjXG5leHBvcnQgY29uc3QgQkFHR0FHRV9NQVhfTkFNRV9WQUxVRV9QQUlSUyA9IDE4MDtcbi8vIE1heGltdW0gbnVtYmVyIG9mIGJ5dGVzIHBlciBhIHNpbmdsZSBuYW1lLXZhbHVlIHBhaXIgYWxsb3dlZCBieSB3M2Mgc3BlY1xuZXhwb3J0IGNvbnN0IEJBR0dBR0VfTUFYX1BFUl9OQU1FX1ZBTFVFX1BBSVJTID0gNDA5Njtcbi8vIE1heGltdW0gdG90YWwgbGVuZ3RoIG9mIGFsbCBuYW1lLXZhbHVlIHBhaXJzIGFsbG93ZWQgYnkgdzNjIHNwZWNcbmV4cG9ydCBjb25zdCBCQUdHQUdFX01BWF9UT1RBTF9MRU5HVEggPSA4MTkyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/core/build/esm/baggage/constants.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/core/build/esm/baggage/propagation/W3CBaggagePropagator.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/baggage/propagation/W3CBaggagePropagator.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   W3CBaggagePropagator: () => (/* binding */ W3CBaggagePropagator)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/propagation-api.js\");\n/* harmony import */ var _trace_suppress_tracing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../trace/suppress-tracing */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../constants */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/baggage/constants.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/baggage/utils.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n/**\n * Propagates {@link Baggage} through Context format propagation.\n *\n * Based on the Baggage specification:\n * https://w3c.github.io/baggage/\n */\nclass W3CBaggagePropagator {\n    inject(context, carrier, setter) {\n        const baggage = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.propagation.getBaggage(context);\n        if (!baggage || (0,_trace_suppress_tracing__WEBPACK_IMPORTED_MODULE_1__.isTracingSuppressed)(context))\n            return;\n        const keyPairs = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getKeyPairs)(baggage)\n            .filter((pair) => {\n            return pair.length <= _constants__WEBPACK_IMPORTED_MODULE_3__.BAGGAGE_MAX_PER_NAME_VALUE_PAIRS;\n        })\n            .slice(0, _constants__WEBPACK_IMPORTED_MODULE_3__.BAGGAGE_MAX_NAME_VALUE_PAIRS);\n        const headerValue = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.serializeKeyPairs)(keyPairs);\n        if (headerValue.length > 0) {\n            setter.set(carrier, _constants__WEBPACK_IMPORTED_MODULE_3__.BAGGAGE_HEADER, headerValue);\n        }\n    }\n    extract(context, carrier, getter) {\n        const headerValue = getter.get(carrier, _constants__WEBPACK_IMPORTED_MODULE_3__.BAGGAGE_HEADER);\n        const baggageString = Array.isArray(headerValue)\n            ? headerValue.join(_constants__WEBPACK_IMPORTED_MODULE_3__.BAGGAGE_ITEMS_SEPARATOR)\n            : headerValue;\n        if (!baggageString)\n            return context;\n        const baggage = {};\n        if (baggageString.length === 0) {\n            return context;\n        }\n        const pairs = baggageString.split(_constants__WEBPACK_IMPORTED_MODULE_3__.BAGGAGE_ITEMS_SEPARATOR);\n        pairs.forEach(entry => {\n            const keyPair = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.parsePairKeyValue)(entry);\n            if (keyPair) {\n                const baggageEntry = { value: keyPair.value };\n                if (keyPair.metadata) {\n                    baggageEntry.metadata = keyPair.metadata;\n                }\n                baggage[keyPair.key] = baggageEntry;\n            }\n        });\n        if (Object.entries(baggage).length === 0) {\n            return context;\n        }\n        return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.propagation.setBaggage(context, _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.propagation.createBaggage(baggage));\n    }\n    fields() {\n        return [_constants__WEBPACK_IMPORTED_MODULE_3__.BAGGAGE_HEADER];\n    }\n}\n//# sourceMappingURL=W3CBaggagePropagator.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvcmUvYnVpbGQvZXNtL2JhZ2dhZ2UvcHJvcGFnYXRpb24vVzNDQmFnZ2FnZVByb3BhZ2F0b3IuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDa0Q7QUFDaUI7QUFDcUU7QUFDM0Q7QUFDN0U7QUFDQSxlQUFlLGVBQWU7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0Esd0JBQXdCLDJEQUFXO0FBQ25DLHdCQUF3Qiw0RUFBbUI7QUFDM0M7QUFDQSx5QkFBeUIsbURBQVc7QUFDcEM7QUFDQSxrQ0FBa0Msd0VBQWdDO0FBQ2xFLFNBQVM7QUFDVCxzQkFBc0Isb0VBQTRCO0FBQ2xELDRCQUE0Qix5REFBaUI7QUFDN0M7QUFDQSxnQ0FBZ0Msc0RBQWM7QUFDOUM7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELHNEQUFjO0FBQzlEO0FBQ0EsK0JBQStCLCtEQUF1QjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQywrREFBdUI7QUFDakU7QUFDQSw0QkFBNEIseURBQWlCO0FBQzdDO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsZUFBZSwyREFBVyxxQkFBcUIsMkRBQVc7QUFDMUQ7QUFDQTtBQUNBLGdCQUFnQixzREFBYztBQUM5QjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvY29yZS9idWlsZC9lc20vYmFnZ2FnZS9wcm9wYWdhdGlvbi9XM0NCYWdnYWdlUHJvcGFnYXRvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgcHJvcGFnYXRpb24sIH0gZnJvbSAnQG9wZW50ZWxlbWV0cnkvYXBpJztcbmltcG9ydCB7IGlzVHJhY2luZ1N1cHByZXNzZWQgfSBmcm9tICcuLi8uLi90cmFjZS9zdXBwcmVzcy10cmFjaW5nJztcbmltcG9ydCB7IEJBR0dBR0VfSEVBREVSLCBCQUdHQUdFX0lURU1TX1NFUEFSQVRPUiwgQkFHR0FHRV9NQVhfTkFNRV9WQUxVRV9QQUlSUywgQkFHR0FHRV9NQVhfUEVSX05BTUVfVkFMVUVfUEFJUlMsIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCB7IGdldEtleVBhaXJzLCBwYXJzZVBhaXJLZXlWYWx1ZSwgc2VyaWFsaXplS2V5UGFpcnMgfSBmcm9tICcuLi91dGlscyc7XG4vKipcbiAqIFByb3BhZ2F0ZXMge0BsaW5rIEJhZ2dhZ2V9IHRocm91Z2ggQ29udGV4dCBmb3JtYXQgcHJvcGFnYXRpb24uXG4gKlxuICogQmFzZWQgb24gdGhlIEJhZ2dhZ2Ugc3BlY2lmaWNhdGlvbjpcbiAqIGh0dHBzOi8vdzNjLmdpdGh1Yi5pby9iYWdnYWdlL1xuICovXG5leHBvcnQgY2xhc3MgVzNDQmFnZ2FnZVByb3BhZ2F0b3Ige1xuICAgIGluamVjdChjb250ZXh0LCBjYXJyaWVyLCBzZXR0ZXIpIHtcbiAgICAgICAgY29uc3QgYmFnZ2FnZSA9IHByb3BhZ2F0aW9uLmdldEJhZ2dhZ2UoY29udGV4dCk7XG4gICAgICAgIGlmICghYmFnZ2FnZSB8fCBpc1RyYWNpbmdTdXBwcmVzc2VkKGNvbnRleHQpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCBrZXlQYWlycyA9IGdldEtleVBhaXJzKGJhZ2dhZ2UpXG4gICAgICAgICAgICAuZmlsdGVyKChwYWlyKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gcGFpci5sZW5ndGggPD0gQkFHR0FHRV9NQVhfUEVSX05BTUVfVkFMVUVfUEFJUlM7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAuc2xpY2UoMCwgQkFHR0FHRV9NQVhfTkFNRV9WQUxVRV9QQUlSUyk7XG4gICAgICAgIGNvbnN0IGhlYWRlclZhbHVlID0gc2VyaWFsaXplS2V5UGFpcnMoa2V5UGFpcnMpO1xuICAgICAgICBpZiAoaGVhZGVyVmFsdWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgc2V0dGVyLnNldChjYXJyaWVyLCBCQUdHQUdFX0hFQURFUiwgaGVhZGVyVmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGV4dHJhY3QoY29udGV4dCwgY2FycmllciwgZ2V0dGVyKSB7XG4gICAgICAgIGNvbnN0IGhlYWRlclZhbHVlID0gZ2V0dGVyLmdldChjYXJyaWVyLCBCQUdHQUdFX0hFQURFUik7XG4gICAgICAgIGNvbnN0IGJhZ2dhZ2VTdHJpbmcgPSBBcnJheS5pc0FycmF5KGhlYWRlclZhbHVlKVxuICAgICAgICAgICAgPyBoZWFkZXJWYWx1ZS5qb2luKEJBR0dBR0VfSVRFTVNfU0VQQVJBVE9SKVxuICAgICAgICAgICAgOiBoZWFkZXJWYWx1ZTtcbiAgICAgICAgaWYgKCFiYWdnYWdlU3RyaW5nKVxuICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQ7XG4gICAgICAgIGNvbnN0IGJhZ2dhZ2UgPSB7fTtcbiAgICAgICAgaWYgKGJhZ2dhZ2VTdHJpbmcubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gY29udGV4dDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYWlycyA9IGJhZ2dhZ2VTdHJpbmcuc3BsaXQoQkFHR0FHRV9JVEVNU19TRVBBUkFUT1IpO1xuICAgICAgICBwYWlycy5mb3JFYWNoKGVudHJ5ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGtleVBhaXIgPSBwYXJzZVBhaXJLZXlWYWx1ZShlbnRyeSk7XG4gICAgICAgICAgICBpZiAoa2V5UGFpcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJhZ2dhZ2VFbnRyeSA9IHsgdmFsdWU6IGtleVBhaXIudmFsdWUgfTtcbiAgICAgICAgICAgICAgICBpZiAoa2V5UGFpci5tZXRhZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBiYWdnYWdlRW50cnkubWV0YWRhdGEgPSBrZXlQYWlyLm1ldGFkYXRhO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBiYWdnYWdlW2tleVBhaXIua2V5XSA9IGJhZ2dhZ2VFbnRyeTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChPYmplY3QuZW50cmllcyhiYWdnYWdlKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBjb250ZXh0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwcm9wYWdhdGlvbi5zZXRCYWdnYWdlKGNvbnRleHQsIHByb3BhZ2F0aW9uLmNyZWF0ZUJhZ2dhZ2UoYmFnZ2FnZSkpO1xuICAgIH1cbiAgICBmaWVsZHMoKSB7XG4gICAgICAgIHJldHVybiBbQkFHR0FHRV9IRUFERVJdO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVczQ0JhZ2dhZ2VQcm9wYWdhdG9yLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/core/build/esm/baggage/propagation/W3CBaggagePropagator.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/core/build/esm/baggage/utils.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/baggage/utils.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getKeyPairs: () => (/* binding */ getKeyPairs),\n/* harmony export */   parseKeyPairsIntoRecord: () => (/* binding */ parseKeyPairsIntoRecord),\n/* harmony export */   parsePairKeyValue: () => (/* binding */ parsePairKeyValue),\n/* harmony export */   serializeKeyPairs: () => (/* binding */ serializeKeyPairs)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/baggage/utils.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/baggage/constants.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nfunction serializeKeyPairs(keyPairs) {\n    return keyPairs.reduce((hValue, current) => {\n        const value = `${hValue}${hValue !== '' ? _constants__WEBPACK_IMPORTED_MODULE_0__.BAGGAGE_ITEMS_SEPARATOR : ''}${current}`;\n        return value.length > _constants__WEBPACK_IMPORTED_MODULE_0__.BAGGAGE_MAX_TOTAL_LENGTH ? hValue : value;\n    }, '');\n}\nfunction getKeyPairs(baggage) {\n    return baggage.getAllEntries().map(([key, value]) => {\n        let entry = `${encodeURIComponent(key)}=${encodeURIComponent(value.value)}`;\n        // include opaque metadata if provided\n        // NOTE: we intentionally don't URI-encode the metadata - that responsibility falls on the metadata implementation\n        if (value.metadata !== undefined) {\n            entry += _constants__WEBPACK_IMPORTED_MODULE_0__.BAGGAGE_PROPERTIES_SEPARATOR + value.metadata.toString();\n        }\n        return entry;\n    });\n}\nfunction parsePairKeyValue(entry) {\n    const valueProps = entry.split(_constants__WEBPACK_IMPORTED_MODULE_0__.BAGGAGE_PROPERTIES_SEPARATOR);\n    if (valueProps.length <= 0)\n        return;\n    const keyPairPart = valueProps.shift();\n    if (!keyPairPart)\n        return;\n    const separatorIndex = keyPairPart.indexOf(_constants__WEBPACK_IMPORTED_MODULE_0__.BAGGAGE_KEY_PAIR_SEPARATOR);\n    if (separatorIndex <= 0)\n        return;\n    const key = decodeURIComponent(keyPairPart.substring(0, separatorIndex).trim());\n    const value = decodeURIComponent(keyPairPart.substring(separatorIndex + 1).trim());\n    let metadata;\n    if (valueProps.length > 0) {\n        metadata = (0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__.baggageEntryMetadataFromString)(valueProps.join(_constants__WEBPACK_IMPORTED_MODULE_0__.BAGGAGE_PROPERTIES_SEPARATOR));\n    }\n    return { key, value, metadata };\n}\n/**\n * Parse a string serialized in the baggage HTTP Format (without metadata):\n * https://github.com/w3c/baggage/blob/master/baggage/HTTP_HEADER_FORMAT.md\n */\nfunction parseKeyPairsIntoRecord(value) {\n    const result = {};\n    if (typeof value === 'string' && value.length > 0) {\n        value.split(_constants__WEBPACK_IMPORTED_MODULE_0__.BAGGAGE_ITEMS_SEPARATOR).forEach(entry => {\n            const keyPair = parsePairKeyValue(entry);\n            if (keyPair !== undefined && keyPair.value.length > 0) {\n                result[keyPair.key] = keyPair.value;\n            }\n        });\n    }\n    return result;\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvcmUvYnVpbGQvZXNtL2JhZ2dhZ2UvdXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3FFO0FBQ3NFO0FBQ3BJO0FBQ1A7QUFDQSx5QkFBeUIsT0FBTyxFQUFFLGdCQUFnQiwrREFBdUIsTUFBTSxFQUFFLFFBQVE7QUFDekYsOEJBQThCLGdFQUF3QjtBQUN0RCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0EsdUJBQXVCLHdCQUF3QixHQUFHLGdDQUFnQztBQUNsRjtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsb0VBQTRCO0FBQ2pEO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDTztBQUNQLG1DQUFtQyxvRUFBNEI7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyxrRUFBMEI7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGtGQUE4QixpQkFBaUIsb0VBQTRCO0FBQzlGO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSxvQkFBb0IsK0RBQXVCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvcmUvYnVpbGQvZXNtL2JhZ2dhZ2UvdXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IGJhZ2dhZ2VFbnRyeU1ldGFkYXRhRnJvbVN0cmluZywgfSBmcm9tICdAb3BlbnRlbGVtZXRyeS9hcGknO1xuaW1wb3J0IHsgQkFHR0FHRV9JVEVNU19TRVBBUkFUT1IsIEJBR0dBR0VfUFJPUEVSVElFU19TRVBBUkFUT1IsIEJBR0dBR0VfS0VZX1BBSVJfU0VQQVJBVE9SLCBCQUdHQUdFX01BWF9UT1RBTF9MRU5HVEgsIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuZXhwb3J0IGZ1bmN0aW9uIHNlcmlhbGl6ZUtleVBhaXJzKGtleVBhaXJzKSB7XG4gICAgcmV0dXJuIGtleVBhaXJzLnJlZHVjZSgoaFZhbHVlLCBjdXJyZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gYCR7aFZhbHVlfSR7aFZhbHVlICE9PSAnJyA/IEJBR0dBR0VfSVRFTVNfU0VQQVJBVE9SIDogJyd9JHtjdXJyZW50fWA7XG4gICAgICAgIHJldHVybiB2YWx1ZS5sZW5ndGggPiBCQUdHQUdFX01BWF9UT1RBTF9MRU5HVEggPyBoVmFsdWUgOiB2YWx1ZTtcbiAgICB9LCAnJyk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0S2V5UGFpcnMoYmFnZ2FnZSkge1xuICAgIHJldHVybiBiYWdnYWdlLmdldEFsbEVudHJpZXMoKS5tYXAoKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICBsZXQgZW50cnkgPSBgJHtlbmNvZGVVUklDb21wb25lbnQoa2V5KX09JHtlbmNvZGVVUklDb21wb25lbnQodmFsdWUudmFsdWUpfWA7XG4gICAgICAgIC8vIGluY2x1ZGUgb3BhcXVlIG1ldGFkYXRhIGlmIHByb3ZpZGVkXG4gICAgICAgIC8vIE5PVEU6IHdlIGludGVudGlvbmFsbHkgZG9uJ3QgVVJJLWVuY29kZSB0aGUgbWV0YWRhdGEgLSB0aGF0IHJlc3BvbnNpYmlsaXR5IGZhbGxzIG9uIHRoZSBtZXRhZGF0YSBpbXBsZW1lbnRhdGlvblxuICAgICAgICBpZiAodmFsdWUubWV0YWRhdGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZW50cnkgKz0gQkFHR0FHRV9QUk9QRVJUSUVTX1NFUEFSQVRPUiArIHZhbHVlLm1ldGFkYXRhLnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVudHJ5O1xuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlUGFpcktleVZhbHVlKGVudHJ5KSB7XG4gICAgY29uc3QgdmFsdWVQcm9wcyA9IGVudHJ5LnNwbGl0KEJBR0dBR0VfUFJPUEVSVElFU19TRVBBUkFUT1IpO1xuICAgIGlmICh2YWx1ZVByb3BzLmxlbmd0aCA8PSAwKVxuICAgICAgICByZXR1cm47XG4gICAgY29uc3Qga2V5UGFpclBhcnQgPSB2YWx1ZVByb3BzLnNoaWZ0KCk7XG4gICAgaWYgKCFrZXlQYWlyUGFydClcbiAgICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IHNlcGFyYXRvckluZGV4ID0ga2V5UGFpclBhcnQuaW5kZXhPZihCQUdHQUdFX0tFWV9QQUlSX1NFUEFSQVRPUik7XG4gICAgaWYgKHNlcGFyYXRvckluZGV4IDw9IDApXG4gICAgICAgIHJldHVybjtcbiAgICBjb25zdCBrZXkgPSBkZWNvZGVVUklDb21wb25lbnQoa2V5UGFpclBhcnQuc3Vic3RyaW5nKDAsIHNlcGFyYXRvckluZGV4KS50cmltKCkpO1xuICAgIGNvbnN0IHZhbHVlID0gZGVjb2RlVVJJQ29tcG9uZW50KGtleVBhaXJQYXJ0LnN1YnN0cmluZyhzZXBhcmF0b3JJbmRleCArIDEpLnRyaW0oKSk7XG4gICAgbGV0IG1ldGFkYXRhO1xuICAgIGlmICh2YWx1ZVByb3BzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgbWV0YWRhdGEgPSBiYWdnYWdlRW50cnlNZXRhZGF0YUZyb21TdHJpbmcodmFsdWVQcm9wcy5qb2luKEJBR0dBR0VfUFJPUEVSVElFU19TRVBBUkFUT1IpKTtcbiAgICB9XG4gICAgcmV0dXJuIHsga2V5LCB2YWx1ZSwgbWV0YWRhdGEgfTtcbn1cbi8qKlxuICogUGFyc2UgYSBzdHJpbmcgc2VyaWFsaXplZCBpbiB0aGUgYmFnZ2FnZSBIVFRQIEZvcm1hdCAod2l0aG91dCBtZXRhZGF0YSk6XG4gKiBodHRwczovL2dpdGh1Yi5jb20vdzNjL2JhZ2dhZ2UvYmxvYi9tYXN0ZXIvYmFnZ2FnZS9IVFRQX0hFQURFUl9GT1JNQVQubWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlS2V5UGFpcnNJbnRvUmVjb3JkKHZhbHVlKSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUubGVuZ3RoID4gMCkge1xuICAgICAgICB2YWx1ZS5zcGxpdChCQUdHQUdFX0lURU1TX1NFUEFSQVRPUikuZm9yRWFjaChlbnRyeSA9PiB7XG4gICAgICAgICAgICBjb25zdCBrZXlQYWlyID0gcGFyc2VQYWlyS2V5VmFsdWUoZW50cnkpO1xuICAgICAgICAgICAgaWYgKGtleVBhaXIgIT09IHVuZGVmaW5lZCAmJiBrZXlQYWlyLnZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICByZXN1bHRba2V5UGFpci5rZXldID0ga2V5UGFpci52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/core/build/esm/baggage/utils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/core/build/esm/common/anchored-clock.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/common/anchored-clock.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnchoredClock: () => (/* binding */ AnchoredClock)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A utility for returning wall times anchored to a given point in time. Wall time measurements will\n * not be taken from the system, but instead are computed by adding a monotonic clock time\n * to the anchor point.\n *\n * This is needed because the system time can change and result in unexpected situations like\n * spans ending before they are started. Creating an anchored clock for each local root span\n * ensures that span timings and durations are accurate while preventing span times from drifting\n * too far from the system clock.\n *\n * Only creating an anchored clock once per local trace ensures span times are correct relative\n * to each other. For example, a child span will never have a start time before its parent even\n * if the system clock is corrected during the local trace.\n *\n * Heavily inspired by the OTel Java anchored clock\n * https://github.com/open-telemetry/opentelemetry-java/blob/main/sdk/trace/src/main/java/io/opentelemetry/sdk/trace/AnchoredClock.java\n */\nclass AnchoredClock {\n    _monotonicClock;\n    _epochMillis;\n    _performanceMillis;\n    /**\n     * Create a new AnchoredClock anchored to the current time returned by systemClock.\n     *\n     * @param systemClock should be a clock that returns the number of milliseconds since January 1 1970 such as Date\n     * @param monotonicClock should be a clock that counts milliseconds monotonically such as window.performance or perf_hooks.performance\n     */\n    constructor(systemClock, monotonicClock) {\n        this._monotonicClock = monotonicClock;\n        this._epochMillis = systemClock.now();\n        this._performanceMillis = monotonicClock.now();\n    }\n    /**\n     * Returns the current time by adding the number of milliseconds since the\n     * AnchoredClock was created to the creation epoch time\n     */\n    now() {\n        const delta = this._monotonicClock.now() - this._performanceMillis;\n        return this._epochMillis + delta;\n    }\n}\n//# sourceMappingURL=anchored-clock.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvcmUvYnVpbGQvZXNtL2NvbW1vbi9hbmNob3JlZC1jbG9jay5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvcmUvYnVpbGQvZXNtL2NvbW1vbi9hbmNob3JlZC1jbG9jay5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBBIHV0aWxpdHkgZm9yIHJldHVybmluZyB3YWxsIHRpbWVzIGFuY2hvcmVkIHRvIGEgZ2l2ZW4gcG9pbnQgaW4gdGltZS4gV2FsbCB0aW1lIG1lYXN1cmVtZW50cyB3aWxsXG4gKiBub3QgYmUgdGFrZW4gZnJvbSB0aGUgc3lzdGVtLCBidXQgaW5zdGVhZCBhcmUgY29tcHV0ZWQgYnkgYWRkaW5nIGEgbW9ub3RvbmljIGNsb2NrIHRpbWVcbiAqIHRvIHRoZSBhbmNob3IgcG9pbnQuXG4gKlxuICogVGhpcyBpcyBuZWVkZWQgYmVjYXVzZSB0aGUgc3lzdGVtIHRpbWUgY2FuIGNoYW5nZSBhbmQgcmVzdWx0IGluIHVuZXhwZWN0ZWQgc2l0dWF0aW9ucyBsaWtlXG4gKiBzcGFucyBlbmRpbmcgYmVmb3JlIHRoZXkgYXJlIHN0YXJ0ZWQuIENyZWF0aW5nIGFuIGFuY2hvcmVkIGNsb2NrIGZvciBlYWNoIGxvY2FsIHJvb3Qgc3BhblxuICogZW5zdXJlcyB0aGF0IHNwYW4gdGltaW5ncyBhbmQgZHVyYXRpb25zIGFyZSBhY2N1cmF0ZSB3aGlsZSBwcmV2ZW50aW5nIHNwYW4gdGltZXMgZnJvbSBkcmlmdGluZ1xuICogdG9vIGZhciBmcm9tIHRoZSBzeXN0ZW0gY2xvY2suXG4gKlxuICogT25seSBjcmVhdGluZyBhbiBhbmNob3JlZCBjbG9jayBvbmNlIHBlciBsb2NhbCB0cmFjZSBlbnN1cmVzIHNwYW4gdGltZXMgYXJlIGNvcnJlY3QgcmVsYXRpdmVcbiAqIHRvIGVhY2ggb3RoZXIuIEZvciBleGFtcGxlLCBhIGNoaWxkIHNwYW4gd2lsbCBuZXZlciBoYXZlIGEgc3RhcnQgdGltZSBiZWZvcmUgaXRzIHBhcmVudCBldmVuXG4gKiBpZiB0aGUgc3lzdGVtIGNsb2NrIGlzIGNvcnJlY3RlZCBkdXJpbmcgdGhlIGxvY2FsIHRyYWNlLlxuICpcbiAqIEhlYXZpbHkgaW5zcGlyZWQgYnkgdGhlIE9UZWwgSmF2YSBhbmNob3JlZCBjbG9ja1xuICogaHR0cHM6Ly9naXRodWIuY29tL29wZW4tdGVsZW1ldHJ5L29wZW50ZWxlbWV0cnktamF2YS9ibG9iL21haW4vc2RrL3RyYWNlL3NyYy9tYWluL2phdmEvaW8vb3BlbnRlbGVtZXRyeS9zZGsvdHJhY2UvQW5jaG9yZWRDbG9jay5qYXZhXG4gKi9cbmV4cG9ydCBjbGFzcyBBbmNob3JlZENsb2NrIHtcbiAgICBfbW9ub3RvbmljQ2xvY2s7XG4gICAgX2Vwb2NoTWlsbGlzO1xuICAgIF9wZXJmb3JtYW5jZU1pbGxpcztcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgQW5jaG9yZWRDbG9jayBhbmNob3JlZCB0byB0aGUgY3VycmVudCB0aW1lIHJldHVybmVkIGJ5IHN5c3RlbUNsb2NrLlxuICAgICAqXG4gICAgICogQHBhcmFtIHN5c3RlbUNsb2NrIHNob3VsZCBiZSBhIGNsb2NrIHRoYXQgcmV0dXJucyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBzaW5jZSBKYW51YXJ5IDEgMTk3MCBzdWNoIGFzIERhdGVcbiAgICAgKiBAcGFyYW0gbW9ub3RvbmljQ2xvY2sgc2hvdWxkIGJlIGEgY2xvY2sgdGhhdCBjb3VudHMgbWlsbGlzZWNvbmRzIG1vbm90b25pY2FsbHkgc3VjaCBhcyB3aW5kb3cucGVyZm9ybWFuY2Ugb3IgcGVyZl9ob29rcy5wZXJmb3JtYW5jZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHN5c3RlbUNsb2NrLCBtb25vdG9uaWNDbG9jaykge1xuICAgICAgICB0aGlzLl9tb25vdG9uaWNDbG9jayA9IG1vbm90b25pY0Nsb2NrO1xuICAgICAgICB0aGlzLl9lcG9jaE1pbGxpcyA9IHN5c3RlbUNsb2NrLm5vdygpO1xuICAgICAgICB0aGlzLl9wZXJmb3JtYW5jZU1pbGxpcyA9IG1vbm90b25pY0Nsb2NrLm5vdygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IHRpbWUgYnkgYWRkaW5nIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHNpbmNlIHRoZVxuICAgICAqIEFuY2hvcmVkQ2xvY2sgd2FzIGNyZWF0ZWQgdG8gdGhlIGNyZWF0aW9uIGVwb2NoIHRpbWVcbiAgICAgKi9cbiAgICBub3coKSB7XG4gICAgICAgIGNvbnN0IGRlbHRhID0gdGhpcy5fbW9ub3RvbmljQ2xvY2subm93KCkgLSB0aGlzLl9wZXJmb3JtYW5jZU1pbGxpcztcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Vwb2NoTWlsbGlzICsgZGVsdGE7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YW5jaG9yZWQtY2xvY2suanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/core/build/esm/common/anchored-clock.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/core/build/esm/common/attributes.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/common/attributes.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isAttributeKey: () => (/* binding */ isAttributeKey),\n/* harmony export */   isAttributeValue: () => (/* binding */ isAttributeValue),\n/* harmony export */   sanitizeAttributes: () => (/* binding */ sanitizeAttributes)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/diag-api.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nfunction sanitizeAttributes(attributes) {\n    const out = {};\n    if (typeof attributes !== 'object' || attributes == null) {\n        return out;\n    }\n    for (const [key, val] of Object.entries(attributes)) {\n        if (!isAttributeKey(key)) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.warn(`Invalid attribute key: ${key}`);\n            continue;\n        }\n        if (!isAttributeValue(val)) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.warn(`Invalid attribute value set for key: ${key}`);\n            continue;\n        }\n        if (Array.isArray(val)) {\n            out[key] = val.slice();\n        }\n        else {\n            out[key] = val;\n        }\n    }\n    return out;\n}\nfunction isAttributeKey(key) {\n    return typeof key === 'string' && key.length > 0;\n}\nfunction isAttributeValue(val) {\n    if (val == null) {\n        return true;\n    }\n    if (Array.isArray(val)) {\n        return isHomogeneousAttributeValueArray(val);\n    }\n    return isValidPrimitiveAttributeValue(val);\n}\nfunction isHomogeneousAttributeValueArray(arr) {\n    let type;\n    for (const element of arr) {\n        // null/undefined elements are allowed\n        if (element == null)\n            continue;\n        if (!type) {\n            if (isValidPrimitiveAttributeValue(element)) {\n                type = typeof element;\n                continue;\n            }\n            // encountered an invalid primitive\n            return false;\n        }\n        if (typeof element === type) {\n            continue;\n        }\n        return false;\n    }\n    return true;\n}\nfunction isValidPrimitiveAttributeValue(val) {\n    switch (typeof val) {\n        case 'number':\n        case 'boolean':\n        case 'string':\n            return true;\n    }\n    return false;\n}\n//# sourceMappingURL=attributes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvcmUvYnVpbGQvZXNtL2NvbW1vbi9hdHRyaWJ1dGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDMEM7QUFDbkM7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLG9EQUFJLGdDQUFnQyxJQUFJO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBLFlBQVksb0RBQUksOENBQThDLElBQUk7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvcmUvYnVpbGQvZXNtL2NvbW1vbi9hdHRyaWJ1dGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBkaWFnIH0gZnJvbSAnQG9wZW50ZWxlbWV0cnkvYXBpJztcbmV4cG9ydCBmdW5jdGlvbiBzYW5pdGl6ZUF0dHJpYnV0ZXMoYXR0cmlidXRlcykge1xuICAgIGNvbnN0IG91dCA9IHt9O1xuICAgIGlmICh0eXBlb2YgYXR0cmlidXRlcyAhPT0gJ29iamVjdCcgfHwgYXR0cmlidXRlcyA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsXSBvZiBPYmplY3QuZW50cmllcyhhdHRyaWJ1dGVzKSkge1xuICAgICAgICBpZiAoIWlzQXR0cmlidXRlS2V5KGtleSkpIHtcbiAgICAgICAgICAgIGRpYWcud2FybihgSW52YWxpZCBhdHRyaWJ1dGUga2V5OiAke2tleX1gKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNBdHRyaWJ1dGVWYWx1ZSh2YWwpKSB7XG4gICAgICAgICAgICBkaWFnLndhcm4oYEludmFsaWQgYXR0cmlidXRlIHZhbHVlIHNldCBmb3Iga2V5OiAke2tleX1gKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAgICAgIG91dFtrZXldID0gdmFsLnNsaWNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvdXRba2V5XSA9IHZhbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzQXR0cmlidXRlS2V5KGtleSkge1xuICAgIHJldHVybiB0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiBrZXkubGVuZ3RoID4gMDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0F0dHJpYnV0ZVZhbHVlKHZhbCkge1xuICAgIGlmICh2YWwgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgICAgICByZXR1cm4gaXNIb21vZ2VuZW91c0F0dHJpYnV0ZVZhbHVlQXJyYXkodmFsKTtcbiAgICB9XG4gICAgcmV0dXJuIGlzVmFsaWRQcmltaXRpdmVBdHRyaWJ1dGVWYWx1ZSh2YWwpO1xufVxuZnVuY3Rpb24gaXNIb21vZ2VuZW91c0F0dHJpYnV0ZVZhbHVlQXJyYXkoYXJyKSB7XG4gICAgbGV0IHR5cGU7XG4gICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGFycikge1xuICAgICAgICAvLyBudWxsL3VuZGVmaW5lZCBlbGVtZW50cyBhcmUgYWxsb3dlZFxuICAgICAgICBpZiAoZWxlbWVudCA9PSBudWxsKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIGlmICghdHlwZSkge1xuICAgICAgICAgICAgaWYgKGlzVmFsaWRQcmltaXRpdmVBdHRyaWJ1dGVWYWx1ZShlbGVtZW50KSkge1xuICAgICAgICAgICAgICAgIHR5cGUgPSB0eXBlb2YgZWxlbWVudDtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGVuY291bnRlcmVkIGFuIGludmFsaWQgcHJpbWl0aXZlXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBlbGVtZW50ID09PSB0eXBlKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gaXNWYWxpZFByaW1pdGl2ZUF0dHJpYnV0ZVZhbHVlKHZhbCkge1xuICAgIHN3aXRjaCAodHlwZW9mIHZhbCkge1xuICAgICAgICBjYXNlICdudW1iZXInOlxuICAgICAgICBjYXNlICdib29sZWFuJzpcbiAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hdHRyaWJ1dGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/core/build/esm/common/attributes.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   globalErrorHandler: () => (/* binding */ globalErrorHandler),\n/* harmony export */   setGlobalErrorHandler: () => (/* binding */ setGlobalErrorHandler)\n/* harmony export */ });\n/* harmony import */ var _logging_error_handler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./logging-error-handler */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/common/logging-error-handler.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The global error handler delegate */\nlet delegateHandler = (0,_logging_error_handler__WEBPACK_IMPORTED_MODULE_0__.loggingErrorHandler)();\n/**\n * Set the global error handler\n * @param {ErrorHandler} handler\n */\nfunction setGlobalErrorHandler(handler) {\n    delegateHandler = handler;\n}\n/**\n * Return the global error handler\n * @param {Exception} ex\n */\nfunction globalErrorHandler(ex) {\n    try {\n        delegateHandler(ex);\n    }\n    catch { } // eslint-disable-line no-empty\n}\n//# sourceMappingURL=global-error-handler.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvcmUvYnVpbGQvZXNtL2NvbW1vbi9nbG9iYWwtZXJyb3ItaGFuZGxlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDOEQ7QUFDOUQ7QUFDQSxzQkFBc0IsMkVBQW1CO0FBQ3pDO0FBQ0E7QUFDQSxXQUFXLGNBQWM7QUFDekI7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxXQUFXO0FBQ3RCO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQSIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9jb3JlL2J1aWxkL2VzbS9jb21tb24vZ2xvYmFsLWVycm9yLWhhbmRsZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IGxvZ2dpbmdFcnJvckhhbmRsZXIgfSBmcm9tICcuL2xvZ2dpbmctZXJyb3ItaGFuZGxlcic7XG4vKiogVGhlIGdsb2JhbCBlcnJvciBoYW5kbGVyIGRlbGVnYXRlICovXG5sZXQgZGVsZWdhdGVIYW5kbGVyID0gbG9nZ2luZ0Vycm9ySGFuZGxlcigpO1xuLyoqXG4gKiBTZXQgdGhlIGdsb2JhbCBlcnJvciBoYW5kbGVyXG4gKiBAcGFyYW0ge0Vycm9ySGFuZGxlcn0gaGFuZGxlclxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0R2xvYmFsRXJyb3JIYW5kbGVyKGhhbmRsZXIpIHtcbiAgICBkZWxlZ2F0ZUhhbmRsZXIgPSBoYW5kbGVyO1xufVxuLyoqXG4gKiBSZXR1cm4gdGhlIGdsb2JhbCBlcnJvciBoYW5kbGVyXG4gKiBAcGFyYW0ge0V4Y2VwdGlvbn0gZXhcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdsb2JhbEVycm9ySGFuZGxlcihleCkge1xuICAgIHRyeSB7XG4gICAgICAgIGRlbGVnYXRlSGFuZGxlcihleCk7XG4gICAgfVxuICAgIGNhdGNoIHsgfSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nbG9iYWwtZXJyb3ItaGFuZGxlci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/core/build/esm/common/logging-error-handler.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/common/logging-error-handler.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loggingErrorHandler: () => (/* binding */ loggingErrorHandler)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/diag-api.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a function that logs an error using the provided logger, or a\n * console logger if one was not provided.\n */\nfunction loggingErrorHandler() {\n    return (ex) => {\n        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.error(stringifyException(ex));\n    };\n}\n/**\n * Converts an exception into a string representation\n * @param {Exception} ex\n */\nfunction stringifyException(ex) {\n    if (typeof ex === 'string') {\n        return ex;\n    }\n    else {\n        return JSON.stringify(flattenException(ex));\n    }\n}\n/**\n * Flattens an exception into key-value pairs by traversing the prototype chain\n * and coercing values to strings. Duplicate properties will not be overwritten;\n * the first insert wins.\n */\nfunction flattenException(ex) {\n    const result = {};\n    let current = ex;\n    while (current !== null) {\n        Object.getOwnPropertyNames(current).forEach(propertyName => {\n            if (result[propertyName])\n                return;\n            const value = current[propertyName];\n            if (value) {\n                result[propertyName] = String(value);\n            }\n        });\n        current = Object.getPrototypeOf(current);\n    }\n    return result;\n}\n//# sourceMappingURL=logging-error-handler.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvcmUvYnVpbGQvZXNtL2NvbW1vbi9sb2dnaW5nLWVycm9yLWhhbmRsZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsUUFBUSxvREFBSTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxXQUFXO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvY29yZS9idWlsZC9lc20vY29tbW9uL2xvZ2dpbmctZXJyb3ItaGFuZGxlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgZGlhZyB9IGZyb20gJ0BvcGVudGVsZW1ldHJ5L2FwaSc7XG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGxvZ3MgYW4gZXJyb3IgdXNpbmcgdGhlIHByb3ZpZGVkIGxvZ2dlciwgb3IgYVxuICogY29uc29sZSBsb2dnZXIgaWYgb25lIHdhcyBub3QgcHJvdmlkZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsb2dnaW5nRXJyb3JIYW5kbGVyKCkge1xuICAgIHJldHVybiAoZXgpID0+IHtcbiAgICAgICAgZGlhZy5lcnJvcihzdHJpbmdpZnlFeGNlcHRpb24oZXgpKTtcbiAgICB9O1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhbiBleGNlcHRpb24gaW50byBhIHN0cmluZyByZXByZXNlbnRhdGlvblxuICogQHBhcmFtIHtFeGNlcHRpb259IGV4XG4gKi9cbmZ1bmN0aW9uIHN0cmluZ2lmeUV4Y2VwdGlvbihleCkge1xuICAgIGlmICh0eXBlb2YgZXggPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBleDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShmbGF0dGVuRXhjZXB0aW9uKGV4KSk7XG4gICAgfVxufVxuLyoqXG4gKiBGbGF0dGVucyBhbiBleGNlcHRpb24gaW50byBrZXktdmFsdWUgcGFpcnMgYnkgdHJhdmVyc2luZyB0aGUgcHJvdG90eXBlIGNoYWluXG4gKiBhbmQgY29lcmNpbmcgdmFsdWVzIHRvIHN0cmluZ3MuIER1cGxpY2F0ZSBwcm9wZXJ0aWVzIHdpbGwgbm90IGJlIG92ZXJ3cml0dGVuO1xuICogdGhlIGZpcnN0IGluc2VydCB3aW5zLlxuICovXG5mdW5jdGlvbiBmbGF0dGVuRXhjZXB0aW9uKGV4KSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgbGV0IGN1cnJlbnQgPSBleDtcbiAgICB3aGlsZSAoY3VycmVudCAhPT0gbnVsbCkge1xuICAgICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhjdXJyZW50KS5mb3JFYWNoKHByb3BlcnR5TmFtZSA9PiB7XG4gICAgICAgICAgICBpZiAocmVzdWx0W3Byb3BlcnR5TmFtZV0pXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBjdXJyZW50W3Byb3BlcnR5TmFtZV07XG4gICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXN1bHRbcHJvcGVydHlOYW1lXSA9IFN0cmluZyh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBjdXJyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGN1cnJlbnQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9nZ2luZy1lcnJvci1oYW5kbGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/core/build/esm/common/logging-error-handler.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/core/build/esm/common/time.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/common/time.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addHrTimes: () => (/* binding */ addHrTimes),\n/* harmony export */   getTimeOrigin: () => (/* binding */ getTimeOrigin),\n/* harmony export */   hrTime: () => (/* binding */ hrTime),\n/* harmony export */   hrTimeDuration: () => (/* binding */ hrTimeDuration),\n/* harmony export */   hrTimeToMicroseconds: () => (/* binding */ hrTimeToMicroseconds),\n/* harmony export */   hrTimeToMilliseconds: () => (/* binding */ hrTimeToMilliseconds),\n/* harmony export */   hrTimeToNanoseconds: () => (/* binding */ hrTimeToNanoseconds),\n/* harmony export */   hrTimeToTimeStamp: () => (/* binding */ hrTimeToTimeStamp),\n/* harmony export */   isTimeInput: () => (/* binding */ isTimeInput),\n/* harmony export */   isTimeInputHrTime: () => (/* binding */ isTimeInputHrTime),\n/* harmony export */   millisToHrTime: () => (/* binding */ millisToHrTime),\n/* harmony export */   timeInputToHrTime: () => (/* binding */ timeInputToHrTime)\n/* harmony export */ });\n/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../platform */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/platform/node/performance.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst NANOSECOND_DIGITS = 9;\nconst NANOSECOND_DIGITS_IN_MILLIS = 6;\nconst MILLISECONDS_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS_IN_MILLIS);\nconst SECOND_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS);\n/**\n * Converts a number of milliseconds from epoch to HrTime([seconds, remainder in nanoseconds]).\n * @param epochMillis\n */\nfunction millisToHrTime(epochMillis) {\n    const epochSeconds = epochMillis / 1000;\n    // Decimals only.\n    const seconds = Math.trunc(epochSeconds);\n    // Round sub-nanosecond accuracy to nanosecond.\n    const nanos = Math.round((epochMillis % 1000) * MILLISECONDS_TO_NANOSECONDS);\n    return [seconds, nanos];\n}\nfunction getTimeOrigin() {\n    let timeOrigin = _platform__WEBPACK_IMPORTED_MODULE_0__.otperformance.timeOrigin;\n    if (typeof timeOrigin !== 'number') {\n        const perf = _platform__WEBPACK_IMPORTED_MODULE_0__.otperformance;\n        timeOrigin = perf.timing && perf.timing.fetchStart;\n    }\n    return timeOrigin;\n}\n/**\n * Returns an hrtime calculated via performance component.\n * @param performanceNow\n */\nfunction hrTime(performanceNow) {\n    const timeOrigin = millisToHrTime(getTimeOrigin());\n    const now = millisToHrTime(typeof performanceNow === 'number' ? performanceNow : _platform__WEBPACK_IMPORTED_MODULE_0__.otperformance.now());\n    return addHrTimes(timeOrigin, now);\n}\n/**\n *\n * Converts a TimeInput to an HrTime, defaults to _hrtime().\n * @param time\n */\nfunction timeInputToHrTime(time) {\n    // process.hrtime\n    if (isTimeInputHrTime(time)) {\n        return time;\n    }\n    else if (typeof time === 'number') {\n        // Must be a performance.now() if it's smaller than process start time.\n        if (time < getTimeOrigin()) {\n            return hrTime(time);\n        }\n        else {\n            // epoch milliseconds or performance.timeOrigin\n            return millisToHrTime(time);\n        }\n    }\n    else if (time instanceof Date) {\n        return millisToHrTime(time.getTime());\n    }\n    else {\n        throw TypeError('Invalid input type');\n    }\n}\n/**\n * Returns a duration of two hrTime.\n * @param startTime\n * @param endTime\n */\nfunction hrTimeDuration(startTime, endTime) {\n    let seconds = endTime[0] - startTime[0];\n    let nanos = endTime[1] - startTime[1];\n    // overflow\n    if (nanos < 0) {\n        seconds -= 1;\n        // negate\n        nanos += SECOND_TO_NANOSECONDS;\n    }\n    return [seconds, nanos];\n}\n/**\n * Convert hrTime to timestamp, for example \"2019-05-14T17:00:00.000123456Z\"\n * @param time\n */\nfunction hrTimeToTimeStamp(time) {\n    const precision = NANOSECOND_DIGITS;\n    const tmp = `${'0'.repeat(precision)}${time[1]}Z`;\n    const nanoString = tmp.substring(tmp.length - precision - 1);\n    const date = new Date(time[0] * 1000).toISOString();\n    return date.replace('000Z', nanoString);\n}\n/**\n * Convert hrTime to nanoseconds.\n * @param time\n */\nfunction hrTimeToNanoseconds(time) {\n    return time[0] * SECOND_TO_NANOSECONDS + time[1];\n}\n/**\n * Convert hrTime to milliseconds.\n * @param time\n */\nfunction hrTimeToMilliseconds(time) {\n    return time[0] * 1e3 + time[1] / 1e6;\n}\n/**\n * Convert hrTime to microseconds.\n * @param time\n */\nfunction hrTimeToMicroseconds(time) {\n    return time[0] * 1e6 + time[1] / 1e3;\n}\n/**\n * check if time is HrTime\n * @param value\n */\nfunction isTimeInputHrTime(value) {\n    return (Array.isArray(value) &&\n        value.length === 2 &&\n        typeof value[0] === 'number' &&\n        typeof value[1] === 'number');\n}\n/**\n * check if input value is a correct types.TimeInput\n * @param value\n */\nfunction isTimeInput(value) {\n    return (isTimeInputHrTime(value) ||\n        typeof value === 'number' ||\n        value instanceof Date);\n}\n/**\n * Given 2 HrTime formatted times, return their sum as an HrTime.\n */\nfunction addHrTimes(time1, time2) {\n    const out = [time1[0] + time2[0], time1[1] + time2[1]];\n    // Nanoseconds\n    if (out[1] >= SECOND_TO_NANOSECONDS) {\n        out[1] -= SECOND_TO_NANOSECONDS;\n        out[0] += 1;\n    }\n    return out;\n}\n//# sourceMappingURL=time.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvcmUvYnVpbGQvZXNtL2NvbW1vbi90aW1lLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDMkQ7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLHFCQUFxQixvREFBVztBQUNoQztBQUNBLHFCQUFxQixvREFBVztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLHFGQUFxRixvREFBVztBQUNoRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSxtQkFBbUIsc0JBQXNCLEVBQUUsUUFBUTtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvY29yZS9idWlsZC9lc20vY29tbW9uL3RpbWUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IG90cGVyZm9ybWFuY2UgYXMgcGVyZm9ybWFuY2UgfSBmcm9tICcuLi9wbGF0Zm9ybSc7XG5jb25zdCBOQU5PU0VDT05EX0RJR0lUUyA9IDk7XG5jb25zdCBOQU5PU0VDT05EX0RJR0lUU19JTl9NSUxMSVMgPSA2O1xuY29uc3QgTUlMTElTRUNPTkRTX1RPX05BTk9TRUNPTkRTID0gTWF0aC5wb3coMTAsIE5BTk9TRUNPTkRfRElHSVRTX0lOX01JTExJUyk7XG5jb25zdCBTRUNPTkRfVE9fTkFOT1NFQ09ORFMgPSBNYXRoLnBvdygxMCwgTkFOT1NFQ09ORF9ESUdJVFMpO1xuLyoqXG4gKiBDb252ZXJ0cyBhIG51bWJlciBvZiBtaWxsaXNlY29uZHMgZnJvbSBlcG9jaCB0byBIclRpbWUoW3NlY29uZHMsIHJlbWFpbmRlciBpbiBuYW5vc2Vjb25kc10pLlxuICogQHBhcmFtIGVwb2NoTWlsbGlzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtaWxsaXNUb0hyVGltZShlcG9jaE1pbGxpcykge1xuICAgIGNvbnN0IGVwb2NoU2Vjb25kcyA9IGVwb2NoTWlsbGlzIC8gMTAwMDtcbiAgICAvLyBEZWNpbWFscyBvbmx5LlxuICAgIGNvbnN0IHNlY29uZHMgPSBNYXRoLnRydW5jKGVwb2NoU2Vjb25kcyk7XG4gICAgLy8gUm91bmQgc3ViLW5hbm9zZWNvbmQgYWNjdXJhY3kgdG8gbmFub3NlY29uZC5cbiAgICBjb25zdCBuYW5vcyA9IE1hdGgucm91bmQoKGVwb2NoTWlsbGlzICUgMTAwMCkgKiBNSUxMSVNFQ09ORFNfVE9fTkFOT1NFQ09ORFMpO1xuICAgIHJldHVybiBbc2Vjb25kcywgbmFub3NdO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFRpbWVPcmlnaW4oKSB7XG4gICAgbGV0IHRpbWVPcmlnaW4gPSBwZXJmb3JtYW5jZS50aW1lT3JpZ2luO1xuICAgIGlmICh0eXBlb2YgdGltZU9yaWdpbiAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgY29uc3QgcGVyZiA9IHBlcmZvcm1hbmNlO1xuICAgICAgICB0aW1lT3JpZ2luID0gcGVyZi50aW1pbmcgJiYgcGVyZi50aW1pbmcuZmV0Y2hTdGFydDtcbiAgICB9XG4gICAgcmV0dXJuIHRpbWVPcmlnaW47XG59XG4vKipcbiAqIFJldHVybnMgYW4gaHJ0aW1lIGNhbGN1bGF0ZWQgdmlhIHBlcmZvcm1hbmNlIGNvbXBvbmVudC5cbiAqIEBwYXJhbSBwZXJmb3JtYW5jZU5vd1xuICovXG5leHBvcnQgZnVuY3Rpb24gaHJUaW1lKHBlcmZvcm1hbmNlTm93KSB7XG4gICAgY29uc3QgdGltZU9yaWdpbiA9IG1pbGxpc1RvSHJUaW1lKGdldFRpbWVPcmlnaW4oKSk7XG4gICAgY29uc3Qgbm93ID0gbWlsbGlzVG9IclRpbWUodHlwZW9mIHBlcmZvcm1hbmNlTm93ID09PSAnbnVtYmVyJyA/IHBlcmZvcm1hbmNlTm93IDogcGVyZm9ybWFuY2Uubm93KCkpO1xuICAgIHJldHVybiBhZGRIclRpbWVzKHRpbWVPcmlnaW4sIG5vdyk7XG59XG4vKipcbiAqXG4gKiBDb252ZXJ0cyBhIFRpbWVJbnB1dCB0byBhbiBIclRpbWUsIGRlZmF1bHRzIHRvIF9ocnRpbWUoKS5cbiAqIEBwYXJhbSB0aW1lXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0aW1lSW5wdXRUb0hyVGltZSh0aW1lKSB7XG4gICAgLy8gcHJvY2Vzcy5ocnRpbWVcbiAgICBpZiAoaXNUaW1lSW5wdXRIclRpbWUodGltZSkpIHtcbiAgICAgICAgcmV0dXJuIHRpbWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiB0aW1lID09PSAnbnVtYmVyJykge1xuICAgICAgICAvLyBNdXN0IGJlIGEgcGVyZm9ybWFuY2Uubm93KCkgaWYgaXQncyBzbWFsbGVyIHRoYW4gcHJvY2VzcyBzdGFydCB0aW1lLlxuICAgICAgICBpZiAodGltZSA8IGdldFRpbWVPcmlnaW4oKSkge1xuICAgICAgICAgICAgcmV0dXJuIGhyVGltZSh0aW1lKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGVwb2NoIG1pbGxpc2Vjb25kcyBvciBwZXJmb3JtYW5jZS50aW1lT3JpZ2luXG4gICAgICAgICAgICByZXR1cm4gbWlsbGlzVG9IclRpbWUodGltZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAodGltZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgcmV0dXJuIG1pbGxpc1RvSHJUaW1lKHRpbWUuZ2V0VGltZSgpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IFR5cGVFcnJvcignSW52YWxpZCBpbnB1dCB0eXBlJyk7XG4gICAgfVxufVxuLyoqXG4gKiBSZXR1cm5zIGEgZHVyYXRpb24gb2YgdHdvIGhyVGltZS5cbiAqIEBwYXJhbSBzdGFydFRpbWVcbiAqIEBwYXJhbSBlbmRUaW1lXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoclRpbWVEdXJhdGlvbihzdGFydFRpbWUsIGVuZFRpbWUpIHtcbiAgICBsZXQgc2Vjb25kcyA9IGVuZFRpbWVbMF0gLSBzdGFydFRpbWVbMF07XG4gICAgbGV0IG5hbm9zID0gZW5kVGltZVsxXSAtIHN0YXJ0VGltZVsxXTtcbiAgICAvLyBvdmVyZmxvd1xuICAgIGlmIChuYW5vcyA8IDApIHtcbiAgICAgICAgc2Vjb25kcyAtPSAxO1xuICAgICAgICAvLyBuZWdhdGVcbiAgICAgICAgbmFub3MgKz0gU0VDT05EX1RPX05BTk9TRUNPTkRTO1xuICAgIH1cbiAgICByZXR1cm4gW3NlY29uZHMsIG5hbm9zXTtcbn1cbi8qKlxuICogQ29udmVydCBoclRpbWUgdG8gdGltZXN0YW1wLCBmb3IgZXhhbXBsZSBcIjIwMTktMDUtMTRUMTc6MDA6MDAuMDAwMTIzNDU2WlwiXG4gKiBAcGFyYW0gdGltZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaHJUaW1lVG9UaW1lU3RhbXAodGltZSkge1xuICAgIGNvbnN0IHByZWNpc2lvbiA9IE5BTk9TRUNPTkRfRElHSVRTO1xuICAgIGNvbnN0IHRtcCA9IGAkeycwJy5yZXBlYXQocHJlY2lzaW9uKX0ke3RpbWVbMV19WmA7XG4gICAgY29uc3QgbmFub1N0cmluZyA9IHRtcC5zdWJzdHJpbmcodG1wLmxlbmd0aCAtIHByZWNpc2lvbiAtIDEpO1xuICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSh0aW1lWzBdICogMTAwMCkudG9JU09TdHJpbmcoKTtcbiAgICByZXR1cm4gZGF0ZS5yZXBsYWNlKCcwMDBaJywgbmFub1N0cmluZyk7XG59XG4vKipcbiAqIENvbnZlcnQgaHJUaW1lIHRvIG5hbm9zZWNvbmRzLlxuICogQHBhcmFtIHRpbWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhyVGltZVRvTmFub3NlY29uZHModGltZSkge1xuICAgIHJldHVybiB0aW1lWzBdICogU0VDT05EX1RPX05BTk9TRUNPTkRTICsgdGltZVsxXTtcbn1cbi8qKlxuICogQ29udmVydCBoclRpbWUgdG8gbWlsbGlzZWNvbmRzLlxuICogQHBhcmFtIHRpbWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhyVGltZVRvTWlsbGlzZWNvbmRzKHRpbWUpIHtcbiAgICByZXR1cm4gdGltZVswXSAqIDFlMyArIHRpbWVbMV0gLyAxZTY7XG59XG4vKipcbiAqIENvbnZlcnQgaHJUaW1lIHRvIG1pY3Jvc2Vjb25kcy5cbiAqIEBwYXJhbSB0aW1lXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoclRpbWVUb01pY3Jvc2Vjb25kcyh0aW1lKSB7XG4gICAgcmV0dXJuIHRpbWVbMF0gKiAxZTYgKyB0aW1lWzFdIC8gMWUzO1xufVxuLyoqXG4gKiBjaGVjayBpZiB0aW1lIGlzIEhyVGltZVxuICogQHBhcmFtIHZhbHVlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1RpbWVJbnB1dEhyVGltZSh2YWx1ZSkge1xuICAgIHJldHVybiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiZcbiAgICAgICAgdmFsdWUubGVuZ3RoID09PSAyICYmXG4gICAgICAgIHR5cGVvZiB2YWx1ZVswXSA9PT0gJ251bWJlcicgJiZcbiAgICAgICAgdHlwZW9mIHZhbHVlWzFdID09PSAnbnVtYmVyJyk7XG59XG4vKipcbiAqIGNoZWNrIGlmIGlucHV0IHZhbHVlIGlzIGEgY29ycmVjdCB0eXBlcy5UaW1lSW5wdXRcbiAqIEBwYXJhbSB2YWx1ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNUaW1lSW5wdXQodmFsdWUpIHtcbiAgICByZXR1cm4gKGlzVGltZUlucHV0SHJUaW1lKHZhbHVlKSB8fFxuICAgICAgICB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8XG4gICAgICAgIHZhbHVlIGluc3RhbmNlb2YgRGF0ZSk7XG59XG4vKipcbiAqIEdpdmVuIDIgSHJUaW1lIGZvcm1hdHRlZCB0aW1lcywgcmV0dXJuIHRoZWlyIHN1bSBhcyBhbiBIclRpbWUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRIclRpbWVzKHRpbWUxLCB0aW1lMikge1xuICAgIGNvbnN0IG91dCA9IFt0aW1lMVswXSArIHRpbWUyWzBdLCB0aW1lMVsxXSArIHRpbWUyWzFdXTtcbiAgICAvLyBOYW5vc2Vjb25kc1xuICAgIGlmIChvdXRbMV0gPj0gU0VDT05EX1RPX05BTk9TRUNPTkRTKSB7XG4gICAgICAgIG91dFsxXSAtPSBTRUNPTkRfVE9fTkFOT1NFQ09ORFM7XG4gICAgICAgIG91dFswXSArPSAxO1xuICAgIH1cbiAgICByZXR1cm4gb3V0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/core/build/esm/common/time.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/core/build/esm/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnchoredClock: () => (/* reexport safe */ _common_anchored_clock__WEBPACK_IMPORTED_MODULE_1__.AnchoredClock),\n/* harmony export */   BindOnceFuture: () => (/* reexport safe */ _utils_callback__WEBPACK_IMPORTED_MODULE_21__.BindOnceFuture),\n/* harmony export */   CompositePropagator: () => (/* reexport safe */ _propagation_composite__WEBPACK_IMPORTED_MODULE_13__.CompositePropagator),\n/* harmony export */   ExportResultCode: () => (/* reexport safe */ _ExportResult__WEBPACK_IMPORTED_MODULE_6__.ExportResultCode),\n/* harmony export */   RPCType: () => (/* reexport safe */ _trace_rpc_metadata__WEBPACK_IMPORTED_MODULE_15__.RPCType),\n/* harmony export */   SDK_INFO: () => (/* reexport safe */ _platform__WEBPACK_IMPORTED_MODULE_8__.SDK_INFO),\n/* harmony export */   TRACE_PARENT_HEADER: () => (/* reexport safe */ _trace_W3CTraceContextPropagator__WEBPACK_IMPORTED_MODULE_14__.TRACE_PARENT_HEADER),\n/* harmony export */   TRACE_STATE_HEADER: () => (/* reexport safe */ _trace_W3CTraceContextPropagator__WEBPACK_IMPORTED_MODULE_14__.TRACE_STATE_HEADER),\n/* harmony export */   TimeoutError: () => (/* reexport safe */ _utils_timeout__WEBPACK_IMPORTED_MODULE_19__.TimeoutError),\n/* harmony export */   TraceState: () => (/* reexport safe */ _trace_TraceState__WEBPACK_IMPORTED_MODULE_17__.TraceState),\n/* harmony export */   W3CBaggagePropagator: () => (/* reexport safe */ _baggage_propagation_W3CBaggagePropagator__WEBPACK_IMPORTED_MODULE_0__.W3CBaggagePropagator),\n/* harmony export */   W3CTraceContextPropagator: () => (/* reexport safe */ _trace_W3CTraceContextPropagator__WEBPACK_IMPORTED_MODULE_14__.W3CTraceContextPropagator),\n/* harmony export */   _globalThis: () => (/* reexport safe */ _platform__WEBPACK_IMPORTED_MODULE_9__._globalThis),\n/* harmony export */   addHrTimes: () => (/* reexport safe */ _common_time__WEBPACK_IMPORTED_MODULE_5__.addHrTimes),\n/* harmony export */   callWithTimeout: () => (/* reexport safe */ _utils_timeout__WEBPACK_IMPORTED_MODULE_19__.callWithTimeout),\n/* harmony export */   deleteRPCMetadata: () => (/* reexport safe */ _trace_rpc_metadata__WEBPACK_IMPORTED_MODULE_15__.deleteRPCMetadata),\n/* harmony export */   diagLogLevelFromString: () => (/* reexport safe */ _utils_configuration__WEBPACK_IMPORTED_MODULE_22__.diagLogLevelFromString),\n/* harmony export */   getBooleanFromEnv: () => (/* reexport safe */ _platform__WEBPACK_IMPORTED_MODULE_10__.getBooleanFromEnv),\n/* harmony export */   getNumberFromEnv: () => (/* reexport safe */ _platform__WEBPACK_IMPORTED_MODULE_10__.getNumberFromEnv),\n/* harmony export */   getRPCMetadata: () => (/* reexport safe */ _trace_rpc_metadata__WEBPACK_IMPORTED_MODULE_15__.getRPCMetadata),\n/* harmony export */   getStringFromEnv: () => (/* reexport safe */ _platform__WEBPACK_IMPORTED_MODULE_10__.getStringFromEnv),\n/* harmony export */   getStringListFromEnv: () => (/* reexport safe */ _platform__WEBPACK_IMPORTED_MODULE_10__.getStringListFromEnv),\n/* harmony export */   getTimeOrigin: () => (/* reexport safe */ _common_time__WEBPACK_IMPORTED_MODULE_5__.getTimeOrigin),\n/* harmony export */   globalErrorHandler: () => (/* reexport safe */ _common_global_error_handler__WEBPACK_IMPORTED_MODULE_3__.globalErrorHandler),\n/* harmony export */   hrTime: () => (/* reexport safe */ _common_time__WEBPACK_IMPORTED_MODULE_5__.hrTime),\n/* harmony export */   hrTimeDuration: () => (/* reexport safe */ _common_time__WEBPACK_IMPORTED_MODULE_5__.hrTimeDuration),\n/* harmony export */   hrTimeToMicroseconds: () => (/* reexport safe */ _common_time__WEBPACK_IMPORTED_MODULE_5__.hrTimeToMicroseconds),\n/* harmony export */   hrTimeToMilliseconds: () => (/* reexport safe */ _common_time__WEBPACK_IMPORTED_MODULE_5__.hrTimeToMilliseconds),\n/* harmony export */   hrTimeToNanoseconds: () => (/* reexport safe */ _common_time__WEBPACK_IMPORTED_MODULE_5__.hrTimeToNanoseconds),\n/* harmony export */   hrTimeToTimeStamp: () => (/* reexport safe */ _common_time__WEBPACK_IMPORTED_MODULE_5__.hrTimeToTimeStamp),\n/* harmony export */   internal: () => (/* binding */ internal),\n/* harmony export */   isAttributeValue: () => (/* reexport safe */ _common_attributes__WEBPACK_IMPORTED_MODULE_2__.isAttributeValue),\n/* harmony export */   isTimeInput: () => (/* reexport safe */ _common_time__WEBPACK_IMPORTED_MODULE_5__.isTimeInput),\n/* harmony export */   isTimeInputHrTime: () => (/* reexport safe */ _common_time__WEBPACK_IMPORTED_MODULE_5__.isTimeInputHrTime),\n/* harmony export */   isTracingSuppressed: () => (/* reexport safe */ _trace_suppress_tracing__WEBPACK_IMPORTED_MODULE_16__.isTracingSuppressed),\n/* harmony export */   isUrlIgnored: () => (/* reexport safe */ _utils_url__WEBPACK_IMPORTED_MODULE_20__.isUrlIgnored),\n/* harmony export */   loggingErrorHandler: () => (/* reexport safe */ _common_logging_error_handler__WEBPACK_IMPORTED_MODULE_4__.loggingErrorHandler),\n/* harmony export */   merge: () => (/* reexport safe */ _utils_merge__WEBPACK_IMPORTED_MODULE_18__.merge),\n/* harmony export */   millisToHrTime: () => (/* reexport safe */ _common_time__WEBPACK_IMPORTED_MODULE_5__.millisToHrTime),\n/* harmony export */   otperformance: () => (/* reexport safe */ _platform__WEBPACK_IMPORTED_MODULE_11__.otperformance),\n/* harmony export */   parseKeyPairsIntoRecord: () => (/* reexport safe */ _baggage_utils__WEBPACK_IMPORTED_MODULE_7__.parseKeyPairsIntoRecord),\n/* harmony export */   parseTraceParent: () => (/* reexport safe */ _trace_W3CTraceContextPropagator__WEBPACK_IMPORTED_MODULE_14__.parseTraceParent),\n/* harmony export */   sanitizeAttributes: () => (/* reexport safe */ _common_attributes__WEBPACK_IMPORTED_MODULE_2__.sanitizeAttributes),\n/* harmony export */   setGlobalErrorHandler: () => (/* reexport safe */ _common_global_error_handler__WEBPACK_IMPORTED_MODULE_3__.setGlobalErrorHandler),\n/* harmony export */   setRPCMetadata: () => (/* reexport safe */ _trace_rpc_metadata__WEBPACK_IMPORTED_MODULE_15__.setRPCMetadata),\n/* harmony export */   suppressTracing: () => (/* reexport safe */ _trace_suppress_tracing__WEBPACK_IMPORTED_MODULE_16__.suppressTracing),\n/* harmony export */   timeInputToHrTime: () => (/* reexport safe */ _common_time__WEBPACK_IMPORTED_MODULE_5__.timeInputToHrTime),\n/* harmony export */   unrefTimer: () => (/* reexport safe */ _platform__WEBPACK_IMPORTED_MODULE_12__.unrefTimer),\n/* harmony export */   unsuppressTracing: () => (/* reexport safe */ _trace_suppress_tracing__WEBPACK_IMPORTED_MODULE_16__.unsuppressTracing),\n/* harmony export */   urlMatches: () => (/* reexport safe */ _utils_url__WEBPACK_IMPORTED_MODULE_20__.urlMatches)\n/* harmony export */ });\n/* harmony import */ var _baggage_propagation_W3CBaggagePropagator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./baggage/propagation/W3CBaggagePropagator */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/baggage/propagation/W3CBaggagePropagator.js\");\n/* harmony import */ var _common_anchored_clock__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./common/anchored-clock */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/common/anchored-clock.js\");\n/* harmony import */ var _common_attributes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./common/attributes */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/common/attributes.js\");\n/* harmony import */ var _common_global_error_handler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./common/global-error-handler */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js\");\n/* harmony import */ var _common_logging_error_handler__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./common/logging-error-handler */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/common/logging-error-handler.js\");\n/* harmony import */ var _common_time__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./common/time */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/common/time.js\");\n/* harmony import */ var _ExportResult__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ExportResult */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/ExportResult.js\");\n/* harmony import */ var _baggage_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./baggage/utils */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/baggage/utils.js\");\n/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./platform */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/platform/node/sdk-info.js\");\n/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./platform */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/platform/node/globalThis.js\");\n/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./platform */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/platform/node/environment.js\");\n/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./platform */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/platform/node/performance.js\");\n/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./platform */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/platform/node/timer-util.js\");\n/* harmony import */ var _propagation_composite__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./propagation/composite */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/propagation/composite.js\");\n/* harmony import */ var _trace_W3CTraceContextPropagator__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./trace/W3CTraceContextPropagator */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/trace/W3CTraceContextPropagator.js\");\n/* harmony import */ var _trace_rpc_metadata__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./trace/rpc-metadata */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/trace/rpc-metadata.js\");\n/* harmony import */ var _trace_suppress_tracing__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./trace/suppress-tracing */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js\");\n/* harmony import */ var _trace_TraceState__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./trace/TraceState */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/trace/TraceState.js\");\n/* harmony import */ var _utils_merge__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./utils/merge */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/utils/merge.js\");\n/* harmony import */ var _utils_timeout__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./utils/timeout */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/utils/timeout.js\");\n/* harmony import */ var _utils_url__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./utils/url */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/utils/url.js\");\n/* harmony import */ var _utils_callback__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./utils/callback */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/utils/callback.js\");\n/* harmony import */ var _utils_configuration__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./utils/configuration */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/utils/configuration.js\");\n/* harmony import */ var _internal_exporter__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./internal/exporter */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/internal/exporter.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst internal = {\n    _export: _internal_exporter__WEBPACK_IMPORTED_MODULE_23__._export,\n};\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvcmUvYnVpbGQvZXNtL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2tGO0FBQzFCO0FBQ21CO0FBQ2dCO0FBQ3RCO0FBQ3FLO0FBQ3hMO0FBQ1E7QUFDa0c7QUFDN0Y7QUFDMkU7QUFDdkM7QUFDQztBQUNwRDtBQUNWO0FBQzBCO0FBQ1Q7QUFDTDtBQUNhO0FBQ2pCO0FBQ3ZDO0FBQ1AsV0FBVztBQUNYO0FBQ0EiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvY29yZS9idWlsZC9lc20vaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmV4cG9ydCB7IFczQ0JhZ2dhZ2VQcm9wYWdhdG9yIH0gZnJvbSAnLi9iYWdnYWdlL3Byb3BhZ2F0aW9uL1czQ0JhZ2dhZ2VQcm9wYWdhdG9yJztcbmV4cG9ydCB7IEFuY2hvcmVkQ2xvY2sgfSBmcm9tICcuL2NvbW1vbi9hbmNob3JlZC1jbG9jayc7XG5leHBvcnQgeyBpc0F0dHJpYnV0ZVZhbHVlLCBzYW5pdGl6ZUF0dHJpYnV0ZXMgfSBmcm9tICcuL2NvbW1vbi9hdHRyaWJ1dGVzJztcbmV4cG9ydCB7IGdsb2JhbEVycm9ySGFuZGxlciwgc2V0R2xvYmFsRXJyb3JIYW5kbGVyLCB9IGZyb20gJy4vY29tbW9uL2dsb2JhbC1lcnJvci1oYW5kbGVyJztcbmV4cG9ydCB7IGxvZ2dpbmdFcnJvckhhbmRsZXIgfSBmcm9tICcuL2NvbW1vbi9sb2dnaW5nLWVycm9yLWhhbmRsZXInO1xuZXhwb3J0IHsgYWRkSHJUaW1lcywgZ2V0VGltZU9yaWdpbiwgaHJUaW1lLCBoclRpbWVEdXJhdGlvbiwgaHJUaW1lVG9NaWNyb3NlY29uZHMsIGhyVGltZVRvTWlsbGlzZWNvbmRzLCBoclRpbWVUb05hbm9zZWNvbmRzLCBoclRpbWVUb1RpbWVTdGFtcCwgaXNUaW1lSW5wdXQsIGlzVGltZUlucHV0SHJUaW1lLCBtaWxsaXNUb0hyVGltZSwgdGltZUlucHV0VG9IclRpbWUsIH0gZnJvbSAnLi9jb21tb24vdGltZSc7XG5leHBvcnQgeyBFeHBvcnRSZXN1bHRDb2RlIH0gZnJvbSAnLi9FeHBvcnRSZXN1bHQnO1xuZXhwb3J0IHsgcGFyc2VLZXlQYWlyc0ludG9SZWNvcmQgfSBmcm9tICcuL2JhZ2dhZ2UvdXRpbHMnO1xuZXhwb3J0IHsgU0RLX0lORk8sIF9nbG9iYWxUaGlzLCBnZXRTdHJpbmdGcm9tRW52LCBnZXRCb29sZWFuRnJvbUVudiwgZ2V0TnVtYmVyRnJvbUVudiwgZ2V0U3RyaW5nTGlzdEZyb21FbnYsIG90cGVyZm9ybWFuY2UsIHVucmVmVGltZXIsIH0gZnJvbSAnLi9wbGF0Zm9ybSc7XG5leHBvcnQgeyBDb21wb3NpdGVQcm9wYWdhdG9yLCB9IGZyb20gJy4vcHJvcGFnYXRpb24vY29tcG9zaXRlJztcbmV4cG9ydCB7IFRSQUNFX1BBUkVOVF9IRUFERVIsIFRSQUNFX1NUQVRFX0hFQURFUiwgVzNDVHJhY2VDb250ZXh0UHJvcGFnYXRvciwgcGFyc2VUcmFjZVBhcmVudCwgfSBmcm9tICcuL3RyYWNlL1czQ1RyYWNlQ29udGV4dFByb3BhZ2F0b3InO1xuZXhwb3J0IHsgUlBDVHlwZSwgZGVsZXRlUlBDTWV0YWRhdGEsIGdldFJQQ01ldGFkYXRhLCBzZXRSUENNZXRhZGF0YSwgfSBmcm9tICcuL3RyYWNlL3JwYy1tZXRhZGF0YSc7XG5leHBvcnQgeyBpc1RyYWNpbmdTdXBwcmVzc2VkLCBzdXBwcmVzc1RyYWNpbmcsIHVuc3VwcHJlc3NUcmFjaW5nLCB9IGZyb20gJy4vdHJhY2Uvc3VwcHJlc3MtdHJhY2luZyc7XG5leHBvcnQgeyBUcmFjZVN0YXRlIH0gZnJvbSAnLi90cmFjZS9UcmFjZVN0YXRlJztcbmV4cG9ydCB7IG1lcmdlIH0gZnJvbSAnLi91dGlscy9tZXJnZSc7XG5leHBvcnQgeyBUaW1lb3V0RXJyb3IsIGNhbGxXaXRoVGltZW91dCB9IGZyb20gJy4vdXRpbHMvdGltZW91dCc7XG5leHBvcnQgeyBpc1VybElnbm9yZWQsIHVybE1hdGNoZXMgfSBmcm9tICcuL3V0aWxzL3VybCc7XG5leHBvcnQgeyBCaW5kT25jZUZ1dHVyZSB9IGZyb20gJy4vdXRpbHMvY2FsbGJhY2snO1xuZXhwb3J0IHsgZGlhZ0xvZ0xldmVsRnJvbVN0cmluZyB9IGZyb20gJy4vdXRpbHMvY29uZmlndXJhdGlvbic7XG5pbXBvcnQgeyBfZXhwb3J0IH0gZnJvbSAnLi9pbnRlcm5hbC9leHBvcnRlcic7XG5leHBvcnQgY29uc3QgaW50ZXJuYWwgPSB7XG4gICAgX2V4cG9ydCxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/core/build/esm/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/core/build/esm/internal/exporter.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/internal/exporter.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _export: () => (/* binding */ _export)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/context-api.js\");\n/* harmony import */ var _trace_suppress_tracing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../trace/suppress-tracing */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * @internal\n * Shared functionality used by Exporters while exporting data, including suppression of Traces.\n */\nfunction _export(exporter, arg) {\n    return new Promise(resolve => {\n        // prevent downstream exporter calls from generating spans\n        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.context.with((0,_trace_suppress_tracing__WEBPACK_IMPORTED_MODULE_1__.suppressTracing)(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.context.active()), () => {\n            exporter.export(arg, (result) => {\n                resolve(result);\n            });\n        });\n    });\n}\n//# sourceMappingURL=exporter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvcmUvYnVpbGQvZXNtL2ludGVybmFsL2V4cG9ydGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUM2QztBQUNlO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EsUUFBUSx1REFBTyxNQUFNLHdFQUFlLENBQUMsdURBQU87QUFDNUM7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0EiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvY29yZS9idWlsZC9lc20vaW50ZXJuYWwvZXhwb3J0ZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IGNvbnRleHQgfSBmcm9tICdAb3BlbnRlbGVtZXRyeS9hcGknO1xuaW1wb3J0IHsgc3VwcHJlc3NUcmFjaW5nIH0gZnJvbSAnLi4vdHJhY2Uvc3VwcHJlc3MtdHJhY2luZyc7XG4vKipcbiAqIEBpbnRlcm5hbFxuICogU2hhcmVkIGZ1bmN0aW9uYWxpdHkgdXNlZCBieSBFeHBvcnRlcnMgd2hpbGUgZXhwb3J0aW5nIGRhdGEsIGluY2x1ZGluZyBzdXBwcmVzc2lvbiBvZiBUcmFjZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBfZXhwb3J0KGV4cG9ydGVyLCBhcmcpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgIC8vIHByZXZlbnQgZG93bnN0cmVhbSBleHBvcnRlciBjYWxscyBmcm9tIGdlbmVyYXRpbmcgc3BhbnNcbiAgICAgICAgY29udGV4dC53aXRoKHN1cHByZXNzVHJhY2luZyhjb250ZXh0LmFjdGl2ZSgpKSwgKCkgPT4ge1xuICAgICAgICAgICAgZXhwb3J0ZXIuZXhwb3J0KGFyZywgKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4cG9ydGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/core/build/esm/internal/exporter.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/core/build/esm/internal/validators.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/internal/validators.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   validateKey: () => (/* binding */ validateKey),\n/* harmony export */   validateValue: () => (/* binding */ validateValue)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst VALID_KEY_CHAR_RANGE = '[_0-9a-z-*/]';\nconst VALID_KEY = `[a-z]${VALID_KEY_CHAR_RANGE}{0,255}`;\nconst VALID_VENDOR_KEY = `[a-z0-9]${VALID_KEY_CHAR_RANGE}{0,240}@[a-z]${VALID_KEY_CHAR_RANGE}{0,13}`;\nconst VALID_KEY_REGEX = new RegExp(`^(?:${VALID_KEY}|${VALID_VENDOR_KEY})$`);\nconst VALID_VALUE_BASE_REGEX = /^[ -~]{0,255}[!-~]$/;\nconst INVALID_VALUE_COMMA_EQUAL_REGEX = /,|=/;\n/**\n * Key is opaque string up to 256 characters printable. It MUST begin with a\n * lowercase letter, and can only contain lowercase letters a-z, digits 0-9,\n * underscores _, dashes -, asterisks *, and forward slashes /.\n * For multi-tenant vendor scenarios, an at sign (@) can be used to prefix the\n * vendor name. Vendors SHOULD set the tenant ID at the beginning of the key.\n * see https://www.w3.org/TR/trace-context/#key\n */\nfunction validateKey(key) {\n    return VALID_KEY_REGEX.test(key);\n}\n/**\n * Value is opaque string up to 256 characters printable ASCII RFC0020\n * characters (i.e., the range 0x20 to 0x7E) except comma , and =.\n */\nfunction validateValue(value) {\n    return (VALID_VALUE_BASE_REGEX.test(value) &&\n        !INVALID_VALUE_COMMA_EQUAL_REGEX.test(value));\n}\n//# sourceMappingURL=validators.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvcmUvYnVpbGQvZXNtL2ludGVybmFsL3ZhbGlkYXRvcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixzQkFBc0IsTUFBTTtBQUN0RCxvQ0FBb0Msc0JBQXNCLE1BQU0sUUFBUSxzQkFBc0IsS0FBSztBQUNuRywwQ0FBMEMsVUFBVSxHQUFHLGlCQUFpQjtBQUN4RSx1Q0FBdUMsTUFBTTtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvY29yZS9idWlsZC9lc20vaW50ZXJuYWwvdmFsaWRhdG9ycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuY29uc3QgVkFMSURfS0VZX0NIQVJfUkFOR0UgPSAnW18wLTlhLXotKi9dJztcbmNvbnN0IFZBTElEX0tFWSA9IGBbYS16XSR7VkFMSURfS0VZX0NIQVJfUkFOR0V9ezAsMjU1fWA7XG5jb25zdCBWQUxJRF9WRU5ET1JfS0VZID0gYFthLXowLTldJHtWQUxJRF9LRVlfQ0hBUl9SQU5HRX17MCwyNDB9QFthLXpdJHtWQUxJRF9LRVlfQ0hBUl9SQU5HRX17MCwxM31gO1xuY29uc3QgVkFMSURfS0VZX1JFR0VYID0gbmV3IFJlZ0V4cChgXig/OiR7VkFMSURfS0VZfXwke1ZBTElEX1ZFTkRPUl9LRVl9KSRgKTtcbmNvbnN0IFZBTElEX1ZBTFVFX0JBU0VfUkVHRVggPSAvXlsgLX5dezAsMjU1fVshLX5dJC87XG5jb25zdCBJTlZBTElEX1ZBTFVFX0NPTU1BX0VRVUFMX1JFR0VYID0gLyx8PS87XG4vKipcbiAqIEtleSBpcyBvcGFxdWUgc3RyaW5nIHVwIHRvIDI1NiBjaGFyYWN0ZXJzIHByaW50YWJsZS4gSXQgTVVTVCBiZWdpbiB3aXRoIGFcbiAqIGxvd2VyY2FzZSBsZXR0ZXIsIGFuZCBjYW4gb25seSBjb250YWluIGxvd2VyY2FzZSBsZXR0ZXJzIGEteiwgZGlnaXRzIDAtOSxcbiAqIHVuZGVyc2NvcmVzIF8sIGRhc2hlcyAtLCBhc3Rlcmlza3MgKiwgYW5kIGZvcndhcmQgc2xhc2hlcyAvLlxuICogRm9yIG11bHRpLXRlbmFudCB2ZW5kb3Igc2NlbmFyaW9zLCBhbiBhdCBzaWduIChAKSBjYW4gYmUgdXNlZCB0byBwcmVmaXggdGhlXG4gKiB2ZW5kb3IgbmFtZS4gVmVuZG9ycyBTSE9VTEQgc2V0IHRoZSB0ZW5hbnQgSUQgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUga2V5LlxuICogc2VlIGh0dHBzOi8vd3d3LnczLm9yZy9UUi90cmFjZS1jb250ZXh0LyNrZXlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlS2V5KGtleSkge1xuICAgIHJldHVybiBWQUxJRF9LRVlfUkVHRVgudGVzdChrZXkpO1xufVxuLyoqXG4gKiBWYWx1ZSBpcyBvcGFxdWUgc3RyaW5nIHVwIHRvIDI1NiBjaGFyYWN0ZXJzIHByaW50YWJsZSBBU0NJSSBSRkMwMDIwXG4gKiBjaGFyYWN0ZXJzIChpLmUuLCB0aGUgcmFuZ2UgMHgyMCB0byAweDdFKSBleGNlcHQgY29tbWEgLCBhbmQgPS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlVmFsdWUodmFsdWUpIHtcbiAgICByZXR1cm4gKFZBTElEX1ZBTFVFX0JBU0VfUkVHRVgudGVzdCh2YWx1ZSkgJiZcbiAgICAgICAgIUlOVkFMSURfVkFMVUVfQ09NTUFfRVFVQUxfUkVHRVgudGVzdCh2YWx1ZSkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmFsaWRhdG9ycy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/core/build/esm/internal/validators.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/core/build/esm/platform/node/environment.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/platform/node/environment.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBooleanFromEnv: () => (/* binding */ getBooleanFromEnv),\n/* harmony export */   getNumberFromEnv: () => (/* binding */ getNumberFromEnv),\n/* harmony export */   getStringFromEnv: () => (/* binding */ getStringFromEnv),\n/* harmony export */   getStringListFromEnv: () => (/* binding */ getStringListFromEnv)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/diag-api.js\");\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! util */ \"util\");\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(util__WEBPACK_IMPORTED_MODULE_0__);\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Retrieves a number from an environment variable.\n * - Returns `undefined` if the environment variable is empty, unset, contains only whitespace, or is not a number.\n * - Returns a number in all other cases.\n *\n * @param {string} key - The name of the environment variable to retrieve.\n * @returns {number | undefined} - The number value or `undefined`.\n */\nfunction getNumberFromEnv(key) {\n    const raw = process.env[key];\n    if (raw == null || raw.trim() === '') {\n        return undefined;\n    }\n    const value = Number(raw);\n    if (isNaN(value)) {\n        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__.diag.warn(`Unknown value ${(0,util__WEBPACK_IMPORTED_MODULE_0__.inspect)(raw)} for ${key}, expected a number, using defaults`);\n        return undefined;\n    }\n    return value;\n}\n/**\n * Retrieves a string from an environment variable.\n * - Returns `undefined` if the environment variable is empty, unset, or contains only whitespace.\n *\n * @param {string} key - The name of the environment variable to retrieve.\n * @returns {string | undefined} - The string value or `undefined`.\n */\nfunction getStringFromEnv(key) {\n    const raw = process.env[key];\n    if (raw == null || raw.trim() === '') {\n        return undefined;\n    }\n    return raw;\n}\n/**\n * Retrieves a boolean value from an environment variable.\n * - Trims leading and trailing whitespace and ignores casing.\n * - Returns `false` if the environment variable is empty, unset, or contains only whitespace.\n * - Returns `false` for strings that cannot be mapped to a boolean.\n *\n * @param {string} key - The name of the environment variable to retrieve.\n * @returns {boolean} - The boolean value or `false` if the environment variable is unset empty, unset, or contains only whitespace.\n */\nfunction getBooleanFromEnv(key) {\n    const raw = process.env[key]?.trim().toLowerCase();\n    if (raw == null || raw === '') {\n        // NOTE: falling back to `false` instead of `undefined` as required by the specification.\n        // If you have a use-case that requires `undefined`, consider using `getStringFromEnv()` and applying the necessary\n        // normalizations in the consuming code.\n        return false;\n    }\n    if (raw === 'true') {\n        return true;\n    }\n    else if (raw === 'false') {\n        return false;\n    }\n    else {\n        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__.diag.warn(`Unknown value ${(0,util__WEBPACK_IMPORTED_MODULE_0__.inspect)(raw)} for ${key}, expected 'true' or 'false', falling back to 'false' (default)`);\n        return false;\n    }\n}\n/**\n * Retrieves a list of strings from an environment variable.\n * - Uses ',' as the delimiter.\n * - Trims leading and trailing whitespace from each entry.\n * - Excludes empty entries.\n * - Returns `undefined` if the environment variable is empty or contains only whitespace.\n * - Returns an empty array if all entries are empty or whitespace.\n *\n * @param {string} key - The name of the environment variable to retrieve.\n * @returns {string[] | undefined} - The list of strings or `undefined`.\n */\nfunction getStringListFromEnv(key) {\n    return getStringFromEnv(key)\n        ?.split(',')\n        .map(v => v.trim())\n        .filter(s => s !== '');\n}\n//# sourceMappingURL=environment.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvcmUvYnVpbGQvZXNtL3BsYXRmb3JtL25vZGUvZW52aXJvbm1lbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUMwQztBQUNYO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsYUFBYSxvQkFBb0I7QUFDakM7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsb0RBQUksdUJBQXVCLDZDQUFPLE9BQU8sTUFBTSxJQUFJO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsYUFBYSxvQkFBb0I7QUFDakM7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixhQUFhLFNBQVM7QUFDdEI7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLG9EQUFJLHVCQUF1Qiw2Q0FBTyxPQUFPLE1BQU0sSUFBSTtBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLGFBQWEsc0JBQXNCO0FBQ25DO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvY29yZS9idWlsZC9lc20vcGxhdGZvcm0vbm9kZS9lbnZpcm9ubWVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgZGlhZyB9IGZyb20gJ0BvcGVudGVsZW1ldHJ5L2FwaSc7XG5pbXBvcnQgeyBpbnNwZWN0IH0gZnJvbSAndXRpbCc7XG4vKipcbiAqIFJldHJpZXZlcyBhIG51bWJlciBmcm9tIGFuIGVudmlyb25tZW50IHZhcmlhYmxlLlxuICogLSBSZXR1cm5zIGB1bmRlZmluZWRgIGlmIHRoZSBlbnZpcm9ubWVudCB2YXJpYWJsZSBpcyBlbXB0eSwgdW5zZXQsIGNvbnRhaW5zIG9ubHkgd2hpdGVzcGFjZSwgb3IgaXMgbm90IGEgbnVtYmVyLlxuICogLSBSZXR1cm5zIGEgbnVtYmVyIGluIGFsbCBvdGhlciBjYXNlcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IC0gVGhlIG5hbWUgb2YgdGhlIGVudmlyb25tZW50IHZhcmlhYmxlIHRvIHJldHJpZXZlLlxuICogQHJldHVybnMge251bWJlciB8IHVuZGVmaW5lZH0gLSBUaGUgbnVtYmVyIHZhbHVlIG9yIGB1bmRlZmluZWRgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TnVtYmVyRnJvbUVudihrZXkpIHtcbiAgICBjb25zdCByYXcgPSBwcm9jZXNzLmVudltrZXldO1xuICAgIGlmIChyYXcgPT0gbnVsbCB8fCByYXcudHJpbSgpID09PSAnJykge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBjb25zdCB2YWx1ZSA9IE51bWJlcihyYXcpO1xuICAgIGlmIChpc05hTih2YWx1ZSkpIHtcbiAgICAgICAgZGlhZy53YXJuKGBVbmtub3duIHZhbHVlICR7aW5zcGVjdChyYXcpfSBmb3IgJHtrZXl9LCBleHBlY3RlZCBhIG51bWJlciwgdXNpbmcgZGVmYXVsdHNgKTtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuLyoqXG4gKiBSZXRyaWV2ZXMgYSBzdHJpbmcgZnJvbSBhbiBlbnZpcm9ubWVudCB2YXJpYWJsZS5cbiAqIC0gUmV0dXJucyBgdW5kZWZpbmVkYCBpZiB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGUgaXMgZW1wdHksIHVuc2V0LCBvciBjb250YWlucyBvbmx5IHdoaXRlc3BhY2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSAtIFRoZSBuYW1lIG9mIHRoZSBlbnZpcm9ubWVudCB2YXJpYWJsZSB0byByZXRyaWV2ZS5cbiAqIEByZXR1cm5zIHtzdHJpbmcgfCB1bmRlZmluZWR9IC0gVGhlIHN0cmluZyB2YWx1ZSBvciBgdW5kZWZpbmVkYC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFN0cmluZ0Zyb21FbnYoa2V5KSB7XG4gICAgY29uc3QgcmF3ID0gcHJvY2Vzcy5lbnZba2V5XTtcbiAgICBpZiAocmF3ID09IG51bGwgfHwgcmF3LnRyaW0oKSA9PT0gJycpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIHJhdztcbn1cbi8qKlxuICogUmV0cmlldmVzIGEgYm9vbGVhbiB2YWx1ZSBmcm9tIGFuIGVudmlyb25tZW50IHZhcmlhYmxlLlxuICogLSBUcmltcyBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlIGFuZCBpZ25vcmVzIGNhc2luZy5cbiAqIC0gUmV0dXJucyBgZmFsc2VgIGlmIHRoZSBlbnZpcm9ubWVudCB2YXJpYWJsZSBpcyBlbXB0eSwgdW5zZXQsIG9yIGNvbnRhaW5zIG9ubHkgd2hpdGVzcGFjZS5cbiAqIC0gUmV0dXJucyBgZmFsc2VgIGZvciBzdHJpbmdzIHRoYXQgY2Fubm90IGJlIG1hcHBlZCB0byBhIGJvb2xlYW4uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSAtIFRoZSBuYW1lIG9mIHRoZSBlbnZpcm9ubWVudCB2YXJpYWJsZSB0byByZXRyaWV2ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSAtIFRoZSBib29sZWFuIHZhbHVlIG9yIGBmYWxzZWAgaWYgdGhlIGVudmlyb25tZW50IHZhcmlhYmxlIGlzIHVuc2V0IGVtcHR5LCB1bnNldCwgb3IgY29udGFpbnMgb25seSB3aGl0ZXNwYWNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Qm9vbGVhbkZyb21FbnYoa2V5KSB7XG4gICAgY29uc3QgcmF3ID0gcHJvY2Vzcy5lbnZba2V5XT8udHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKHJhdyA9PSBudWxsIHx8IHJhdyA9PT0gJycpIHtcbiAgICAgICAgLy8gTk9URTogZmFsbGluZyBiYWNrIHRvIGBmYWxzZWAgaW5zdGVhZCBvZiBgdW5kZWZpbmVkYCBhcyByZXF1aXJlZCBieSB0aGUgc3BlY2lmaWNhdGlvbi5cbiAgICAgICAgLy8gSWYgeW91IGhhdmUgYSB1c2UtY2FzZSB0aGF0IHJlcXVpcmVzIGB1bmRlZmluZWRgLCBjb25zaWRlciB1c2luZyBgZ2V0U3RyaW5nRnJvbUVudigpYCBhbmQgYXBwbHlpbmcgdGhlIG5lY2Vzc2FyeVxuICAgICAgICAvLyBub3JtYWxpemF0aW9ucyBpbiB0aGUgY29uc3VtaW5nIGNvZGUuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHJhdyA9PT0gJ3RydWUnKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBlbHNlIGlmIChyYXcgPT09ICdmYWxzZScpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZGlhZy53YXJuKGBVbmtub3duIHZhbHVlICR7aW5zcGVjdChyYXcpfSBmb3IgJHtrZXl9LCBleHBlY3RlZCAndHJ1ZScgb3IgJ2ZhbHNlJywgZmFsbGluZyBiYWNrIHRvICdmYWxzZScgKGRlZmF1bHQpYCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG4vKipcbiAqIFJldHJpZXZlcyBhIGxpc3Qgb2Ygc3RyaW5ncyBmcm9tIGFuIGVudmlyb25tZW50IHZhcmlhYmxlLlxuICogLSBVc2VzICcsJyBhcyB0aGUgZGVsaW1pdGVyLlxuICogLSBUcmltcyBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlIGZyb20gZWFjaCBlbnRyeS5cbiAqIC0gRXhjbHVkZXMgZW1wdHkgZW50cmllcy5cbiAqIC0gUmV0dXJucyBgdW5kZWZpbmVkYCBpZiB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGUgaXMgZW1wdHkgb3IgY29udGFpbnMgb25seSB3aGl0ZXNwYWNlLlxuICogLSBSZXR1cm5zIGFuIGVtcHR5IGFycmF5IGlmIGFsbCBlbnRyaWVzIGFyZSBlbXB0eSBvciB3aGl0ZXNwYWNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSBUaGUgbmFtZSBvZiB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGUgdG8gcmV0cmlldmUuXG4gKiBAcmV0dXJucyB7c3RyaW5nW10gfCB1bmRlZmluZWR9IC0gVGhlIGxpc3Qgb2Ygc3RyaW5ncyBvciBgdW5kZWZpbmVkYC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFN0cmluZ0xpc3RGcm9tRW52KGtleSkge1xuICAgIHJldHVybiBnZXRTdHJpbmdGcm9tRW52KGtleSlcbiAgICAgICAgPy5zcGxpdCgnLCcpXG4gICAgICAgIC5tYXAodiA9PiB2LnRyaW0oKSlcbiAgICAgICAgLmZpbHRlcihzID0+IHMgIT09ICcnKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVudmlyb25tZW50LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/core/build/esm/platform/node/environment.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/core/build/esm/platform/node/globalThis.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/platform/node/globalThis.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _globalThis: () => (/* binding */ _globalThis)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** only globals that common to node and browsers are allowed */\n// eslint-disable-next-line node/no-unsupported-features/es-builtins\nconst _globalThis = typeof globalThis === 'object' ? globalThis : global;\n//# sourceMappingURL=globalThis.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvcmUvYnVpbGQvZXNtL3BsYXRmb3JtL25vZGUvZ2xvYmFsVGhpcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvY29yZS9idWlsZC9lc20vcGxhdGZvcm0vbm9kZS9nbG9iYWxUaGlzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKiogb25seSBnbG9iYWxzIHRoYXQgY29tbW9uIHRvIG5vZGUgYW5kIGJyb3dzZXJzIGFyZSBhbGxvd2VkICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9lcy1idWlsdGluc1xuZXhwb3J0IGNvbnN0IF9nbG9iYWxUaGlzID0gdHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnID8gZ2xvYmFsVGhpcyA6IGdsb2JhbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdsb2JhbFRoaXMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/core/build/esm/platform/node/globalThis.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/core/build/esm/platform/node/performance.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/platform/node/performance.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   otperformance: () => (/* binding */ otperformance)\n/* harmony export */ });\n/* harmony import */ var perf_hooks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! perf_hooks */ \"perf_hooks\");\n/* harmony import */ var perf_hooks__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(perf_hooks__WEBPACK_IMPORTED_MODULE_0__);\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst otperformance = perf_hooks__WEBPACK_IMPORTED_MODULE_0__.performance;\n//# sourceMappingURL=performance.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvcmUvYnVpbGQvZXNtL3BsYXRmb3JtL25vZGUvcGVyZm9ybWFuY2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3lDO0FBQ2xDLHNCQUFzQixtREFBVztBQUN4QyIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9jb3JlL2J1aWxkL2VzbS9wbGF0Zm9ybS9ub2RlL3BlcmZvcm1hbmNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBwZXJmb3JtYW5jZSB9IGZyb20gJ3BlcmZfaG9va3MnO1xuZXhwb3J0IGNvbnN0IG90cGVyZm9ybWFuY2UgPSBwZXJmb3JtYW5jZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBlcmZvcm1hbmNlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/core/build/esm/platform/node/performance.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/core/build/esm/platform/node/sdk-info.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/platform/node/sdk-info.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SDK_INFO: () => (/* binding */ SDK_INFO)\n/* harmony export */ });\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../version */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/version.js\");\n/* harmony import */ var _opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/stable_attributes.js\");\n/* harmony import */ var _semconv__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../semconv */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/semconv.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/** Constants describing the SDK in use */\nconst SDK_INFO = {\n    [_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_0__.ATTR_TELEMETRY_SDK_NAME]: 'opentelemetry',\n    [_semconv__WEBPACK_IMPORTED_MODULE_1__.ATTR_PROCESS_RUNTIME_NAME]: 'node',\n    [_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_0__.ATTR_TELEMETRY_SDK_LANGUAGE]: _opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_0__.TELEMETRY_SDK_LANGUAGE_VALUE_NODEJS,\n    [_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_0__.ATTR_TELEMETRY_SDK_VERSION]: _version__WEBPACK_IMPORTED_MODULE_2__.VERSION,\n};\n//# sourceMappingURL=sdk-info.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvcmUvYnVpbGQvZXNtL3BsYXRmb3JtL25vZGUvc2RrLWluZm8uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN3QztBQUNxSTtBQUNuSDtBQUMxRDtBQUNPO0FBQ1AsS0FBSyx3RkFBdUI7QUFDNUIsS0FBSywrREFBeUI7QUFDOUIsS0FBSyw0RkFBMkIsR0FBRyxvR0FBbUM7QUFDdEUsS0FBSywyRkFBMEIsR0FBRyw2Q0FBTztBQUN6QztBQUNBIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvcmUvYnVpbGQvZXNtL3BsYXRmb3JtL25vZGUvc2RrLWluZm8uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IFZFUlNJT04gfSBmcm9tICcuLi8uLi92ZXJzaW9uJztcbmltcG9ydCB7IEFUVFJfVEVMRU1FVFJZX1NES19OQU1FLCBBVFRSX1RFTEVNRVRSWV9TREtfTEFOR1VBR0UsIFRFTEVNRVRSWV9TREtfTEFOR1VBR0VfVkFMVUVfTk9ERUpTLCBBVFRSX1RFTEVNRVRSWV9TREtfVkVSU0lPTiwgfSBmcm9tICdAb3BlbnRlbGVtZXRyeS9zZW1hbnRpYy1jb252ZW50aW9ucyc7XG5pbXBvcnQgeyBBVFRSX1BST0NFU1NfUlVOVElNRV9OQU1FIH0gZnJvbSAnLi4vLi4vc2VtY29udic7XG4vKiogQ29uc3RhbnRzIGRlc2NyaWJpbmcgdGhlIFNESyBpbiB1c2UgKi9cbmV4cG9ydCBjb25zdCBTREtfSU5GTyA9IHtcbiAgICBbQVRUUl9URUxFTUVUUllfU0RLX05BTUVdOiAnb3BlbnRlbGVtZXRyeScsXG4gICAgW0FUVFJfUFJPQ0VTU19SVU5USU1FX05BTUVdOiAnbm9kZScsXG4gICAgW0FUVFJfVEVMRU1FVFJZX1NES19MQU5HVUFHRV06IFRFTEVNRVRSWV9TREtfTEFOR1VBR0VfVkFMVUVfTk9ERUpTLFxuICAgIFtBVFRSX1RFTEVNRVRSWV9TREtfVkVSU0lPTl06IFZFUlNJT04sXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2RrLWluZm8uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/core/build/esm/platform/node/sdk-info.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/core/build/esm/platform/node/timer-util.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/platform/node/timer-util.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   unrefTimer: () => (/* binding */ unrefTimer)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction unrefTimer(timer) {\n    timer.unref();\n}\n//# sourceMappingURL=timer-util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvcmUvYnVpbGQvZXNtL3BsYXRmb3JtL25vZGUvdGltZXItdXRpbC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvY29yZS9idWlsZC9lc20vcGxhdGZvcm0vbm9kZS90aW1lci11dGlsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdW5yZWZUaW1lcih0aW1lcikge1xuICAgIHRpbWVyLnVucmVmKCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aW1lci11dGlsLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/core/build/esm/platform/node/timer-util.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/core/build/esm/propagation/composite.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/propagation/composite.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CompositePropagator: () => (/* binding */ CompositePropagator)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/diag-api.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Combines multiple propagators into a single propagator. */\nclass CompositePropagator {\n    _propagators;\n    _fields;\n    /**\n     * Construct a composite propagator from a list of propagators.\n     *\n     * @param [config] Configuration object for composite propagator\n     */\n    constructor(config = {}) {\n        this._propagators = config.propagators ?? [];\n        this._fields = Array.from(new Set(this._propagators\n            // older propagators may not have fields function, null check to be sure\n            .map(p => (typeof p.fields === 'function' ? p.fields() : []))\n            .reduce((x, y) => x.concat(y), [])));\n    }\n    /**\n     * Run each of the configured propagators with the given context and carrier.\n     * Propagators are run in the order they are configured, so if multiple\n     * propagators write the same carrier key, the propagator later in the list\n     * will \"win\".\n     *\n     * @param context Context to inject\n     * @param carrier Carrier into which context will be injected\n     */\n    inject(context, carrier, setter) {\n        for (const propagator of this._propagators) {\n            try {\n                propagator.inject(context, carrier, setter);\n            }\n            catch (err) {\n                _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.warn(`Failed to inject with ${propagator.constructor.name}. Err: ${err.message}`);\n            }\n        }\n    }\n    /**\n     * Run each of the configured propagators with the given context and carrier.\n     * Propagators are run in the order they are configured, so if multiple\n     * propagators write the same context key, the propagator later in the list\n     * will \"win\".\n     *\n     * @param context Context to add values to\n     * @param carrier Carrier from which to extract context\n     */\n    extract(context, carrier, getter) {\n        return this._propagators.reduce((ctx, propagator) => {\n            try {\n                return propagator.extract(ctx, carrier, getter);\n            }\n            catch (err) {\n                _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.warn(`Failed to extract with ${propagator.constructor.name}. Err: ${err.message}`);\n            }\n            return ctx;\n        }, context);\n    }\n    fields() {\n        // return a new array so our fields cannot be modified\n        return this._fields.slice();\n    }\n}\n//# sourceMappingURL=composite.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvcmUvYnVpbGQvZXNtL3Byb3BhZ2F0aW9uL2NvbXBvc2l0ZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUMyQztBQUMzQztBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLG9EQUFJLCtCQUErQiw0QkFBNEIsU0FBUyxZQUFZO0FBQ3BHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixvREFBSSxnQ0FBZ0MsNEJBQTRCLFNBQVMsWUFBWTtBQUNyRztBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvcmUvYnVpbGQvZXNtL3Byb3BhZ2F0aW9uL2NvbXBvc2l0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgZGlhZywgfSBmcm9tICdAb3BlbnRlbGVtZXRyeS9hcGknO1xuLyoqIENvbWJpbmVzIG11bHRpcGxlIHByb3BhZ2F0b3JzIGludG8gYSBzaW5nbGUgcHJvcGFnYXRvci4gKi9cbmV4cG9ydCBjbGFzcyBDb21wb3NpdGVQcm9wYWdhdG9yIHtcbiAgICBfcHJvcGFnYXRvcnM7XG4gICAgX2ZpZWxkcztcbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3QgYSBjb21wb3NpdGUgcHJvcGFnYXRvciBmcm9tIGEgbGlzdCBvZiBwcm9wYWdhdG9ycy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBbY29uZmlnXSBDb25maWd1cmF0aW9uIG9iamVjdCBmb3IgY29tcG9zaXRlIHByb3BhZ2F0b3JcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihjb25maWcgPSB7fSkge1xuICAgICAgICB0aGlzLl9wcm9wYWdhdG9ycyA9IGNvbmZpZy5wcm9wYWdhdG9ycyA/PyBbXTtcbiAgICAgICAgdGhpcy5fZmllbGRzID0gQXJyYXkuZnJvbShuZXcgU2V0KHRoaXMuX3Byb3BhZ2F0b3JzXG4gICAgICAgICAgICAvLyBvbGRlciBwcm9wYWdhdG9ycyBtYXkgbm90IGhhdmUgZmllbGRzIGZ1bmN0aW9uLCBudWxsIGNoZWNrIHRvIGJlIHN1cmVcbiAgICAgICAgICAgIC5tYXAocCA9PiAodHlwZW9mIHAuZmllbGRzID09PSAnZnVuY3Rpb24nID8gcC5maWVsZHMoKSA6IFtdKSlcbiAgICAgICAgICAgIC5yZWR1Y2UoKHgsIHkpID0+IHguY29uY2F0KHkpLCBbXSkpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUnVuIGVhY2ggb2YgdGhlIGNvbmZpZ3VyZWQgcHJvcGFnYXRvcnMgd2l0aCB0aGUgZ2l2ZW4gY29udGV4dCBhbmQgY2Fycmllci5cbiAgICAgKiBQcm9wYWdhdG9ycyBhcmUgcnVuIGluIHRoZSBvcmRlciB0aGV5IGFyZSBjb25maWd1cmVkLCBzbyBpZiBtdWx0aXBsZVxuICAgICAqIHByb3BhZ2F0b3JzIHdyaXRlIHRoZSBzYW1lIGNhcnJpZXIga2V5LCB0aGUgcHJvcGFnYXRvciBsYXRlciBpbiB0aGUgbGlzdFxuICAgICAqIHdpbGwgXCJ3aW5cIi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb250ZXh0IENvbnRleHQgdG8gaW5qZWN0XG4gICAgICogQHBhcmFtIGNhcnJpZXIgQ2FycmllciBpbnRvIHdoaWNoIGNvbnRleHQgd2lsbCBiZSBpbmplY3RlZFxuICAgICAqL1xuICAgIGluamVjdChjb250ZXh0LCBjYXJyaWVyLCBzZXR0ZXIpIHtcbiAgICAgICAgZm9yIChjb25zdCBwcm9wYWdhdG9yIG9mIHRoaXMuX3Byb3BhZ2F0b3JzKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHByb3BhZ2F0b3IuaW5qZWN0KGNvbnRleHQsIGNhcnJpZXIsIHNldHRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgZGlhZy53YXJuKGBGYWlsZWQgdG8gaW5qZWN0IHdpdGggJHtwcm9wYWdhdG9yLmNvbnN0cnVjdG9yLm5hbWV9LiBFcnI6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUnVuIGVhY2ggb2YgdGhlIGNvbmZpZ3VyZWQgcHJvcGFnYXRvcnMgd2l0aCB0aGUgZ2l2ZW4gY29udGV4dCBhbmQgY2Fycmllci5cbiAgICAgKiBQcm9wYWdhdG9ycyBhcmUgcnVuIGluIHRoZSBvcmRlciB0aGV5IGFyZSBjb25maWd1cmVkLCBzbyBpZiBtdWx0aXBsZVxuICAgICAqIHByb3BhZ2F0b3JzIHdyaXRlIHRoZSBzYW1lIGNvbnRleHQga2V5LCB0aGUgcHJvcGFnYXRvciBsYXRlciBpbiB0aGUgbGlzdFxuICAgICAqIHdpbGwgXCJ3aW5cIi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb250ZXh0IENvbnRleHQgdG8gYWRkIHZhbHVlcyB0b1xuICAgICAqIEBwYXJhbSBjYXJyaWVyIENhcnJpZXIgZnJvbSB3aGljaCB0byBleHRyYWN0IGNvbnRleHRcbiAgICAgKi9cbiAgICBleHRyYWN0KGNvbnRleHQsIGNhcnJpZXIsIGdldHRlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJvcGFnYXRvcnMucmVkdWNlKChjdHgsIHByb3BhZ2F0b3IpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3BhZ2F0b3IuZXh0cmFjdChjdHgsIGNhcnJpZXIsIGdldHRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgZGlhZy53YXJuKGBGYWlsZWQgdG8gZXh0cmFjdCB3aXRoICR7cHJvcGFnYXRvci5jb25zdHJ1Y3Rvci5uYW1lfS4gRXJyOiAke2Vyci5tZXNzYWdlfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGN0eDtcbiAgICAgICAgfSwgY29udGV4dCk7XG4gICAgfVxuICAgIGZpZWxkcygpIHtcbiAgICAgICAgLy8gcmV0dXJuIGEgbmV3IGFycmF5IHNvIG91ciBmaWVsZHMgY2Fubm90IGJlIG1vZGlmaWVkXG4gICAgICAgIHJldHVybiB0aGlzLl9maWVsZHMuc2xpY2UoKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21wb3NpdGUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/core/build/esm/propagation/composite.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/core/build/esm/semconv.js":
/*!***************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/semconv.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ATTR_PROCESS_RUNTIME_NAME: () => (/* binding */ ATTR_PROCESS_RUNTIME_NAME)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*\n * This file contains a copy of unstable semantic convention definitions\n * used by this package.\n * @see https://github.com/open-telemetry/opentelemetry-js/tree/main/semantic-conventions#unstable-semconv\n */\n/**\n * The name of the runtime of this process.\n *\n * @example OpenJDK Runtime Environment\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nconst ATTR_PROCESS_RUNTIME_NAME = 'process.runtime.name';\n//# sourceMappingURL=semconv.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvcmUvYnVpbGQvZXNtL3NlbWNvbnYuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvY29yZS9idWlsZC9lc20vc2VtY29udi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLypcbiAqIFRoaXMgZmlsZSBjb250YWlucyBhIGNvcHkgb2YgdW5zdGFibGUgc2VtYW50aWMgY29udmVudGlvbiBkZWZpbml0aW9uc1xuICogdXNlZCBieSB0aGlzIHBhY2thZ2UuXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9vcGVuLXRlbGVtZXRyeS9vcGVudGVsZW1ldHJ5LWpzL3RyZWUvbWFpbi9zZW1hbnRpYy1jb252ZW50aW9ucyN1bnN0YWJsZS1zZW1jb252XG4gKi9cbi8qKlxuICogVGhlIG5hbWUgb2YgdGhlIHJ1bnRpbWUgb2YgdGhpcyBwcm9jZXNzLlxuICpcbiAqIEBleGFtcGxlIE9wZW5KREsgUnVudGltZSBFbnZpcm9ubWVudFxuICpcbiAqIEBleHBlcmltZW50YWwgVGhpcyBhdHRyaWJ1dGUgaXMgZXhwZXJpbWVudGFsIGFuZCBpcyBzdWJqZWN0IHRvIGJyZWFraW5nIGNoYW5nZXMgaW4gbWlub3IgcmVsZWFzZXMgb2YgYEBvcGVudGVsZW1ldHJ5L3NlbWFudGljLWNvbnZlbnRpb25zYC5cbiAqL1xuZXhwb3J0IGNvbnN0IEFUVFJfUFJPQ0VTU19SVU5USU1FX05BTUUgPSAncHJvY2Vzcy5ydW50aW1lLm5hbWUnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VtY29udi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/core/build/esm/semconv.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/core/build/esm/trace/TraceState.js":
/*!************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/trace/TraceState.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TraceState: () => (/* binding */ TraceState)\n/* harmony export */ });\n/* harmony import */ var _internal_validators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/validators */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/internal/validators.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst MAX_TRACE_STATE_ITEMS = 32;\nconst MAX_TRACE_STATE_LEN = 512;\nconst LIST_MEMBERS_SEPARATOR = ',';\nconst LIST_MEMBER_KEY_VALUE_SPLITTER = '=';\n/**\n * TraceState must be a class and not a simple object type because of the spec\n * requirement (https://www.w3.org/TR/trace-context/#tracestate-field).\n *\n * Here is the list of allowed mutations:\n * - New key-value pair should be added into the beginning of the list\n * - The value of any key can be updated. Modified keys MUST be moved to the\n * beginning of the list.\n */\nclass TraceState {\n    _internalState = new Map();\n    constructor(rawTraceState) {\n        if (rawTraceState)\n            this._parse(rawTraceState);\n    }\n    set(key, value) {\n        // TODO: Benchmark the different approaches(map vs list) and\n        // use the faster one.\n        const traceState = this._clone();\n        if (traceState._internalState.has(key)) {\n            traceState._internalState.delete(key);\n        }\n        traceState._internalState.set(key, value);\n        return traceState;\n    }\n    unset(key) {\n        const traceState = this._clone();\n        traceState._internalState.delete(key);\n        return traceState;\n    }\n    get(key) {\n        return this._internalState.get(key);\n    }\n    serialize() {\n        return this._keys()\n            .reduce((agg, key) => {\n            agg.push(key + LIST_MEMBER_KEY_VALUE_SPLITTER + this.get(key));\n            return agg;\n        }, [])\n            .join(LIST_MEMBERS_SEPARATOR);\n    }\n    _parse(rawTraceState) {\n        if (rawTraceState.length > MAX_TRACE_STATE_LEN)\n            return;\n        this._internalState = rawTraceState\n            .split(LIST_MEMBERS_SEPARATOR)\n            .reverse() // Store in reverse so new keys (.set(...)) will be placed at the beginning\n            .reduce((agg, part) => {\n            const listMember = part.trim(); // Optional Whitespace (OWS) handling\n            const i = listMember.indexOf(LIST_MEMBER_KEY_VALUE_SPLITTER);\n            if (i !== -1) {\n                const key = listMember.slice(0, i);\n                const value = listMember.slice(i + 1, part.length);\n                if ((0,_internal_validators__WEBPACK_IMPORTED_MODULE_0__.validateKey)(key) && (0,_internal_validators__WEBPACK_IMPORTED_MODULE_0__.validateValue)(value)) {\n                    agg.set(key, value);\n                }\n                else {\n                    // TODO: Consider to add warning log\n                }\n            }\n            return agg;\n        }, new Map());\n        // Because of the reverse() requirement, trunc must be done after map is created\n        if (this._internalState.size > MAX_TRACE_STATE_ITEMS) {\n            this._internalState = new Map(Array.from(this._internalState.entries())\n                .reverse() // Use reverse same as original tracestate parse chain\n                .slice(0, MAX_TRACE_STATE_ITEMS));\n        }\n    }\n    _keys() {\n        return Array.from(this._internalState.keys()).reverse();\n    }\n    _clone() {\n        const traceState = new TraceState();\n        traceState._internalState = new Map(this._internalState);\n        return traceState;\n    }\n}\n//# sourceMappingURL=TraceState.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvcmUvYnVpbGQvZXNtL3RyYWNlL1RyYWNlU3RhdGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDb0U7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixpRUFBVyxTQUFTLG1FQUFhO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvY29yZS9idWlsZC9lc20vdHJhY2UvVHJhY2VTdGF0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgdmFsaWRhdGVLZXksIHZhbGlkYXRlVmFsdWUgfSBmcm9tICcuLi9pbnRlcm5hbC92YWxpZGF0b3JzJztcbmNvbnN0IE1BWF9UUkFDRV9TVEFURV9JVEVNUyA9IDMyO1xuY29uc3QgTUFYX1RSQUNFX1NUQVRFX0xFTiA9IDUxMjtcbmNvbnN0IExJU1RfTUVNQkVSU19TRVBBUkFUT1IgPSAnLCc7XG5jb25zdCBMSVNUX01FTUJFUl9LRVlfVkFMVUVfU1BMSVRURVIgPSAnPSc7XG4vKipcbiAqIFRyYWNlU3RhdGUgbXVzdCBiZSBhIGNsYXNzIGFuZCBub3QgYSBzaW1wbGUgb2JqZWN0IHR5cGUgYmVjYXVzZSBvZiB0aGUgc3BlY1xuICogcmVxdWlyZW1lbnQgKGh0dHBzOi8vd3d3LnczLm9yZy9UUi90cmFjZS1jb250ZXh0LyN0cmFjZXN0YXRlLWZpZWxkKS5cbiAqXG4gKiBIZXJlIGlzIHRoZSBsaXN0IG9mIGFsbG93ZWQgbXV0YXRpb25zOlxuICogLSBOZXcga2V5LXZhbHVlIHBhaXIgc2hvdWxkIGJlIGFkZGVkIGludG8gdGhlIGJlZ2lubmluZyBvZiB0aGUgbGlzdFxuICogLSBUaGUgdmFsdWUgb2YgYW55IGtleSBjYW4gYmUgdXBkYXRlZC4gTW9kaWZpZWQga2V5cyBNVVNUIGJlIG1vdmVkIHRvIHRoZVxuICogYmVnaW5uaW5nIG9mIHRoZSBsaXN0LlxuICovXG5leHBvcnQgY2xhc3MgVHJhY2VTdGF0ZSB7XG4gICAgX2ludGVybmFsU3RhdGUgPSBuZXcgTWFwKCk7XG4gICAgY29uc3RydWN0b3IocmF3VHJhY2VTdGF0ZSkge1xuICAgICAgICBpZiAocmF3VHJhY2VTdGF0ZSlcbiAgICAgICAgICAgIHRoaXMuX3BhcnNlKHJhd1RyYWNlU3RhdGUpO1xuICAgIH1cbiAgICBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICAvLyBUT0RPOiBCZW5jaG1hcmsgdGhlIGRpZmZlcmVudCBhcHByb2FjaGVzKG1hcCB2cyBsaXN0KSBhbmRcbiAgICAgICAgLy8gdXNlIHRoZSBmYXN0ZXIgb25lLlxuICAgICAgICBjb25zdCB0cmFjZVN0YXRlID0gdGhpcy5fY2xvbmUoKTtcbiAgICAgICAgaWYgKHRyYWNlU3RhdGUuX2ludGVybmFsU3RhdGUuaGFzKGtleSkpIHtcbiAgICAgICAgICAgIHRyYWNlU3RhdGUuX2ludGVybmFsU3RhdGUuZGVsZXRlKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdHJhY2VTdGF0ZS5faW50ZXJuYWxTdGF0ZS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiB0cmFjZVN0YXRlO1xuICAgIH1cbiAgICB1bnNldChrZXkpIHtcbiAgICAgICAgY29uc3QgdHJhY2VTdGF0ZSA9IHRoaXMuX2Nsb25lKCk7XG4gICAgICAgIHRyYWNlU3RhdGUuX2ludGVybmFsU3RhdGUuZGVsZXRlKGtleSk7XG4gICAgICAgIHJldHVybiB0cmFjZVN0YXRlO1xuICAgIH1cbiAgICBnZXQoa2V5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnRlcm5hbFN0YXRlLmdldChrZXkpO1xuICAgIH1cbiAgICBzZXJpYWxpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9rZXlzKClcbiAgICAgICAgICAgIC5yZWR1Y2UoKGFnZywga2V5KSA9PiB7XG4gICAgICAgICAgICBhZ2cucHVzaChrZXkgKyBMSVNUX01FTUJFUl9LRVlfVkFMVUVfU1BMSVRURVIgKyB0aGlzLmdldChrZXkpKTtcbiAgICAgICAgICAgIHJldHVybiBhZ2c7XG4gICAgICAgIH0sIFtdKVxuICAgICAgICAgICAgLmpvaW4oTElTVF9NRU1CRVJTX1NFUEFSQVRPUik7XG4gICAgfVxuICAgIF9wYXJzZShyYXdUcmFjZVN0YXRlKSB7XG4gICAgICAgIGlmIChyYXdUcmFjZVN0YXRlLmxlbmd0aCA+IE1BWF9UUkFDRV9TVEFURV9MRU4pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMuX2ludGVybmFsU3RhdGUgPSByYXdUcmFjZVN0YXRlXG4gICAgICAgICAgICAuc3BsaXQoTElTVF9NRU1CRVJTX1NFUEFSQVRPUilcbiAgICAgICAgICAgIC5yZXZlcnNlKCkgLy8gU3RvcmUgaW4gcmV2ZXJzZSBzbyBuZXcga2V5cyAoLnNldCguLi4pKSB3aWxsIGJlIHBsYWNlZCBhdCB0aGUgYmVnaW5uaW5nXG4gICAgICAgICAgICAucmVkdWNlKChhZ2csIHBhcnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxpc3RNZW1iZXIgPSBwYXJ0LnRyaW0oKTsgLy8gT3B0aW9uYWwgV2hpdGVzcGFjZSAoT1dTKSBoYW5kbGluZ1xuICAgICAgICAgICAgY29uc3QgaSA9IGxpc3RNZW1iZXIuaW5kZXhPZihMSVNUX01FTUJFUl9LRVlfVkFMVUVfU1BMSVRURVIpO1xuICAgICAgICAgICAgaWYgKGkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gbGlzdE1lbWJlci5zbGljZSgwLCBpKTtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGxpc3RNZW1iZXIuc2xpY2UoaSArIDEsIHBhcnQubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBpZiAodmFsaWRhdGVLZXkoa2V5KSAmJiB2YWxpZGF0ZVZhbHVlKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICBhZ2cuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogQ29uc2lkZXIgdG8gYWRkIHdhcm5pbmcgbG9nXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFnZztcbiAgICAgICAgfSwgbmV3IE1hcCgpKTtcbiAgICAgICAgLy8gQmVjYXVzZSBvZiB0aGUgcmV2ZXJzZSgpIHJlcXVpcmVtZW50LCB0cnVuYyBtdXN0IGJlIGRvbmUgYWZ0ZXIgbWFwIGlzIGNyZWF0ZWRcbiAgICAgICAgaWYgKHRoaXMuX2ludGVybmFsU3RhdGUuc2l6ZSA+IE1BWF9UUkFDRV9TVEFURV9JVEVNUykge1xuICAgICAgICAgICAgdGhpcy5faW50ZXJuYWxTdGF0ZSA9IG5ldyBNYXAoQXJyYXkuZnJvbSh0aGlzLl9pbnRlcm5hbFN0YXRlLmVudHJpZXMoKSlcbiAgICAgICAgICAgICAgICAucmV2ZXJzZSgpIC8vIFVzZSByZXZlcnNlIHNhbWUgYXMgb3JpZ2luYWwgdHJhY2VzdGF0ZSBwYXJzZSBjaGFpblxuICAgICAgICAgICAgICAgIC5zbGljZSgwLCBNQVhfVFJBQ0VfU1RBVEVfSVRFTVMpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfa2V5cygpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5faW50ZXJuYWxTdGF0ZS5rZXlzKCkpLnJldmVyc2UoKTtcbiAgICB9XG4gICAgX2Nsb25lKCkge1xuICAgICAgICBjb25zdCB0cmFjZVN0YXRlID0gbmV3IFRyYWNlU3RhdGUoKTtcbiAgICAgICAgdHJhY2VTdGF0ZS5faW50ZXJuYWxTdGF0ZSA9IG5ldyBNYXAodGhpcy5faW50ZXJuYWxTdGF0ZSk7XG4gICAgICAgIHJldHVybiB0cmFjZVN0YXRlO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVRyYWNlU3RhdGUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/core/build/esm/trace/TraceState.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/core/build/esm/trace/W3CTraceContextPropagator.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/trace/W3CTraceContextPropagator.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TRACE_PARENT_HEADER: () => (/* binding */ TRACE_PARENT_HEADER),\n/* harmony export */   TRACE_STATE_HEADER: () => (/* binding */ TRACE_STATE_HEADER),\n/* harmony export */   W3CTraceContextPropagator: () => (/* binding */ W3CTraceContextPropagator),\n/* harmony export */   parseTraceParent: () => (/* binding */ parseTraceParent)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace-api.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js\");\n/* harmony import */ var _suppress_tracing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./suppress-tracing */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js\");\n/* harmony import */ var _TraceState__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./TraceState */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/trace/TraceState.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nconst TRACE_PARENT_HEADER = 'traceparent';\nconst TRACE_STATE_HEADER = 'tracestate';\nconst VERSION = '00';\nconst VERSION_PART = '(?!ff)[\\\\da-f]{2}';\nconst TRACE_ID_PART = '(?![0]{32})[\\\\da-f]{32}';\nconst PARENT_ID_PART = '(?![0]{16})[\\\\da-f]{16}';\nconst FLAGS_PART = '[\\\\da-f]{2}';\nconst TRACE_PARENT_REGEX = new RegExp(`^\\\\s?(${VERSION_PART})-(${TRACE_ID_PART})-(${PARENT_ID_PART})-(${FLAGS_PART})(-.*)?\\\\s?$`);\n/**\n * Parses information from the [traceparent] span tag and converts it into {@link SpanContext}\n * @param traceParent - A meta property that comes from server.\n *     It should be dynamically generated server side to have the server's request trace Id,\n *     a parent span Id that was set on the server's request span,\n *     and the trace flags to indicate the server's sampling decision\n *     (01 = sampled, 00 = not sampled).\n *     for example: '{version}-{traceId}-{spanId}-{sampleDecision}'\n *     For more information see {@link https://www.w3.org/TR/trace-context/}\n */\nfunction parseTraceParent(traceParent) {\n    const match = TRACE_PARENT_REGEX.exec(traceParent);\n    if (!match)\n        return null;\n    // According to the specification the implementation should be compatible\n    // with future versions. If there are more parts, we only reject it if it's using version 00\n    // See https://www.w3.org/TR/trace-context/#versioning-of-traceparent\n    if (match[1] === '00' && match[5])\n        return null;\n    return {\n        traceId: match[2],\n        spanId: match[3],\n        traceFlags: parseInt(match[4], 16),\n    };\n}\n/**\n * Propagates {@link SpanContext} through Trace Context format propagation.\n *\n * Based on the Trace Context specification:\n * https://www.w3.org/TR/trace-context/\n */\nclass W3CTraceContextPropagator {\n    inject(context, carrier, setter) {\n        const spanContext = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.trace.getSpanContext(context);\n        if (!spanContext ||\n            (0,_suppress_tracing__WEBPACK_IMPORTED_MODULE_1__.isTracingSuppressed)(context) ||\n            !(0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.isSpanContextValid)(spanContext))\n            return;\n        const traceParent = `${VERSION}-${spanContext.traceId}-${spanContext.spanId}-0${Number(spanContext.traceFlags || _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.TraceFlags.NONE).toString(16)}`;\n        setter.set(carrier, TRACE_PARENT_HEADER, traceParent);\n        if (spanContext.traceState) {\n            setter.set(carrier, TRACE_STATE_HEADER, spanContext.traceState.serialize());\n        }\n    }\n    extract(context, carrier, getter) {\n        const traceParentHeader = getter.get(carrier, TRACE_PARENT_HEADER);\n        if (!traceParentHeader)\n            return context;\n        const traceParent = Array.isArray(traceParentHeader)\n            ? traceParentHeader[0]\n            : traceParentHeader;\n        if (typeof traceParent !== 'string')\n            return context;\n        const spanContext = parseTraceParent(traceParent);\n        if (!spanContext)\n            return context;\n        spanContext.isRemote = true;\n        const traceStateHeader = getter.get(carrier, TRACE_STATE_HEADER);\n        if (traceStateHeader) {\n            // If more than one `tracestate` header is found, we merge them into a\n            // single header.\n            const state = Array.isArray(traceStateHeader)\n                ? traceStateHeader.join(',')\n                : traceStateHeader;\n            spanContext.traceState = new _TraceState__WEBPACK_IMPORTED_MODULE_4__.TraceState(typeof state === 'string' ? state : undefined);\n        }\n        return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.trace.setSpanContext(context, spanContext);\n    }\n    fields() {\n        return [TRACE_PARENT_HEADER, TRACE_STATE_HEADER];\n    }\n}\n//# sourceMappingURL=W3CTraceContextPropagator.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvcmUvYnVpbGQvZXNtL3RyYWNlL1czQ1RyYWNlQ29udGV4dFByb3BhZ2F0b3IuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQzRFO0FBQ25CO0FBQ2Y7QUFDbkM7QUFDQTtBQUNQO0FBQ0EscUNBQXFDLEVBQUU7QUFDdkMsOEJBQThCLEdBQUcsVUFBVSxHQUFHO0FBQzlDLCtCQUErQixHQUFHLFVBQVUsR0FBRztBQUMvQyw2QkFBNkIsRUFBRTtBQUMvQiwrQ0FBK0MsYUFBYSxLQUFLLGNBQWMsS0FBSyxlQUFlLEtBQUssV0FBVztBQUNuSDtBQUNBLDRFQUE0RTtBQUM1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLFFBQVEsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLGVBQWU7QUFDbEUsaUNBQWlDO0FBQ2pDO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG1CQUFtQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSw0QkFBNEIscURBQUs7QUFDakM7QUFDQSxZQUFZLHNFQUFtQjtBQUMvQixhQUFhLHNFQUFrQjtBQUMvQjtBQUNBLCtCQUErQixRQUFRLEdBQUcsb0JBQW9CLEdBQUcsbUJBQW1CLElBQUksaUNBQWlDLDBEQUFVLG9CQUFvQjtBQUN2SjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxtREFBVTtBQUNuRDtBQUNBLGVBQWUscURBQUs7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvcmUvYnVpbGQvZXNtL3RyYWNlL1czQ1RyYWNlQ29udGV4dFByb3BhZ2F0b3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IGlzU3BhbkNvbnRleHRWYWxpZCwgdHJhY2UsIFRyYWNlRmxhZ3MsIH0gZnJvbSAnQG9wZW50ZWxlbWV0cnkvYXBpJztcbmltcG9ydCB7IGlzVHJhY2luZ1N1cHByZXNzZWQgfSBmcm9tICcuL3N1cHByZXNzLXRyYWNpbmcnO1xuaW1wb3J0IHsgVHJhY2VTdGF0ZSB9IGZyb20gJy4vVHJhY2VTdGF0ZSc7XG5leHBvcnQgY29uc3QgVFJBQ0VfUEFSRU5UX0hFQURFUiA9ICd0cmFjZXBhcmVudCc7XG5leHBvcnQgY29uc3QgVFJBQ0VfU1RBVEVfSEVBREVSID0gJ3RyYWNlc3RhdGUnO1xuY29uc3QgVkVSU0lPTiA9ICcwMCc7XG5jb25zdCBWRVJTSU9OX1BBUlQgPSAnKD8hZmYpW1xcXFxkYS1mXXsyfSc7XG5jb25zdCBUUkFDRV9JRF9QQVJUID0gJyg/IVswXXszMn0pW1xcXFxkYS1mXXszMn0nO1xuY29uc3QgUEFSRU5UX0lEX1BBUlQgPSAnKD8hWzBdezE2fSlbXFxcXGRhLWZdezE2fSc7XG5jb25zdCBGTEFHU19QQVJUID0gJ1tcXFxcZGEtZl17Mn0nO1xuY29uc3QgVFJBQ0VfUEFSRU5UX1JFR0VYID0gbmV3IFJlZ0V4cChgXlxcXFxzPygke1ZFUlNJT05fUEFSVH0pLSgke1RSQUNFX0lEX1BBUlR9KS0oJHtQQVJFTlRfSURfUEFSVH0pLSgke0ZMQUdTX1BBUlR9KSgtLiopP1xcXFxzPyRgKTtcbi8qKlxuICogUGFyc2VzIGluZm9ybWF0aW9uIGZyb20gdGhlIFt0cmFjZXBhcmVudF0gc3BhbiB0YWcgYW5kIGNvbnZlcnRzIGl0IGludG8ge0BsaW5rIFNwYW5Db250ZXh0fVxuICogQHBhcmFtIHRyYWNlUGFyZW50IC0gQSBtZXRhIHByb3BlcnR5IHRoYXQgY29tZXMgZnJvbSBzZXJ2ZXIuXG4gKiAgICAgSXQgc2hvdWxkIGJlIGR5bmFtaWNhbGx5IGdlbmVyYXRlZCBzZXJ2ZXIgc2lkZSB0byBoYXZlIHRoZSBzZXJ2ZXIncyByZXF1ZXN0IHRyYWNlIElkLFxuICogICAgIGEgcGFyZW50IHNwYW4gSWQgdGhhdCB3YXMgc2V0IG9uIHRoZSBzZXJ2ZXIncyByZXF1ZXN0IHNwYW4sXG4gKiAgICAgYW5kIHRoZSB0cmFjZSBmbGFncyB0byBpbmRpY2F0ZSB0aGUgc2VydmVyJ3Mgc2FtcGxpbmcgZGVjaXNpb25cbiAqICAgICAoMDEgPSBzYW1wbGVkLCAwMCA9IG5vdCBzYW1wbGVkKS5cbiAqICAgICBmb3IgZXhhbXBsZTogJ3t2ZXJzaW9ufS17dHJhY2VJZH0te3NwYW5JZH0te3NhbXBsZURlY2lzaW9ufSdcbiAqICAgICBGb3IgbW9yZSBpbmZvcm1hdGlvbiBzZWUge0BsaW5rIGh0dHBzOi8vd3d3LnczLm9yZy9UUi90cmFjZS1jb250ZXh0L31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVHJhY2VQYXJlbnQodHJhY2VQYXJlbnQpIHtcbiAgICBjb25zdCBtYXRjaCA9IFRSQUNFX1BBUkVOVF9SRUdFWC5leGVjKHRyYWNlUGFyZW50KTtcbiAgICBpZiAoIW1hdGNoKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAvLyBBY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmljYXRpb24gdGhlIGltcGxlbWVudGF0aW9uIHNob3VsZCBiZSBjb21wYXRpYmxlXG4gICAgLy8gd2l0aCBmdXR1cmUgdmVyc2lvbnMuIElmIHRoZXJlIGFyZSBtb3JlIHBhcnRzLCB3ZSBvbmx5IHJlamVjdCBpdCBpZiBpdCdzIHVzaW5nIHZlcnNpb24gMDBcbiAgICAvLyBTZWUgaHR0cHM6Ly93d3cudzMub3JnL1RSL3RyYWNlLWNvbnRleHQvI3ZlcnNpb25pbmctb2YtdHJhY2VwYXJlbnRcbiAgICBpZiAobWF0Y2hbMV0gPT09ICcwMCcgJiYgbWF0Y2hbNV0pXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIHJldHVybiB7XG4gICAgICAgIHRyYWNlSWQ6IG1hdGNoWzJdLFxuICAgICAgICBzcGFuSWQ6IG1hdGNoWzNdLFxuICAgICAgICB0cmFjZUZsYWdzOiBwYXJzZUludChtYXRjaFs0XSwgMTYpLFxuICAgIH07XG59XG4vKipcbiAqIFByb3BhZ2F0ZXMge0BsaW5rIFNwYW5Db250ZXh0fSB0aHJvdWdoIFRyYWNlIENvbnRleHQgZm9ybWF0IHByb3BhZ2F0aW9uLlxuICpcbiAqIEJhc2VkIG9uIHRoZSBUcmFjZSBDb250ZXh0IHNwZWNpZmljYXRpb246XG4gKiBodHRwczovL3d3dy53My5vcmcvVFIvdHJhY2UtY29udGV4dC9cbiAqL1xuZXhwb3J0IGNsYXNzIFczQ1RyYWNlQ29udGV4dFByb3BhZ2F0b3Ige1xuICAgIGluamVjdChjb250ZXh0LCBjYXJyaWVyLCBzZXR0ZXIpIHtcbiAgICAgICAgY29uc3Qgc3BhbkNvbnRleHQgPSB0cmFjZS5nZXRTcGFuQ29udGV4dChjb250ZXh0KTtcbiAgICAgICAgaWYgKCFzcGFuQ29udGV4dCB8fFxuICAgICAgICAgICAgaXNUcmFjaW5nU3VwcHJlc3NlZChjb250ZXh0KSB8fFxuICAgICAgICAgICAgIWlzU3BhbkNvbnRleHRWYWxpZChzcGFuQ29udGV4dCkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IHRyYWNlUGFyZW50ID0gYCR7VkVSU0lPTn0tJHtzcGFuQ29udGV4dC50cmFjZUlkfS0ke3NwYW5Db250ZXh0LnNwYW5JZH0tMCR7TnVtYmVyKHNwYW5Db250ZXh0LnRyYWNlRmxhZ3MgfHwgVHJhY2VGbGFncy5OT05FKS50b1N0cmluZygxNil9YDtcbiAgICAgICAgc2V0dGVyLnNldChjYXJyaWVyLCBUUkFDRV9QQVJFTlRfSEVBREVSLCB0cmFjZVBhcmVudCk7XG4gICAgICAgIGlmIChzcGFuQ29udGV4dC50cmFjZVN0YXRlKSB7XG4gICAgICAgICAgICBzZXR0ZXIuc2V0KGNhcnJpZXIsIFRSQUNFX1NUQVRFX0hFQURFUiwgc3BhbkNvbnRleHQudHJhY2VTdGF0ZS5zZXJpYWxpemUoKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZXh0cmFjdChjb250ZXh0LCBjYXJyaWVyLCBnZXR0ZXIpIHtcbiAgICAgICAgY29uc3QgdHJhY2VQYXJlbnRIZWFkZXIgPSBnZXR0ZXIuZ2V0KGNhcnJpZXIsIFRSQUNFX1BBUkVOVF9IRUFERVIpO1xuICAgICAgICBpZiAoIXRyYWNlUGFyZW50SGVhZGVyKVxuICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQ7XG4gICAgICAgIGNvbnN0IHRyYWNlUGFyZW50ID0gQXJyYXkuaXNBcnJheSh0cmFjZVBhcmVudEhlYWRlcilcbiAgICAgICAgICAgID8gdHJhY2VQYXJlbnRIZWFkZXJbMF1cbiAgICAgICAgICAgIDogdHJhY2VQYXJlbnRIZWFkZXI7XG4gICAgICAgIGlmICh0eXBlb2YgdHJhY2VQYXJlbnQgIT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQ7XG4gICAgICAgIGNvbnN0IHNwYW5Db250ZXh0ID0gcGFyc2VUcmFjZVBhcmVudCh0cmFjZVBhcmVudCk7XG4gICAgICAgIGlmICghc3BhbkNvbnRleHQpXG4gICAgICAgICAgICByZXR1cm4gY29udGV4dDtcbiAgICAgICAgc3BhbkNvbnRleHQuaXNSZW1vdGUgPSB0cnVlO1xuICAgICAgICBjb25zdCB0cmFjZVN0YXRlSGVhZGVyID0gZ2V0dGVyLmdldChjYXJyaWVyLCBUUkFDRV9TVEFURV9IRUFERVIpO1xuICAgICAgICBpZiAodHJhY2VTdGF0ZUhlYWRlcikge1xuICAgICAgICAgICAgLy8gSWYgbW9yZSB0aGFuIG9uZSBgdHJhY2VzdGF0ZWAgaGVhZGVyIGlzIGZvdW5kLCB3ZSBtZXJnZSB0aGVtIGludG8gYVxuICAgICAgICAgICAgLy8gc2luZ2xlIGhlYWRlci5cbiAgICAgICAgICAgIGNvbnN0IHN0YXRlID0gQXJyYXkuaXNBcnJheSh0cmFjZVN0YXRlSGVhZGVyKVxuICAgICAgICAgICAgICAgID8gdHJhY2VTdGF0ZUhlYWRlci5qb2luKCcsJylcbiAgICAgICAgICAgICAgICA6IHRyYWNlU3RhdGVIZWFkZXI7XG4gICAgICAgICAgICBzcGFuQ29udGV4dC50cmFjZVN0YXRlID0gbmV3IFRyYWNlU3RhdGUodHlwZW9mIHN0YXRlID09PSAnc3RyaW5nJyA/IHN0YXRlIDogdW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJhY2Uuc2V0U3BhbkNvbnRleHQoY29udGV4dCwgc3BhbkNvbnRleHQpO1xuICAgIH1cbiAgICBmaWVsZHMoKSB7XG4gICAgICAgIHJldHVybiBbVFJBQ0VfUEFSRU5UX0hFQURFUiwgVFJBQ0VfU1RBVEVfSEVBREVSXTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1XM0NUcmFjZUNvbnRleHRQcm9wYWdhdG9yLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/core/build/esm/trace/W3CTraceContextPropagator.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/core/build/esm/trace/rpc-metadata.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/trace/rpc-metadata.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RPCType: () => (/* binding */ RPCType),\n/* harmony export */   deleteRPCMetadata: () => (/* binding */ deleteRPCMetadata),\n/* harmony export */   getRPCMetadata: () => (/* binding */ getRPCMetadata),\n/* harmony export */   setRPCMetadata: () => (/* binding */ setRPCMetadata)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/context/context.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst RPC_METADATA_KEY = (0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.createContextKey)('OpenTelemetry SDK Context Key RPC_METADATA');\nvar RPCType;\n(function (RPCType) {\n    RPCType[\"HTTP\"] = \"http\";\n})(RPCType || (RPCType = {}));\nfunction setRPCMetadata(context, meta) {\n    return context.setValue(RPC_METADATA_KEY, meta);\n}\nfunction deleteRPCMetadata(context) {\n    return context.deleteValue(RPC_METADATA_KEY);\n}\nfunction getRPCMetadata(context) {\n    return context.getValue(RPC_METADATA_KEY);\n}\n//# sourceMappingURL=rpc-metadata.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvcmUvYnVpbGQvZXNtL3RyYWNlL3JwYy1tZXRhZGF0YS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNzRDtBQUN0RCx5QkFBeUIsb0VBQWdCO0FBQ2xDO0FBQ1A7QUFDQTtBQUNBLENBQUMsMEJBQTBCO0FBQ3BCO0FBQ1A7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvcmUvYnVpbGQvZXNtL3RyYWNlL3JwYy1tZXRhZGF0YS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgY3JlYXRlQ29udGV4dEtleSB9IGZyb20gJ0BvcGVudGVsZW1ldHJ5L2FwaSc7XG5jb25zdCBSUENfTUVUQURBVEFfS0VZID0gY3JlYXRlQ29udGV4dEtleSgnT3BlblRlbGVtZXRyeSBTREsgQ29udGV4dCBLZXkgUlBDX01FVEFEQVRBJyk7XG5leHBvcnQgdmFyIFJQQ1R5cGU7XG4oZnVuY3Rpb24gKFJQQ1R5cGUpIHtcbiAgICBSUENUeXBlW1wiSFRUUFwiXSA9IFwiaHR0cFwiO1xufSkoUlBDVHlwZSB8fCAoUlBDVHlwZSA9IHt9KSk7XG5leHBvcnQgZnVuY3Rpb24gc2V0UlBDTWV0YWRhdGEoY29udGV4dCwgbWV0YSkge1xuICAgIHJldHVybiBjb250ZXh0LnNldFZhbHVlKFJQQ19NRVRBREFUQV9LRVksIG1ldGEpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRlbGV0ZVJQQ01ldGFkYXRhKGNvbnRleHQpIHtcbiAgICByZXR1cm4gY29udGV4dC5kZWxldGVWYWx1ZShSUENfTUVUQURBVEFfS0VZKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRSUENNZXRhZGF0YShjb250ZXh0KSB7XG4gICAgcmV0dXJuIGNvbnRleHQuZ2V0VmFsdWUoUlBDX01FVEFEQVRBX0tFWSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ycGMtbWV0YWRhdGEuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/core/build/esm/trace/rpc-metadata.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isTracingSuppressed: () => (/* binding */ isTracingSuppressed),\n/* harmony export */   suppressTracing: () => (/* binding */ suppressTracing),\n/* harmony export */   unsuppressTracing: () => (/* binding */ unsuppressTracing)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/context/context.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst SUPPRESS_TRACING_KEY = (0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.createContextKey)('OpenTelemetry SDK Context Key SUPPRESS_TRACING');\nfunction suppressTracing(context) {\n    return context.setValue(SUPPRESS_TRACING_KEY, true);\n}\nfunction unsuppressTracing(context) {\n    return context.deleteValue(SUPPRESS_TRACING_KEY);\n}\nfunction isTracingSuppressed(context) {\n    return context.getValue(SUPPRESS_TRACING_KEY) === true;\n}\n//# sourceMappingURL=suppress-tracing.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvcmUvYnVpbGQvZXNtL3RyYWNlL3N1cHByZXNzLXRyYWNpbmcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNzRDtBQUN0RCw2QkFBNkIsb0VBQWdCO0FBQ3RDO0FBQ1A7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvcmUvYnVpbGQvZXNtL3RyYWNlL3N1cHByZXNzLXRyYWNpbmcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IGNyZWF0ZUNvbnRleHRLZXkgfSBmcm9tICdAb3BlbnRlbGVtZXRyeS9hcGknO1xuY29uc3QgU1VQUFJFU1NfVFJBQ0lOR19LRVkgPSBjcmVhdGVDb250ZXh0S2V5KCdPcGVuVGVsZW1ldHJ5IFNESyBDb250ZXh0IEtleSBTVVBQUkVTU19UUkFDSU5HJyk7XG5leHBvcnQgZnVuY3Rpb24gc3VwcHJlc3NUcmFjaW5nKGNvbnRleHQpIHtcbiAgICByZXR1cm4gY29udGV4dC5zZXRWYWx1ZShTVVBQUkVTU19UUkFDSU5HX0tFWSwgdHJ1ZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gdW5zdXBwcmVzc1RyYWNpbmcoY29udGV4dCkge1xuICAgIHJldHVybiBjb250ZXh0LmRlbGV0ZVZhbHVlKFNVUFBSRVNTX1RSQUNJTkdfS0VZKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1RyYWNpbmdTdXBwcmVzc2VkKGNvbnRleHQpIHtcbiAgICByZXR1cm4gY29udGV4dC5nZXRWYWx1ZShTVVBQUkVTU19UUkFDSU5HX0tFWSkgPT09IHRydWU7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdXBwcmVzcy10cmFjaW5nLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/core/build/esm/utils/callback.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/utils/callback.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BindOnceFuture: () => (/* binding */ BindOnceFuture)\n/* harmony export */ });\n/* harmony import */ var _promise__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./promise */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/utils/promise.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Bind the callback and only invoke the callback once regardless how many times `BindOnceFuture.call` is invoked.\n */\nclass BindOnceFuture {\n    _callback;\n    _that;\n    _isCalled = false;\n    _deferred = new _promise__WEBPACK_IMPORTED_MODULE_0__.Deferred();\n    constructor(_callback, _that) {\n        this._callback = _callback;\n        this._that = _that;\n    }\n    get isCalled() {\n        return this._isCalled;\n    }\n    get promise() {\n        return this._deferred.promise;\n    }\n    call(...args) {\n        if (!this._isCalled) {\n            this._isCalled = true;\n            try {\n                Promise.resolve(this._callback.call(this._that, ...args)).then(val => this._deferred.resolve(val), err => this._deferred.reject(err));\n            }\n            catch (err) {\n                this._deferred.reject(err);\n            }\n        }\n        return this._deferred.promise;\n    }\n}\n//# sourceMappingURL=callback.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvcmUvYnVpbGQvZXNtL3V0aWxzL2NhbGxiYWNrLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3FDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLDhDQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy9jYWxsYmFjay5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgRGVmZXJyZWQgfSBmcm9tICcuL3Byb21pc2UnO1xuLyoqXG4gKiBCaW5kIHRoZSBjYWxsYmFjayBhbmQgb25seSBpbnZva2UgdGhlIGNhbGxiYWNrIG9uY2UgcmVnYXJkbGVzcyBob3cgbWFueSB0aW1lcyBgQmluZE9uY2VGdXR1cmUuY2FsbGAgaXMgaW52b2tlZC5cbiAqL1xuZXhwb3J0IGNsYXNzIEJpbmRPbmNlRnV0dXJlIHtcbiAgICBfY2FsbGJhY2s7XG4gICAgX3RoYXQ7XG4gICAgX2lzQ2FsbGVkID0gZmFsc2U7XG4gICAgX2RlZmVycmVkID0gbmV3IERlZmVycmVkKCk7XG4gICAgY29uc3RydWN0b3IoX2NhbGxiYWNrLCBfdGhhdCkge1xuICAgICAgICB0aGlzLl9jYWxsYmFjayA9IF9jYWxsYmFjaztcbiAgICAgICAgdGhpcy5fdGhhdCA9IF90aGF0O1xuICAgIH1cbiAgICBnZXQgaXNDYWxsZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc0NhbGxlZDtcbiAgICB9XG4gICAgZ2V0IHByb21pc2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWZlcnJlZC5wcm9taXNlO1xuICAgIH1cbiAgICBjYWxsKC4uLmFyZ3MpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9pc0NhbGxlZCkge1xuICAgICAgICAgICAgdGhpcy5faXNDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBQcm9taXNlLnJlc29sdmUodGhpcy5fY2FsbGJhY2suY2FsbCh0aGlzLl90aGF0LCAuLi5hcmdzKSkudGhlbih2YWwgPT4gdGhpcy5fZGVmZXJyZWQucmVzb2x2ZSh2YWwpLCBlcnIgPT4gdGhpcy5fZGVmZXJyZWQucmVqZWN0KGVycikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2RlZmVycmVkLnJlamVjdChlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWZlcnJlZC5wcm9taXNlO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNhbGxiYWNrLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/core/build/esm/utils/callback.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/core/build/esm/utils/configuration.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/utils/configuration.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   diagLogLevelFromString: () => (/* binding */ diagLogLevelFromString)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/diag/types.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/diag-api.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst logLevelMap = {\n    ALL: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.ALL,\n    VERBOSE: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.VERBOSE,\n    DEBUG: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.DEBUG,\n    INFO: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.INFO,\n    WARN: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.WARN,\n    ERROR: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.ERROR,\n    NONE: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.NONE,\n};\n/**\n * Convert a string to a {@link DiagLogLevel}, defaults to {@link DiagLogLevel} if the log level does not exist or undefined if the input is undefined.\n * @param value\n */\nfunction diagLogLevelFromString(value) {\n    if (value == null) {\n        // don't fall back to default - no value set has different semantics for ús than an incorrect value (do not set vs. fall back to default)\n        return undefined;\n    }\n    const resolvedLogLevel = logLevelMap[value.toUpperCase()];\n    if (resolvedLogLevel == null) {\n        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__.diag.warn(`Unknown log level \"${value}\", expected one of ${Object.keys(logLevelMap)}, using default`);\n        return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.INFO;\n    }\n    return resolvedLogLevel;\n}\n//# sourceMappingURL=configuration.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvcmUvYnVpbGQvZXNtL3V0aWxzL2NvbmZpZ3VyYXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3dEO0FBQ3hEO0FBQ0EsU0FBUyw0REFBWTtBQUNyQixhQUFhLDREQUFZO0FBQ3pCLFdBQVcsNERBQVk7QUFDdkIsVUFBVSw0REFBWTtBQUN0QixVQUFVLDREQUFZO0FBQ3RCLFdBQVcsNERBQVk7QUFDdkIsVUFBVSw0REFBWTtBQUN0QjtBQUNBO0FBQ0EsMEJBQTBCLG1CQUFtQixlQUFlLG9CQUFvQjtBQUNoRjtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLG9EQUFJLDRCQUE0QixNQUFNLHFCQUFxQix5QkFBeUI7QUFDNUYsZUFBZSw0REFBWTtBQUMzQjtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy9jb25maWd1cmF0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBkaWFnLCBEaWFnTG9nTGV2ZWwgfSBmcm9tICdAb3BlbnRlbGVtZXRyeS9hcGknO1xuY29uc3QgbG9nTGV2ZWxNYXAgPSB7XG4gICAgQUxMOiBEaWFnTG9nTGV2ZWwuQUxMLFxuICAgIFZFUkJPU0U6IERpYWdMb2dMZXZlbC5WRVJCT1NFLFxuICAgIERFQlVHOiBEaWFnTG9nTGV2ZWwuREVCVUcsXG4gICAgSU5GTzogRGlhZ0xvZ0xldmVsLklORk8sXG4gICAgV0FSTjogRGlhZ0xvZ0xldmVsLldBUk4sXG4gICAgRVJST1I6IERpYWdMb2dMZXZlbC5FUlJPUixcbiAgICBOT05FOiBEaWFnTG9nTGV2ZWwuTk9ORSxcbn07XG4vKipcbiAqIENvbnZlcnQgYSBzdHJpbmcgdG8gYSB7QGxpbmsgRGlhZ0xvZ0xldmVsfSwgZGVmYXVsdHMgdG8ge0BsaW5rIERpYWdMb2dMZXZlbH0gaWYgdGhlIGxvZyBsZXZlbCBkb2VzIG5vdCBleGlzdCBvciB1bmRlZmluZWQgaWYgdGhlIGlucHV0IGlzIHVuZGVmaW5lZC5cbiAqIEBwYXJhbSB2YWx1ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGlhZ0xvZ0xldmVsRnJvbVN0cmluZyh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIC8vIGRvbid0IGZhbGwgYmFjayB0byBkZWZhdWx0IC0gbm8gdmFsdWUgc2V0IGhhcyBkaWZmZXJlbnQgc2VtYW50aWNzIGZvciDDunMgdGhhbiBhbiBpbmNvcnJlY3QgdmFsdWUgKGRvIG5vdCBzZXQgdnMuIGZhbGwgYmFjayB0byBkZWZhdWx0KVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBjb25zdCByZXNvbHZlZExvZ0xldmVsID0gbG9nTGV2ZWxNYXBbdmFsdWUudG9VcHBlckNhc2UoKV07XG4gICAgaWYgKHJlc29sdmVkTG9nTGV2ZWwgPT0gbnVsbCkge1xuICAgICAgICBkaWFnLndhcm4oYFVua25vd24gbG9nIGxldmVsIFwiJHt2YWx1ZX1cIiwgZXhwZWN0ZWQgb25lIG9mICR7T2JqZWN0LmtleXMobG9nTGV2ZWxNYXApfSwgdXNpbmcgZGVmYXVsdGApO1xuICAgICAgICByZXR1cm4gRGlhZ0xvZ0xldmVsLklORk87XG4gICAgfVxuICAgIHJldHVybiByZXNvbHZlZExvZ0xldmVsO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uZmlndXJhdGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/core/build/esm/utils/configuration.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/core/build/esm/utils/lodash.merge.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/utils/lodash.merge.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isPlainObject: () => (/* binding */ isPlainObject)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * based on lodash in order to support esm builds without esModuleInterop.\n * lodash is using MIT License.\n **/\nconst objectTag = '[object Object]';\nconst nullTag = '[object Null]';\nconst undefinedTag = '[object Undefined]';\nconst funcProto = Function.prototype;\nconst funcToString = funcProto.toString;\nconst objectCtorString = funcToString.call(Object);\nconst getPrototypeOf = Object.getPrototypeOf;\nconst objectProto = Object.prototype;\nconst hasOwnProperty = objectProto.hasOwnProperty;\nconst symToStringTag = Symbol ? Symbol.toStringTag : undefined;\nconst nativeObjectToString = objectProto.toString;\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n    if (!isObjectLike(value) || baseGetTag(value) !== objectTag) {\n        return false;\n    }\n    const proto = getPrototypeOf(value);\n    if (proto === null) {\n        return true;\n    }\n    const Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n    return (typeof Ctor == 'function' &&\n        Ctor instanceof Ctor &&\n        funcToString.call(Ctor) === objectCtorString);\n}\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n    return value != null && typeof value == 'object';\n}\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n    if (value == null) {\n        return value === undefined ? undefinedTag : nullTag;\n    }\n    return symToStringTag && symToStringTag in Object(value)\n        ? getRawTag(value)\n        : objectToString(value);\n}\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n    const isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];\n    let unmasked = false;\n    try {\n        value[symToStringTag] = undefined;\n        unmasked = true;\n    }\n    catch (e) {\n        // silence\n    }\n    const result = nativeObjectToString.call(value);\n    if (unmasked) {\n        if (isOwn) {\n            value[symToStringTag] = tag;\n        }\n        else {\n            delete value[symToStringTag];\n        }\n    }\n    return result;\n}\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n    return nativeObjectToString.call(value);\n}\n//# sourceMappingURL=lodash.merge.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvcmUvYnVpbGQvZXNtL3V0aWxzL2xvZGFzaC5tZXJnZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2QsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixnQkFBZ0I7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2QsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvY29yZS9idWlsZC9lc20vdXRpbHMvbG9kYXNoLm1lcmdlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG4vKipcbiAqIGJhc2VkIG9uIGxvZGFzaCBpbiBvcmRlciB0byBzdXBwb3J0IGVzbSBidWlsZHMgd2l0aG91dCBlc01vZHVsZUludGVyb3AuXG4gKiBsb2Rhc2ggaXMgdXNpbmcgTUlUIExpY2Vuc2UuXG4gKiovXG5jb25zdCBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJztcbmNvbnN0IG51bGxUYWcgPSAnW29iamVjdCBOdWxsXSc7XG5jb25zdCB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJztcbmNvbnN0IGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbmNvbnN0IGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcbmNvbnN0IG9iamVjdEN0b3JTdHJpbmcgPSBmdW5jVG9TdHJpbmcuY2FsbChPYmplY3QpO1xuY29uc3QgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG5jb25zdCBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5jb25zdCBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuY29uc3Qgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5jb25zdCBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgdGhhdCBpcywgYW4gb2JqZWN0IGNyZWF0ZWQgYnkgdGhlXG4gKiBgT2JqZWN0YCBjb25zdHJ1Y3RvciBvciBvbmUgd2l0aCBhIGBbW1Byb3RvdHlwZV1dYCBvZiBgbnVsbGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjguMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogfVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChuZXcgRm9vKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdCh7ICd4JzogMCwgJ3knOiAwIH0pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgfHwgYmFzZUdldFRhZyh2YWx1ZSkgIT09IG9iamVjdFRhZykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IHByb3RvID0gZ2V0UHJvdG90eXBlT2YodmFsdWUpO1xuICAgIGlmIChwcm90byA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgQ3RvciA9IGhhc093blByb3BlcnR5LmNhbGwocHJvdG8sICdjb25zdHJ1Y3RvcicpICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiAodHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgICBDdG9yIGluc3RhbmNlb2YgQ3RvciAmJlxuICAgICAgICBmdW5jVG9TdHJpbmcuY2FsbChDdG9yKSA9PT0gb2JqZWN0Q3RvclN0cmluZyk7XG59XG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gICAgfVxuICAgIHJldHVybiBzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpXG4gICAgICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgICAgICA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTtcbn1cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gICAgY29uc3QgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICBsZXQgdW5tYXNrZWQgPSBmYWxzZTtcbiAgICB0cnkge1xuICAgICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgICAgIHVubWFza2VkID0gdHJ1ZTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gc2lsZW5jZVxuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICBpZiAodW5tYXNrZWQpIHtcbiAgICAgICAgaWYgKGlzT3duKSB7XG4gICAgICAgICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2Rhc2gubWVyZ2UuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/core/build/esm/utils/lodash.merge.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/core/build/esm/utils/merge.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/utils/merge.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   merge: () => (/* binding */ merge)\n/* harmony export */ });\n/* harmony import */ var _lodash_merge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lodash.merge */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/utils/lodash.merge.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nconst MAX_LEVEL = 20;\n/**\n * Merges objects together\n * @param args - objects / values to be merged\n */\nfunction merge(...args) {\n    let result = args.shift();\n    const objects = new WeakMap();\n    while (args.length > 0) {\n        result = mergeTwoObjects(result, args.shift(), 0, objects);\n    }\n    return result;\n}\nfunction takeValue(value) {\n    if (isArray(value)) {\n        return value.slice();\n    }\n    return value;\n}\n/**\n * Merges two objects\n * @param one - first object\n * @param two - second object\n * @param level - current deep level\n * @param objects - objects holder that has been already referenced - to prevent\n * cyclic dependency\n */\nfunction mergeTwoObjects(one, two, level = 0, objects) {\n    let result;\n    if (level > MAX_LEVEL) {\n        return undefined;\n    }\n    level++;\n    if (isPrimitive(one) || isPrimitive(two) || isFunction(two)) {\n        result = takeValue(two);\n    }\n    else if (isArray(one)) {\n        result = one.slice();\n        if (isArray(two)) {\n            for (let i = 0, j = two.length; i < j; i++) {\n                result.push(takeValue(two[i]));\n            }\n        }\n        else if (isObject(two)) {\n            const keys = Object.keys(two);\n            for (let i = 0, j = keys.length; i < j; i++) {\n                const key = keys[i];\n                result[key] = takeValue(two[key]);\n            }\n        }\n    }\n    else if (isObject(one)) {\n        if (isObject(two)) {\n            if (!shouldMerge(one, two)) {\n                return two;\n            }\n            result = Object.assign({}, one);\n            const keys = Object.keys(two);\n            for (let i = 0, j = keys.length; i < j; i++) {\n                const key = keys[i];\n                const twoValue = two[key];\n                if (isPrimitive(twoValue)) {\n                    if (typeof twoValue === 'undefined') {\n                        delete result[key];\n                    }\n                    else {\n                        // result[key] = takeValue(twoValue);\n                        result[key] = twoValue;\n                    }\n                }\n                else {\n                    const obj1 = result[key];\n                    const obj2 = twoValue;\n                    if (wasObjectReferenced(one, key, objects) ||\n                        wasObjectReferenced(two, key, objects)) {\n                        delete result[key];\n                    }\n                    else {\n                        if (isObject(obj1) && isObject(obj2)) {\n                            const arr1 = objects.get(obj1) || [];\n                            const arr2 = objects.get(obj2) || [];\n                            arr1.push({ obj: one, key });\n                            arr2.push({ obj: two, key });\n                            objects.set(obj1, arr1);\n                            objects.set(obj2, arr2);\n                        }\n                        result[key] = mergeTwoObjects(result[key], twoValue, level, objects);\n                    }\n                }\n            }\n        }\n        else {\n            result = two;\n        }\n    }\n    return result;\n}\n/**\n * Function to check if object has been already reference\n * @param obj\n * @param key\n * @param objects\n */\nfunction wasObjectReferenced(obj, key, objects) {\n    const arr = objects.get(obj[key]) || [];\n    for (let i = 0, j = arr.length; i < j; i++) {\n        const info = arr[i];\n        if (info.key === key && info.obj === obj) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction isArray(value) {\n    return Array.isArray(value);\n}\nfunction isFunction(value) {\n    return typeof value === 'function';\n}\nfunction isObject(value) {\n    return (!isPrimitive(value) &&\n        !isArray(value) &&\n        !isFunction(value) &&\n        typeof value === 'object');\n}\nfunction isPrimitive(value) {\n    return (typeof value === 'string' ||\n        typeof value === 'number' ||\n        typeof value === 'boolean' ||\n        typeof value === 'undefined' ||\n        value instanceof Date ||\n        value instanceof RegExp ||\n        value === null);\n}\nfunction shouldMerge(one, two) {\n    if (!(0,_lodash_merge__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(one) || !(0,_lodash_merge__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(two)) {\n        return false;\n    }\n    return true;\n}\n//# sourceMappingURL=merge.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/core/build/esm/utils/merge.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/core/build/esm/utils/promise.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/utils/promise.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Deferred: () => (/* binding */ Deferred)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass Deferred {\n    _promise;\n    _resolve;\n    _reject;\n    constructor() {\n        this._promise = new Promise((resolve, reject) => {\n            this._resolve = resolve;\n            this._reject = reject;\n        });\n    }\n    get promise() {\n        return this._promise;\n    }\n    resolve(val) {\n        this._resolve(val);\n    }\n    reject(err) {\n        this._reject(err);\n    }\n}\n//# sourceMappingURL=promise.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvcmUvYnVpbGQvZXNtL3V0aWxzL3Byb21pc2UuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvcmUvYnVpbGQvZXNtL3V0aWxzL3Byb21pc2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmV4cG9ydCBjbGFzcyBEZWZlcnJlZCB7XG4gICAgX3Byb21pc2U7XG4gICAgX3Jlc29sdmU7XG4gICAgX3JlamVjdDtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5fcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgICAgICAgICAgdGhpcy5fcmVqZWN0ID0gcmVqZWN0O1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0IHByb21pc2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcm9taXNlO1xuICAgIH1cbiAgICByZXNvbHZlKHZhbCkge1xuICAgICAgICB0aGlzLl9yZXNvbHZlKHZhbCk7XG4gICAgfVxuICAgIHJlamVjdChlcnIpIHtcbiAgICAgICAgdGhpcy5fcmVqZWN0KGVycik7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvbWlzZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/core/build/esm/utils/promise.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/core/build/esm/utils/timeout.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/utils/timeout.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TimeoutError: () => (/* binding */ TimeoutError),\n/* harmony export */   callWithTimeout: () => (/* binding */ callWithTimeout)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Error that is thrown on timeouts.\n */\nclass TimeoutError extends Error {\n    constructor(message) {\n        super(message);\n        // manually adjust prototype to retain `instanceof` functionality when targeting ES5, see:\n        // https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        Object.setPrototypeOf(this, TimeoutError.prototype);\n    }\n}\n/**\n * Adds a timeout to a promise and rejects if the specified timeout has elapsed. Also rejects if the specified promise\n * rejects, and resolves if the specified promise resolves.\n *\n * <p> NOTE: this operation will continue even after it throws a {@link TimeoutError}.\n *\n * @param promise promise to use with timeout.\n * @param timeout the timeout in milliseconds until the returned promise is rejected.\n */\nfunction callWithTimeout(promise, timeout) {\n    let timeoutHandle;\n    const timeoutPromise = new Promise(function timeoutFunction(_resolve, reject) {\n        timeoutHandle = setTimeout(function timeoutHandler() {\n            reject(new TimeoutError('Operation timed out.'));\n        }, timeout);\n    });\n    return Promise.race([promise, timeoutPromise]).then(result => {\n        clearTimeout(timeoutHandle);\n        return result;\n    }, reason => {\n        clearTimeout(timeoutHandle);\n        throw reason;\n    });\n}\n//# sourceMappingURL=timeout.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvcmUvYnVpbGQvZXNtL3V0aWxzL3RpbWVvdXQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRUFBa0UsbUJBQW1CO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy90aW1lb3V0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEVycm9yIHRoYXQgaXMgdGhyb3duIG9uIHRpbWVvdXRzLlxuICovXG5leHBvcnQgY2xhc3MgVGltZW91dEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIC8vIG1hbnVhbGx5IGFkanVzdCBwcm90b3R5cGUgdG8gcmV0YWluIGBpbnN0YW5jZW9mYCBmdW5jdGlvbmFsaXR5IHdoZW4gdGFyZ2V0aW5nIEVTNSwgc2VlOlxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vTWljcm9zb2Z0L1R5cGVTY3JpcHQtd2lraS9ibG9iL21haW4vQnJlYWtpbmctQ2hhbmdlcy5tZCNleHRlbmRpbmctYnVpbHQtaW5zLWxpa2UtZXJyb3ItYXJyYXktYW5kLW1hcC1tYXktbm8tbG9uZ2VyLXdvcmtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIFRpbWVvdXRFcnJvci5wcm90b3R5cGUpO1xuICAgIH1cbn1cbi8qKlxuICogQWRkcyBhIHRpbWVvdXQgdG8gYSBwcm9taXNlIGFuZCByZWplY3RzIGlmIHRoZSBzcGVjaWZpZWQgdGltZW91dCBoYXMgZWxhcHNlZC4gQWxzbyByZWplY3RzIGlmIHRoZSBzcGVjaWZpZWQgcHJvbWlzZVxuICogcmVqZWN0cywgYW5kIHJlc29sdmVzIGlmIHRoZSBzcGVjaWZpZWQgcHJvbWlzZSByZXNvbHZlcy5cbiAqXG4gKiA8cD4gTk9URTogdGhpcyBvcGVyYXRpb24gd2lsbCBjb250aW51ZSBldmVuIGFmdGVyIGl0IHRocm93cyBhIHtAbGluayBUaW1lb3V0RXJyb3J9LlxuICpcbiAqIEBwYXJhbSBwcm9taXNlIHByb21pc2UgdG8gdXNlIHdpdGggdGltZW91dC5cbiAqIEBwYXJhbSB0aW1lb3V0IHRoZSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB1bnRpbCB0aGUgcmV0dXJuZWQgcHJvbWlzZSBpcyByZWplY3RlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhbGxXaXRoVGltZW91dChwcm9taXNlLCB0aW1lb3V0KSB7XG4gICAgbGV0IHRpbWVvdXRIYW5kbGU7XG4gICAgY29uc3QgdGltZW91dFByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiB0aW1lb3V0RnVuY3Rpb24oX3Jlc29sdmUsIHJlamVjdCkge1xuICAgICAgICB0aW1lb3V0SGFuZGxlID0gc2V0VGltZW91dChmdW5jdGlvbiB0aW1lb3V0SGFuZGxlcigpIHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgVGltZW91dEVycm9yKCdPcGVyYXRpb24gdGltZWQgb3V0LicpKTtcbiAgICAgICAgfSwgdGltZW91dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIFByb21pc2UucmFjZShbcHJvbWlzZSwgdGltZW91dFByb21pc2VdKS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SGFuZGxlKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LCByZWFzb24gPT4ge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dEhhbmRsZSk7XG4gICAgICAgIHRocm93IHJlYXNvbjtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRpbWVvdXQuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/core/build/esm/utils/timeout.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/core/build/esm/utils/url.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/utils/url.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isUrlIgnored: () => (/* binding */ isUrlIgnored),\n/* harmony export */   urlMatches: () => (/* binding */ urlMatches)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction urlMatches(url, urlToMatch) {\n    if (typeof urlToMatch === 'string') {\n        return url === urlToMatch;\n    }\n    else {\n        return !!url.match(urlToMatch);\n    }\n}\n/**\n * Check if {@param url} should be ignored when comparing against {@param ignoredUrls}\n * @param url\n * @param ignoredUrls\n */\nfunction isUrlIgnored(url, ignoredUrls) {\n    if (!ignoredUrls) {\n        return false;\n    }\n    for (const ignoreUrl of ignoredUrls) {\n        if (urlMatches(url, ignoreUrl)) {\n            return true;\n        }\n    }\n    return false;\n}\n//# sourceMappingURL=url.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvcmUvYnVpbGQvZXNtL3V0aWxzL3VybC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsWUFBWSwwQ0FBMEM7QUFDbkU7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvcmUvYnVpbGQvZXNtL3V0aWxzL3VybC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVybE1hdGNoZXModXJsLCB1cmxUb01hdGNoKSB7XG4gICAgaWYgKHR5cGVvZiB1cmxUb01hdGNoID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdXJsID09PSB1cmxUb01hdGNoO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuICEhdXJsLm1hdGNoKHVybFRvTWF0Y2gpO1xuICAgIH1cbn1cbi8qKlxuICogQ2hlY2sgaWYge0BwYXJhbSB1cmx9IHNob3VsZCBiZSBpZ25vcmVkIHdoZW4gY29tcGFyaW5nIGFnYWluc3Qge0BwYXJhbSBpZ25vcmVkVXJsc31cbiAqIEBwYXJhbSB1cmxcbiAqIEBwYXJhbSBpZ25vcmVkVXJsc1xuICovXG5leHBvcnQgZnVuY3Rpb24gaXNVcmxJZ25vcmVkKHVybCwgaWdub3JlZFVybHMpIHtcbiAgICBpZiAoIWlnbm9yZWRVcmxzKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBpZ25vcmVVcmwgb2YgaWdub3JlZFVybHMpIHtcbiAgICAgICAgaWYgKHVybE1hdGNoZXModXJsLCBpZ25vcmVVcmwpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11cmwuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/core/build/esm/utils/url.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/core/build/esm/version.js":
/*!***************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/version.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VERSION: () => (/* binding */ VERSION)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// this is autogenerated file, see scripts/version-update.js\nconst VERSION = '2.0.1';\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvcmUvYnVpbGQvZXNtL3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9jb3JlL2J1aWxkL2VzbS92ZXJzaW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vLyB0aGlzIGlzIGF1dG9nZW5lcmF0ZWQgZmlsZSwgc2VlIHNjcmlwdHMvdmVyc2lvbi11cGRhdGUuanNcbmV4cG9ydCBjb25zdCBWRVJTSU9OID0gJzIuMC4xJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/core/build/esm/version.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-amqplib/build/src/amqplib.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-amqplib/build/src/amqplib.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AmqplibInstrumentation = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst core_1 = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/index.js\");\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-amqplib/build/src/types.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-amqplib/build/src/utils.js\");\n/** @knipignore */\nconst version_1 = __webpack_require__(/*! ./version */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-amqplib/build/src/version.js\");\nconst supportedVersions = ['>=0.5.5 <1'];\nclass AmqplibInstrumentation extends instrumentation_1.InstrumentationBase {\n    constructor(config = {}) {\n        super(version_1.PACKAGE_NAME, version_1.PACKAGE_VERSION, { ...types_1.DEFAULT_CONFIG, ...config });\n    }\n    setConfig(config = {}) {\n        super.setConfig({ ...types_1.DEFAULT_CONFIG, ...config });\n    }\n    init() {\n        const channelModelModuleFile = new instrumentation_1.InstrumentationNodeModuleFile('amqplib/lib/channel_model.js', supportedVersions, this.patchChannelModel.bind(this), this.unpatchChannelModel.bind(this));\n        const callbackModelModuleFile = new instrumentation_1.InstrumentationNodeModuleFile('amqplib/lib/callback_model.js', supportedVersions, this.patchChannelModel.bind(this), this.unpatchChannelModel.bind(this));\n        const connectModuleFile = new instrumentation_1.InstrumentationNodeModuleFile('amqplib/lib/connect.js', supportedVersions, this.patchConnect.bind(this), this.unpatchConnect.bind(this));\n        const module = new instrumentation_1.InstrumentationNodeModuleDefinition('amqplib', supportedVersions, undefined, undefined, [channelModelModuleFile, connectModuleFile, callbackModelModuleFile]);\n        return module;\n    }\n    patchConnect(moduleExports) {\n        moduleExports = this.unpatchConnect(moduleExports);\n        if (!(0, instrumentation_1.isWrapped)(moduleExports.connect)) {\n            this._wrap(moduleExports, 'connect', this.getConnectPatch.bind(this));\n        }\n        return moduleExports;\n    }\n    unpatchConnect(moduleExports) {\n        if ((0, instrumentation_1.isWrapped)(moduleExports.connect)) {\n            this._unwrap(moduleExports, 'connect');\n        }\n        return moduleExports;\n    }\n    patchChannelModel(moduleExports, moduleVersion) {\n        if (!(0, instrumentation_1.isWrapped)(moduleExports.Channel.prototype.publish)) {\n            this._wrap(moduleExports.Channel.prototype, 'publish', this.getPublishPatch.bind(this, moduleVersion));\n        }\n        if (!(0, instrumentation_1.isWrapped)(moduleExports.Channel.prototype.consume)) {\n            this._wrap(moduleExports.Channel.prototype, 'consume', this.getConsumePatch.bind(this, moduleVersion));\n        }\n        if (!(0, instrumentation_1.isWrapped)(moduleExports.Channel.prototype.ack)) {\n            this._wrap(moduleExports.Channel.prototype, 'ack', this.getAckPatch.bind(this, false, types_1.EndOperation.Ack));\n        }\n        if (!(0, instrumentation_1.isWrapped)(moduleExports.Channel.prototype.nack)) {\n            this._wrap(moduleExports.Channel.prototype, 'nack', this.getAckPatch.bind(this, true, types_1.EndOperation.Nack));\n        }\n        if (!(0, instrumentation_1.isWrapped)(moduleExports.Channel.prototype.reject)) {\n            this._wrap(moduleExports.Channel.prototype, 'reject', this.getAckPatch.bind(this, true, types_1.EndOperation.Reject));\n        }\n        if (!(0, instrumentation_1.isWrapped)(moduleExports.Channel.prototype.ackAll)) {\n            this._wrap(moduleExports.Channel.prototype, 'ackAll', this.getAckAllPatch.bind(this, false, types_1.EndOperation.AckAll));\n        }\n        if (!(0, instrumentation_1.isWrapped)(moduleExports.Channel.prototype.nackAll)) {\n            this._wrap(moduleExports.Channel.prototype, 'nackAll', this.getAckAllPatch.bind(this, true, types_1.EndOperation.NackAll));\n        }\n        if (!(0, instrumentation_1.isWrapped)(moduleExports.Channel.prototype.emit)) {\n            this._wrap(moduleExports.Channel.prototype, 'emit', this.getChannelEmitPatch.bind(this));\n        }\n        if (!(0, instrumentation_1.isWrapped)(moduleExports.ConfirmChannel.prototype.publish)) {\n            this._wrap(moduleExports.ConfirmChannel.prototype, 'publish', this.getConfirmedPublishPatch.bind(this, moduleVersion));\n        }\n        return moduleExports;\n    }\n    unpatchChannelModel(moduleExports) {\n        if ((0, instrumentation_1.isWrapped)(moduleExports.Channel.prototype.publish)) {\n            this._unwrap(moduleExports.Channel.prototype, 'publish');\n        }\n        if ((0, instrumentation_1.isWrapped)(moduleExports.Channel.prototype.consume)) {\n            this._unwrap(moduleExports.Channel.prototype, 'consume');\n        }\n        if ((0, instrumentation_1.isWrapped)(moduleExports.Channel.prototype.ack)) {\n            this._unwrap(moduleExports.Channel.prototype, 'ack');\n        }\n        if ((0, instrumentation_1.isWrapped)(moduleExports.Channel.prototype.nack)) {\n            this._unwrap(moduleExports.Channel.prototype, 'nack');\n        }\n        if ((0, instrumentation_1.isWrapped)(moduleExports.Channel.prototype.reject)) {\n            this._unwrap(moduleExports.Channel.prototype, 'reject');\n        }\n        if ((0, instrumentation_1.isWrapped)(moduleExports.Channel.prototype.ackAll)) {\n            this._unwrap(moduleExports.Channel.prototype, 'ackAll');\n        }\n        if ((0, instrumentation_1.isWrapped)(moduleExports.Channel.prototype.nackAll)) {\n            this._unwrap(moduleExports.Channel.prototype, 'nackAll');\n        }\n        if ((0, instrumentation_1.isWrapped)(moduleExports.Channel.prototype.emit)) {\n            this._unwrap(moduleExports.Channel.prototype, 'emit');\n        }\n        if ((0, instrumentation_1.isWrapped)(moduleExports.ConfirmChannel.prototype.publish)) {\n            this._unwrap(moduleExports.ConfirmChannel.prototype, 'publish');\n        }\n        return moduleExports;\n    }\n    getConnectPatch(original) {\n        return function patchedConnect(url, socketOptions, openCallback) {\n            return original.call(this, url, socketOptions, function (err, conn) {\n                if (err == null) {\n                    const urlAttributes = (0, utils_1.getConnectionAttributesFromUrl)(url);\n                    // the type of conn in @types/amqplib is amqp.Connection, but in practice the library send the\n                    // `serverProperties` on the `conn` and not in a property `connection`.\n                    // I don't have capacity to debug it currently but it should probably be fixed in @types or\n                    // in the package itself\n                    // currently setting as any to calm typescript\n                    const serverAttributes = (0, utils_1.getConnectionAttributesFromServer)(conn);\n                    conn[utils_1.CONNECTION_ATTRIBUTES] = {\n                        ...urlAttributes,\n                        ...serverAttributes,\n                    };\n                }\n                openCallback.apply(this, arguments);\n            });\n        };\n    }\n    getChannelEmitPatch(original) {\n        const self = this;\n        return function emit(eventName) {\n            if (eventName === 'close') {\n                self.endAllSpansOnChannel(this, true, types_1.EndOperation.ChannelClosed, undefined);\n                const activeTimer = this[utils_1.CHANNEL_CONSUME_TIMEOUT_TIMER];\n                if (activeTimer) {\n                    clearInterval(activeTimer);\n                }\n                this[utils_1.CHANNEL_CONSUME_TIMEOUT_TIMER] = undefined;\n            }\n            else if (eventName === 'error') {\n                self.endAllSpansOnChannel(this, true, types_1.EndOperation.ChannelError, undefined);\n            }\n            return original.apply(this, arguments);\n        };\n    }\n    getAckAllPatch(isRejected, endOperation, original) {\n        const self = this;\n        return function ackAll(requeueOrEmpty) {\n            self.endAllSpansOnChannel(this, isRejected, endOperation, requeueOrEmpty);\n            return original.apply(this, arguments);\n        };\n    }\n    getAckPatch(isRejected, endOperation, original) {\n        const self = this;\n        return function ack(message, allUpToOrRequeue, requeue) {\n            const channel = this;\n            // we use this patch in reject function as well, but it has different signature\n            const requeueResolved = endOperation === types_1.EndOperation.Reject ? allUpToOrRequeue : requeue;\n            const spansNotEnded = channel[utils_1.CHANNEL_SPANS_NOT_ENDED] ?? [];\n            const msgIndex = spansNotEnded.findIndex(msgDetails => msgDetails.msg === message);\n            if (msgIndex < 0) {\n                // should not happen in happy flow\n                // but possible if user is calling the api function ack twice with same message\n                self.endConsumerSpan(message, isRejected, endOperation, requeueResolved);\n            }\n            else if (endOperation !== types_1.EndOperation.Reject && allUpToOrRequeue) {\n                for (let i = 0; i <= msgIndex; i++) {\n                    self.endConsumerSpan(spansNotEnded[i].msg, isRejected, endOperation, requeueResolved);\n                }\n                spansNotEnded.splice(0, msgIndex + 1);\n            }\n            else {\n                self.endConsumerSpan(message, isRejected, endOperation, requeueResolved);\n                spansNotEnded.splice(msgIndex, 1);\n            }\n            return original.apply(this, arguments);\n        };\n    }\n    getConsumePatch(moduleVersion, original) {\n        const self = this;\n        return function consume(queue, onMessage, options) {\n            const channel = this;\n            if (!Object.prototype.hasOwnProperty.call(channel, utils_1.CHANNEL_SPANS_NOT_ENDED)) {\n                const { consumeTimeoutMs } = self.getConfig();\n                if (consumeTimeoutMs) {\n                    const timer = setInterval(() => {\n                        self.checkConsumeTimeoutOnChannel(channel);\n                    }, consumeTimeoutMs);\n                    timer.unref();\n                    channel[utils_1.CHANNEL_CONSUME_TIMEOUT_TIMER] = timer;\n                }\n                channel[utils_1.CHANNEL_SPANS_NOT_ENDED] = [];\n            }\n            const patchedOnMessage = function (msg) {\n                // msg is expected to be null for signaling consumer cancel notification\n                // https://www.rabbitmq.com/consumer-cancel.html\n                // in this case, we do not start a span, as this is not a real message.\n                if (!msg) {\n                    return onMessage.call(this, msg);\n                }\n                const headers = msg.properties.headers ?? {};\n                let parentContext = api_1.propagation.extract(api_1.ROOT_CONTEXT, headers);\n                const exchange = msg.fields?.exchange;\n                let links;\n                if (self._config.useLinksForConsume) {\n                    const parentSpanContext = parentContext\n                        ? api_1.trace.getSpan(parentContext)?.spanContext()\n                        : undefined;\n                    parentContext = undefined;\n                    if (parentSpanContext) {\n                        links = [\n                            {\n                                context: parentSpanContext,\n                            },\n                        ];\n                    }\n                }\n                const span = self.tracer.startSpan(`${queue} process`, {\n                    kind: api_1.SpanKind.CONSUMER,\n                    attributes: {\n                        ...channel?.connection?.[utils_1.CONNECTION_ATTRIBUTES],\n                        [semantic_conventions_1.SEMATTRS_MESSAGING_DESTINATION]: exchange,\n                        [semantic_conventions_1.SEMATTRS_MESSAGING_DESTINATION_KIND]: semantic_conventions_1.MESSAGINGDESTINATIONKINDVALUES_TOPIC,\n                        [semantic_conventions_1.SEMATTRS_MESSAGING_RABBITMQ_ROUTING_KEY]: msg.fields?.routingKey,\n                        [semantic_conventions_1.SEMATTRS_MESSAGING_OPERATION]: semantic_conventions_1.MESSAGINGOPERATIONVALUES_PROCESS,\n                        [semantic_conventions_1.SEMATTRS_MESSAGING_MESSAGE_ID]: msg?.properties.messageId,\n                        [semantic_conventions_1.SEMATTRS_MESSAGING_CONVERSATION_ID]: msg?.properties.correlationId,\n                    },\n                    links,\n                }, parentContext);\n                const { consumeHook } = self.getConfig();\n                if (consumeHook) {\n                    (0, instrumentation_1.safeExecuteInTheMiddle)(() => consumeHook(span, { moduleVersion, msg }), e => {\n                        if (e) {\n                            api_1.diag.error('amqplib instrumentation: consumerHook error', e);\n                        }\n                    }, true);\n                }\n                if (!options?.noAck) {\n                    // store the message on the channel so we can close the span on ackAll etc\n                    channel[utils_1.CHANNEL_SPANS_NOT_ENDED].push({\n                        msg,\n                        timeOfConsume: (0, core_1.hrTime)(),\n                    });\n                    // store the span on the message, so we can end it when user call 'ack' on it\n                    msg[utils_1.MESSAGE_STORED_SPAN] = span;\n                }\n                const setContext = parentContext\n                    ? parentContext\n                    : api_1.ROOT_CONTEXT;\n                api_1.context.with(api_1.trace.setSpan(setContext, span), () => {\n                    onMessage.call(this, msg);\n                });\n                if (options?.noAck) {\n                    self.callConsumeEndHook(span, msg, false, types_1.EndOperation.AutoAck);\n                    span.end();\n                }\n            };\n            arguments[1] = patchedOnMessage;\n            return original.apply(this, arguments);\n        };\n    }\n    getConfirmedPublishPatch(moduleVersion, original) {\n        const self = this;\n        return function confirmedPublish(exchange, routingKey, content, options, callback) {\n            const channel = this;\n            const { span, modifiedOptions } = self.createPublishSpan(self, exchange, routingKey, channel, options);\n            const { publishHook } = self.getConfig();\n            if (publishHook) {\n                (0, instrumentation_1.safeExecuteInTheMiddle)(() => publishHook(span, {\n                    moduleVersion,\n                    exchange,\n                    routingKey,\n                    content,\n                    options: modifiedOptions,\n                    isConfirmChannel: true,\n                }), e => {\n                    if (e) {\n                        api_1.diag.error('amqplib instrumentation: publishHook error', e);\n                    }\n                }, true);\n            }\n            const patchedOnConfirm = function (err, ok) {\n                try {\n                    callback?.call(this, err, ok);\n                }\n                finally {\n                    const { publishConfirmHook } = self.getConfig();\n                    if (publishConfirmHook) {\n                        (0, instrumentation_1.safeExecuteInTheMiddle)(() => publishConfirmHook(span, {\n                            moduleVersion,\n                            exchange,\n                            routingKey,\n                            content,\n                            options,\n                            isConfirmChannel: true,\n                            confirmError: err,\n                        }), e => {\n                            if (e) {\n                                api_1.diag.error('amqplib instrumentation: publishConfirmHook error', e);\n                            }\n                        }, true);\n                    }\n                    if (err) {\n                        span.setStatus({\n                            code: api_1.SpanStatusCode.ERROR,\n                            message: \"message confirmation has been nack'ed\",\n                        });\n                    }\n                    span.end();\n                }\n            };\n            // calling confirm channel publish function is storing the message in queue and registering the callback for broker confirm.\n            // span ends in the patched callback.\n            const markedContext = (0, utils_1.markConfirmChannelTracing)(api_1.context.active());\n            const argumentsCopy = [...arguments];\n            argumentsCopy[3] = modifiedOptions;\n            argumentsCopy[4] = api_1.context.bind((0, utils_1.unmarkConfirmChannelTracing)(api_1.trace.setSpan(markedContext, span)), patchedOnConfirm);\n            return api_1.context.with(markedContext, original.bind(this, ...argumentsCopy));\n        };\n    }\n    getPublishPatch(moduleVersion, original) {\n        const self = this;\n        return function publish(exchange, routingKey, content, options) {\n            if ((0, utils_1.isConfirmChannelTracing)(api_1.context.active())) {\n                // work already done\n                return original.apply(this, arguments);\n            }\n            else {\n                const channel = this;\n                const { span, modifiedOptions } = self.createPublishSpan(self, exchange, routingKey, channel, options);\n                const { publishHook } = self.getConfig();\n                if (publishHook) {\n                    (0, instrumentation_1.safeExecuteInTheMiddle)(() => publishHook(span, {\n                        moduleVersion,\n                        exchange,\n                        routingKey,\n                        content,\n                        options: modifiedOptions,\n                        isConfirmChannel: false,\n                    }), e => {\n                        if (e) {\n                            api_1.diag.error('amqplib instrumentation: publishHook error', e);\n                        }\n                    }, true);\n                }\n                // calling normal channel publish function is only storing the message in queue.\n                // it does not send it and waits for an ack, so the span duration is expected to be very short.\n                const argumentsCopy = [...arguments];\n                argumentsCopy[3] = modifiedOptions;\n                const originalRes = original.apply(this, argumentsCopy);\n                span.end();\n                return originalRes;\n            }\n        };\n    }\n    createPublishSpan(self, exchange, routingKey, channel, options) {\n        const normalizedExchange = (0, utils_1.normalizeExchange)(exchange);\n        const span = self.tracer.startSpan(`publish ${normalizedExchange}`, {\n            kind: api_1.SpanKind.PRODUCER,\n            attributes: {\n                ...channel.connection[utils_1.CONNECTION_ATTRIBUTES],\n                [semantic_conventions_1.SEMATTRS_MESSAGING_DESTINATION]: exchange,\n                [semantic_conventions_1.SEMATTRS_MESSAGING_DESTINATION_KIND]: semantic_conventions_1.MESSAGINGDESTINATIONKINDVALUES_TOPIC,\n                [semantic_conventions_1.SEMATTRS_MESSAGING_RABBITMQ_ROUTING_KEY]: routingKey,\n                [semantic_conventions_1.SEMATTRS_MESSAGING_MESSAGE_ID]: options?.messageId,\n                [semantic_conventions_1.SEMATTRS_MESSAGING_CONVERSATION_ID]: options?.correlationId,\n            },\n        });\n        const modifiedOptions = options ?? {};\n        modifiedOptions.headers = modifiedOptions.headers ?? {};\n        api_1.propagation.inject(api_1.trace.setSpan(api_1.context.active(), span), modifiedOptions.headers);\n        return { span, modifiedOptions };\n    }\n    endConsumerSpan(message, isRejected, operation, requeue) {\n        const storedSpan = message[utils_1.MESSAGE_STORED_SPAN];\n        if (!storedSpan)\n            return;\n        if (isRejected !== false) {\n            storedSpan.setStatus({\n                code: api_1.SpanStatusCode.ERROR,\n                message: operation !== types_1.EndOperation.ChannelClosed &&\n                    operation !== types_1.EndOperation.ChannelError\n                    ? `${operation} called on message${requeue === true\n                        ? ' with requeue'\n                        : requeue === false\n                            ? ' without requeue'\n                            : ''}`\n                    : operation,\n            });\n        }\n        this.callConsumeEndHook(storedSpan, message, isRejected, operation);\n        storedSpan.end();\n        message[utils_1.MESSAGE_STORED_SPAN] = undefined;\n    }\n    endAllSpansOnChannel(channel, isRejected, operation, requeue) {\n        const spansNotEnded = channel[utils_1.CHANNEL_SPANS_NOT_ENDED] ?? [];\n        spansNotEnded.forEach(msgDetails => {\n            this.endConsumerSpan(msgDetails.msg, isRejected, operation, requeue);\n        });\n        channel[utils_1.CHANNEL_SPANS_NOT_ENDED] = [];\n    }\n    callConsumeEndHook(span, msg, rejected, endOperation) {\n        const { consumeEndHook } = this.getConfig();\n        if (!consumeEndHook)\n            return;\n        (0, instrumentation_1.safeExecuteInTheMiddle)(() => consumeEndHook(span, { msg, rejected, endOperation }), e => {\n            if (e) {\n                api_1.diag.error('amqplib instrumentation: consumerEndHook error', e);\n            }\n        }, true);\n    }\n    checkConsumeTimeoutOnChannel(channel) {\n        const currentTime = (0, core_1.hrTime)();\n        const spansNotEnded = channel[utils_1.CHANNEL_SPANS_NOT_ENDED] ?? [];\n        let i;\n        const { consumeTimeoutMs } = this.getConfig();\n        for (i = 0; i < spansNotEnded.length; i++) {\n            const currMessage = spansNotEnded[i];\n            const timeFromConsume = (0, core_1.hrTimeDuration)(currMessage.timeOfConsume, currentTime);\n            if ((0, core_1.hrTimeToMilliseconds)(timeFromConsume) < consumeTimeoutMs) {\n                break;\n            }\n            this.endConsumerSpan(currMessage.msg, null, types_1.EndOperation.InstrumentationTimeout, true);\n        }\n        spansNotEnded.splice(0, i);\n    }\n}\nexports.AmqplibInstrumentation = AmqplibInstrumentation;\n//# sourceMappingURL=amqplib.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-amqplib/build/src/amqplib.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-amqplib/build/src/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-amqplib/build/src/index.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EndOperation = exports.DEFAULT_CONFIG = exports.AmqplibInstrumentation = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar amqplib_1 = __webpack_require__(/*! ./amqplib */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-amqplib/build/src/amqplib.js\");\nObject.defineProperty(exports, \"AmqplibInstrumentation\", ({ enumerable: true, get: function () { return amqplib_1.AmqplibInstrumentation; } }));\nvar types_1 = __webpack_require__(/*! ./types */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-amqplib/build/src/types.js\");\nObject.defineProperty(exports, \"DEFAULT_CONFIG\", ({ enumerable: true, get: function () { return types_1.DEFAULT_CONFIG; } }));\nObject.defineProperty(exports, \"EndOperation\", ({ enumerable: true, get: function () { return types_1.EndOperation; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1hbXFwbGliL2J1aWxkL3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0IsR0FBRyxzQkFBc0IsR0FBRyw4QkFBOEI7QUFDOUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLG1CQUFPLENBQUMsMEdBQVc7QUFDbkMsMERBQXlELEVBQUUscUNBQXFDLDRDQUE0QyxFQUFDO0FBQzdJLGNBQWMsbUJBQU8sQ0FBQyxzR0FBUztBQUMvQixrREFBaUQsRUFBRSxxQ0FBcUMsa0NBQWtDLEVBQUM7QUFDM0gsZ0RBQStDLEVBQUUscUNBQXFDLGdDQUFnQyxFQUFDO0FBQ3ZIIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1hbXFwbGliL2J1aWxkL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRW5kT3BlcmF0aW9uID0gZXhwb3J0cy5ERUZBVUxUX0NPTkZJRyA9IGV4cG9ydHMuQW1xcGxpYkluc3RydW1lbnRhdGlvbiA9IHZvaWQgMDtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG52YXIgYW1xcGxpYl8xID0gcmVxdWlyZShcIi4vYW1xcGxpYlwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkFtcXBsaWJJbnN0cnVtZW50YXRpb25cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFtcXBsaWJfMS5BbXFwbGliSW5zdHJ1bWVudGF0aW9uOyB9IH0pO1xudmFyIHR5cGVzXzEgPSByZXF1aXJlKFwiLi90eXBlc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRFRkFVTFRfQ09ORklHXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0eXBlc18xLkRFRkFVTFRfQ09ORklHOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRW5kT3BlcmF0aW9uXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0eXBlc18xLkVuZE9wZXJhdGlvbjsgfSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-amqplib/build/src/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-amqplib/build/src/types.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-amqplib/build/src/types.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DEFAULT_CONFIG = exports.EndOperation = void 0;\nvar EndOperation;\n(function (EndOperation) {\n    EndOperation[\"AutoAck\"] = \"auto ack\";\n    EndOperation[\"Ack\"] = \"ack\";\n    EndOperation[\"AckAll\"] = \"ackAll\";\n    EndOperation[\"Reject\"] = \"reject\";\n    EndOperation[\"Nack\"] = \"nack\";\n    EndOperation[\"NackAll\"] = \"nackAll\";\n    EndOperation[\"ChannelClosed\"] = \"channel closed\";\n    EndOperation[\"ChannelError\"] = \"channel error\";\n    EndOperation[\"InstrumentationTimeout\"] = \"instrumentation timeout\";\n})(EndOperation = exports.EndOperation || (exports.EndOperation = {}));\nexports.DEFAULT_CONFIG = {\n    consumeTimeoutMs: 1000 * 60,\n    useLinksForConsume: false,\n};\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1hbXFwbGliL2J1aWxkL3NyYy90eXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0IsR0FBRyxvQkFBb0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsMENBQTBDLG9CQUFvQixLQUFLO0FBQ3BFLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tYW1xcGxpYi9idWlsZC9zcmMvdHlwZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRFRkFVTFRfQ09ORklHID0gZXhwb3J0cy5FbmRPcGVyYXRpb24gPSB2b2lkIDA7XG52YXIgRW5kT3BlcmF0aW9uO1xuKGZ1bmN0aW9uIChFbmRPcGVyYXRpb24pIHtcbiAgICBFbmRPcGVyYXRpb25bXCJBdXRvQWNrXCJdID0gXCJhdXRvIGFja1wiO1xuICAgIEVuZE9wZXJhdGlvbltcIkFja1wiXSA9IFwiYWNrXCI7XG4gICAgRW5kT3BlcmF0aW9uW1wiQWNrQWxsXCJdID0gXCJhY2tBbGxcIjtcbiAgICBFbmRPcGVyYXRpb25bXCJSZWplY3RcIl0gPSBcInJlamVjdFwiO1xuICAgIEVuZE9wZXJhdGlvbltcIk5hY2tcIl0gPSBcIm5hY2tcIjtcbiAgICBFbmRPcGVyYXRpb25bXCJOYWNrQWxsXCJdID0gXCJuYWNrQWxsXCI7XG4gICAgRW5kT3BlcmF0aW9uW1wiQ2hhbm5lbENsb3NlZFwiXSA9IFwiY2hhbm5lbCBjbG9zZWRcIjtcbiAgICBFbmRPcGVyYXRpb25bXCJDaGFubmVsRXJyb3JcIl0gPSBcImNoYW5uZWwgZXJyb3JcIjtcbiAgICBFbmRPcGVyYXRpb25bXCJJbnN0cnVtZW50YXRpb25UaW1lb3V0XCJdID0gXCJpbnN0cnVtZW50YXRpb24gdGltZW91dFwiO1xufSkoRW5kT3BlcmF0aW9uID0gZXhwb3J0cy5FbmRPcGVyYXRpb24gfHwgKGV4cG9ydHMuRW5kT3BlcmF0aW9uID0ge30pKTtcbmV4cG9ydHMuREVGQVVMVF9DT05GSUcgPSB7XG4gICAgY29uc3VtZVRpbWVvdXRNczogMTAwMCAqIDYwLFxuICAgIHVzZUxpbmtzRm9yQ29uc3VtZTogZmFsc2UsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-amqplib/build/src/types.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-amqplib/build/src/utils.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-amqplib/build/src/utils.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isConfirmChannelTracing = exports.unmarkConfirmChannelTracing = exports.markConfirmChannelTracing = exports.getConnectionAttributesFromUrl = exports.getConnectionAttributesFromServer = exports.normalizeExchange = exports.CONNECTION_ATTRIBUTES = exports.CHANNEL_CONSUME_TIMEOUT_TIMER = exports.CHANNEL_SPANS_NOT_ENDED = exports.MESSAGE_STORED_SPAN = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nexports.MESSAGE_STORED_SPAN = Symbol('opentelemetry.amqplib.message.stored-span');\nexports.CHANNEL_SPANS_NOT_ENDED = Symbol('opentelemetry.amqplib.channel.spans-not-ended');\nexports.CHANNEL_CONSUME_TIMEOUT_TIMER = Symbol('opentelemetry.amqplib.channel.consumer-timeout-timer');\nexports.CONNECTION_ATTRIBUTES = Symbol('opentelemetry.amqplib.connection.attributes');\nconst IS_CONFIRM_CHANNEL_CONTEXT_KEY = (0, api_1.createContextKey)('opentelemetry.amqplib.channel.is-confirm-channel');\nconst normalizeExchange = (exchangeName) => exchangeName !== '' ? exchangeName : '<default>';\nexports.normalizeExchange = normalizeExchange;\nconst censorPassword = (url) => {\n    return url.replace(/:[^:@/]*@/, ':***@');\n};\nconst getPort = (portFromUrl, resolvedProtocol) => {\n    // we are using the resolved protocol which is upper case\n    // this code mimic the behavior of the amqplib which is used to set connection params\n    return portFromUrl || (resolvedProtocol === 'AMQP' ? 5672 : 5671);\n};\nconst getProtocol = (protocolFromUrl) => {\n    const resolvedProtocol = protocolFromUrl || 'amqp';\n    // the substring removed the ':' part of the protocol ('amqp:' -> 'amqp')\n    const noEndingColon = resolvedProtocol.endsWith(':')\n        ? resolvedProtocol.substring(0, resolvedProtocol.length - 1)\n        : resolvedProtocol;\n    // upper cases to match spec\n    return noEndingColon.toUpperCase();\n};\nconst getHostname = (hostnameFromUrl) => {\n    // if user supplies empty hostname, it gets forwarded to 'net' package which default it to localhost.\n    // https://nodejs.org/docs/latest-v12.x/api/net.html#net_socket_connect_options_connectlistener\n    return hostnameFromUrl || 'localhost';\n};\nconst extractConnectionAttributeOrLog = (url, attributeKey, attributeValue, nameForLog) => {\n    if (attributeValue) {\n        return { [attributeKey]: attributeValue };\n    }\n    else {\n        api_1.diag.error(`amqplib instrumentation: could not extract connection attribute ${nameForLog} from user supplied url`, {\n            url,\n        });\n        return {};\n    }\n};\nconst getConnectionAttributesFromServer = (conn) => {\n    const product = conn.serverProperties.product?.toLowerCase?.();\n    if (product) {\n        return {\n            [semantic_conventions_1.SEMATTRS_MESSAGING_SYSTEM]: product,\n        };\n    }\n    else {\n        return {};\n    }\n};\nexports.getConnectionAttributesFromServer = getConnectionAttributesFromServer;\nconst getConnectionAttributesFromUrl = (url) => {\n    const attributes = {\n        [semantic_conventions_1.SEMATTRS_MESSAGING_PROTOCOL_VERSION]: '0.9.1', // this is the only protocol supported by the instrumented library\n    };\n    url = url || 'amqp://localhost';\n    if (typeof url === 'object') {\n        const connectOptions = url;\n        const protocol = getProtocol(connectOptions?.protocol);\n        Object.assign(attributes, {\n            ...extractConnectionAttributeOrLog(url, semantic_conventions_1.SEMATTRS_MESSAGING_PROTOCOL, protocol, 'protocol'),\n        });\n        const hostname = getHostname(connectOptions?.hostname);\n        Object.assign(attributes, {\n            ...extractConnectionAttributeOrLog(url, semantic_conventions_1.SEMATTRS_NET_PEER_NAME, hostname, 'hostname'),\n        });\n        const port = getPort(connectOptions.port, protocol);\n        Object.assign(attributes, {\n            ...extractConnectionAttributeOrLog(url, semantic_conventions_1.SEMATTRS_NET_PEER_PORT, port, 'port'),\n        });\n    }\n    else {\n        const censoredUrl = censorPassword(url);\n        attributes[semantic_conventions_1.SEMATTRS_MESSAGING_URL] = censoredUrl;\n        try {\n            const urlParts = new URL(censoredUrl);\n            const protocol = getProtocol(urlParts.protocol);\n            Object.assign(attributes, {\n                ...extractConnectionAttributeOrLog(censoredUrl, semantic_conventions_1.SEMATTRS_MESSAGING_PROTOCOL, protocol, 'protocol'),\n            });\n            const hostname = getHostname(urlParts.hostname);\n            Object.assign(attributes, {\n                ...extractConnectionAttributeOrLog(censoredUrl, semantic_conventions_1.SEMATTRS_NET_PEER_NAME, hostname, 'hostname'),\n            });\n            const port = getPort(urlParts.port ? parseInt(urlParts.port) : undefined, protocol);\n            Object.assign(attributes, {\n                ...extractConnectionAttributeOrLog(censoredUrl, semantic_conventions_1.SEMATTRS_NET_PEER_PORT, port, 'port'),\n            });\n        }\n        catch (err) {\n            api_1.diag.error('amqplib instrumentation: error while extracting connection details from connection url', {\n                censoredUrl,\n                err,\n            });\n        }\n    }\n    return attributes;\n};\nexports.getConnectionAttributesFromUrl = getConnectionAttributesFromUrl;\nconst markConfirmChannelTracing = (context) => {\n    return context.setValue(IS_CONFIRM_CHANNEL_CONTEXT_KEY, true);\n};\nexports.markConfirmChannelTracing = markConfirmChannelTracing;\nconst unmarkConfirmChannelTracing = (context) => {\n    return context.deleteValue(IS_CONFIRM_CHANNEL_CONTEXT_KEY);\n};\nexports.unmarkConfirmChannelTracing = unmarkConfirmChannelTracing;\nconst isConfirmChannelTracing = (context) => {\n    return context.getValue(IS_CONFIRM_CHANNEL_CONTEXT_KEY) === true;\n};\nexports.isConfirmChannelTracing = isConfirmChannelTracing;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-amqplib/build/src/utils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-amqplib/build/src/version.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-amqplib/build/src/version.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PACKAGE_NAME = exports.PACKAGE_VERSION = void 0;\n// this is autogenerated file, see scripts/version-update.js\nexports.PACKAGE_VERSION = '0.50.0';\nexports.PACKAGE_NAME = '@opentelemetry/instrumentation-amqplib';\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1hbXFwbGliL2J1aWxkL3NyYy92ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQixHQUFHLHVCQUF1QjtBQUM5QztBQUNBLHVCQUF1QjtBQUN2QixvQkFBb0I7QUFDcEIiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWFtcXBsaWIvYnVpbGQvc3JjL3ZlcnNpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5QQUNLQUdFX05BTUUgPSBleHBvcnRzLlBBQ0tBR0VfVkVSU0lPTiA9IHZvaWQgMDtcbi8vIHRoaXMgaXMgYXV0b2dlbmVyYXRlZCBmaWxlLCBzZWUgc2NyaXB0cy92ZXJzaW9uLXVwZGF0ZS5qc1xuZXhwb3J0cy5QQUNLQUdFX1ZFUlNJT04gPSAnMC41MC4wJztcbmV4cG9ydHMuUEFDS0FHRV9OQU1FID0gJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1hbXFwbGliJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-amqplib/build/src/version.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-connect/build/src/enums/AttributeNames.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-connect/build/src/enums/AttributeNames.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ConnectNames = exports.ConnectTypes = exports.AttributeNames = void 0;\nvar AttributeNames;\n(function (AttributeNames) {\n    AttributeNames[\"CONNECT_TYPE\"] = \"connect.type\";\n    AttributeNames[\"CONNECT_NAME\"] = \"connect.name\";\n})(AttributeNames = exports.AttributeNames || (exports.AttributeNames = {}));\nvar ConnectTypes;\n(function (ConnectTypes) {\n    ConnectTypes[\"MIDDLEWARE\"] = \"middleware\";\n    ConnectTypes[\"REQUEST_HANDLER\"] = \"request_handler\";\n})(ConnectTypes = exports.ConnectTypes || (exports.ConnectTypes = {}));\nvar ConnectNames;\n(function (ConnectNames) {\n    ConnectNames[\"MIDDLEWARE\"] = \"middleware\";\n    ConnectNames[\"REQUEST_HANDLER\"] = \"request handler\";\n})(ConnectNames = exports.ConnectNames || (exports.ConnectNames = {}));\n//# sourceMappingURL=AttributeNames.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1jb25uZWN0L2J1aWxkL3NyYy9lbnVtcy9BdHRyaWJ1dGVOYW1lcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0IsR0FBRyxvQkFBb0IsR0FBRyxzQkFBc0I7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDhDQUE4QyxzQkFBc0IsS0FBSztBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsMENBQTBDLG9CQUFvQixLQUFLO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQywwQ0FBMEMsb0JBQW9CLEtBQUs7QUFDcEUiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWNvbm5lY3QvYnVpbGQvc3JjL2VudW1zL0F0dHJpYnV0ZU5hbWVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ29ubmVjdE5hbWVzID0gZXhwb3J0cy5Db25uZWN0VHlwZXMgPSBleHBvcnRzLkF0dHJpYnV0ZU5hbWVzID0gdm9pZCAwO1xudmFyIEF0dHJpYnV0ZU5hbWVzO1xuKGZ1bmN0aW9uIChBdHRyaWJ1dGVOYW1lcykge1xuICAgIEF0dHJpYnV0ZU5hbWVzW1wiQ09OTkVDVF9UWVBFXCJdID0gXCJjb25uZWN0LnR5cGVcIjtcbiAgICBBdHRyaWJ1dGVOYW1lc1tcIkNPTk5FQ1RfTkFNRVwiXSA9IFwiY29ubmVjdC5uYW1lXCI7XG59KShBdHRyaWJ1dGVOYW1lcyA9IGV4cG9ydHMuQXR0cmlidXRlTmFtZXMgfHwgKGV4cG9ydHMuQXR0cmlidXRlTmFtZXMgPSB7fSkpO1xudmFyIENvbm5lY3RUeXBlcztcbihmdW5jdGlvbiAoQ29ubmVjdFR5cGVzKSB7XG4gICAgQ29ubmVjdFR5cGVzW1wiTUlERExFV0FSRVwiXSA9IFwibWlkZGxld2FyZVwiO1xuICAgIENvbm5lY3RUeXBlc1tcIlJFUVVFU1RfSEFORExFUlwiXSA9IFwicmVxdWVzdF9oYW5kbGVyXCI7XG59KShDb25uZWN0VHlwZXMgPSBleHBvcnRzLkNvbm5lY3RUeXBlcyB8fCAoZXhwb3J0cy5Db25uZWN0VHlwZXMgPSB7fSkpO1xudmFyIENvbm5lY3ROYW1lcztcbihmdW5jdGlvbiAoQ29ubmVjdE5hbWVzKSB7XG4gICAgQ29ubmVjdE5hbWVzW1wiTUlERExFV0FSRVwiXSA9IFwibWlkZGxld2FyZVwiO1xuICAgIENvbm5lY3ROYW1lc1tcIlJFUVVFU1RfSEFORExFUlwiXSA9IFwicmVxdWVzdCBoYW5kbGVyXCI7XG59KShDb25uZWN0TmFtZXMgPSBleHBvcnRzLkNvbm5lY3ROYW1lcyB8fCAoZXhwb3J0cy5Db25uZWN0TmFtZXMgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXR0cmlidXRlTmFtZXMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-connect/build/src/enums/AttributeNames.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-connect/build/src/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-connect/build/src/index.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ConnectTypes = exports.ConnectNames = exports.AttributeNames = exports.ANONYMOUS_NAME = exports.ConnectInstrumentation = void 0;\nvar instrumentation_1 = __webpack_require__(/*! ./instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-connect/build/src/instrumentation.js\");\nObject.defineProperty(exports, \"ConnectInstrumentation\", ({ enumerable: true, get: function () { return instrumentation_1.ConnectInstrumentation; } }));\nObject.defineProperty(exports, \"ANONYMOUS_NAME\", ({ enumerable: true, get: function () { return instrumentation_1.ANONYMOUS_NAME; } }));\nvar AttributeNames_1 = __webpack_require__(/*! ./enums/AttributeNames */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-connect/build/src/enums/AttributeNames.js\");\nObject.defineProperty(exports, \"AttributeNames\", ({ enumerable: true, get: function () { return AttributeNames_1.AttributeNames; } }));\nObject.defineProperty(exports, \"ConnectNames\", ({ enumerable: true, get: function () { return AttributeNames_1.ConnectNames; } }));\nObject.defineProperty(exports, \"ConnectTypes\", ({ enumerable: true, get: function () { return AttributeNames_1.ConnectTypes; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1jb25uZWN0L2J1aWxkL3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0IsR0FBRyxvQkFBb0IsR0FBRyxzQkFBc0IsR0FBRyxzQkFBc0IsR0FBRyw4QkFBOEI7QUFDOUgsd0JBQXdCLG1CQUFPLENBQUMsMEhBQW1CO0FBQ25ELDBEQUF5RCxFQUFFLHFDQUFxQyxvREFBb0QsRUFBQztBQUNySixrREFBaUQsRUFBRSxxQ0FBcUMsNENBQTRDLEVBQUM7QUFDckksdUJBQXVCLG1CQUFPLENBQUMsb0lBQXdCO0FBQ3ZELGtEQUFpRCxFQUFFLHFDQUFxQywyQ0FBMkMsRUFBQztBQUNwSSxnREFBK0MsRUFBRSxxQ0FBcUMseUNBQXlDLEVBQUM7QUFDaEksZ0RBQStDLEVBQUUscUNBQXFDLHlDQUF5QyxFQUFDO0FBQ2hJIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1jb25uZWN0L2J1aWxkL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbm5lY3RUeXBlcyA9IGV4cG9ydHMuQ29ubmVjdE5hbWVzID0gZXhwb3J0cy5BdHRyaWJ1dGVOYW1lcyA9IGV4cG9ydHMuQU5PTllNT1VTX05BTUUgPSBleHBvcnRzLkNvbm5lY3RJbnN0cnVtZW50YXRpb24gPSB2b2lkIDA7XG52YXIgaW5zdHJ1bWVudGF0aW9uXzEgPSByZXF1aXJlKFwiLi9pbnN0cnVtZW50YXRpb25cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDb25uZWN0SW5zdHJ1bWVudGF0aW9uXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpbnN0cnVtZW50YXRpb25fMS5Db25uZWN0SW5zdHJ1bWVudGF0aW9uOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQU5PTllNT1VTX05BTUVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGluc3RydW1lbnRhdGlvbl8xLkFOT05ZTU9VU19OQU1FOyB9IH0pO1xudmFyIEF0dHJpYnV0ZU5hbWVzXzEgPSByZXF1aXJlKFwiLi9lbnVtcy9BdHRyaWJ1dGVOYW1lc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkF0dHJpYnV0ZU5hbWVzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBBdHRyaWJ1dGVOYW1lc18xLkF0dHJpYnV0ZU5hbWVzOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ29ubmVjdE5hbWVzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBBdHRyaWJ1dGVOYW1lc18xLkNvbm5lY3ROYW1lczsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNvbm5lY3RUeXBlc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQXR0cmlidXRlTmFtZXNfMS5Db25uZWN0VHlwZXM7IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-connect/build/src/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-connect/build/src/instrumentation.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-connect/build/src/instrumentation.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = \"/monitoring\";globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.2\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ConnectInstrumentation = exports.ANONYMOUS_NAME = void 0;\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst core_1 = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/index.js\");\nconst AttributeNames_1 = __webpack_require__(/*! ./enums/AttributeNames */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-connect/build/src/enums/AttributeNames.js\");\n/** @knipignore */\nconst version_1 = __webpack_require__(/*! ./version */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-connect/build/src/version.js\");\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-connect/build/src/utils.js\");\nexports.ANONYMOUS_NAME = 'anonymous';\n/** Connect instrumentation for OpenTelemetry */\nclass ConnectInstrumentation extends instrumentation_1.InstrumentationBase {\n    constructor(config = {}) {\n        super(version_1.PACKAGE_NAME, version_1.PACKAGE_VERSION, config);\n    }\n    init() {\n        return [\n            new instrumentation_1.InstrumentationNodeModuleDefinition('connect', ['>=3.0.0 <4'], moduleExports => {\n                return this._patchConstructor(moduleExports);\n            }),\n        ];\n    }\n    _patchApp(patchedApp) {\n        if (!(0, instrumentation_1.isWrapped)(patchedApp.use)) {\n            this._wrap(patchedApp, 'use', this._patchUse.bind(this));\n        }\n        if (!(0, instrumentation_1.isWrapped)(patchedApp.handle)) {\n            this._wrap(patchedApp, 'handle', this._patchHandle.bind(this));\n        }\n    }\n    _patchConstructor(original) {\n        const instrumentation = this;\n        return function (...args) {\n            const app = original.apply(this, args);\n            instrumentation._patchApp(app);\n            return app;\n        };\n    }\n    _patchNext(next, finishSpan) {\n        return function nextFunction(err) {\n            const result = next.apply(this, [err]);\n            finishSpan();\n            return result;\n        };\n    }\n    _startSpan(routeName, middleWare) {\n        let connectType;\n        let connectName;\n        let connectTypeName;\n        if (routeName) {\n            connectType = AttributeNames_1.ConnectTypes.REQUEST_HANDLER;\n            connectTypeName = AttributeNames_1.ConnectNames.REQUEST_HANDLER;\n            connectName = routeName;\n        }\n        else {\n            connectType = AttributeNames_1.ConnectTypes.MIDDLEWARE;\n            connectTypeName = AttributeNames_1.ConnectNames.MIDDLEWARE;\n            connectName = middleWare.name || exports.ANONYMOUS_NAME;\n        }\n        const spanName = `${connectTypeName} - ${connectName}`;\n        const options = {\n            attributes: {\n                [semantic_conventions_1.ATTR_HTTP_ROUTE]: routeName.length > 0 ? routeName : '/',\n                [AttributeNames_1.AttributeNames.CONNECT_TYPE]: connectType,\n                [AttributeNames_1.AttributeNames.CONNECT_NAME]: connectName,\n            },\n        };\n        return this.tracer.startSpan(spanName, options);\n    }\n    _patchMiddleware(routeName, middleWare) {\n        const instrumentation = this;\n        const isErrorMiddleware = middleWare.length === 4;\n        function patchedMiddleware() {\n            if (!instrumentation.isEnabled()) {\n                return middleWare.apply(this, arguments);\n            }\n            const [reqArgIdx, resArgIdx, nextArgIdx] = isErrorMiddleware\n                ? [1, 2, 3]\n                : [0, 1, 2];\n            const req = arguments[reqArgIdx];\n            const res = arguments[resArgIdx];\n            const next = arguments[nextArgIdx];\n            (0, utils_1.replaceCurrentStackRoute)(req, routeName);\n            const rpcMetadata = (0, core_1.getRPCMetadata)(api_1.context.active());\n            if (routeName && rpcMetadata?.type === core_1.RPCType.HTTP) {\n                rpcMetadata.route = (0, utils_1.generateRoute)(req);\n            }\n            let spanName = '';\n            if (routeName) {\n                spanName = `request handler - ${routeName}`;\n            }\n            else {\n                spanName = `middleware - ${middleWare.name || exports.ANONYMOUS_NAME}`;\n            }\n            const span = instrumentation._startSpan(routeName, middleWare);\n            instrumentation._diag.debug('start span', spanName);\n            let spanFinished = false;\n            function finishSpan() {\n                if (!spanFinished) {\n                    spanFinished = true;\n                    instrumentation._diag.debug(`finishing span ${span.name}`);\n                    span.end();\n                }\n                else {\n                    instrumentation._diag.debug(`span ${span.name} - already finished`);\n                }\n                res.removeListener('close', finishSpan);\n            }\n            res.addListener('close', finishSpan);\n            arguments[nextArgIdx] = instrumentation._patchNext(next, finishSpan);\n            return middleWare.apply(this, arguments);\n        }\n        Object.defineProperty(patchedMiddleware, 'length', {\n            value: middleWare.length,\n            writable: false,\n            configurable: true,\n        });\n        return patchedMiddleware;\n    }\n    _patchUse(original) {\n        const instrumentation = this;\n        return function (...args) {\n            const middleWare = args[args.length - 1];\n            const routeName = (args[args.length - 2] || '');\n            args[args.length - 1] = instrumentation._patchMiddleware(routeName, middleWare);\n            return original.apply(this, args);\n        };\n    }\n    _patchHandle(original) {\n        const instrumentation = this;\n        return function () {\n            const [reqIdx, outIdx] = [0, 2];\n            const req = arguments[reqIdx];\n            const out = arguments[outIdx];\n            const completeStack = (0, utils_1.addNewStackLayer)(req);\n            if (typeof out === 'function') {\n                arguments[outIdx] = instrumentation._patchOut(out, completeStack);\n            }\n            return original.apply(this, arguments);\n        };\n    }\n    _patchOut(out, completeStack) {\n        return function nextFunction(...args) {\n            completeStack();\n            return Reflect.apply(out, this, args);\n        };\n    }\n}\nexports.ConnectInstrumentation = ConnectInstrumentation;\n//# sourceMappingURL=instrumentation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-connect/build/src/instrumentation.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-connect/build/src/internal-types.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-connect/build/src/internal-types.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports._LAYERS_STORE_PROPERTY = void 0;\nexports._LAYERS_STORE_PROPERTY = Symbol('opentelemetry.instrumentation-connect.request-route-stack');\n//# sourceMappingURL=internal-types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1jb25uZWN0L2J1aWxkL3NyYy9pbnRlcm5hbC10eXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw4QkFBOEI7QUFDOUIsOEJBQThCO0FBQzlCIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1jb25uZWN0L2J1aWxkL3NyYy9pbnRlcm5hbC10eXBlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLl9MQVlFUlNfU1RPUkVfUFJPUEVSVFkgPSB2b2lkIDA7XG5leHBvcnRzLl9MQVlFUlNfU1RPUkVfUFJPUEVSVFkgPSBTeW1ib2woJ29wZW50ZWxlbWV0cnkuaW5zdHJ1bWVudGF0aW9uLWNvbm5lY3QucmVxdWVzdC1yb3V0ZS1zdGFjaycpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50ZXJuYWwtdHlwZXMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-connect/build/src/internal-types.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-connect/build/src/utils.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-connect/build/src/utils.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.generateRoute = exports.replaceCurrentStackRoute = exports.addNewStackLayer = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst internal_types_1 = __webpack_require__(/*! ./internal-types */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-connect/build/src/internal-types.js\");\nconst addNewStackLayer = (request) => {\n    if (Array.isArray(request[internal_types_1._LAYERS_STORE_PROPERTY]) === false) {\n        Object.defineProperty(request, internal_types_1._LAYERS_STORE_PROPERTY, {\n            enumerable: false,\n            value: [],\n        });\n    }\n    request[internal_types_1._LAYERS_STORE_PROPERTY].push('/');\n    const stackLength = request[internal_types_1._LAYERS_STORE_PROPERTY].length;\n    return () => {\n        if (stackLength === request[internal_types_1._LAYERS_STORE_PROPERTY].length) {\n            request[internal_types_1._LAYERS_STORE_PROPERTY].pop();\n        }\n        else {\n            api_1.diag.warn('Connect: Trying to pop the stack multiple time');\n        }\n    };\n};\nexports.addNewStackLayer = addNewStackLayer;\nconst replaceCurrentStackRoute = (request, newRoute) => {\n    if (newRoute) {\n        request[internal_types_1._LAYERS_STORE_PROPERTY].splice(-1, 1, newRoute);\n    }\n};\nexports.replaceCurrentStackRoute = replaceCurrentStackRoute;\n// generate route from existing stack on request object.\n// splash between stack layer will be deduped\n// [\"/first/\", \"/second\", \"/third/\"] => /first/second/third/\nconst generateRoute = (request) => {\n    return request[internal_types_1._LAYERS_STORE_PROPERTY].reduce((acc, sub) => acc.replace(/\\/+$/, '') + sub);\n};\nexports.generateRoute = generateRoute;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1jb25uZWN0L2J1aWxkL3NyYy91dGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUIsR0FBRyxnQ0FBZ0MsR0FBRyx3QkFBd0I7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxtQkFBTyxDQUFDLDZGQUFvQjtBQUMxQyx5QkFBeUIsbUJBQU8sQ0FBQyx3SEFBa0I7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckIiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWNvbm5lY3QvYnVpbGQvc3JjL3V0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZW5lcmF0ZVJvdXRlID0gZXhwb3J0cy5yZXBsYWNlQ3VycmVudFN0YWNrUm91dGUgPSBleHBvcnRzLmFkZE5ld1N0YWNrTGF5ZXIgPSB2b2lkIDA7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuY29uc3QgYXBpXzEgPSByZXF1aXJlKFwiQG9wZW50ZWxlbWV0cnkvYXBpXCIpO1xuY29uc3QgaW50ZXJuYWxfdHlwZXNfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsLXR5cGVzXCIpO1xuY29uc3QgYWRkTmV3U3RhY2tMYXllciA9IChyZXF1ZXN0KSA9PiB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocmVxdWVzdFtpbnRlcm5hbF90eXBlc18xLl9MQVlFUlNfU1RPUkVfUFJPUEVSVFldKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVlc3QsIGludGVybmFsX3R5cGVzXzEuX0xBWUVSU19TVE9SRV9QUk9QRVJUWSwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICB2YWx1ZTogW10sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXF1ZXN0W2ludGVybmFsX3R5cGVzXzEuX0xBWUVSU19TVE9SRV9QUk9QRVJUWV0ucHVzaCgnLycpO1xuICAgIGNvbnN0IHN0YWNrTGVuZ3RoID0gcmVxdWVzdFtpbnRlcm5hbF90eXBlc18xLl9MQVlFUlNfU1RPUkVfUFJPUEVSVFldLmxlbmd0aDtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBpZiAoc3RhY2tMZW5ndGggPT09IHJlcXVlc3RbaW50ZXJuYWxfdHlwZXNfMS5fTEFZRVJTX1NUT1JFX1BST1BFUlRZXS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJlcXVlc3RbaW50ZXJuYWxfdHlwZXNfMS5fTEFZRVJTX1NUT1JFX1BST1BFUlRZXS5wb3AoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGFwaV8xLmRpYWcud2FybignQ29ubmVjdDogVHJ5aW5nIHRvIHBvcCB0aGUgc3RhY2sgbXVsdGlwbGUgdGltZScpO1xuICAgICAgICB9XG4gICAgfTtcbn07XG5leHBvcnRzLmFkZE5ld1N0YWNrTGF5ZXIgPSBhZGROZXdTdGFja0xheWVyO1xuY29uc3QgcmVwbGFjZUN1cnJlbnRTdGFja1JvdXRlID0gKHJlcXVlc3QsIG5ld1JvdXRlKSA9PiB7XG4gICAgaWYgKG5ld1JvdXRlKSB7XG4gICAgICAgIHJlcXVlc3RbaW50ZXJuYWxfdHlwZXNfMS5fTEFZRVJTX1NUT1JFX1BST1BFUlRZXS5zcGxpY2UoLTEsIDEsIG5ld1JvdXRlKTtcbiAgICB9XG59O1xuZXhwb3J0cy5yZXBsYWNlQ3VycmVudFN0YWNrUm91dGUgPSByZXBsYWNlQ3VycmVudFN0YWNrUm91dGU7XG4vLyBnZW5lcmF0ZSByb3V0ZSBmcm9tIGV4aXN0aW5nIHN0YWNrIG9uIHJlcXVlc3Qgb2JqZWN0LlxuLy8gc3BsYXNoIGJldHdlZW4gc3RhY2sgbGF5ZXIgd2lsbCBiZSBkZWR1cGVkXG4vLyBbXCIvZmlyc3QvXCIsIFwiL3NlY29uZFwiLCBcIi90aGlyZC9cIl0gPT4gL2ZpcnN0L3NlY29uZC90aGlyZC9cbmNvbnN0IGdlbmVyYXRlUm91dGUgPSAocmVxdWVzdCkgPT4ge1xuICAgIHJldHVybiByZXF1ZXN0W2ludGVybmFsX3R5cGVzXzEuX0xBWUVSU19TVE9SRV9QUk9QRVJUWV0ucmVkdWNlKChhY2MsIHN1YikgPT4gYWNjLnJlcGxhY2UoL1xcLyskLywgJycpICsgc3ViKTtcbn07XG5leHBvcnRzLmdlbmVyYXRlUm91dGUgPSBnZW5lcmF0ZVJvdXRlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-connect/build/src/utils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-connect/build/src/version.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-connect/build/src/version.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PACKAGE_NAME = exports.PACKAGE_VERSION = void 0;\n// this is autogenerated file, see scripts/version-update.js\nexports.PACKAGE_VERSION = '0.47.0';\nexports.PACKAGE_NAME = '@opentelemetry/instrumentation-connect';\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1jb25uZWN0L2J1aWxkL3NyYy92ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQixHQUFHLHVCQUF1QjtBQUM5QztBQUNBLHVCQUF1QjtBQUN2QixvQkFBb0I7QUFDcEIiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWNvbm5lY3QvYnVpbGQvc3JjL3ZlcnNpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5QQUNLQUdFX05BTUUgPSBleHBvcnRzLlBBQ0tBR0VfVkVSU0lPTiA9IHZvaWQgMDtcbi8vIHRoaXMgaXMgYXV0b2dlbmVyYXRlZCBmaWxlLCBzZWUgc2NyaXB0cy92ZXJzaW9uLXVwZGF0ZS5qc1xuZXhwb3J0cy5QQUNLQUdFX1ZFUlNJT04gPSAnMC40Ny4wJztcbmV4cG9ydHMuUEFDS0FHRV9OQU1FID0gJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1jb25uZWN0Jztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-connect/build/src/version.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-dataloader/build/src/index.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-dataloader/build/src/index.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DataloaderInstrumentation = void 0;\nvar instrumentation_1 = __webpack_require__(/*! ./instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-dataloader/build/src/instrumentation.js\");\nObject.defineProperty(exports, \"DataloaderInstrumentation\", ({ enumerable: true, get: function () { return instrumentation_1.DataloaderInstrumentation; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1kYXRhbG9hZGVyL2J1aWxkL3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQ0FBaUM7QUFDakMsd0JBQXdCLG1CQUFPLENBQUMsNkhBQW1CO0FBQ25ELDZEQUE0RCxFQUFFLHFDQUFxQyx1REFBdUQsRUFBQztBQUMzSiIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tZGF0YWxvYWRlci9idWlsZC9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5EYXRhbG9hZGVySW5zdHJ1bWVudGF0aW9uID0gdm9pZCAwO1xudmFyIGluc3RydW1lbnRhdGlvbl8xID0gcmVxdWlyZShcIi4vaW5zdHJ1bWVudGF0aW9uXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRGF0YWxvYWRlckluc3RydW1lbnRhdGlvblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW5zdHJ1bWVudGF0aW9uXzEuRGF0YWxvYWRlckluc3RydW1lbnRhdGlvbjsgfSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-dataloader/build/src/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-dataloader/build/src/instrumentation.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-dataloader/build/src/instrumentation.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = \"/monitoring\";globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.2\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DataloaderInstrumentation = void 0;\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\n/** @knipignore */\nconst version_1 = __webpack_require__(/*! ./version */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-dataloader/build/src/version.js\");\nconst MODULE_NAME = 'dataloader';\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction extractModuleExports(module) {\n    return module[Symbol.toStringTag] === 'Module'\n        ? module.default // ESM\n        : module; // CommonJS\n}\nclass DataloaderInstrumentation extends instrumentation_1.InstrumentationBase {\n    constructor(config = {}) {\n        super(version_1.PACKAGE_NAME, version_1.PACKAGE_VERSION, config);\n    }\n    init() {\n        return [\n            new instrumentation_1.InstrumentationNodeModuleDefinition(MODULE_NAME, ['>=2.0.0 <3'], module => {\n                const dataloader = extractModuleExports(module);\n                this._patchLoad(dataloader.prototype);\n                this._patchLoadMany(dataloader.prototype);\n                this._patchPrime(dataloader.prototype);\n                this._patchClear(dataloader.prototype);\n                this._patchClearAll(dataloader.prototype);\n                return this._getPatchedConstructor(dataloader);\n            }, module => {\n                const dataloader = extractModuleExports(module);\n                ['load', 'loadMany', 'prime', 'clear', 'clearAll'].forEach(method => {\n                    if ((0, instrumentation_1.isWrapped)(dataloader.prototype[method])) {\n                        this._unwrap(dataloader.prototype, method);\n                    }\n                });\n            }),\n        ];\n    }\n    shouldCreateSpans() {\n        const config = this.getConfig();\n        const hasParentSpan = api_1.trace.getSpan(api_1.context.active()) !== undefined;\n        return hasParentSpan || !config.requireParentSpan;\n    }\n    getSpanName(dataloader, operation) {\n        const dataloaderName = dataloader.name;\n        if (dataloaderName === undefined || dataloaderName === null) {\n            return `${MODULE_NAME}.${operation}`;\n        }\n        return `${MODULE_NAME}.${operation} ${dataloaderName}`;\n    }\n    _wrapBatchLoadFn(batchLoadFn) {\n        const instrumentation = this;\n        return function patchedBatchLoadFn(...args) {\n            if (!instrumentation.isEnabled() ||\n                !instrumentation.shouldCreateSpans()) {\n                return batchLoadFn.call(this, ...args);\n            }\n            const parent = api_1.context.active();\n            const span = instrumentation.tracer.startSpan(instrumentation.getSpanName(this, 'batch'), { links: this._batch?.spanLinks }, parent);\n            return api_1.context.with(api_1.trace.setSpan(parent, span), () => {\n                return batchLoadFn.apply(this, args)\n                    .then(value => {\n                    span.end();\n                    return value;\n                })\n                    .catch(err => {\n                    span.recordException(err);\n                    span.setStatus({\n                        code: api_1.SpanStatusCode.ERROR,\n                        message: err.message,\n                    });\n                    span.end();\n                    throw err;\n                });\n            });\n        };\n    }\n    _getPatchedConstructor(constructor) {\n        const instrumentation = this;\n        const prototype = constructor.prototype;\n        if (!instrumentation.isEnabled()) {\n            return constructor;\n        }\n        function PatchedDataloader(...args) {\n            // BatchLoadFn is the first constructor argument\n            // https://github.com/graphql/dataloader/blob/77c2cd7ca97e8795242018ebc212ce2487e729d2/src/index.js#L47\n            if (typeof args[0] === 'function') {\n                if ((0, instrumentation_1.isWrapped)(args[0])) {\n                    instrumentation._unwrap(args, 0);\n                }\n                args[0] = instrumentation._wrapBatchLoadFn(args[0]);\n            }\n            return constructor.apply(this, args);\n        }\n        PatchedDataloader.prototype = prototype;\n        return PatchedDataloader;\n    }\n    _patchLoad(proto) {\n        if ((0, instrumentation_1.isWrapped)(proto.load)) {\n            this._unwrap(proto, 'load');\n        }\n        this._wrap(proto, 'load', this._getPatchedLoad.bind(this));\n    }\n    _getPatchedLoad(original) {\n        const instrumentation = this;\n        return function patchedLoad(...args) {\n            if (!instrumentation.shouldCreateSpans()) {\n                return original.call(this, ...args);\n            }\n            const parent = api_1.context.active();\n            const span = instrumentation.tracer.startSpan(instrumentation.getSpanName(this, 'load'), { kind: api_1.SpanKind.CLIENT }, parent);\n            return api_1.context.with(api_1.trace.setSpan(parent, span), () => {\n                const result = original\n                    .call(this, ...args)\n                    .then(value => {\n                    span.end();\n                    return value;\n                })\n                    .catch(err => {\n                    span.recordException(err);\n                    span.setStatus({\n                        code: api_1.SpanStatusCode.ERROR,\n                        message: err.message,\n                    });\n                    span.end();\n                    throw err;\n                });\n                const loader = this;\n                if (loader._batch) {\n                    if (!loader._batch.spanLinks) {\n                        loader._batch.spanLinks = [];\n                    }\n                    loader._batch.spanLinks.push({ context: span.spanContext() });\n                }\n                return result;\n            });\n        };\n    }\n    _patchLoadMany(proto) {\n        if ((0, instrumentation_1.isWrapped)(proto.loadMany)) {\n            this._unwrap(proto, 'loadMany');\n        }\n        this._wrap(proto, 'loadMany', this._getPatchedLoadMany.bind(this));\n    }\n    _getPatchedLoadMany(original) {\n        const instrumentation = this;\n        return function patchedLoadMany(...args) {\n            if (!instrumentation.shouldCreateSpans()) {\n                return original.call(this, ...args);\n            }\n            const parent = api_1.context.active();\n            const span = instrumentation.tracer.startSpan(instrumentation.getSpanName(this, 'loadMany'), { kind: api_1.SpanKind.CLIENT }, parent);\n            return api_1.context.with(api_1.trace.setSpan(parent, span), () => {\n                // .loadMany never rejects, as errors from internal .load\n                // calls are caught by dataloader lib\n                return original.call(this, ...args).then(value => {\n                    span.end();\n                    return value;\n                });\n            });\n        };\n    }\n    _patchPrime(proto) {\n        if ((0, instrumentation_1.isWrapped)(proto.prime)) {\n            this._unwrap(proto, 'prime');\n        }\n        this._wrap(proto, 'prime', this._getPatchedPrime.bind(this));\n    }\n    _getPatchedPrime(original) {\n        const instrumentation = this;\n        return function patchedPrime(...args) {\n            if (!instrumentation.shouldCreateSpans()) {\n                return original.call(this, ...args);\n            }\n            const parent = api_1.context.active();\n            const span = instrumentation.tracer.startSpan(instrumentation.getSpanName(this, 'prime'), { kind: api_1.SpanKind.CLIENT }, parent);\n            const ret = api_1.context.with(api_1.trace.setSpan(parent, span), () => {\n                return original.call(this, ...args);\n            });\n            span.end();\n            return ret;\n        };\n    }\n    _patchClear(proto) {\n        if ((0, instrumentation_1.isWrapped)(proto.clear)) {\n            this._unwrap(proto, 'clear');\n        }\n        this._wrap(proto, 'clear', this._getPatchedClear.bind(this));\n    }\n    _getPatchedClear(original) {\n        const instrumentation = this;\n        return function patchedClear(...args) {\n            if (!instrumentation.shouldCreateSpans()) {\n                return original.call(this, ...args);\n            }\n            const parent = api_1.context.active();\n            const span = instrumentation.tracer.startSpan(instrumentation.getSpanName(this, 'clear'), { kind: api_1.SpanKind.CLIENT }, parent);\n            const ret = api_1.context.with(api_1.trace.setSpan(parent, span), () => {\n                return original.call(this, ...args);\n            });\n            span.end();\n            return ret;\n        };\n    }\n    _patchClearAll(proto) {\n        if ((0, instrumentation_1.isWrapped)(proto.clearAll)) {\n            this._unwrap(proto, 'clearAll');\n        }\n        this._wrap(proto, 'clearAll', this._getPatchedClearAll.bind(this));\n    }\n    _getPatchedClearAll(original) {\n        const instrumentation = this;\n        return function patchedClearAll(...args) {\n            if (!instrumentation.shouldCreateSpans()) {\n                return original.call(this, ...args);\n            }\n            const parent = api_1.context.active();\n            const span = instrumentation.tracer.startSpan(instrumentation.getSpanName(this, 'clearAll'), { kind: api_1.SpanKind.CLIENT }, parent);\n            const ret = api_1.context.with(api_1.trace.setSpan(parent, span), () => {\n                return original.call(this, ...args);\n            });\n            span.end();\n            return ret;\n        };\n    }\n}\nexports.DataloaderInstrumentation = DataloaderInstrumentation;\n//# sourceMappingURL=instrumentation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1kYXRhbG9hZGVyL2J1aWxkL3NyYy9pbnN0cnVtZW50YXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQWEsQ0FBQyx3REFBd0QseUNBQXlDLDBDQUEwQyw4Q0FBOEM7QUFDdk07QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlDQUFpQztBQUNqQywwQkFBMEIsbUJBQU8sQ0FBQyxxSEFBZ0M7QUFDbEUsY0FBYyxtQkFBTyxDQUFDLDZGQUFvQjtBQUMxQztBQUNBLGtCQUFrQixtQkFBTyxDQUFDLDZHQUFXO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsWUFBWSxHQUFHLFVBQVU7QUFDL0M7QUFDQSxrQkFBa0IsWUFBWSxHQUFHLFdBQVcsRUFBRSxlQUFlO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdHQUF3RywrQkFBK0I7QUFDdkk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1R0FBdUcsNkJBQTZCO0FBQ3BJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCw2QkFBNkI7QUFDaEY7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyR0FBMkcsNkJBQTZCO0FBQ3hJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0dBQXdHLDZCQUE2QjtBQUNySTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3R0FBd0csNkJBQTZCO0FBQ3JJO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJHQUEyRyw2QkFBNkI7QUFDeEk7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1kYXRhbG9hZGVyL2J1aWxkL3NyYy9pbnN0cnVtZW50YXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7O2dsb2JhbFRoaXNbXCJfc2VudHJ5UmV3cml0ZXNUdW5uZWxQYXRoXCJdID0gXCIvbW9uaXRvcmluZ1wiO2dsb2JhbFRoaXNbXCJTRU5UUllfUkVMRUFTRVwiXSA9IHVuZGVmaW5lZDtnbG9iYWxUaGlzW1wiX3NlbnRyeUJhc2VQYXRoXCJdID0gdW5kZWZpbmVkO2dsb2JhbFRoaXNbXCJfc2VudHJ5TmV4dEpzVmVyc2lvblwiXSA9IFwiMTUuNS4yXCI7Z2xvYmFsVGhpc1tcIl9zZW50cnlSZXdyaXRlRnJhbWVzRGlzdERpclwiXSA9IFwiLm5leHRcIjtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRhdGFsb2FkZXJJbnN0cnVtZW50YXRpb24gPSB2b2lkIDA7XG5jb25zdCBpbnN0cnVtZW50YXRpb25fMSA9IHJlcXVpcmUoXCJAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb25cIik7XG5jb25zdCBhcGlfMSA9IHJlcXVpcmUoXCJAb3BlbnRlbGVtZXRyeS9hcGlcIik7XG4vKiogQGtuaXBpZ25vcmUgKi9cbmNvbnN0IHZlcnNpb25fMSA9IHJlcXVpcmUoXCIuL3ZlcnNpb25cIik7XG5jb25zdCBNT0RVTEVfTkFNRSA9ICdkYXRhbG9hZGVyJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5mdW5jdGlvbiBleHRyYWN0TW9kdWxlRXhwb3J0cyhtb2R1bGUpIHtcbiAgICByZXR1cm4gbW9kdWxlW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09ICdNb2R1bGUnXG4gICAgICAgID8gbW9kdWxlLmRlZmF1bHQgLy8gRVNNXG4gICAgICAgIDogbW9kdWxlOyAvLyBDb21tb25KU1xufVxuY2xhc3MgRGF0YWxvYWRlckluc3RydW1lbnRhdGlvbiBleHRlbmRzIGluc3RydW1lbnRhdGlvbl8xLkluc3RydW1lbnRhdGlvbkJhc2Uge1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKHZlcnNpb25fMS5QQUNLQUdFX05BTUUsIHZlcnNpb25fMS5QQUNLQUdFX1ZFUlNJT04sIGNvbmZpZyk7XG4gICAgfVxuICAgIGluaXQoKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBuZXcgaW5zdHJ1bWVudGF0aW9uXzEuSW5zdHJ1bWVudGF0aW9uTm9kZU1vZHVsZURlZmluaXRpb24oTU9EVUxFX05BTUUsIFsnPj0yLjAuMCA8MyddLCBtb2R1bGUgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGFsb2FkZXIgPSBleHRyYWN0TW9kdWxlRXhwb3J0cyhtb2R1bGUpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3BhdGNoTG9hZChkYXRhbG9hZGVyLnByb3RvdHlwZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcGF0Y2hMb2FkTWFueShkYXRhbG9hZGVyLnByb3RvdHlwZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcGF0Y2hQcmltZShkYXRhbG9hZGVyLnByb3RvdHlwZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcGF0Y2hDbGVhcihkYXRhbG9hZGVyLnByb3RvdHlwZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcGF0Y2hDbGVhckFsbChkYXRhbG9hZGVyLnByb3RvdHlwZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldFBhdGNoZWRDb25zdHJ1Y3RvcihkYXRhbG9hZGVyKTtcbiAgICAgICAgICAgIH0sIG1vZHVsZSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YWxvYWRlciA9IGV4dHJhY3RNb2R1bGVFeHBvcnRzKG1vZHVsZSk7XG4gICAgICAgICAgICAgICAgWydsb2FkJywgJ2xvYWRNYW55JywgJ3ByaW1lJywgJ2NsZWFyJywgJ2NsZWFyQWxsJ10uZm9yRWFjaChtZXRob2QgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoKDAsIGluc3RydW1lbnRhdGlvbl8xLmlzV3JhcHBlZCkoZGF0YWxvYWRlci5wcm90b3R5cGVbbWV0aG9kXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Vud3JhcChkYXRhbG9hZGVyLnByb3RvdHlwZSwgbWV0aG9kKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSksXG4gICAgICAgIF07XG4gICAgfVxuICAgIHNob3VsZENyZWF0ZVNwYW5zKCkge1xuICAgICAgICBjb25zdCBjb25maWcgPSB0aGlzLmdldENvbmZpZygpO1xuICAgICAgICBjb25zdCBoYXNQYXJlbnRTcGFuID0gYXBpXzEudHJhY2UuZ2V0U3BhbihhcGlfMS5jb250ZXh0LmFjdGl2ZSgpKSAhPT0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gaGFzUGFyZW50U3BhbiB8fCAhY29uZmlnLnJlcXVpcmVQYXJlbnRTcGFuO1xuICAgIH1cbiAgICBnZXRTcGFuTmFtZShkYXRhbG9hZGVyLCBvcGVyYXRpb24pIHtcbiAgICAgICAgY29uc3QgZGF0YWxvYWRlck5hbWUgPSBkYXRhbG9hZGVyLm5hbWU7XG4gICAgICAgIGlmIChkYXRhbG9hZGVyTmFtZSA9PT0gdW5kZWZpbmVkIHx8IGRhdGFsb2FkZXJOYW1lID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gYCR7TU9EVUxFX05BTUV9LiR7b3BlcmF0aW9ufWA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGAke01PRFVMRV9OQU1FfS4ke29wZXJhdGlvbn0gJHtkYXRhbG9hZGVyTmFtZX1gO1xuICAgIH1cbiAgICBfd3JhcEJhdGNoTG9hZEZuKGJhdGNoTG9hZEZuKSB7XG4gICAgICAgIGNvbnN0IGluc3RydW1lbnRhdGlvbiA9IHRoaXM7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBwYXRjaGVkQmF0Y2hMb2FkRm4oLi4uYXJncykge1xuICAgICAgICAgICAgaWYgKCFpbnN0cnVtZW50YXRpb24uaXNFbmFibGVkKCkgfHxcbiAgICAgICAgICAgICAgICAhaW5zdHJ1bWVudGF0aW9uLnNob3VsZENyZWF0ZVNwYW5zKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYmF0Y2hMb2FkRm4uY2FsbCh0aGlzLCAuLi5hcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHBhcmVudCA9IGFwaV8xLmNvbnRleHQuYWN0aXZlKCk7XG4gICAgICAgICAgICBjb25zdCBzcGFuID0gaW5zdHJ1bWVudGF0aW9uLnRyYWNlci5zdGFydFNwYW4oaW5zdHJ1bWVudGF0aW9uLmdldFNwYW5OYW1lKHRoaXMsICdiYXRjaCcpLCB7IGxpbmtzOiB0aGlzLl9iYXRjaD8uc3BhbkxpbmtzIH0sIHBhcmVudCk7XG4gICAgICAgICAgICByZXR1cm4gYXBpXzEuY29udGV4dC53aXRoKGFwaV8xLnRyYWNlLnNldFNwYW4ocGFyZW50LCBzcGFuKSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBiYXRjaExvYWRGbi5hcHBseSh0aGlzLCBhcmdzKVxuICAgICAgICAgICAgICAgICAgICAudGhlbih2YWx1ZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHNwYW4uZW5kKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc3Bhbi5yZWNvcmRFeGNlcHRpb24oZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgc3Bhbi5zZXRTdGF0dXMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogYXBpXzEuU3BhblN0YXR1c0NvZGUuRVJST1IsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBlcnIubWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHNwYW4uZW5kKCk7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBfZ2V0UGF0Y2hlZENvbnN0cnVjdG9yKGNvbnN0cnVjdG9yKSB7XG4gICAgICAgIGNvbnN0IGluc3RydW1lbnRhdGlvbiA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHByb3RvdHlwZSA9IGNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgICAgICAgaWYgKCFpbnN0cnVtZW50YXRpb24uaXNFbmFibGVkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBjb25zdHJ1Y3RvcjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBQYXRjaGVkRGF0YWxvYWRlciguLi5hcmdzKSB7XG4gICAgICAgICAgICAvLyBCYXRjaExvYWRGbiBpcyB0aGUgZmlyc3QgY29uc3RydWN0b3IgYXJndW1lbnRcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2RhdGFsb2FkZXIvYmxvYi83N2MyY2Q3Y2E5N2U4Nzk1MjQyMDE4ZWJjMjEyY2UyNDg3ZTcyOWQyL3NyYy9pbmRleC5qcyNMNDdcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGlmICgoMCwgaW5zdHJ1bWVudGF0aW9uXzEuaXNXcmFwcGVkKShhcmdzWzBdKSkge1xuICAgICAgICAgICAgICAgICAgICBpbnN0cnVtZW50YXRpb24uX3Vud3JhcChhcmdzLCAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYXJnc1swXSA9IGluc3RydW1lbnRhdGlvbi5fd3JhcEJhdGNoTG9hZEZuKGFyZ3NbMF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIFBhdGNoZWREYXRhbG9hZGVyLnByb3RvdHlwZSA9IHByb3RvdHlwZTtcbiAgICAgICAgcmV0dXJuIFBhdGNoZWREYXRhbG9hZGVyO1xuICAgIH1cbiAgICBfcGF0Y2hMb2FkKHByb3RvKSB7XG4gICAgICAgIGlmICgoMCwgaW5zdHJ1bWVudGF0aW9uXzEuaXNXcmFwcGVkKShwcm90by5sb2FkKSkge1xuICAgICAgICAgICAgdGhpcy5fdW53cmFwKHByb3RvLCAnbG9hZCcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3dyYXAocHJvdG8sICdsb2FkJywgdGhpcy5fZ2V0UGF0Y2hlZExvYWQuYmluZCh0aGlzKSk7XG4gICAgfVxuICAgIF9nZXRQYXRjaGVkTG9hZChvcmlnaW5hbCkge1xuICAgICAgICBjb25zdCBpbnN0cnVtZW50YXRpb24gPSB0aGlzO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gcGF0Y2hlZExvYWQoLi4uYXJncykge1xuICAgICAgICAgICAgaWYgKCFpbnN0cnVtZW50YXRpb24uc2hvdWxkQ3JlYXRlU3BhbnMoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbC5jYWxsKHRoaXMsIC4uLmFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcGFyZW50ID0gYXBpXzEuY29udGV4dC5hY3RpdmUoKTtcbiAgICAgICAgICAgIGNvbnN0IHNwYW4gPSBpbnN0cnVtZW50YXRpb24udHJhY2VyLnN0YXJ0U3BhbihpbnN0cnVtZW50YXRpb24uZ2V0U3Bhbk5hbWUodGhpcywgJ2xvYWQnKSwgeyBraW5kOiBhcGlfMS5TcGFuS2luZC5DTElFTlQgfSwgcGFyZW50KTtcbiAgICAgICAgICAgIHJldHVybiBhcGlfMS5jb250ZXh0LndpdGgoYXBpXzEudHJhY2Uuc2V0U3BhbihwYXJlbnQsIHNwYW4pLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gb3JpZ2luYWxcbiAgICAgICAgICAgICAgICAgICAgLmNhbGwodGhpcywgLi4uYXJncylcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4odmFsdWUgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzcGFuLmVuZCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHNwYW4ucmVjb3JkRXhjZXB0aW9uKGVycik7XG4gICAgICAgICAgICAgICAgICAgIHNwYW4uc2V0U3RhdHVzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IGFwaV8xLlNwYW5TdGF0dXNDb2RlLkVSUk9SLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogZXJyLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzcGFuLmVuZCgpO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9hZGVyID0gdGhpcztcbiAgICAgICAgICAgICAgICBpZiAobG9hZGVyLl9iYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWxvYWRlci5fYmF0Y2guc3BhbkxpbmtzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2FkZXIuX2JhdGNoLnNwYW5MaW5rcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxvYWRlci5fYmF0Y2guc3BhbkxpbmtzLnB1c2goeyBjb250ZXh0OiBzcGFuLnNwYW5Db250ZXh0KCkgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgX3BhdGNoTG9hZE1hbnkocHJvdG8pIHtcbiAgICAgICAgaWYgKCgwLCBpbnN0cnVtZW50YXRpb25fMS5pc1dyYXBwZWQpKHByb3RvLmxvYWRNYW55KSkge1xuICAgICAgICAgICAgdGhpcy5fdW53cmFwKHByb3RvLCAnbG9hZE1hbnknKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl93cmFwKHByb3RvLCAnbG9hZE1hbnknLCB0aGlzLl9nZXRQYXRjaGVkTG9hZE1hbnkuYmluZCh0aGlzKSk7XG4gICAgfVxuICAgIF9nZXRQYXRjaGVkTG9hZE1hbnkob3JpZ2luYWwpIHtcbiAgICAgICAgY29uc3QgaW5zdHJ1bWVudGF0aW9uID0gdGhpcztcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIHBhdGNoZWRMb2FkTWFueSguLi5hcmdzKSB7XG4gICAgICAgICAgICBpZiAoIWluc3RydW1lbnRhdGlvbi5zaG91bGRDcmVhdGVTcGFucygpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsLmNhbGwodGhpcywgLi4uYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBwYXJlbnQgPSBhcGlfMS5jb250ZXh0LmFjdGl2ZSgpO1xuICAgICAgICAgICAgY29uc3Qgc3BhbiA9IGluc3RydW1lbnRhdGlvbi50cmFjZXIuc3RhcnRTcGFuKGluc3RydW1lbnRhdGlvbi5nZXRTcGFuTmFtZSh0aGlzLCAnbG9hZE1hbnknKSwgeyBraW5kOiBhcGlfMS5TcGFuS2luZC5DTElFTlQgfSwgcGFyZW50KTtcbiAgICAgICAgICAgIHJldHVybiBhcGlfMS5jb250ZXh0LndpdGgoYXBpXzEudHJhY2Uuc2V0U3BhbihwYXJlbnQsIHNwYW4pLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gLmxvYWRNYW55IG5ldmVyIHJlamVjdHMsIGFzIGVycm9ycyBmcm9tIGludGVybmFsIC5sb2FkXG4gICAgICAgICAgICAgICAgLy8gY2FsbHMgYXJlIGNhdWdodCBieSBkYXRhbG9hZGVyIGxpYlxuICAgICAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbC5jYWxsKHRoaXMsIC4uLmFyZ3MpLnRoZW4odmFsdWUgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzcGFuLmVuZCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgX3BhdGNoUHJpbWUocHJvdG8pIHtcbiAgICAgICAgaWYgKCgwLCBpbnN0cnVtZW50YXRpb25fMS5pc1dyYXBwZWQpKHByb3RvLnByaW1lKSkge1xuICAgICAgICAgICAgdGhpcy5fdW53cmFwKHByb3RvLCAncHJpbWUnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl93cmFwKHByb3RvLCAncHJpbWUnLCB0aGlzLl9nZXRQYXRjaGVkUHJpbWUuYmluZCh0aGlzKSk7XG4gICAgfVxuICAgIF9nZXRQYXRjaGVkUHJpbWUob3JpZ2luYWwpIHtcbiAgICAgICAgY29uc3QgaW5zdHJ1bWVudGF0aW9uID0gdGhpcztcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIHBhdGNoZWRQcmltZSguLi5hcmdzKSB7XG4gICAgICAgICAgICBpZiAoIWluc3RydW1lbnRhdGlvbi5zaG91bGRDcmVhdGVTcGFucygpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsLmNhbGwodGhpcywgLi4uYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBwYXJlbnQgPSBhcGlfMS5jb250ZXh0LmFjdGl2ZSgpO1xuICAgICAgICAgICAgY29uc3Qgc3BhbiA9IGluc3RydW1lbnRhdGlvbi50cmFjZXIuc3RhcnRTcGFuKGluc3RydW1lbnRhdGlvbi5nZXRTcGFuTmFtZSh0aGlzLCAncHJpbWUnKSwgeyBraW5kOiBhcGlfMS5TcGFuS2luZC5DTElFTlQgfSwgcGFyZW50KTtcbiAgICAgICAgICAgIGNvbnN0IHJldCA9IGFwaV8xLmNvbnRleHQud2l0aChhcGlfMS50cmFjZS5zZXRTcGFuKHBhcmVudCwgc3BhbiksICgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3JpZ2luYWwuY2FsbCh0aGlzLCAuLi5hcmdzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc3Bhbi5lbmQoKTtcbiAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgIH07XG4gICAgfVxuICAgIF9wYXRjaENsZWFyKHByb3RvKSB7XG4gICAgICAgIGlmICgoMCwgaW5zdHJ1bWVudGF0aW9uXzEuaXNXcmFwcGVkKShwcm90by5jbGVhcikpIHtcbiAgICAgICAgICAgIHRoaXMuX3Vud3JhcChwcm90bywgJ2NsZWFyJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fd3JhcChwcm90bywgJ2NsZWFyJywgdGhpcy5fZ2V0UGF0Y2hlZENsZWFyLmJpbmQodGhpcykpO1xuICAgIH1cbiAgICBfZ2V0UGF0Y2hlZENsZWFyKG9yaWdpbmFsKSB7XG4gICAgICAgIGNvbnN0IGluc3RydW1lbnRhdGlvbiA9IHRoaXM7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBwYXRjaGVkQ2xlYXIoLi4uYXJncykge1xuICAgICAgICAgICAgaWYgKCFpbnN0cnVtZW50YXRpb24uc2hvdWxkQ3JlYXRlU3BhbnMoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbC5jYWxsKHRoaXMsIC4uLmFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcGFyZW50ID0gYXBpXzEuY29udGV4dC5hY3RpdmUoKTtcbiAgICAgICAgICAgIGNvbnN0IHNwYW4gPSBpbnN0cnVtZW50YXRpb24udHJhY2VyLnN0YXJ0U3BhbihpbnN0cnVtZW50YXRpb24uZ2V0U3Bhbk5hbWUodGhpcywgJ2NsZWFyJyksIHsga2luZDogYXBpXzEuU3BhbktpbmQuQ0xJRU5UIH0sIHBhcmVudCk7XG4gICAgICAgICAgICBjb25zdCByZXQgPSBhcGlfMS5jb250ZXh0LndpdGgoYXBpXzEudHJhY2Uuc2V0U3BhbihwYXJlbnQsIHNwYW4pLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsLmNhbGwodGhpcywgLi4uYXJncyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHNwYW4uZW5kKCk7XG4gICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICB9O1xuICAgIH1cbiAgICBfcGF0Y2hDbGVhckFsbChwcm90bykge1xuICAgICAgICBpZiAoKDAsIGluc3RydW1lbnRhdGlvbl8xLmlzV3JhcHBlZCkocHJvdG8uY2xlYXJBbGwpKSB7XG4gICAgICAgICAgICB0aGlzLl91bndyYXAocHJvdG8sICdjbGVhckFsbCcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3dyYXAocHJvdG8sICdjbGVhckFsbCcsIHRoaXMuX2dldFBhdGNoZWRDbGVhckFsbC5iaW5kKHRoaXMpKTtcbiAgICB9XG4gICAgX2dldFBhdGNoZWRDbGVhckFsbChvcmlnaW5hbCkge1xuICAgICAgICBjb25zdCBpbnN0cnVtZW50YXRpb24gPSB0aGlzO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gcGF0Y2hlZENsZWFyQWxsKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIGlmICghaW5zdHJ1bWVudGF0aW9uLnNob3VsZENyZWF0ZVNwYW5zKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3JpZ2luYWwuY2FsbCh0aGlzLCAuLi5hcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHBhcmVudCA9IGFwaV8xLmNvbnRleHQuYWN0aXZlKCk7XG4gICAgICAgICAgICBjb25zdCBzcGFuID0gaW5zdHJ1bWVudGF0aW9uLnRyYWNlci5zdGFydFNwYW4oaW5zdHJ1bWVudGF0aW9uLmdldFNwYW5OYW1lKHRoaXMsICdjbGVhckFsbCcpLCB7IGtpbmQ6IGFwaV8xLlNwYW5LaW5kLkNMSUVOVCB9LCBwYXJlbnQpO1xuICAgICAgICAgICAgY29uc3QgcmV0ID0gYXBpXzEuY29udGV4dC53aXRoKGFwaV8xLnRyYWNlLnNldFNwYW4ocGFyZW50LCBzcGFuKSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbC5jYWxsKHRoaXMsIC4uLmFyZ3MpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzcGFuLmVuZCgpO1xuICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnRzLkRhdGFsb2FkZXJJbnN0cnVtZW50YXRpb24gPSBEYXRhbG9hZGVySW5zdHJ1bWVudGF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5zdHJ1bWVudGF0aW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-dataloader/build/src/instrumentation.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-dataloader/build/src/version.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-dataloader/build/src/version.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PACKAGE_NAME = exports.PACKAGE_VERSION = void 0;\n// this is autogenerated file, see scripts/version-update.js\nexports.PACKAGE_VERSION = '0.21.1';\nexports.PACKAGE_NAME = '@opentelemetry/instrumentation-dataloader';\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1kYXRhbG9hZGVyL2J1aWxkL3NyYy92ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQixHQUFHLHVCQUF1QjtBQUM5QztBQUNBLHVCQUF1QjtBQUN2QixvQkFBb0I7QUFDcEIiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWRhdGFsb2FkZXIvYnVpbGQvc3JjL3ZlcnNpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5QQUNLQUdFX05BTUUgPSBleHBvcnRzLlBBQ0tBR0VfVkVSU0lPTiA9IHZvaWQgMDtcbi8vIHRoaXMgaXMgYXV0b2dlbmVyYXRlZCBmaWxlLCBzZWUgc2NyaXB0cy92ZXJzaW9uLXVwZGF0ZS5qc1xuZXhwb3J0cy5QQUNLQUdFX1ZFUlNJT04gPSAnMC4yMS4xJztcbmV4cG9ydHMuUEFDS0FHRV9OQU1FID0gJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1kYXRhbG9hZGVyJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-dataloader/build/src/version.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-express/build/src/enums/AttributeNames.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-express/build/src/enums/AttributeNames.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AttributeNames = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar AttributeNames;\n(function (AttributeNames) {\n    AttributeNames[\"EXPRESS_TYPE\"] = \"express.type\";\n    AttributeNames[\"EXPRESS_NAME\"] = \"express.name\";\n})(AttributeNames = exports.AttributeNames || (exports.AttributeNames = {}));\n//# sourceMappingURL=AttributeNames.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1leHByZXNzL2J1aWxkL3NyYy9lbnVtcy9BdHRyaWJ1dGVOYW1lcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDhDQUE4QyxzQkFBc0IsS0FBSztBQUMxRSIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tZXhwcmVzcy9idWlsZC9zcmMvZW51bXMvQXR0cmlidXRlTmFtZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkF0dHJpYnV0ZU5hbWVzID0gdm9pZCAwO1xuLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBBdHRyaWJ1dGVOYW1lcztcbihmdW5jdGlvbiAoQXR0cmlidXRlTmFtZXMpIHtcbiAgICBBdHRyaWJ1dGVOYW1lc1tcIkVYUFJFU1NfVFlQRVwiXSA9IFwiZXhwcmVzcy50eXBlXCI7XG4gICAgQXR0cmlidXRlTmFtZXNbXCJFWFBSRVNTX05BTUVcIl0gPSBcImV4cHJlc3MubmFtZVwiO1xufSkoQXR0cmlidXRlTmFtZXMgPSBleHBvcnRzLkF0dHJpYnV0ZU5hbWVzIHx8IChleHBvcnRzLkF0dHJpYnV0ZU5hbWVzID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUF0dHJpYnV0ZU5hbWVzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-express/build/src/enums/AttributeNames.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-express/build/src/enums/ExpressLayerType.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-express/build/src/enums/ExpressLayerType.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ExpressLayerType = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar ExpressLayerType;\n(function (ExpressLayerType) {\n    ExpressLayerType[\"ROUTER\"] = \"router\";\n    ExpressLayerType[\"MIDDLEWARE\"] = \"middleware\";\n    ExpressLayerType[\"REQUEST_HANDLER\"] = \"request_handler\";\n})(ExpressLayerType = exports.ExpressLayerType || (exports.ExpressLayerType = {}));\n//# sourceMappingURL=ExpressLayerType.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1leHByZXNzL2J1aWxkL3NyYy9lbnVtcy9FeHByZXNzTGF5ZXJUeXBlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxrREFBa0Qsd0JBQXdCLEtBQUs7QUFDaEYiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWV4cHJlc3MvYnVpbGQvc3JjL2VudW1zL0V4cHJlc3NMYXllclR5cGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkV4cHJlc3NMYXllclR5cGUgPSB2b2lkIDA7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xudmFyIEV4cHJlc3NMYXllclR5cGU7XG4oZnVuY3Rpb24gKEV4cHJlc3NMYXllclR5cGUpIHtcbiAgICBFeHByZXNzTGF5ZXJUeXBlW1wiUk9VVEVSXCJdID0gXCJyb3V0ZXJcIjtcbiAgICBFeHByZXNzTGF5ZXJUeXBlW1wiTUlERExFV0FSRVwiXSA9IFwibWlkZGxld2FyZVwiO1xuICAgIEV4cHJlc3NMYXllclR5cGVbXCJSRVFVRVNUX0hBTkRMRVJcIl0gPSBcInJlcXVlc3RfaGFuZGxlclwiO1xufSkoRXhwcmVzc0xheWVyVHlwZSA9IGV4cG9ydHMuRXhwcmVzc0xheWVyVHlwZSB8fCAoZXhwb3J0cy5FeHByZXNzTGF5ZXJUeXBlID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUV4cHJlc3NMYXllclR5cGUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-express/build/src/enums/ExpressLayerType.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-express/build/src/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-express/build/src/index.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AttributeNames = exports.ExpressLayerType = exports.ExpressInstrumentation = void 0;\nvar instrumentation_1 = __webpack_require__(/*! ./instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-express/build/src/instrumentation.js\");\nObject.defineProperty(exports, \"ExpressInstrumentation\", ({ enumerable: true, get: function () { return instrumentation_1.ExpressInstrumentation; } }));\nvar ExpressLayerType_1 = __webpack_require__(/*! ./enums/ExpressLayerType */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-express/build/src/enums/ExpressLayerType.js\");\nObject.defineProperty(exports, \"ExpressLayerType\", ({ enumerable: true, get: function () { return ExpressLayerType_1.ExpressLayerType; } }));\nvar AttributeNames_1 = __webpack_require__(/*! ./enums/AttributeNames */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-express/build/src/enums/AttributeNames.js\");\nObject.defineProperty(exports, \"AttributeNames\", ({ enumerable: true, get: function () { return AttributeNames_1.AttributeNames; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1leHByZXNzL2J1aWxkL3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0IsR0FBRyx3QkFBd0IsR0FBRyw4QkFBOEI7QUFDbEYsd0JBQXdCLG1CQUFPLENBQUMsMEhBQW1CO0FBQ25ELDBEQUF5RCxFQUFFLHFDQUFxQyxvREFBb0QsRUFBQztBQUNySix5QkFBeUIsbUJBQU8sQ0FBQyx3SUFBMEI7QUFDM0Qsb0RBQW1ELEVBQUUscUNBQXFDLCtDQUErQyxFQUFDO0FBQzFJLHVCQUF1QixtQkFBTyxDQUFDLG9JQUF3QjtBQUN2RCxrREFBaUQsRUFBRSxxQ0FBcUMsMkNBQTJDLEVBQUM7QUFDcEkiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWV4cHJlc3MvYnVpbGQvc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXR0cmlidXRlTmFtZXMgPSBleHBvcnRzLkV4cHJlc3NMYXllclR5cGUgPSBleHBvcnRzLkV4cHJlc3NJbnN0cnVtZW50YXRpb24gPSB2b2lkIDA7XG52YXIgaW5zdHJ1bWVudGF0aW9uXzEgPSByZXF1aXJlKFwiLi9pbnN0cnVtZW50YXRpb25cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJFeHByZXNzSW5zdHJ1bWVudGF0aW9uXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpbnN0cnVtZW50YXRpb25fMS5FeHByZXNzSW5zdHJ1bWVudGF0aW9uOyB9IH0pO1xudmFyIEV4cHJlc3NMYXllclR5cGVfMSA9IHJlcXVpcmUoXCIuL2VudW1zL0V4cHJlc3NMYXllclR5cGVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJFeHByZXNzTGF5ZXJUeXBlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBFeHByZXNzTGF5ZXJUeXBlXzEuRXhwcmVzc0xheWVyVHlwZTsgfSB9KTtcbnZhciBBdHRyaWJ1dGVOYW1lc18xID0gcmVxdWlyZShcIi4vZW51bXMvQXR0cmlidXRlTmFtZXNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJBdHRyaWJ1dGVOYW1lc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQXR0cmlidXRlTmFtZXNfMS5BdHRyaWJ1dGVOYW1lczsgfSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-express/build/src/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-express/build/src/instrumentation.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-express/build/src/instrumentation.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = \"/monitoring\";globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.2\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ExpressInstrumentation = void 0;\nconst core_1 = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/index.js\");\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst ExpressLayerType_1 = __webpack_require__(/*! ./enums/ExpressLayerType */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-express/build/src/enums/ExpressLayerType.js\");\nconst AttributeNames_1 = __webpack_require__(/*! ./enums/AttributeNames */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-express/build/src/enums/AttributeNames.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-express/build/src/utils.js\");\n/** @knipignore */\nconst version_1 = __webpack_require__(/*! ./version */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-express/build/src/version.js\");\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst internal_types_1 = __webpack_require__(/*! ./internal-types */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-express/build/src/internal-types.js\");\n/** Express instrumentation for OpenTelemetry */\nclass ExpressInstrumentation extends instrumentation_1.InstrumentationBase {\n    constructor(config = {}) {\n        super(version_1.PACKAGE_NAME, version_1.PACKAGE_VERSION, config);\n    }\n    init() {\n        return [\n            new instrumentation_1.InstrumentationNodeModuleDefinition('express', ['>=4.0.0 <6'], moduleExports => {\n                const isExpressWithRouterPrototype = typeof moduleExports?.Router?.prototype?.route === 'function';\n                const routerProto = isExpressWithRouterPrototype\n                    ? moduleExports.Router.prototype // Express v5\n                    : moduleExports.Router; // Express v4\n                // patch express.Router.route\n                if ((0, instrumentation_1.isWrapped)(routerProto.route)) {\n                    this._unwrap(routerProto, 'route');\n                }\n                this._wrap(routerProto, 'route', this._getRoutePatch());\n                // patch express.Router.use\n                if ((0, instrumentation_1.isWrapped)(routerProto.use)) {\n                    this._unwrap(routerProto, 'use');\n                }\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                this._wrap(routerProto, 'use', this._getRouterUsePatch());\n                // patch express.Application.use\n                if ((0, instrumentation_1.isWrapped)(moduleExports.application.use)) {\n                    this._unwrap(moduleExports.application, 'use');\n                }\n                this._wrap(moduleExports.application, 'use', \n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                this._getAppUsePatch(isExpressWithRouterPrototype));\n                return moduleExports;\n            }, moduleExports => {\n                if (moduleExports === undefined)\n                    return;\n                const isExpressWithRouterPrototype = typeof moduleExports?.Router?.prototype?.route === 'function';\n                const routerProto = isExpressWithRouterPrototype\n                    ? moduleExports.Router.prototype\n                    : moduleExports.Router;\n                this._unwrap(routerProto, 'route');\n                this._unwrap(routerProto, 'use');\n                this._unwrap(moduleExports.application, 'use');\n            }),\n        ];\n    }\n    /**\n     * Get the patch for Router.route function\n     */\n    _getRoutePatch() {\n        const instrumentation = this;\n        return function (original) {\n            return function route_trace(...args) {\n                const route = original.apply(this, args);\n                const layer = this.stack[this.stack.length - 1];\n                instrumentation._applyPatch(layer, (0, utils_1.getLayerPath)(args));\n                return route;\n            };\n        };\n    }\n    /**\n     * Get the patch for Router.use function\n     */\n    _getRouterUsePatch() {\n        const instrumentation = this;\n        return function (original) {\n            return function use(...args) {\n                const route = original.apply(this, args);\n                const layer = this.stack[this.stack.length - 1];\n                instrumentation._applyPatch(layer, (0, utils_1.getLayerPath)(args));\n                return route;\n            };\n        };\n    }\n    /**\n     * Get the patch for Application.use function\n     */\n    _getAppUsePatch(isExpressWithRouterPrototype) {\n        const instrumentation = this;\n        return function (original) {\n            return function use(...args) {\n                // If we access app.router in express 4.x we trigger an assertion error.\n                // This property existed in v3, was removed in v4 and then re-added in v5.\n                const router = isExpressWithRouterPrototype\n                    ? this.router\n                    : this._router;\n                const route = original.apply(this, args);\n                if (router) {\n                    const layer = router.stack[router.stack.length - 1];\n                    instrumentation._applyPatch(layer, (0, utils_1.getLayerPath)(args));\n                }\n                return route;\n            };\n        };\n    }\n    /** Patch each express layer to create span and propagate context */\n    _applyPatch(layer, layerPath) {\n        const instrumentation = this;\n        // avoid patching multiple times the same layer\n        if (layer[internal_types_1.kLayerPatched] === true)\n            return;\n        layer[internal_types_1.kLayerPatched] = true;\n        this._wrap(layer, 'handle', original => {\n            // TODO: instrument error handlers\n            if (original.length === 4)\n                return original;\n            const patched = function (req, res) {\n                const { isLayerPathStored } = (0, utils_1.storeLayerPath)(req, layerPath);\n                const constructedRoute = (0, utils_1.getConstructedRoute)(req);\n                const actualMatchedRoute = (0, utils_1.getActualMatchedRoute)(req);\n                const attributes = {\n                    [semantic_conventions_1.ATTR_HTTP_ROUTE]: actualMatchedRoute,\n                };\n                const metadata = (0, utils_1.getLayerMetadata)(constructedRoute, layer, layerPath);\n                const type = metadata.attributes[AttributeNames_1.AttributeNames.EXPRESS_TYPE];\n                const rpcMetadata = (0, core_1.getRPCMetadata)(api_1.context.active());\n                if (rpcMetadata?.type === core_1.RPCType.HTTP) {\n                    rpcMetadata.route = actualMatchedRoute;\n                }\n                // verify against the config if the layer should be ignored\n                if ((0, utils_1.isLayerIgnored)(metadata.name, type, instrumentation.getConfig())) {\n                    if (type === ExpressLayerType_1.ExpressLayerType.MIDDLEWARE) {\n                        req[internal_types_1._LAYERS_STORE_PROPERTY].pop();\n                    }\n                    return original.apply(this, arguments);\n                }\n                if (api_1.trace.getSpan(api_1.context.active()) === undefined) {\n                    return original.apply(this, arguments);\n                }\n                const spanName = instrumentation._getSpanName({\n                    request: req,\n                    layerType: type,\n                    route: constructedRoute,\n                }, metadata.name);\n                const span = instrumentation.tracer.startSpan(spanName, {\n                    attributes: Object.assign(attributes, metadata.attributes),\n                });\n                const parentContext = api_1.context.active();\n                let currentContext = api_1.trace.setSpan(parentContext, span);\n                const { requestHook } = instrumentation.getConfig();\n                if (requestHook) {\n                    (0, instrumentation_1.safeExecuteInTheMiddle)(() => requestHook(span, {\n                        request: req,\n                        layerType: type,\n                        route: constructedRoute,\n                    }), e => {\n                        if (e) {\n                            api_1.diag.error('express instrumentation: request hook failed', e);\n                        }\n                    }, true);\n                }\n                let spanHasEnded = false;\n                // TODO: Fix router spans (getRouterPath does not work properly) to\n                // have useful names before removing this branch\n                if (metadata.attributes[AttributeNames_1.AttributeNames.EXPRESS_TYPE] ===\n                    ExpressLayerType_1.ExpressLayerType.ROUTER) {\n                    span.end();\n                    spanHasEnded = true;\n                    currentContext = parentContext;\n                }\n                // listener for response.on('finish')\n                const onResponseFinish = () => {\n                    if (spanHasEnded === false) {\n                        spanHasEnded = true;\n                        span.end();\n                    }\n                };\n                // verify we have a callback\n                const args = Array.from(arguments);\n                const callbackIdx = args.findIndex(arg => typeof arg === 'function');\n                if (callbackIdx >= 0) {\n                    arguments[callbackIdx] = function () {\n                        // express considers anything but an empty value, \"route\" or \"router\"\n                        // passed to its callback to be an error\n                        const maybeError = arguments[0];\n                        const isError = ![undefined, null, 'route', 'router'].includes(maybeError);\n                        if (!spanHasEnded && isError) {\n                            const [error, message] = (0, utils_1.asErrorAndMessage)(maybeError);\n                            span.recordException(error);\n                            span.setStatus({\n                                code: api_1.SpanStatusCode.ERROR,\n                                message,\n                            });\n                        }\n                        if (spanHasEnded === false) {\n                            spanHasEnded = true;\n                            req.res?.removeListener('finish', onResponseFinish);\n                            span.end();\n                        }\n                        if (!(req.route && isError) && isLayerPathStored) {\n                            req[internal_types_1._LAYERS_STORE_PROPERTY].pop();\n                        }\n                        const callback = args[callbackIdx];\n                        return api_1.context.bind(parentContext, callback).apply(this, arguments);\n                    };\n                }\n                try {\n                    return api_1.context.bind(currentContext, original).apply(this, arguments);\n                }\n                catch (anyError) {\n                    const [error, message] = (0, utils_1.asErrorAndMessage)(anyError);\n                    span.recordException(error);\n                    span.setStatus({\n                        code: api_1.SpanStatusCode.ERROR,\n                        message,\n                    });\n                    throw anyError;\n                }\n                finally {\n                    /**\n                     * At this point if the callback wasn't called, that means either the\n                     * layer is asynchronous (so it will call the callback later on) or that\n                     * the layer directly ends the http response, so we'll hook into the \"finish\"\n                     * event to handle the later case.\n                     */\n                    if (!spanHasEnded) {\n                        res.once('finish', onResponseFinish);\n                    }\n                }\n            };\n            // `handle` isn't just a regular function in some cases. It also contains\n            // some properties holding metadata and state so we need to proxy them\n            // through through patched function\n            // ref: https://github.com/open-telemetry/opentelemetry-js-contrib/issues/1950\n            // Also some apps/libs do their own patching before OTEL and have these properties\n            // in the proptotype. So we use a `for...in` loop to get own properties and also\n            // any enumerable prop in the prototype chain\n            // ref: https://github.com/open-telemetry/opentelemetry-js-contrib/issues/2271\n            for (const key in original) {\n                Object.defineProperty(patched, key, {\n                    get() {\n                        return original[key];\n                    },\n                    set(value) {\n                        original[key] = value;\n                    },\n                });\n            }\n            return patched;\n        });\n    }\n    _getSpanName(info, defaultName) {\n        const { spanNameHook } = this.getConfig();\n        if (!(spanNameHook instanceof Function)) {\n            return defaultName;\n        }\n        try {\n            return spanNameHook(info, defaultName) ?? defaultName;\n        }\n        catch (err) {\n            api_1.diag.error('express instrumentation: error calling span name rewrite hook', err);\n            return defaultName;\n        }\n    }\n}\nexports.ExpressInstrumentation = ExpressInstrumentation;\n//# sourceMappingURL=instrumentation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-express/build/src/instrumentation.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-express/build/src/internal-types.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-express/build/src/internal-types.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports._LAYERS_STORE_PROPERTY = exports.kLayerPatched = void 0;\n/**\n * This symbol is used to mark express layer as being already instrumented\n * since its possible to use a given layer multiple times (ex: middlewares)\n */\nexports.kLayerPatched = Symbol('express-layer-patched');\n/**\n * This const define where on the `request` object the Instrumentation will mount the\n * current stack of express layer.\n *\n * It is necessary because express doesn't store the different layers\n * (ie: middleware, router etc) that it called to get to the current layer.\n * Given that, the only way to know the route of a given layer is to\n * store the path of where each previous layer has been mounted.\n *\n * ex: bodyParser > auth middleware > /users router > get /:id\n *  in this case the stack would be: [\"/users\", \"/:id\"]\n *\n * ex2: bodyParser > /api router > /v1 router > /users router > get /:id\n *  stack: [\"/api\", \"/v1\", \"/users\", \":id\"]\n *\n */\nexports._LAYERS_STORE_PROPERTY = '__ot_middlewares';\n//# sourceMappingURL=internal-types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1leHByZXNzL2J1aWxkL3NyYy9pbnRlcm5hbC10eXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw4QkFBOEIsR0FBRyxxQkFBcUI7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUIiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWV4cHJlc3MvYnVpbGQvc3JjL2ludGVybmFsLXR5cGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuX0xBWUVSU19TVE9SRV9QUk9QRVJUWSA9IGV4cG9ydHMua0xheWVyUGF0Y2hlZCA9IHZvaWQgMDtcbi8qKlxuICogVGhpcyBzeW1ib2wgaXMgdXNlZCB0byBtYXJrIGV4cHJlc3MgbGF5ZXIgYXMgYmVpbmcgYWxyZWFkeSBpbnN0cnVtZW50ZWRcbiAqIHNpbmNlIGl0cyBwb3NzaWJsZSB0byB1c2UgYSBnaXZlbiBsYXllciBtdWx0aXBsZSB0aW1lcyAoZXg6IG1pZGRsZXdhcmVzKVxuICovXG5leHBvcnRzLmtMYXllclBhdGNoZWQgPSBTeW1ib2woJ2V4cHJlc3MtbGF5ZXItcGF0Y2hlZCcpO1xuLyoqXG4gKiBUaGlzIGNvbnN0IGRlZmluZSB3aGVyZSBvbiB0aGUgYHJlcXVlc3RgIG9iamVjdCB0aGUgSW5zdHJ1bWVudGF0aW9uIHdpbGwgbW91bnQgdGhlXG4gKiBjdXJyZW50IHN0YWNrIG9mIGV4cHJlc3MgbGF5ZXIuXG4gKlxuICogSXQgaXMgbmVjZXNzYXJ5IGJlY2F1c2UgZXhwcmVzcyBkb2Vzbid0IHN0b3JlIHRoZSBkaWZmZXJlbnQgbGF5ZXJzXG4gKiAoaWU6IG1pZGRsZXdhcmUsIHJvdXRlciBldGMpIHRoYXQgaXQgY2FsbGVkIHRvIGdldCB0byB0aGUgY3VycmVudCBsYXllci5cbiAqIEdpdmVuIHRoYXQsIHRoZSBvbmx5IHdheSB0byBrbm93IHRoZSByb3V0ZSBvZiBhIGdpdmVuIGxheWVyIGlzIHRvXG4gKiBzdG9yZSB0aGUgcGF0aCBvZiB3aGVyZSBlYWNoIHByZXZpb3VzIGxheWVyIGhhcyBiZWVuIG1vdW50ZWQuXG4gKlxuICogZXg6IGJvZHlQYXJzZXIgPiBhdXRoIG1pZGRsZXdhcmUgPiAvdXNlcnMgcm91dGVyID4gZ2V0IC86aWRcbiAqICBpbiB0aGlzIGNhc2UgdGhlIHN0YWNrIHdvdWxkIGJlOiBbXCIvdXNlcnNcIiwgXCIvOmlkXCJdXG4gKlxuICogZXgyOiBib2R5UGFyc2VyID4gL2FwaSByb3V0ZXIgPiAvdjEgcm91dGVyID4gL3VzZXJzIHJvdXRlciA+IGdldCAvOmlkXG4gKiAgc3RhY2s6IFtcIi9hcGlcIiwgXCIvdjFcIiwgXCIvdXNlcnNcIiwgXCI6aWRcIl1cbiAqXG4gKi9cbmV4cG9ydHMuX0xBWUVSU19TVE9SRV9QUk9QRVJUWSA9ICdfX290X21pZGRsZXdhcmVzJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGVybmFsLXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-express/build/src/internal-types.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-express/build/src/utils.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-express/build/src/utils.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getActualMatchedRoute = exports.getConstructedRoute = exports.getLayerPath = exports.asErrorAndMessage = exports.isLayerIgnored = exports.getLayerMetadata = exports.getRouterPath = exports.storeLayerPath = void 0;\nconst ExpressLayerType_1 = __webpack_require__(/*! ./enums/ExpressLayerType */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-express/build/src/enums/ExpressLayerType.js\");\nconst AttributeNames_1 = __webpack_require__(/*! ./enums/AttributeNames */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-express/build/src/enums/AttributeNames.js\");\nconst internal_types_1 = __webpack_require__(/*! ./internal-types */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-express/build/src/internal-types.js\");\n/**\n * Store layers path in the request to be able to construct route later\n * @param request The request where\n * @param [value] the value to push into the array\n */\nconst storeLayerPath = (request, value) => {\n    if (Array.isArray(request[internal_types_1._LAYERS_STORE_PROPERTY]) === false) {\n        Object.defineProperty(request, internal_types_1._LAYERS_STORE_PROPERTY, {\n            enumerable: false,\n            value: [],\n        });\n    }\n    if (value === undefined)\n        return { isLayerPathStored: false };\n    request[internal_types_1._LAYERS_STORE_PROPERTY].push(value);\n    return { isLayerPathStored: true };\n};\nexports.storeLayerPath = storeLayerPath;\n/**\n * Recursively search the router path from layer stack\n * @param path The path to reconstruct\n * @param layer The layer to reconstruct from\n * @returns The reconstructed path\n */\nconst getRouterPath = (path, layer) => {\n    const stackLayer = layer.handle?.stack?.[0];\n    if (stackLayer?.route?.path) {\n        return `${path}${stackLayer.route.path}`;\n    }\n    if (stackLayer?.handle?.stack) {\n        return (0, exports.getRouterPath)(path, stackLayer);\n    }\n    return path;\n};\nexports.getRouterPath = getRouterPath;\n/**\n * Parse express layer context to retrieve a name and attributes.\n * @param route The route of the layer\n * @param layer Express layer\n * @param [layerPath] if present, the path on which the layer has been mounted\n */\nconst getLayerMetadata = (route, layer, layerPath) => {\n    if (layer.name === 'router') {\n        const maybeRouterPath = (0, exports.getRouterPath)('', layer);\n        const extractedRouterPath = maybeRouterPath\n            ? maybeRouterPath\n            : layerPath || route || '/';\n        return {\n            attributes: {\n                [AttributeNames_1.AttributeNames.EXPRESS_NAME]: extractedRouterPath,\n                [AttributeNames_1.AttributeNames.EXPRESS_TYPE]: ExpressLayerType_1.ExpressLayerType.ROUTER,\n            },\n            name: `router - ${extractedRouterPath}`,\n        };\n    }\n    else if (layer.name === 'bound dispatch' || layer.name === 'handle') {\n        return {\n            attributes: {\n                [AttributeNames_1.AttributeNames.EXPRESS_NAME]: (route || layerPath) ?? 'request handler',\n                [AttributeNames_1.AttributeNames.EXPRESS_TYPE]: ExpressLayerType_1.ExpressLayerType.REQUEST_HANDLER,\n            },\n            name: `request handler${layer.path ? ` - ${route || layerPath}` : ''}`,\n        };\n    }\n    else {\n        return {\n            attributes: {\n                [AttributeNames_1.AttributeNames.EXPRESS_NAME]: layer.name,\n                [AttributeNames_1.AttributeNames.EXPRESS_TYPE]: ExpressLayerType_1.ExpressLayerType.MIDDLEWARE,\n            },\n            name: `middleware - ${layer.name}`,\n        };\n    }\n};\nexports.getLayerMetadata = getLayerMetadata;\n/**\n * Check whether the given obj match pattern\n * @param constant e.g URL of request\n * @param obj obj to inspect\n * @param pattern Match pattern\n */\nconst satisfiesPattern = (constant, pattern) => {\n    if (typeof pattern === 'string') {\n        return pattern === constant;\n    }\n    else if (pattern instanceof RegExp) {\n        return pattern.test(constant);\n    }\n    else if (typeof pattern === 'function') {\n        return pattern(constant);\n    }\n    else {\n        throw new TypeError('Pattern is in unsupported datatype');\n    }\n};\n/**\n * Check whether the given request is ignored by configuration\n * It will not re-throw exceptions from `list` provided by the client\n * @param constant e.g URL of request\n * @param [list] List of ignore patterns\n * @param [onException] callback for doing something when an exception has\n *     occurred\n */\nconst isLayerIgnored = (name, type, config) => {\n    if (Array.isArray(config?.ignoreLayersType) &&\n        config?.ignoreLayersType?.includes(type)) {\n        return true;\n    }\n    if (Array.isArray(config?.ignoreLayers) === false)\n        return false;\n    try {\n        for (const pattern of config.ignoreLayers) {\n            if (satisfiesPattern(name, pattern)) {\n                return true;\n            }\n        }\n    }\n    catch (e) {\n        /* catch block*/\n    }\n    return false;\n};\nexports.isLayerIgnored = isLayerIgnored;\n/**\n * Converts a user-provided error value into an error and error message pair\n *\n * @param error - User-provided error value\n * @returns Both an Error or string representation of the value and an error message\n */\nconst asErrorAndMessage = (error) => error instanceof Error\n    ? [error, error.message]\n    : [String(error), String(error)];\nexports.asErrorAndMessage = asErrorAndMessage;\n/**\n * Extracts the layer path from the route arguments\n *\n * @param args - Arguments of the route\n * @returns The layer path\n */\nconst getLayerPath = (args) => {\n    const firstArg = args[0];\n    if (Array.isArray(firstArg)) {\n        return firstArg.map(arg => extractLayerPathSegment(arg) || '').join(',');\n    }\n    return extractLayerPathSegment(firstArg);\n};\nexports.getLayerPath = getLayerPath;\nconst extractLayerPathSegment = (arg) => {\n    if (typeof arg === 'string') {\n        return arg;\n    }\n    if (arg instanceof RegExp || typeof arg === 'number') {\n        return arg.toString();\n    }\n    return;\n};\nfunction getConstructedRoute(req) {\n    const layersStore = Array.isArray(req[internal_types_1._LAYERS_STORE_PROPERTY])\n        ? req[internal_types_1._LAYERS_STORE_PROPERTY]\n        : [];\n    const meaningfulPaths = layersStore.filter(path => path !== '/' && path !== '/*');\n    if (meaningfulPaths.length === 1 && meaningfulPaths[0] === '*') {\n        return '*';\n    }\n    // Join parts and remove duplicate slashes\n    return meaningfulPaths.join('').replace(/\\/{2,}/g, '/');\n}\nexports.getConstructedRoute = getConstructedRoute;\n/**\n * Extracts the actual matched route from Express request for OpenTelemetry instrumentation.\n * Returns the route that should be used as the http.route attribute.\n *\n * @param req - The Express request object with layers store\n * @param layersStoreProperty - The property name where layer paths are stored\n * @returns The matched route string or undefined if no valid route is found\n */\nfunction getActualMatchedRoute(req) {\n    const layersStore = Array.isArray(req[internal_types_1._LAYERS_STORE_PROPERTY])\n        ? req[internal_types_1._LAYERS_STORE_PROPERTY]\n        : [];\n    // If no layers are stored, no route can be determined\n    if (layersStore.length === 0) {\n        return undefined;\n    }\n    // Handle root path case - if all paths are root, only return root if originalUrl is also root\n    // The layer store also includes root paths in case a non-existing url was requested\n    if (layersStore.every(path => path === '/')) {\n        return req.originalUrl === '/' ? '/' : undefined;\n    }\n    const constructedRoute = getConstructedRoute(req);\n    if (constructedRoute === '*') {\n        return constructedRoute;\n    }\n    // For RegExp routes or route arrays, return the constructed route\n    // This handles the case where the route is defined using RegExp or an array\n    if (constructedRoute.includes('/') &&\n        (constructedRoute.includes(',') ||\n            constructedRoute.includes('\\\\') ||\n            constructedRoute.includes('*') ||\n            constructedRoute.includes('['))) {\n        return constructedRoute;\n    }\n    // Ensure route starts with '/' if it doesn't already\n    const normalizedRoute = constructedRoute.startsWith('/')\n        ? constructedRoute\n        : `/${constructedRoute}`;\n    // Validate that this appears to be a matched route\n    // A route is considered matched if:\n    // 1. We have a constructed route\n    // 2. The original URL matches or starts with our route pattern\n    const isValidRoute = normalizedRoute.length > 0 &&\n        (req.originalUrl === normalizedRoute ||\n            req.originalUrl.startsWith(normalizedRoute) ||\n            isRoutePattern(normalizedRoute));\n    return isValidRoute ? normalizedRoute : undefined;\n}\nexports.getActualMatchedRoute = getActualMatchedRoute;\n/**\n * Checks if a route contains parameter patterns (e.g., :id, :userId)\n * which are valid even if they don't exactly match the original URL\n */\nfunction isRoutePattern(route) {\n    return route.includes(':') || route.includes('*');\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1leHByZXNzL2J1aWxkL3NyYy91dGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw2QkFBNkIsR0FBRywyQkFBMkIsR0FBRyxvQkFBb0IsR0FBRyx5QkFBeUIsR0FBRyxzQkFBc0IsR0FBRyx3QkFBd0IsR0FBRyxxQkFBcUIsR0FBRyxzQkFBc0I7QUFDbk4sMkJBQTJCLG1CQUFPLENBQUMsd0lBQTBCO0FBQzdELHlCQUF5QixtQkFBTyxDQUFDLG9JQUF3QjtBQUN6RCx5QkFBeUIsbUJBQU8sQ0FBQyx3SEFBa0I7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGFBQWE7QUFDYjtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsS0FBSyxFQUFFLHNCQUFzQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsOEJBQThCLG9CQUFvQjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixvQ0FBb0MsbUJBQW1CLG1CQUFtQixPQUFPO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLGtDQUFrQyxXQUFXO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsR0FBRztBQUNuRDtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsaUJBQWlCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWV4cHJlc3MvYnVpbGQvc3JjL3V0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0QWN0dWFsTWF0Y2hlZFJvdXRlID0gZXhwb3J0cy5nZXRDb25zdHJ1Y3RlZFJvdXRlID0gZXhwb3J0cy5nZXRMYXllclBhdGggPSBleHBvcnRzLmFzRXJyb3JBbmRNZXNzYWdlID0gZXhwb3J0cy5pc0xheWVySWdub3JlZCA9IGV4cG9ydHMuZ2V0TGF5ZXJNZXRhZGF0YSA9IGV4cG9ydHMuZ2V0Um91dGVyUGF0aCA9IGV4cG9ydHMuc3RvcmVMYXllclBhdGggPSB2b2lkIDA7XG5jb25zdCBFeHByZXNzTGF5ZXJUeXBlXzEgPSByZXF1aXJlKFwiLi9lbnVtcy9FeHByZXNzTGF5ZXJUeXBlXCIpO1xuY29uc3QgQXR0cmlidXRlTmFtZXNfMSA9IHJlcXVpcmUoXCIuL2VudW1zL0F0dHJpYnV0ZU5hbWVzXCIpO1xuY29uc3QgaW50ZXJuYWxfdHlwZXNfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsLXR5cGVzXCIpO1xuLyoqXG4gKiBTdG9yZSBsYXllcnMgcGF0aCBpbiB0aGUgcmVxdWVzdCB0byBiZSBhYmxlIHRvIGNvbnN0cnVjdCByb3V0ZSBsYXRlclxuICogQHBhcmFtIHJlcXVlc3QgVGhlIHJlcXVlc3Qgd2hlcmVcbiAqIEBwYXJhbSBbdmFsdWVdIHRoZSB2YWx1ZSB0byBwdXNoIGludG8gdGhlIGFycmF5XG4gKi9cbmNvbnN0IHN0b3JlTGF5ZXJQYXRoID0gKHJlcXVlc3QsIHZhbHVlKSA9PiB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocmVxdWVzdFtpbnRlcm5hbF90eXBlc18xLl9MQVlFUlNfU1RPUkVfUFJPUEVSVFldKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVlc3QsIGludGVybmFsX3R5cGVzXzEuX0xBWUVSU19TVE9SRV9QUk9QRVJUWSwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICB2YWx1ZTogW10sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHsgaXNMYXllclBhdGhTdG9yZWQ6IGZhbHNlIH07XG4gICAgcmVxdWVzdFtpbnRlcm5hbF90eXBlc18xLl9MQVlFUlNfU1RPUkVfUFJPUEVSVFldLnB1c2godmFsdWUpO1xuICAgIHJldHVybiB7IGlzTGF5ZXJQYXRoU3RvcmVkOiB0cnVlIH07XG59O1xuZXhwb3J0cy5zdG9yZUxheWVyUGF0aCA9IHN0b3JlTGF5ZXJQYXRoO1xuLyoqXG4gKiBSZWN1cnNpdmVseSBzZWFyY2ggdGhlIHJvdXRlciBwYXRoIGZyb20gbGF5ZXIgc3RhY2tcbiAqIEBwYXJhbSBwYXRoIFRoZSBwYXRoIHRvIHJlY29uc3RydWN0XG4gKiBAcGFyYW0gbGF5ZXIgVGhlIGxheWVyIHRvIHJlY29uc3RydWN0IGZyb21cbiAqIEByZXR1cm5zIFRoZSByZWNvbnN0cnVjdGVkIHBhdGhcbiAqL1xuY29uc3QgZ2V0Um91dGVyUGF0aCA9IChwYXRoLCBsYXllcikgPT4ge1xuICAgIGNvbnN0IHN0YWNrTGF5ZXIgPSBsYXllci5oYW5kbGU/LnN0YWNrPy5bMF07XG4gICAgaWYgKHN0YWNrTGF5ZXI/LnJvdXRlPy5wYXRoKSB7XG4gICAgICAgIHJldHVybiBgJHtwYXRofSR7c3RhY2tMYXllci5yb3V0ZS5wYXRofWA7XG4gICAgfVxuICAgIGlmIChzdGFja0xheWVyPy5oYW5kbGU/LnN0YWNrKSB7XG4gICAgICAgIHJldHVybiAoMCwgZXhwb3J0cy5nZXRSb3V0ZXJQYXRoKShwYXRoLCBzdGFja0xheWVyKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhdGg7XG59O1xuZXhwb3J0cy5nZXRSb3V0ZXJQYXRoID0gZ2V0Um91dGVyUGF0aDtcbi8qKlxuICogUGFyc2UgZXhwcmVzcyBsYXllciBjb250ZXh0IHRvIHJldHJpZXZlIGEgbmFtZSBhbmQgYXR0cmlidXRlcy5cbiAqIEBwYXJhbSByb3V0ZSBUaGUgcm91dGUgb2YgdGhlIGxheWVyXG4gKiBAcGFyYW0gbGF5ZXIgRXhwcmVzcyBsYXllclxuICogQHBhcmFtIFtsYXllclBhdGhdIGlmIHByZXNlbnQsIHRoZSBwYXRoIG9uIHdoaWNoIHRoZSBsYXllciBoYXMgYmVlbiBtb3VudGVkXG4gKi9cbmNvbnN0IGdldExheWVyTWV0YWRhdGEgPSAocm91dGUsIGxheWVyLCBsYXllclBhdGgpID0+IHtcbiAgICBpZiAobGF5ZXIubmFtZSA9PT0gJ3JvdXRlcicpIHtcbiAgICAgICAgY29uc3QgbWF5YmVSb3V0ZXJQYXRoID0gKDAsIGV4cG9ydHMuZ2V0Um91dGVyUGF0aCkoJycsIGxheWVyKTtcbiAgICAgICAgY29uc3QgZXh0cmFjdGVkUm91dGVyUGF0aCA9IG1heWJlUm91dGVyUGF0aFxuICAgICAgICAgICAgPyBtYXliZVJvdXRlclBhdGhcbiAgICAgICAgICAgIDogbGF5ZXJQYXRoIHx8IHJvdXRlIHx8ICcvJztcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgICAgICBbQXR0cmlidXRlTmFtZXNfMS5BdHRyaWJ1dGVOYW1lcy5FWFBSRVNTX05BTUVdOiBleHRyYWN0ZWRSb3V0ZXJQYXRoLFxuICAgICAgICAgICAgICAgIFtBdHRyaWJ1dGVOYW1lc18xLkF0dHJpYnV0ZU5hbWVzLkVYUFJFU1NfVFlQRV06IEV4cHJlc3NMYXllclR5cGVfMS5FeHByZXNzTGF5ZXJUeXBlLlJPVVRFUixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuYW1lOiBgcm91dGVyIC0gJHtleHRyYWN0ZWRSb3V0ZXJQYXRofWAsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2UgaWYgKGxheWVyLm5hbWUgPT09ICdib3VuZCBkaXNwYXRjaCcgfHwgbGF5ZXIubmFtZSA9PT0gJ2hhbmRsZScpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgICAgICBbQXR0cmlidXRlTmFtZXNfMS5BdHRyaWJ1dGVOYW1lcy5FWFBSRVNTX05BTUVdOiAocm91dGUgfHwgbGF5ZXJQYXRoKSA/PyAncmVxdWVzdCBoYW5kbGVyJyxcbiAgICAgICAgICAgICAgICBbQXR0cmlidXRlTmFtZXNfMS5BdHRyaWJ1dGVOYW1lcy5FWFBSRVNTX1RZUEVdOiBFeHByZXNzTGF5ZXJUeXBlXzEuRXhwcmVzc0xheWVyVHlwZS5SRVFVRVNUX0hBTkRMRVIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmFtZTogYHJlcXVlc3QgaGFuZGxlciR7bGF5ZXIucGF0aCA/IGAgLSAke3JvdXRlIHx8IGxheWVyUGF0aH1gIDogJyd9YCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgICAgICAgW0F0dHJpYnV0ZU5hbWVzXzEuQXR0cmlidXRlTmFtZXMuRVhQUkVTU19OQU1FXTogbGF5ZXIubmFtZSxcbiAgICAgICAgICAgICAgICBbQXR0cmlidXRlTmFtZXNfMS5BdHRyaWJ1dGVOYW1lcy5FWFBSRVNTX1RZUEVdOiBFeHByZXNzTGF5ZXJUeXBlXzEuRXhwcmVzc0xheWVyVHlwZS5NSURETEVXQVJFLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5hbWU6IGBtaWRkbGV3YXJlIC0gJHtsYXllci5uYW1lfWAsXG4gICAgICAgIH07XG4gICAgfVxufTtcbmV4cG9ydHMuZ2V0TGF5ZXJNZXRhZGF0YSA9IGdldExheWVyTWV0YWRhdGE7XG4vKipcbiAqIENoZWNrIHdoZXRoZXIgdGhlIGdpdmVuIG9iaiBtYXRjaCBwYXR0ZXJuXG4gKiBAcGFyYW0gY29uc3RhbnQgZS5nIFVSTCBvZiByZXF1ZXN0XG4gKiBAcGFyYW0gb2JqIG9iaiB0byBpbnNwZWN0XG4gKiBAcGFyYW0gcGF0dGVybiBNYXRjaCBwYXR0ZXJuXG4gKi9cbmNvbnN0IHNhdGlzZmllc1BhdHRlcm4gPSAoY29uc3RhbnQsIHBhdHRlcm4pID0+IHtcbiAgICBpZiAodHlwZW9mIHBhdHRlcm4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBwYXR0ZXJuID09PSBjb25zdGFudDtcbiAgICB9XG4gICAgZWxzZSBpZiAocGF0dGVybiBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgICByZXR1cm4gcGF0dGVybi50ZXN0KGNvbnN0YW50KTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHBhdHRlcm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHBhdHRlcm4oY29uc3RhbnQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUGF0dGVybiBpcyBpbiB1bnN1cHBvcnRlZCBkYXRhdHlwZScpO1xuICAgIH1cbn07XG4vKipcbiAqIENoZWNrIHdoZXRoZXIgdGhlIGdpdmVuIHJlcXVlc3QgaXMgaWdub3JlZCBieSBjb25maWd1cmF0aW9uXG4gKiBJdCB3aWxsIG5vdCByZS10aHJvdyBleGNlcHRpb25zIGZyb20gYGxpc3RgIHByb3ZpZGVkIGJ5IHRoZSBjbGllbnRcbiAqIEBwYXJhbSBjb25zdGFudCBlLmcgVVJMIG9mIHJlcXVlc3RcbiAqIEBwYXJhbSBbbGlzdF0gTGlzdCBvZiBpZ25vcmUgcGF0dGVybnNcbiAqIEBwYXJhbSBbb25FeGNlcHRpb25dIGNhbGxiYWNrIGZvciBkb2luZyBzb21ldGhpbmcgd2hlbiBhbiBleGNlcHRpb24gaGFzXG4gKiAgICAgb2NjdXJyZWRcbiAqL1xuY29uc3QgaXNMYXllcklnbm9yZWQgPSAobmFtZSwgdHlwZSwgY29uZmlnKSA9PiB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY29uZmlnPy5pZ25vcmVMYXllcnNUeXBlKSAmJlxuICAgICAgICBjb25maWc/Lmlnbm9yZUxheWVyc1R5cGU/LmluY2x1ZGVzKHR5cGUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShjb25maWc/Lmlnbm9yZUxheWVycykgPT09IGZhbHNlKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgdHJ5IHtcbiAgICAgICAgZm9yIChjb25zdCBwYXR0ZXJuIG9mIGNvbmZpZy5pZ25vcmVMYXllcnMpIHtcbiAgICAgICAgICAgIGlmIChzYXRpc2ZpZXNQYXR0ZXJuKG5hbWUsIHBhdHRlcm4pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgLyogY2F0Y2ggYmxvY2sqL1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuZXhwb3J0cy5pc0xheWVySWdub3JlZCA9IGlzTGF5ZXJJZ25vcmVkO1xuLyoqXG4gKiBDb252ZXJ0cyBhIHVzZXItcHJvdmlkZWQgZXJyb3IgdmFsdWUgaW50byBhbiBlcnJvciBhbmQgZXJyb3IgbWVzc2FnZSBwYWlyXG4gKlxuICogQHBhcmFtIGVycm9yIC0gVXNlci1wcm92aWRlZCBlcnJvciB2YWx1ZVxuICogQHJldHVybnMgQm90aCBhbiBFcnJvciBvciBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHZhbHVlIGFuZCBhbiBlcnJvciBtZXNzYWdlXG4gKi9cbmNvbnN0IGFzRXJyb3JBbmRNZXNzYWdlID0gKGVycm9yKSA9PiBlcnJvciBpbnN0YW5jZW9mIEVycm9yXG4gICAgPyBbZXJyb3IsIGVycm9yLm1lc3NhZ2VdXG4gICAgOiBbU3RyaW5nKGVycm9yKSwgU3RyaW5nKGVycm9yKV07XG5leHBvcnRzLmFzRXJyb3JBbmRNZXNzYWdlID0gYXNFcnJvckFuZE1lc3NhZ2U7XG4vKipcbiAqIEV4dHJhY3RzIHRoZSBsYXllciBwYXRoIGZyb20gdGhlIHJvdXRlIGFyZ3VtZW50c1xuICpcbiAqIEBwYXJhbSBhcmdzIC0gQXJndW1lbnRzIG9mIHRoZSByb3V0ZVxuICogQHJldHVybnMgVGhlIGxheWVyIHBhdGhcbiAqL1xuY29uc3QgZ2V0TGF5ZXJQYXRoID0gKGFyZ3MpID0+IHtcbiAgICBjb25zdCBmaXJzdEFyZyA9IGFyZ3NbMF07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZmlyc3RBcmcpKSB7XG4gICAgICAgIHJldHVybiBmaXJzdEFyZy5tYXAoYXJnID0+IGV4dHJhY3RMYXllclBhdGhTZWdtZW50KGFyZykgfHwgJycpLmpvaW4oJywnKTtcbiAgICB9XG4gICAgcmV0dXJuIGV4dHJhY3RMYXllclBhdGhTZWdtZW50KGZpcnN0QXJnKTtcbn07XG5leHBvcnRzLmdldExheWVyUGF0aCA9IGdldExheWVyUGF0aDtcbmNvbnN0IGV4dHJhY3RMYXllclBhdGhTZWdtZW50ID0gKGFyZykgPT4ge1xuICAgIGlmICh0eXBlb2YgYXJnID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gYXJnO1xuICAgIH1cbiAgICBpZiAoYXJnIGluc3RhbmNlb2YgUmVnRXhwIHx8IHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiBhcmcudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgcmV0dXJuO1xufTtcbmZ1bmN0aW9uIGdldENvbnN0cnVjdGVkUm91dGUocmVxKSB7XG4gICAgY29uc3QgbGF5ZXJzU3RvcmUgPSBBcnJheS5pc0FycmF5KHJlcVtpbnRlcm5hbF90eXBlc18xLl9MQVlFUlNfU1RPUkVfUFJPUEVSVFldKVxuICAgICAgICA/IHJlcVtpbnRlcm5hbF90eXBlc18xLl9MQVlFUlNfU1RPUkVfUFJPUEVSVFldXG4gICAgICAgIDogW107XG4gICAgY29uc3QgbWVhbmluZ2Z1bFBhdGhzID0gbGF5ZXJzU3RvcmUuZmlsdGVyKHBhdGggPT4gcGF0aCAhPT0gJy8nICYmIHBhdGggIT09ICcvKicpO1xuICAgIGlmIChtZWFuaW5nZnVsUGF0aHMubGVuZ3RoID09PSAxICYmIG1lYW5pbmdmdWxQYXRoc1swXSA9PT0gJyonKSB7XG4gICAgICAgIHJldHVybiAnKic7XG4gICAgfVxuICAgIC8vIEpvaW4gcGFydHMgYW5kIHJlbW92ZSBkdXBsaWNhdGUgc2xhc2hlc1xuICAgIHJldHVybiBtZWFuaW5nZnVsUGF0aHMuam9pbignJykucmVwbGFjZSgvXFwvezIsfS9nLCAnLycpO1xufVxuZXhwb3J0cy5nZXRDb25zdHJ1Y3RlZFJvdXRlID0gZ2V0Q29uc3RydWN0ZWRSb3V0ZTtcbi8qKlxuICogRXh0cmFjdHMgdGhlIGFjdHVhbCBtYXRjaGVkIHJvdXRlIGZyb20gRXhwcmVzcyByZXF1ZXN0IGZvciBPcGVuVGVsZW1ldHJ5IGluc3RydW1lbnRhdGlvbi5cbiAqIFJldHVybnMgdGhlIHJvdXRlIHRoYXQgc2hvdWxkIGJlIHVzZWQgYXMgdGhlIGh0dHAucm91dGUgYXR0cmlidXRlLlxuICpcbiAqIEBwYXJhbSByZXEgLSBUaGUgRXhwcmVzcyByZXF1ZXN0IG9iamVjdCB3aXRoIGxheWVycyBzdG9yZVxuICogQHBhcmFtIGxheWVyc1N0b3JlUHJvcGVydHkgLSBUaGUgcHJvcGVydHkgbmFtZSB3aGVyZSBsYXllciBwYXRocyBhcmUgc3RvcmVkXG4gKiBAcmV0dXJucyBUaGUgbWF0Y2hlZCByb3V0ZSBzdHJpbmcgb3IgdW5kZWZpbmVkIGlmIG5vIHZhbGlkIHJvdXRlIGlzIGZvdW5kXG4gKi9cbmZ1bmN0aW9uIGdldEFjdHVhbE1hdGNoZWRSb3V0ZShyZXEpIHtcbiAgICBjb25zdCBsYXllcnNTdG9yZSA9IEFycmF5LmlzQXJyYXkocmVxW2ludGVybmFsX3R5cGVzXzEuX0xBWUVSU19TVE9SRV9QUk9QRVJUWV0pXG4gICAgICAgID8gcmVxW2ludGVybmFsX3R5cGVzXzEuX0xBWUVSU19TVE9SRV9QUk9QRVJUWV1cbiAgICAgICAgOiBbXTtcbiAgICAvLyBJZiBubyBsYXllcnMgYXJlIHN0b3JlZCwgbm8gcm91dGUgY2FuIGJlIGRldGVybWluZWRcbiAgICBpZiAobGF5ZXJzU3RvcmUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIC8vIEhhbmRsZSByb290IHBhdGggY2FzZSAtIGlmIGFsbCBwYXRocyBhcmUgcm9vdCwgb25seSByZXR1cm4gcm9vdCBpZiBvcmlnaW5hbFVybCBpcyBhbHNvIHJvb3RcbiAgICAvLyBUaGUgbGF5ZXIgc3RvcmUgYWxzbyBpbmNsdWRlcyByb290IHBhdGhzIGluIGNhc2UgYSBub24tZXhpc3RpbmcgdXJsIHdhcyByZXF1ZXN0ZWRcbiAgICBpZiAobGF5ZXJzU3RvcmUuZXZlcnkocGF0aCA9PiBwYXRoID09PSAnLycpKSB7XG4gICAgICAgIHJldHVybiByZXEub3JpZ2luYWxVcmwgPT09ICcvJyA/ICcvJyA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgY29uc3QgY29uc3RydWN0ZWRSb3V0ZSA9IGdldENvbnN0cnVjdGVkUm91dGUocmVxKTtcbiAgICBpZiAoY29uc3RydWN0ZWRSb3V0ZSA9PT0gJyonKSB7XG4gICAgICAgIHJldHVybiBjb25zdHJ1Y3RlZFJvdXRlO1xuICAgIH1cbiAgICAvLyBGb3IgUmVnRXhwIHJvdXRlcyBvciByb3V0ZSBhcnJheXMsIHJldHVybiB0aGUgY29uc3RydWN0ZWQgcm91dGVcbiAgICAvLyBUaGlzIGhhbmRsZXMgdGhlIGNhc2Ugd2hlcmUgdGhlIHJvdXRlIGlzIGRlZmluZWQgdXNpbmcgUmVnRXhwIG9yIGFuIGFycmF5XG4gICAgaWYgKGNvbnN0cnVjdGVkUm91dGUuaW5jbHVkZXMoJy8nKSAmJlxuICAgICAgICAoY29uc3RydWN0ZWRSb3V0ZS5pbmNsdWRlcygnLCcpIHx8XG4gICAgICAgICAgICBjb25zdHJ1Y3RlZFJvdXRlLmluY2x1ZGVzKCdcXFxcJykgfHxcbiAgICAgICAgICAgIGNvbnN0cnVjdGVkUm91dGUuaW5jbHVkZXMoJyonKSB8fFxuICAgICAgICAgICAgY29uc3RydWN0ZWRSb3V0ZS5pbmNsdWRlcygnWycpKSkge1xuICAgICAgICByZXR1cm4gY29uc3RydWN0ZWRSb3V0ZTtcbiAgICB9XG4gICAgLy8gRW5zdXJlIHJvdXRlIHN0YXJ0cyB3aXRoICcvJyBpZiBpdCBkb2Vzbid0IGFscmVhZHlcbiAgICBjb25zdCBub3JtYWxpemVkUm91dGUgPSBjb25zdHJ1Y3RlZFJvdXRlLnN0YXJ0c1dpdGgoJy8nKVxuICAgICAgICA/IGNvbnN0cnVjdGVkUm91dGVcbiAgICAgICAgOiBgLyR7Y29uc3RydWN0ZWRSb3V0ZX1gO1xuICAgIC8vIFZhbGlkYXRlIHRoYXQgdGhpcyBhcHBlYXJzIHRvIGJlIGEgbWF0Y2hlZCByb3V0ZVxuICAgIC8vIEEgcm91dGUgaXMgY29uc2lkZXJlZCBtYXRjaGVkIGlmOlxuICAgIC8vIDEuIFdlIGhhdmUgYSBjb25zdHJ1Y3RlZCByb3V0ZVxuICAgIC8vIDIuIFRoZSBvcmlnaW5hbCBVUkwgbWF0Y2hlcyBvciBzdGFydHMgd2l0aCBvdXIgcm91dGUgcGF0dGVyblxuICAgIGNvbnN0IGlzVmFsaWRSb3V0ZSA9IG5vcm1hbGl6ZWRSb3V0ZS5sZW5ndGggPiAwICYmXG4gICAgICAgIChyZXEub3JpZ2luYWxVcmwgPT09IG5vcm1hbGl6ZWRSb3V0ZSB8fFxuICAgICAgICAgICAgcmVxLm9yaWdpbmFsVXJsLnN0YXJ0c1dpdGgobm9ybWFsaXplZFJvdXRlKSB8fFxuICAgICAgICAgICAgaXNSb3V0ZVBhdHRlcm4obm9ybWFsaXplZFJvdXRlKSk7XG4gICAgcmV0dXJuIGlzVmFsaWRSb3V0ZSA/IG5vcm1hbGl6ZWRSb3V0ZSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydHMuZ2V0QWN0dWFsTWF0Y2hlZFJvdXRlID0gZ2V0QWN0dWFsTWF0Y2hlZFJvdXRlO1xuLyoqXG4gKiBDaGVja3MgaWYgYSByb3V0ZSBjb250YWlucyBwYXJhbWV0ZXIgcGF0dGVybnMgKGUuZy4sIDppZCwgOnVzZXJJZClcbiAqIHdoaWNoIGFyZSB2YWxpZCBldmVuIGlmIHRoZXkgZG9uJ3QgZXhhY3RseSBtYXRjaCB0aGUgb3JpZ2luYWwgVVJMXG4gKi9cbmZ1bmN0aW9uIGlzUm91dGVQYXR0ZXJuKHJvdXRlKSB7XG4gICAgcmV0dXJuIHJvdXRlLmluY2x1ZGVzKCc6JykgfHwgcm91dGUuaW5jbHVkZXMoJyonKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-express/build/src/utils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-express/build/src/version.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-express/build/src/version.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PACKAGE_NAME = exports.PACKAGE_VERSION = void 0;\n// this is autogenerated file, see scripts/version-update.js\nexports.PACKAGE_VERSION = '0.52.0';\nexports.PACKAGE_NAME = '@opentelemetry/instrumentation-express';\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1leHByZXNzL2J1aWxkL3NyYy92ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQixHQUFHLHVCQUF1QjtBQUM5QztBQUNBLHVCQUF1QjtBQUN2QixvQkFBb0I7QUFDcEIiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWV4cHJlc3MvYnVpbGQvc3JjL3ZlcnNpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5QQUNLQUdFX05BTUUgPSBleHBvcnRzLlBBQ0tBR0VfVkVSU0lPTiA9IHZvaWQgMDtcbi8vIHRoaXMgaXMgYXV0b2dlbmVyYXRlZCBmaWxlLCBzZWUgc2NyaXB0cy92ZXJzaW9uLXVwZGF0ZS5qc1xuZXhwb3J0cy5QQUNLQUdFX1ZFUlNJT04gPSAnMC41Mi4wJztcbmV4cG9ydHMuUEFDS0FHRV9OQU1FID0gJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1leHByZXNzJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-express/build/src/version.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-fs/build/src/constants.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-fs/build/src/constants.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SYNC_FUNCTIONS = exports.CALLBACK_FUNCTIONS = exports.PROMISE_FUNCTIONS = void 0;\nexports.PROMISE_FUNCTIONS = [\n    'access',\n    'appendFile',\n    'chmod',\n    'chown',\n    'copyFile',\n    'cp',\n    'lchown',\n    'link',\n    'lstat',\n    'lutimes',\n    'mkdir',\n    'mkdtemp',\n    'open',\n    'opendir',\n    'readdir',\n    'readFile',\n    'readlink',\n    'realpath',\n    'rename',\n    'rm',\n    'rmdir',\n    'stat',\n    'symlink',\n    'truncate',\n    'unlink',\n    'utimes',\n    'writeFile',\n    // 'lchmod', // only implemented on macOS\n];\nexports.CALLBACK_FUNCTIONS = [\n    'access',\n    'appendFile',\n    'chmod',\n    'chown',\n    'copyFile',\n    'cp',\n    'exists',\n    'lchown',\n    'link',\n    'lstat',\n    'lutimes',\n    'mkdir',\n    'mkdtemp',\n    'open',\n    'opendir',\n    'readdir',\n    'readFile',\n    'readlink',\n    'realpath',\n    'realpath.native',\n    'rename',\n    'rm',\n    'rmdir',\n    'stat',\n    'symlink',\n    'truncate',\n    'unlink',\n    'utimes',\n    'writeFile',\n    // 'close', // functions on file descriptor\n    // 'fchmod', // functions on file descriptor\n    // 'fchown', // functions on file descriptor\n    // 'fdatasync', // functions on file descriptor\n    // 'fstat', // functions on file descriptor\n    // 'fsync', // functions on file descriptor\n    // 'ftruncate', // functions on file descriptor\n    // 'futimes', // functions on file descriptor\n    // 'lchmod', // only implemented on macOS\n    // 'read', // functions on file descriptor\n    // 'readv', // functions on file descriptor\n    // 'write', // functions on file descriptor\n    // 'writev', // functions on file descriptor\n];\nexports.SYNC_FUNCTIONS = [\n    'accessSync',\n    'appendFileSync',\n    'chmodSync',\n    'chownSync',\n    'copyFileSync',\n    'cpSync',\n    'existsSync',\n    'lchownSync',\n    'linkSync',\n    'lstatSync',\n    'lutimesSync',\n    'mkdirSync',\n    'mkdtempSync',\n    'opendirSync',\n    'openSync',\n    'readdirSync',\n    'readFileSync',\n    'readlinkSync',\n    'realpathSync',\n    'realpathSync.native',\n    'renameSync',\n    'rmdirSync',\n    'rmSync',\n    'statSync',\n    'symlinkSync',\n    'truncateSync',\n    'unlinkSync',\n    'utimesSync',\n    'writeFileSync',\n    // 'closeSync', // functions on file descriptor\n    // 'fchmodSync', // functions on file descriptor\n    // 'fchownSync', // functions on file descriptor\n    // 'fdatasyncSync', // functions on file descriptor\n    // 'fstatSync', // functions on file descriptor\n    // 'fsyncSync', // functions on file descriptor\n    // 'ftruncateSync', // functions on file descriptor\n    // 'futimesSync', // functions on file descriptor\n    // 'lchmodSync', // only implemented on macOS\n    // 'readSync', // functions on file descriptor\n    // 'readvSync', // functions on file descriptor\n    // 'writeSync', // functions on file descriptor\n    // 'writevSync', // functions on file descriptor\n];\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1mcy9idWlsZC9zcmMvY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNCQUFzQixHQUFHLDBCQUEwQixHQUFHLHlCQUF5QjtBQUMvRSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1mcy9idWlsZC9zcmMvY29uc3RhbnRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU1lOQ19GVU5DVElPTlMgPSBleHBvcnRzLkNBTExCQUNLX0ZVTkNUSU9OUyA9IGV4cG9ydHMuUFJPTUlTRV9GVU5DVElPTlMgPSB2b2lkIDA7XG5leHBvcnRzLlBST01JU0VfRlVOQ1RJT05TID0gW1xuICAgICdhY2Nlc3MnLFxuICAgICdhcHBlbmRGaWxlJyxcbiAgICAnY2htb2QnLFxuICAgICdjaG93bicsXG4gICAgJ2NvcHlGaWxlJyxcbiAgICAnY3AnLFxuICAgICdsY2hvd24nLFxuICAgICdsaW5rJyxcbiAgICAnbHN0YXQnLFxuICAgICdsdXRpbWVzJyxcbiAgICAnbWtkaXInLFxuICAgICdta2R0ZW1wJyxcbiAgICAnb3BlbicsXG4gICAgJ29wZW5kaXInLFxuICAgICdyZWFkZGlyJyxcbiAgICAncmVhZEZpbGUnLFxuICAgICdyZWFkbGluaycsXG4gICAgJ3JlYWxwYXRoJyxcbiAgICAncmVuYW1lJyxcbiAgICAncm0nLFxuICAgICdybWRpcicsXG4gICAgJ3N0YXQnLFxuICAgICdzeW1saW5rJyxcbiAgICAndHJ1bmNhdGUnLFxuICAgICd1bmxpbmsnLFxuICAgICd1dGltZXMnLFxuICAgICd3cml0ZUZpbGUnLFxuICAgIC8vICdsY2htb2QnLCAvLyBvbmx5IGltcGxlbWVudGVkIG9uIG1hY09TXG5dO1xuZXhwb3J0cy5DQUxMQkFDS19GVU5DVElPTlMgPSBbXG4gICAgJ2FjY2VzcycsXG4gICAgJ2FwcGVuZEZpbGUnLFxuICAgICdjaG1vZCcsXG4gICAgJ2Nob3duJyxcbiAgICAnY29weUZpbGUnLFxuICAgICdjcCcsXG4gICAgJ2V4aXN0cycsXG4gICAgJ2xjaG93bicsXG4gICAgJ2xpbmsnLFxuICAgICdsc3RhdCcsXG4gICAgJ2x1dGltZXMnLFxuICAgICdta2RpcicsXG4gICAgJ21rZHRlbXAnLFxuICAgICdvcGVuJyxcbiAgICAnb3BlbmRpcicsXG4gICAgJ3JlYWRkaXInLFxuICAgICdyZWFkRmlsZScsXG4gICAgJ3JlYWRsaW5rJyxcbiAgICAncmVhbHBhdGgnLFxuICAgICdyZWFscGF0aC5uYXRpdmUnLFxuICAgICdyZW5hbWUnLFxuICAgICdybScsXG4gICAgJ3JtZGlyJyxcbiAgICAnc3RhdCcsXG4gICAgJ3N5bWxpbmsnLFxuICAgICd0cnVuY2F0ZScsXG4gICAgJ3VubGluaycsXG4gICAgJ3V0aW1lcycsXG4gICAgJ3dyaXRlRmlsZScsXG4gICAgLy8gJ2Nsb3NlJywgLy8gZnVuY3Rpb25zIG9uIGZpbGUgZGVzY3JpcHRvclxuICAgIC8vICdmY2htb2QnLCAvLyBmdW5jdGlvbnMgb24gZmlsZSBkZXNjcmlwdG9yXG4gICAgLy8gJ2ZjaG93bicsIC8vIGZ1bmN0aW9ucyBvbiBmaWxlIGRlc2NyaXB0b3JcbiAgICAvLyAnZmRhdGFzeW5jJywgLy8gZnVuY3Rpb25zIG9uIGZpbGUgZGVzY3JpcHRvclxuICAgIC8vICdmc3RhdCcsIC8vIGZ1bmN0aW9ucyBvbiBmaWxlIGRlc2NyaXB0b3JcbiAgICAvLyAnZnN5bmMnLCAvLyBmdW5jdGlvbnMgb24gZmlsZSBkZXNjcmlwdG9yXG4gICAgLy8gJ2Z0cnVuY2F0ZScsIC8vIGZ1bmN0aW9ucyBvbiBmaWxlIGRlc2NyaXB0b3JcbiAgICAvLyAnZnV0aW1lcycsIC8vIGZ1bmN0aW9ucyBvbiBmaWxlIGRlc2NyaXB0b3JcbiAgICAvLyAnbGNobW9kJywgLy8gb25seSBpbXBsZW1lbnRlZCBvbiBtYWNPU1xuICAgIC8vICdyZWFkJywgLy8gZnVuY3Rpb25zIG9uIGZpbGUgZGVzY3JpcHRvclxuICAgIC8vICdyZWFkdicsIC8vIGZ1bmN0aW9ucyBvbiBmaWxlIGRlc2NyaXB0b3JcbiAgICAvLyAnd3JpdGUnLCAvLyBmdW5jdGlvbnMgb24gZmlsZSBkZXNjcmlwdG9yXG4gICAgLy8gJ3dyaXRldicsIC8vIGZ1bmN0aW9ucyBvbiBmaWxlIGRlc2NyaXB0b3Jcbl07XG5leHBvcnRzLlNZTkNfRlVOQ1RJT05TID0gW1xuICAgICdhY2Nlc3NTeW5jJyxcbiAgICAnYXBwZW5kRmlsZVN5bmMnLFxuICAgICdjaG1vZFN5bmMnLFxuICAgICdjaG93blN5bmMnLFxuICAgICdjb3B5RmlsZVN5bmMnLFxuICAgICdjcFN5bmMnLFxuICAgICdleGlzdHNTeW5jJyxcbiAgICAnbGNob3duU3luYycsXG4gICAgJ2xpbmtTeW5jJyxcbiAgICAnbHN0YXRTeW5jJyxcbiAgICAnbHV0aW1lc1N5bmMnLFxuICAgICdta2RpclN5bmMnLFxuICAgICdta2R0ZW1wU3luYycsXG4gICAgJ29wZW5kaXJTeW5jJyxcbiAgICAnb3BlblN5bmMnLFxuICAgICdyZWFkZGlyU3luYycsXG4gICAgJ3JlYWRGaWxlU3luYycsXG4gICAgJ3JlYWRsaW5rU3luYycsXG4gICAgJ3JlYWxwYXRoU3luYycsXG4gICAgJ3JlYWxwYXRoU3luYy5uYXRpdmUnLFxuICAgICdyZW5hbWVTeW5jJyxcbiAgICAncm1kaXJTeW5jJyxcbiAgICAncm1TeW5jJyxcbiAgICAnc3RhdFN5bmMnLFxuICAgICdzeW1saW5rU3luYycsXG4gICAgJ3RydW5jYXRlU3luYycsXG4gICAgJ3VubGlua1N5bmMnLFxuICAgICd1dGltZXNTeW5jJyxcbiAgICAnd3JpdGVGaWxlU3luYycsXG4gICAgLy8gJ2Nsb3NlU3luYycsIC8vIGZ1bmN0aW9ucyBvbiBmaWxlIGRlc2NyaXB0b3JcbiAgICAvLyAnZmNobW9kU3luYycsIC8vIGZ1bmN0aW9ucyBvbiBmaWxlIGRlc2NyaXB0b3JcbiAgICAvLyAnZmNob3duU3luYycsIC8vIGZ1bmN0aW9ucyBvbiBmaWxlIGRlc2NyaXB0b3JcbiAgICAvLyAnZmRhdGFzeW5jU3luYycsIC8vIGZ1bmN0aW9ucyBvbiBmaWxlIGRlc2NyaXB0b3JcbiAgICAvLyAnZnN0YXRTeW5jJywgLy8gZnVuY3Rpb25zIG9uIGZpbGUgZGVzY3JpcHRvclxuICAgIC8vICdmc3luY1N5bmMnLCAvLyBmdW5jdGlvbnMgb24gZmlsZSBkZXNjcmlwdG9yXG4gICAgLy8gJ2Z0cnVuY2F0ZVN5bmMnLCAvLyBmdW5jdGlvbnMgb24gZmlsZSBkZXNjcmlwdG9yXG4gICAgLy8gJ2Z1dGltZXNTeW5jJywgLy8gZnVuY3Rpb25zIG9uIGZpbGUgZGVzY3JpcHRvclxuICAgIC8vICdsY2htb2RTeW5jJywgLy8gb25seSBpbXBsZW1lbnRlZCBvbiBtYWNPU1xuICAgIC8vICdyZWFkU3luYycsIC8vIGZ1bmN0aW9ucyBvbiBmaWxlIGRlc2NyaXB0b3JcbiAgICAvLyAncmVhZHZTeW5jJywgLy8gZnVuY3Rpb25zIG9uIGZpbGUgZGVzY3JpcHRvclxuICAgIC8vICd3cml0ZVN5bmMnLCAvLyBmdW5jdGlvbnMgb24gZmlsZSBkZXNjcmlwdG9yXG4gICAgLy8gJ3dyaXRldlN5bmMnLCAvLyBmdW5jdGlvbnMgb24gZmlsZSBkZXNjcmlwdG9yXG5dO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-fs/build/src/constants.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-fs/build/src/index.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-fs/build/src/index.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FsInstrumentation = void 0;\nvar instrumentation_1 = __webpack_require__(/*! ./instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-fs/build/src/instrumentation.js\");\nObject.defineProperty(exports, \"FsInstrumentation\", ({ enumerable: true, get: function () { return instrumentation_1.FsInstrumentation; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1mcy9idWlsZC9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUJBQXlCO0FBQ3pCLHdCQUF3QixtQkFBTyxDQUFDLHFIQUFtQjtBQUNuRCxxREFBb0QsRUFBRSxxQ0FBcUMsK0NBQStDLEVBQUM7QUFDM0kiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWZzL2J1aWxkL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkZzSW5zdHJ1bWVudGF0aW9uID0gdm9pZCAwO1xudmFyIGluc3RydW1lbnRhdGlvbl8xID0gcmVxdWlyZShcIi4vaW5zdHJ1bWVudGF0aW9uXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRnNJbnN0cnVtZW50YXRpb25cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGluc3RydW1lbnRhdGlvbl8xLkZzSW5zdHJ1bWVudGF0aW9uOyB9IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-fs/build/src/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-fs/build/src/instrumentation.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-fs/build/src/instrumentation.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = \"/monitoring\";globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.2\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FsInstrumentation = void 0;\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst core_1 = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/index.js\");\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\n/** @knipignore */\nconst version_1 = __webpack_require__(/*! ./version */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-fs/build/src/version.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-fs/build/src/constants.js\");\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-fs/build/src/utils.js\");\n/**\n * This is important for 2-level functions like `realpath.native` to retain the 2nd-level\n * when patching the 1st-level.\n */\nfunction patchedFunctionWithOriginalProperties(patchedFunction, original) {\n    return Object.assign(patchedFunction, original);\n}\nclass FsInstrumentation extends instrumentation_1.InstrumentationBase {\n    constructor(config = {}) {\n        super(version_1.PACKAGE_NAME, version_1.PACKAGE_VERSION, config);\n    }\n    init() {\n        return [\n            new instrumentation_1.InstrumentationNodeModuleDefinition('fs', ['*'], (fs) => {\n                for (const fName of constants_1.SYNC_FUNCTIONS) {\n                    const { objectToPatch, functionNameToPatch } = (0, utils_1.indexFs)(fs, fName);\n                    if ((0, instrumentation_1.isWrapped)(objectToPatch[functionNameToPatch])) {\n                        this._unwrap(objectToPatch, functionNameToPatch);\n                    }\n                    this._wrap(objectToPatch, functionNameToPatch, this._patchSyncFunction.bind(this, fName));\n                }\n                for (const fName of constants_1.CALLBACK_FUNCTIONS) {\n                    const { objectToPatch, functionNameToPatch } = (0, utils_1.indexFs)(fs, fName);\n                    if ((0, instrumentation_1.isWrapped)(objectToPatch[functionNameToPatch])) {\n                        this._unwrap(objectToPatch, functionNameToPatch);\n                    }\n                    if (fName === 'exists') {\n                        // handling separately because of the inconsistent cb style:\n                        // `exists` doesn't have error as the first argument, but the result\n                        this._wrap(objectToPatch, functionNameToPatch, this._patchExistsCallbackFunction.bind(this, fName));\n                        continue;\n                    }\n                    this._wrap(objectToPatch, functionNameToPatch, this._patchCallbackFunction.bind(this, fName));\n                }\n                for (const fName of constants_1.PROMISE_FUNCTIONS) {\n                    if ((0, instrumentation_1.isWrapped)(fs.promises[fName])) {\n                        this._unwrap(fs.promises, fName);\n                    }\n                    this._wrap(fs.promises, fName, this._patchPromiseFunction.bind(this, fName));\n                }\n                return fs;\n            }, (fs) => {\n                if (fs === undefined)\n                    return;\n                for (const fName of constants_1.SYNC_FUNCTIONS) {\n                    const { objectToPatch, functionNameToPatch } = (0, utils_1.indexFs)(fs, fName);\n                    if ((0, instrumentation_1.isWrapped)(objectToPatch[functionNameToPatch])) {\n                        this._unwrap(objectToPatch, functionNameToPatch);\n                    }\n                }\n                for (const fName of constants_1.CALLBACK_FUNCTIONS) {\n                    const { objectToPatch, functionNameToPatch } = (0, utils_1.indexFs)(fs, fName);\n                    if ((0, instrumentation_1.isWrapped)(objectToPatch[functionNameToPatch])) {\n                        this._unwrap(objectToPatch, functionNameToPatch);\n                    }\n                }\n                for (const fName of constants_1.PROMISE_FUNCTIONS) {\n                    if ((0, instrumentation_1.isWrapped)(fs.promises[fName])) {\n                        this._unwrap(fs.promises, fName);\n                    }\n                }\n            }),\n            new instrumentation_1.InstrumentationNodeModuleDefinition('fs/promises', ['*'], (fsPromises) => {\n                for (const fName of constants_1.PROMISE_FUNCTIONS) {\n                    if ((0, instrumentation_1.isWrapped)(fsPromises[fName])) {\n                        this._unwrap(fsPromises, fName);\n                    }\n                    this._wrap(fsPromises, fName, this._patchPromiseFunction.bind(this, fName));\n                }\n                return fsPromises;\n            }, (fsPromises) => {\n                if (fsPromises === undefined)\n                    return;\n                for (const fName of constants_1.PROMISE_FUNCTIONS) {\n                    if ((0, instrumentation_1.isWrapped)(fsPromises[fName])) {\n                        this._unwrap(fsPromises, fName);\n                    }\n                }\n            }),\n        ];\n    }\n    _patchSyncFunction(functionName, original) {\n        const instrumentation = this;\n        const patchedFunction = function (...args) {\n            const activeContext = api.context.active();\n            if (!instrumentation._shouldTrace(activeContext)) {\n                return original.apply(this, args);\n            }\n            if (instrumentation._runCreateHook(functionName, {\n                args: args,\n            }) === false) {\n                return api.context.with((0, core_1.suppressTracing)(activeContext), original, this, ...args);\n            }\n            const span = instrumentation.tracer.startSpan(`fs ${functionName}`);\n            try {\n                // Suppress tracing for internal fs calls\n                const res = api.context.with((0, core_1.suppressTracing)(api.trace.setSpan(activeContext, span)), original, this, ...args);\n                instrumentation._runEndHook(functionName, { args: args, span });\n                return res;\n            }\n            catch (error) {\n                span.recordException(error);\n                span.setStatus({\n                    message: error.message,\n                    code: api.SpanStatusCode.ERROR,\n                });\n                instrumentation._runEndHook(functionName, { args: args, span, error });\n                throw error;\n            }\n            finally {\n                span.end();\n            }\n        };\n        return patchedFunctionWithOriginalProperties(patchedFunction, original);\n    }\n    _patchCallbackFunction(functionName, original) {\n        const instrumentation = this;\n        const patchedFunction = function (...args) {\n            const activeContext = api.context.active();\n            if (!instrumentation._shouldTrace(activeContext)) {\n                return original.apply(this, args);\n            }\n            if (instrumentation._runCreateHook(functionName, {\n                args: args,\n            }) === false) {\n                return api.context.with((0, core_1.suppressTracing)(activeContext), original, this, ...args);\n            }\n            const lastIdx = args.length - 1;\n            const cb = args[lastIdx];\n            if (typeof cb === 'function') {\n                const span = instrumentation.tracer.startSpan(`fs ${functionName}`);\n                // Return to the context active during the call in the callback\n                args[lastIdx] = api.context.bind(activeContext, function (error) {\n                    if (error) {\n                        span.recordException(error);\n                        span.setStatus({\n                            message: error.message,\n                            code: api.SpanStatusCode.ERROR,\n                        });\n                    }\n                    instrumentation._runEndHook(functionName, {\n                        args: args,\n                        span,\n                        error,\n                    });\n                    span.end();\n                    return cb.apply(this, arguments);\n                });\n                try {\n                    // Suppress tracing for internal fs calls\n                    return api.context.with((0, core_1.suppressTracing)(api.trace.setSpan(activeContext, span)), original, this, ...args);\n                }\n                catch (error) {\n                    span.recordException(error);\n                    span.setStatus({\n                        message: error.message,\n                        code: api.SpanStatusCode.ERROR,\n                    });\n                    instrumentation._runEndHook(functionName, {\n                        args: args,\n                        span,\n                        error,\n                    });\n                    span.end();\n                    throw error;\n                }\n            }\n            else {\n                // TODO: what to do if we are pretty sure it's going to throw\n                return original.apply(this, args);\n            }\n        };\n        return patchedFunctionWithOriginalProperties(patchedFunction, original);\n    }\n    _patchExistsCallbackFunction(functionName, original) {\n        const instrumentation = this;\n        const patchedFunction = function (...args) {\n            const activeContext = api.context.active();\n            if (!instrumentation._shouldTrace(activeContext)) {\n                return original.apply(this, args);\n            }\n            if (instrumentation._runCreateHook(functionName, {\n                args: args,\n            }) === false) {\n                return api.context.with((0, core_1.suppressTracing)(activeContext), original, this, ...args);\n            }\n            const lastIdx = args.length - 1;\n            const cb = args[lastIdx];\n            if (typeof cb === 'function') {\n                const span = instrumentation.tracer.startSpan(`fs ${functionName}`);\n                // Return to the context active during the call in the callback\n                args[lastIdx] = api.context.bind(activeContext, function () {\n                    // `exists` never calls the callback with an error\n                    instrumentation._runEndHook(functionName, {\n                        args: args,\n                        span,\n                    });\n                    span.end();\n                    return cb.apply(this, arguments);\n                });\n                try {\n                    // Suppress tracing for internal fs calls\n                    return api.context.with((0, core_1.suppressTracing)(api.trace.setSpan(activeContext, span)), original, this, ...args);\n                }\n                catch (error) {\n                    span.recordException(error);\n                    span.setStatus({\n                        message: error.message,\n                        code: api.SpanStatusCode.ERROR,\n                    });\n                    instrumentation._runEndHook(functionName, {\n                        args: args,\n                        span,\n                        error,\n                    });\n                    span.end();\n                    throw error;\n                }\n            }\n            else {\n                return original.apply(this, args);\n            }\n        };\n        const functionWithOriginalProperties = patchedFunctionWithOriginalProperties(patchedFunction, original);\n        // `exists` has a custom promisify function because of the inconsistent signature\n        // replicating that on the patched function\n        const promisified = function (path) {\n            return new Promise(resolve => functionWithOriginalProperties(path, resolve));\n        };\n        Object.defineProperty(promisified, 'name', { value: functionName });\n        Object.defineProperty(functionWithOriginalProperties, util_1.promisify.custom, {\n            value: promisified,\n        });\n        return functionWithOriginalProperties;\n    }\n    _patchPromiseFunction(functionName, original) {\n        const instrumentation = this;\n        const patchedFunction = async function (...args) {\n            const activeContext = api.context.active();\n            if (!instrumentation._shouldTrace(activeContext)) {\n                return original.apply(this, args);\n            }\n            if (instrumentation._runCreateHook(functionName, {\n                args: args,\n            }) === false) {\n                return api.context.with((0, core_1.suppressTracing)(activeContext), original, this, ...args);\n            }\n            const span = instrumentation.tracer.startSpan(`fs ${functionName}`);\n            try {\n                // Suppress tracing for internal fs calls\n                const res = await api.context.with((0, core_1.suppressTracing)(api.trace.setSpan(activeContext, span)), original, this, ...args);\n                instrumentation._runEndHook(functionName, { args: args, span });\n                return res;\n            }\n            catch (error) {\n                span.recordException(error);\n                span.setStatus({\n                    message: error.message,\n                    code: api.SpanStatusCode.ERROR,\n                });\n                instrumentation._runEndHook(functionName, { args: args, span, error });\n                throw error;\n            }\n            finally {\n                span.end();\n            }\n        };\n        return patchedFunctionWithOriginalProperties(patchedFunction, original);\n    }\n    _runCreateHook(...args) {\n        const { createHook } = this.getConfig();\n        if (typeof createHook === 'function') {\n            try {\n                return createHook(...args);\n            }\n            catch (e) {\n                this._diag.error('caught createHook error', e);\n            }\n        }\n        return true;\n    }\n    _runEndHook(...args) {\n        const { endHook } = this.getConfig();\n        if (typeof endHook === 'function') {\n            try {\n                endHook(...args);\n            }\n            catch (e) {\n                this._diag.error('caught endHook error', e);\n            }\n        }\n    }\n    _shouldTrace(context) {\n        if ((0, core_1.isTracingSuppressed)(context)) {\n            // Performance optimization. Avoid creating additional contexts and spans\n            // if we already know that the tracing is being suppressed.\n            return false;\n        }\n        const { requireParentSpan } = this.getConfig();\n        if (requireParentSpan) {\n            const parentSpan = api.trace.getSpan(context);\n            if (parentSpan == null) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nexports.FsInstrumentation = FsInstrumentation;\n//# sourceMappingURL=instrumentation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1mcy9idWlsZC9zcmMvaW5zdHJ1bWVudGF0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhLENBQUMsd0RBQXdELHlDQUF5QywwQ0FBMEMsOENBQThDO0FBQ3ZNO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx5QkFBeUI7QUFDekIsWUFBWSxtQkFBTyxDQUFDLDZGQUFvQjtBQUN4QyxlQUFlLG1CQUFPLENBQUMsK0ZBQXFCO0FBQzVDLDBCQUEwQixtQkFBTyxDQUFDLHFIQUFnQztBQUNsRTtBQUNBLGtCQUFrQixtQkFBTyxDQUFDLHFHQUFXO0FBQ3JDLG9CQUFvQixtQkFBTyxDQUFDLHlHQUFhO0FBQ3pDLGVBQWUsbUJBQU8sQ0FBQyxrQkFBTTtBQUM3QixnQkFBZ0IsbUJBQU8sQ0FBQyxpR0FBUztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixxQ0FBcUM7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLHFDQUFxQztBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLHFDQUFxQztBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLHFDQUFxQztBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxnRUFBZ0UsYUFBYTtBQUM3RTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQsa0JBQWtCO0FBQzlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLDREQUE0RCx5QkFBeUI7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0VBQW9FLGFBQWE7QUFDakY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvRUFBb0UsYUFBYTtBQUNqRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRCxxQkFBcUI7QUFDMUU7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxnRUFBZ0UsYUFBYTtBQUM3RTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQsa0JBQWtCO0FBQzlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLDREQUE0RCx5QkFBeUI7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGFBQWE7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixVQUFVO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixvQkFBb0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1mcy9idWlsZC9zcmMvaW5zdHJ1bWVudGF0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiOztnbG9iYWxUaGlzW1wiX3NlbnRyeVJld3JpdGVzVHVubmVsUGF0aFwiXSA9IFwiL21vbml0b3JpbmdcIjtnbG9iYWxUaGlzW1wiU0VOVFJZX1JFTEVBU0VcIl0gPSB1bmRlZmluZWQ7Z2xvYmFsVGhpc1tcIl9zZW50cnlCYXNlUGF0aFwiXSA9IHVuZGVmaW5lZDtnbG9iYWxUaGlzW1wiX3NlbnRyeU5leHRKc1ZlcnNpb25cIl0gPSBcIjE1LjUuMlwiO2dsb2JhbFRoaXNbXCJfc2VudHJ5UmV3cml0ZUZyYW1lc0Rpc3REaXJcIl0gPSBcIi5uZXh0XCI7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Gc0luc3RydW1lbnRhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGFwaSA9IHJlcXVpcmUoXCJAb3BlbnRlbGVtZXRyeS9hcGlcIik7XG5jb25zdCBjb3JlXzEgPSByZXF1aXJlKFwiQG9wZW50ZWxlbWV0cnkvY29yZVwiKTtcbmNvbnN0IGluc3RydW1lbnRhdGlvbl8xID0gcmVxdWlyZShcIkBvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvblwiKTtcbi8qKiBAa25pcGlnbm9yZSAqL1xuY29uc3QgdmVyc2lvbl8xID0gcmVxdWlyZShcIi4vdmVyc2lvblwiKTtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4vY29uc3RhbnRzXCIpO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcInV0aWxcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG4vKipcbiAqIFRoaXMgaXMgaW1wb3J0YW50IGZvciAyLWxldmVsIGZ1bmN0aW9ucyBsaWtlIGByZWFscGF0aC5uYXRpdmVgIHRvIHJldGFpbiB0aGUgMm5kLWxldmVsXG4gKiB3aGVuIHBhdGNoaW5nIHRoZSAxc3QtbGV2ZWwuXG4gKi9cbmZ1bmN0aW9uIHBhdGNoZWRGdW5jdGlvbldpdGhPcmlnaW5hbFByb3BlcnRpZXMocGF0Y2hlZEZ1bmN0aW9uLCBvcmlnaW5hbCkge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHBhdGNoZWRGdW5jdGlvbiwgb3JpZ2luYWwpO1xufVxuY2xhc3MgRnNJbnN0cnVtZW50YXRpb24gZXh0ZW5kcyBpbnN0cnVtZW50YXRpb25fMS5JbnN0cnVtZW50YXRpb25CYXNlIHtcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcgPSB7fSkge1xuICAgICAgICBzdXBlcih2ZXJzaW9uXzEuUEFDS0FHRV9OQU1FLCB2ZXJzaW9uXzEuUEFDS0FHRV9WRVJTSU9OLCBjb25maWcpO1xuICAgIH1cbiAgICBpbml0KCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgbmV3IGluc3RydW1lbnRhdGlvbl8xLkluc3RydW1lbnRhdGlvbk5vZGVNb2R1bGVEZWZpbml0aW9uKCdmcycsIFsnKiddLCAoZnMpID0+IHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGZOYW1lIG9mIGNvbnN0YW50c18xLlNZTkNfRlVOQ1RJT05TKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgb2JqZWN0VG9QYXRjaCwgZnVuY3Rpb25OYW1lVG9QYXRjaCB9ID0gKDAsIHV0aWxzXzEuaW5kZXhGcykoZnMsIGZOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCgwLCBpbnN0cnVtZW50YXRpb25fMS5pc1dyYXBwZWQpKG9iamVjdFRvUGF0Y2hbZnVuY3Rpb25OYW1lVG9QYXRjaF0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl91bndyYXAob2JqZWN0VG9QYXRjaCwgZnVuY3Rpb25OYW1lVG9QYXRjaCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fd3JhcChvYmplY3RUb1BhdGNoLCBmdW5jdGlvbk5hbWVUb1BhdGNoLCB0aGlzLl9wYXRjaFN5bmNGdW5jdGlvbi5iaW5kKHRoaXMsIGZOYW1lKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZk5hbWUgb2YgY29uc3RhbnRzXzEuQ0FMTEJBQ0tfRlVOQ1RJT05TKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgb2JqZWN0VG9QYXRjaCwgZnVuY3Rpb25OYW1lVG9QYXRjaCB9ID0gKDAsIHV0aWxzXzEuaW5kZXhGcykoZnMsIGZOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCgwLCBpbnN0cnVtZW50YXRpb25fMS5pc1dyYXBwZWQpKG9iamVjdFRvUGF0Y2hbZnVuY3Rpb25OYW1lVG9QYXRjaF0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl91bndyYXAob2JqZWN0VG9QYXRjaCwgZnVuY3Rpb25OYW1lVG9QYXRjaCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGZOYW1lID09PSAnZXhpc3RzJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaGFuZGxpbmcgc2VwYXJhdGVseSBiZWNhdXNlIG9mIHRoZSBpbmNvbnNpc3RlbnQgY2Igc3R5bGU6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBgZXhpc3RzYCBkb2Vzbid0IGhhdmUgZXJyb3IgYXMgdGhlIGZpcnN0IGFyZ3VtZW50LCBidXQgdGhlIHJlc3VsdFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fd3JhcChvYmplY3RUb1BhdGNoLCBmdW5jdGlvbk5hbWVUb1BhdGNoLCB0aGlzLl9wYXRjaEV4aXN0c0NhbGxiYWNrRnVuY3Rpb24uYmluZCh0aGlzLCBmTmFtZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fd3JhcChvYmplY3RUb1BhdGNoLCBmdW5jdGlvbk5hbWVUb1BhdGNoLCB0aGlzLl9wYXRjaENhbGxiYWNrRnVuY3Rpb24uYmluZCh0aGlzLCBmTmFtZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGZOYW1lIG9mIGNvbnN0YW50c18xLlBST01JU0VfRlVOQ1RJT05TKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgoMCwgaW5zdHJ1bWVudGF0aW9uXzEuaXNXcmFwcGVkKShmcy5wcm9taXNlc1tmTmFtZV0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl91bndyYXAoZnMucHJvbWlzZXMsIGZOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl93cmFwKGZzLnByb21pc2VzLCBmTmFtZSwgdGhpcy5fcGF0Y2hQcm9taXNlRnVuY3Rpb24uYmluZCh0aGlzLCBmTmFtZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZnM7XG4gICAgICAgICAgICB9LCAoZnMpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZnMgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZk5hbWUgb2YgY29uc3RhbnRzXzEuU1lOQ19GVU5DVElPTlMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBvYmplY3RUb1BhdGNoLCBmdW5jdGlvbk5hbWVUb1BhdGNoIH0gPSAoMCwgdXRpbHNfMS5pbmRleEZzKShmcywgZk5hbWUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoKDAsIGluc3RydW1lbnRhdGlvbl8xLmlzV3JhcHBlZCkob2JqZWN0VG9QYXRjaFtmdW5jdGlvbk5hbWVUb1BhdGNoXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Vud3JhcChvYmplY3RUb1BhdGNoLCBmdW5jdGlvbk5hbWVUb1BhdGNoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGZOYW1lIG9mIGNvbnN0YW50c18xLkNBTExCQUNLX0ZVTkNUSU9OUykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IG9iamVjdFRvUGF0Y2gsIGZ1bmN0aW9uTmFtZVRvUGF0Y2ggfSA9ICgwLCB1dGlsc18xLmluZGV4RnMpKGZzLCBmTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICgoMCwgaW5zdHJ1bWVudGF0aW9uXzEuaXNXcmFwcGVkKShvYmplY3RUb1BhdGNoW2Z1bmN0aW9uTmFtZVRvUGF0Y2hdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdW53cmFwKG9iamVjdFRvUGF0Y2gsIGZ1bmN0aW9uTmFtZVRvUGF0Y2gpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZk5hbWUgb2YgY29uc3RhbnRzXzEuUFJPTUlTRV9GVU5DVElPTlMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCgwLCBpbnN0cnVtZW50YXRpb25fMS5pc1dyYXBwZWQpKGZzLnByb21pc2VzW2ZOYW1lXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Vud3JhcChmcy5wcm9taXNlcywgZk5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBuZXcgaW5zdHJ1bWVudGF0aW9uXzEuSW5zdHJ1bWVudGF0aW9uTm9kZU1vZHVsZURlZmluaXRpb24oJ2ZzL3Byb21pc2VzJywgWycqJ10sIChmc1Byb21pc2VzKSA9PiB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBmTmFtZSBvZiBjb25zdGFudHNfMS5QUk9NSVNFX0ZVTkNUSU9OUykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoKDAsIGluc3RydW1lbnRhdGlvbl8xLmlzV3JhcHBlZCkoZnNQcm9taXNlc1tmTmFtZV0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl91bndyYXAoZnNQcm9taXNlcywgZk5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3dyYXAoZnNQcm9taXNlcywgZk5hbWUsIHRoaXMuX3BhdGNoUHJvbWlzZUZ1bmN0aW9uLmJpbmQodGhpcywgZk5hbWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZzUHJvbWlzZXM7XG4gICAgICAgICAgICB9LCAoZnNQcm9taXNlcykgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChmc1Byb21pc2VzID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGZOYW1lIG9mIGNvbnN0YW50c18xLlBST01JU0VfRlVOQ1RJT05TKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgoMCwgaW5zdHJ1bWVudGF0aW9uXzEuaXNXcmFwcGVkKShmc1Byb21pc2VzW2ZOYW1lXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Vud3JhcChmc1Byb21pc2VzLCBmTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgXTtcbiAgICB9XG4gICAgX3BhdGNoU3luY0Z1bmN0aW9uKGZ1bmN0aW9uTmFtZSwgb3JpZ2luYWwpIHtcbiAgICAgICAgY29uc3QgaW5zdHJ1bWVudGF0aW9uID0gdGhpcztcbiAgICAgICAgY29uc3QgcGF0Y2hlZEZ1bmN0aW9uID0gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIGNvbnN0IGFjdGl2ZUNvbnRleHQgPSBhcGkuY29udGV4dC5hY3RpdmUoKTtcbiAgICAgICAgICAgIGlmICghaW5zdHJ1bWVudGF0aW9uLl9zaG91bGRUcmFjZShhY3RpdmVDb250ZXh0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpbnN0cnVtZW50YXRpb24uX3J1bkNyZWF0ZUhvb2soZnVuY3Rpb25OYW1lLCB7XG4gICAgICAgICAgICAgICAgYXJnczogYXJncyxcbiAgICAgICAgICAgIH0pID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhcGkuY29udGV4dC53aXRoKCgwLCBjb3JlXzEuc3VwcHJlc3NUcmFjaW5nKShhY3RpdmVDb250ZXh0KSwgb3JpZ2luYWwsIHRoaXMsIC4uLmFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgc3BhbiA9IGluc3RydW1lbnRhdGlvbi50cmFjZXIuc3RhcnRTcGFuKGBmcyAke2Z1bmN0aW9uTmFtZX1gKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgLy8gU3VwcHJlc3MgdHJhY2luZyBmb3IgaW50ZXJuYWwgZnMgY2FsbHNcbiAgICAgICAgICAgICAgICBjb25zdCByZXMgPSBhcGkuY29udGV4dC53aXRoKCgwLCBjb3JlXzEuc3VwcHJlc3NUcmFjaW5nKShhcGkudHJhY2Uuc2V0U3BhbihhY3RpdmVDb250ZXh0LCBzcGFuKSksIG9yaWdpbmFsLCB0aGlzLCAuLi5hcmdzKTtcbiAgICAgICAgICAgICAgICBpbnN0cnVtZW50YXRpb24uX3J1bkVuZEhvb2soZnVuY3Rpb25OYW1lLCB7IGFyZ3M6IGFyZ3MsIHNwYW4gfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHNwYW4ucmVjb3JkRXhjZXB0aW9uKGVycm9yKTtcbiAgICAgICAgICAgICAgICBzcGFuLnNldFN0YXR1cyh7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIGNvZGU6IGFwaS5TcGFuU3RhdHVzQ29kZS5FUlJPUixcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpbnN0cnVtZW50YXRpb24uX3J1bkVuZEhvb2soZnVuY3Rpb25OYW1lLCB7IGFyZ3M6IGFyZ3MsIHNwYW4sIGVycm9yIH0pO1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgc3Bhbi5lbmQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHBhdGNoZWRGdW5jdGlvbldpdGhPcmlnaW5hbFByb3BlcnRpZXMocGF0Y2hlZEZ1bmN0aW9uLCBvcmlnaW5hbCk7XG4gICAgfVxuICAgIF9wYXRjaENhbGxiYWNrRnVuY3Rpb24oZnVuY3Rpb25OYW1lLCBvcmlnaW5hbCkge1xuICAgICAgICBjb25zdCBpbnN0cnVtZW50YXRpb24gPSB0aGlzO1xuICAgICAgICBjb25zdCBwYXRjaGVkRnVuY3Rpb24gPSBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICAgICAgY29uc3QgYWN0aXZlQ29udGV4dCA9IGFwaS5jb250ZXh0LmFjdGl2ZSgpO1xuICAgICAgICAgICAgaWYgKCFpbnN0cnVtZW50YXRpb24uX3Nob3VsZFRyYWNlKGFjdGl2ZUNvbnRleHQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGluc3RydW1lbnRhdGlvbi5fcnVuQ3JlYXRlSG9vayhmdW5jdGlvbk5hbWUsIHtcbiAgICAgICAgICAgICAgICBhcmdzOiBhcmdzLFxuICAgICAgICAgICAgfSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFwaS5jb250ZXh0LndpdGgoKDAsIGNvcmVfMS5zdXBwcmVzc1RyYWNpbmcpKGFjdGl2ZUNvbnRleHQpLCBvcmlnaW5hbCwgdGhpcywgLi4uYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsYXN0SWR4ID0gYXJncy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgY29uc3QgY2IgPSBhcmdzW2xhc3RJZHhdO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNwYW4gPSBpbnN0cnVtZW50YXRpb24udHJhY2VyLnN0YXJ0U3BhbihgZnMgJHtmdW5jdGlvbk5hbWV9YCk7XG4gICAgICAgICAgICAgICAgLy8gUmV0dXJuIHRvIHRoZSBjb250ZXh0IGFjdGl2ZSBkdXJpbmcgdGhlIGNhbGwgaW4gdGhlIGNhbGxiYWNrXG4gICAgICAgICAgICAgICAgYXJnc1tsYXN0SWR4XSA9IGFwaS5jb250ZXh0LmJpbmQoYWN0aXZlQ29udGV4dCwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Bhbi5yZWNvcmRFeGNlcHRpb24oZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Bhbi5zZXRTdGF0dXMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogYXBpLlNwYW5TdGF0dXNDb2RlLkVSUk9SLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaW5zdHJ1bWVudGF0aW9uLl9ydW5FbmRIb29rKGZ1bmN0aW9uTmFtZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJnczogYXJncyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwYW4sXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcixcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHNwYW4uZW5kKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjYi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFN1cHByZXNzIHRyYWNpbmcgZm9yIGludGVybmFsIGZzIGNhbGxzXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhcGkuY29udGV4dC53aXRoKCgwLCBjb3JlXzEuc3VwcHJlc3NUcmFjaW5nKShhcGkudHJhY2Uuc2V0U3BhbihhY3RpdmVDb250ZXh0LCBzcGFuKSksIG9yaWdpbmFsLCB0aGlzLCAuLi5hcmdzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHNwYW4ucmVjb3JkRXhjZXB0aW9uKGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgc3Bhbi5zZXRTdGF0dXMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IGFwaS5TcGFuU3RhdHVzQ29kZS5FUlJPUixcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGluc3RydW1lbnRhdGlvbi5fcnVuRW5kSG9vayhmdW5jdGlvbk5hbWUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3M6IGFyZ3MsXG4gICAgICAgICAgICAgICAgICAgICAgICBzcGFuLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzcGFuLmVuZCgpO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiB3aGF0IHRvIGRvIGlmIHdlIGFyZSBwcmV0dHkgc3VyZSBpdCdzIGdvaW5nIHRvIHRocm93XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gcGF0Y2hlZEZ1bmN0aW9uV2l0aE9yaWdpbmFsUHJvcGVydGllcyhwYXRjaGVkRnVuY3Rpb24sIG9yaWdpbmFsKTtcbiAgICB9XG4gICAgX3BhdGNoRXhpc3RzQ2FsbGJhY2tGdW5jdGlvbihmdW5jdGlvbk5hbWUsIG9yaWdpbmFsKSB7XG4gICAgICAgIGNvbnN0IGluc3RydW1lbnRhdGlvbiA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHBhdGNoZWRGdW5jdGlvbiA9IGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgICAgICBjb25zdCBhY3RpdmVDb250ZXh0ID0gYXBpLmNvbnRleHQuYWN0aXZlKCk7XG4gICAgICAgICAgICBpZiAoIWluc3RydW1lbnRhdGlvbi5fc2hvdWxkVHJhY2UoYWN0aXZlQ29udGV4dCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3JpZ2luYWwuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaW5zdHJ1bWVudGF0aW9uLl9ydW5DcmVhdGVIb29rKGZ1bmN0aW9uTmFtZSwge1xuICAgICAgICAgICAgICAgIGFyZ3M6IGFyZ3MsXG4gICAgICAgICAgICB9KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXBpLmNvbnRleHQud2l0aCgoMCwgY29yZV8xLnN1cHByZXNzVHJhY2luZykoYWN0aXZlQ29udGV4dCksIG9yaWdpbmFsLCB0aGlzLCAuLi5hcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxhc3RJZHggPSBhcmdzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICBjb25zdCBjYiA9IGFyZ3NbbGFzdElkeF07XG4gICAgICAgICAgICBpZiAodHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3BhbiA9IGluc3RydW1lbnRhdGlvbi50cmFjZXIuc3RhcnRTcGFuKGBmcyAke2Z1bmN0aW9uTmFtZX1gKTtcbiAgICAgICAgICAgICAgICAvLyBSZXR1cm4gdG8gdGhlIGNvbnRleHQgYWN0aXZlIGR1cmluZyB0aGUgY2FsbCBpbiB0aGUgY2FsbGJhY2tcbiAgICAgICAgICAgICAgICBhcmdzW2xhc3RJZHhdID0gYXBpLmNvbnRleHQuYmluZChhY3RpdmVDb250ZXh0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGBleGlzdHNgIG5ldmVyIGNhbGxzIHRoZSBjYWxsYmFjayB3aXRoIGFuIGVycm9yXG4gICAgICAgICAgICAgICAgICAgIGluc3RydW1lbnRhdGlvbi5fcnVuRW5kSG9vayhmdW5jdGlvbk5hbWUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3M6IGFyZ3MsXG4gICAgICAgICAgICAgICAgICAgICAgICBzcGFuLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3Bhbi5lbmQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNiLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU3VwcHJlc3MgdHJhY2luZyBmb3IgaW50ZXJuYWwgZnMgY2FsbHNcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFwaS5jb250ZXh0LndpdGgoKDAsIGNvcmVfMS5zdXBwcmVzc1RyYWNpbmcpKGFwaS50cmFjZS5zZXRTcGFuKGFjdGl2ZUNvbnRleHQsIHNwYW4pKSwgb3JpZ2luYWwsIHRoaXMsIC4uLmFyZ3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Bhbi5yZWNvcmRFeGNlcHRpb24oZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICBzcGFuLnNldFN0YXR1cyh7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogYXBpLlNwYW5TdGF0dXNDb2RlLkVSUk9SLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgaW5zdHJ1bWVudGF0aW9uLl9ydW5FbmRIb29rKGZ1bmN0aW9uTmFtZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJnczogYXJncyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwYW4sXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcixcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHNwYW4uZW5kKCk7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZnVuY3Rpb25XaXRoT3JpZ2luYWxQcm9wZXJ0aWVzID0gcGF0Y2hlZEZ1bmN0aW9uV2l0aE9yaWdpbmFsUHJvcGVydGllcyhwYXRjaGVkRnVuY3Rpb24sIG9yaWdpbmFsKTtcbiAgICAgICAgLy8gYGV4aXN0c2AgaGFzIGEgY3VzdG9tIHByb21pc2lmeSBmdW5jdGlvbiBiZWNhdXNlIG9mIHRoZSBpbmNvbnNpc3RlbnQgc2lnbmF0dXJlXG4gICAgICAgIC8vIHJlcGxpY2F0aW5nIHRoYXQgb24gdGhlIHBhdGNoZWQgZnVuY3Rpb25cbiAgICAgICAgY29uc3QgcHJvbWlzaWZpZWQgPSBmdW5jdGlvbiAocGF0aCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4gZnVuY3Rpb25XaXRoT3JpZ2luYWxQcm9wZXJ0aWVzKHBhdGgsIHJlc29sdmUpKTtcbiAgICAgICAgfTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2lmaWVkLCAnbmFtZScsIHsgdmFsdWU6IGZ1bmN0aW9uTmFtZSB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZ1bmN0aW9uV2l0aE9yaWdpbmFsUHJvcGVydGllcywgdXRpbF8xLnByb21pc2lmeS5jdXN0b20sIHtcbiAgICAgICAgICAgIHZhbHVlOiBwcm9taXNpZmllZCxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbldpdGhPcmlnaW5hbFByb3BlcnRpZXM7XG4gICAgfVxuICAgIF9wYXRjaFByb21pc2VGdW5jdGlvbihmdW5jdGlvbk5hbWUsIG9yaWdpbmFsKSB7XG4gICAgICAgIGNvbnN0IGluc3RydW1lbnRhdGlvbiA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHBhdGNoZWRGdW5jdGlvbiA9IGFzeW5jIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgICAgICBjb25zdCBhY3RpdmVDb250ZXh0ID0gYXBpLmNvbnRleHQuYWN0aXZlKCk7XG4gICAgICAgICAgICBpZiAoIWluc3RydW1lbnRhdGlvbi5fc2hvdWxkVHJhY2UoYWN0aXZlQ29udGV4dCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3JpZ2luYWwuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaW5zdHJ1bWVudGF0aW9uLl9ydW5DcmVhdGVIb29rKGZ1bmN0aW9uTmFtZSwge1xuICAgICAgICAgICAgICAgIGFyZ3M6IGFyZ3MsXG4gICAgICAgICAgICB9KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXBpLmNvbnRleHQud2l0aCgoMCwgY29yZV8xLnN1cHByZXNzVHJhY2luZykoYWN0aXZlQ29udGV4dCksIG9yaWdpbmFsLCB0aGlzLCAuLi5hcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHNwYW4gPSBpbnN0cnVtZW50YXRpb24udHJhY2VyLnN0YXJ0U3BhbihgZnMgJHtmdW5jdGlvbk5hbWV9YCk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIC8vIFN1cHByZXNzIHRyYWNpbmcgZm9yIGludGVybmFsIGZzIGNhbGxzXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgYXBpLmNvbnRleHQud2l0aCgoMCwgY29yZV8xLnN1cHByZXNzVHJhY2luZykoYXBpLnRyYWNlLnNldFNwYW4oYWN0aXZlQ29udGV4dCwgc3BhbikpLCBvcmlnaW5hbCwgdGhpcywgLi4uYXJncyk7XG4gICAgICAgICAgICAgICAgaW5zdHJ1bWVudGF0aW9uLl9ydW5FbmRIb29rKGZ1bmN0aW9uTmFtZSwgeyBhcmdzOiBhcmdzLCBzcGFuIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBzcGFuLnJlY29yZEV4Y2VwdGlvbihlcnJvcik7XG4gICAgICAgICAgICAgICAgc3Bhbi5zZXRTdGF0dXMoe1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICBjb2RlOiBhcGkuU3BhblN0YXR1c0NvZGUuRVJST1IsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaW5zdHJ1bWVudGF0aW9uLl9ydW5FbmRIb29rKGZ1bmN0aW9uTmFtZSwgeyBhcmdzOiBhcmdzLCBzcGFuLCBlcnJvciB9KTtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHNwYW4uZW5kKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBwYXRjaGVkRnVuY3Rpb25XaXRoT3JpZ2luYWxQcm9wZXJ0aWVzKHBhdGNoZWRGdW5jdGlvbiwgb3JpZ2luYWwpO1xuICAgIH1cbiAgICBfcnVuQ3JlYXRlSG9vayguLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IHsgY3JlYXRlSG9vayB9ID0gdGhpcy5nZXRDb25maWcoKTtcbiAgICAgICAgaWYgKHR5cGVvZiBjcmVhdGVIb29rID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVIb29rKC4uLmFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9kaWFnLmVycm9yKCdjYXVnaHQgY3JlYXRlSG9vayBlcnJvcicsIGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBfcnVuRW5kSG9vayguLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IHsgZW5kSG9vayB9ID0gdGhpcy5nZXRDb25maWcoKTtcbiAgICAgICAgaWYgKHR5cGVvZiBlbmRIb29rID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGVuZEhvb2soLi4uYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2RpYWcuZXJyb3IoJ2NhdWdodCBlbmRIb29rIGVycm9yJywgZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3Nob3VsZFRyYWNlKGNvbnRleHQpIHtcbiAgICAgICAgaWYgKCgwLCBjb3JlXzEuaXNUcmFjaW5nU3VwcHJlc3NlZCkoY29udGV4dCkpIHtcbiAgICAgICAgICAgIC8vIFBlcmZvcm1hbmNlIG9wdGltaXphdGlvbi4gQXZvaWQgY3JlYXRpbmcgYWRkaXRpb25hbCBjb250ZXh0cyBhbmQgc3BhbnNcbiAgICAgICAgICAgIC8vIGlmIHdlIGFscmVhZHkga25vdyB0aGF0IHRoZSB0cmFjaW5nIGlzIGJlaW5nIHN1cHByZXNzZWQuXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyByZXF1aXJlUGFyZW50U3BhbiB9ID0gdGhpcy5nZXRDb25maWcoKTtcbiAgICAgICAgaWYgKHJlcXVpcmVQYXJlbnRTcGFuKSB7XG4gICAgICAgICAgICBjb25zdCBwYXJlbnRTcGFuID0gYXBpLnRyYWNlLmdldFNwYW4oY29udGV4dCk7XG4gICAgICAgICAgICBpZiAocGFyZW50U3BhbiA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cbmV4cG9ydHMuRnNJbnN0cnVtZW50YXRpb24gPSBGc0luc3RydW1lbnRhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluc3RydW1lbnRhdGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-fs/build/src/instrumentation.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-fs/build/src/utils.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-fs/build/src/utils.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.indexFs = exports.splitTwoLevels = void 0;\nfunction splitTwoLevels(functionName) {\n    const memberParts = functionName.split('.');\n    if (memberParts.length > 1) {\n        if (memberParts.length !== 2)\n            throw Error(`Invalid member function name ${functionName}`);\n        return memberParts;\n    }\n    else {\n        return [functionName];\n    }\n}\nexports.splitTwoLevels = splitTwoLevels;\nfunction indexFs(fs, member) {\n    if (!member)\n        throw new Error(JSON.stringify({ member }));\n    const splitResult = splitTwoLevels(member);\n    const [functionName1, functionName2] = splitResult;\n    if (functionName2) {\n        return {\n            objectToPatch: fs[functionName1],\n            functionNameToPatch: functionName2,\n        };\n    }\n    else {\n        return {\n            objectToPatch: fs,\n            functionNameToPatch: functionName1,\n        };\n    }\n}\nexports.indexFs = indexFs;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1mcy9idWlsZC9zcmMvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZUFBZSxHQUFHLHNCQUFzQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBLHdEQUF3RCxhQUFhO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0EseUNBQXlDLFFBQVE7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1mcy9idWlsZC9zcmMvdXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmluZGV4RnMgPSBleHBvcnRzLnNwbGl0VHdvTGV2ZWxzID0gdm9pZCAwO1xuZnVuY3Rpb24gc3BsaXRUd29MZXZlbHMoZnVuY3Rpb25OYW1lKSB7XG4gICAgY29uc3QgbWVtYmVyUGFydHMgPSBmdW5jdGlvbk5hbWUuc3BsaXQoJy4nKTtcbiAgICBpZiAobWVtYmVyUGFydHMubGVuZ3RoID4gMSkge1xuICAgICAgICBpZiAobWVtYmVyUGFydHMubGVuZ3RoICE9PSAyKVxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoYEludmFsaWQgbWVtYmVyIGZ1bmN0aW9uIG5hbWUgJHtmdW5jdGlvbk5hbWV9YCk7XG4gICAgICAgIHJldHVybiBtZW1iZXJQYXJ0cztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBbZnVuY3Rpb25OYW1lXTtcbiAgICB9XG59XG5leHBvcnRzLnNwbGl0VHdvTGV2ZWxzID0gc3BsaXRUd29MZXZlbHM7XG5mdW5jdGlvbiBpbmRleEZzKGZzLCBtZW1iZXIpIHtcbiAgICBpZiAoIW1lbWJlcilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKEpTT04uc3RyaW5naWZ5KHsgbWVtYmVyIH0pKTtcbiAgICBjb25zdCBzcGxpdFJlc3VsdCA9IHNwbGl0VHdvTGV2ZWxzKG1lbWJlcik7XG4gICAgY29uc3QgW2Z1bmN0aW9uTmFtZTEsIGZ1bmN0aW9uTmFtZTJdID0gc3BsaXRSZXN1bHQ7XG4gICAgaWYgKGZ1bmN0aW9uTmFtZTIpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG9iamVjdFRvUGF0Y2g6IGZzW2Z1bmN0aW9uTmFtZTFdLFxuICAgICAgICAgICAgZnVuY3Rpb25OYW1lVG9QYXRjaDogZnVuY3Rpb25OYW1lMixcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBvYmplY3RUb1BhdGNoOiBmcyxcbiAgICAgICAgICAgIGZ1bmN0aW9uTmFtZVRvUGF0Y2g6IGZ1bmN0aW9uTmFtZTEsXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0cy5pbmRleEZzID0gaW5kZXhGcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-fs/build/src/utils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-fs/build/src/version.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-fs/build/src/version.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PACKAGE_NAME = exports.PACKAGE_VERSION = void 0;\n// this is autogenerated file, see scripts/version-update.js\nexports.PACKAGE_VERSION = '0.23.0';\nexports.PACKAGE_NAME = '@opentelemetry/instrumentation-fs';\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1mcy9idWlsZC9zcmMvdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0IsR0FBRyx1QkFBdUI7QUFDOUM7QUFDQSx1QkFBdUI7QUFDdkIsb0JBQW9CO0FBQ3BCIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1mcy9idWlsZC9zcmMvdmVyc2lvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlBBQ0tBR0VfTkFNRSA9IGV4cG9ydHMuUEFDS0FHRV9WRVJTSU9OID0gdm9pZCAwO1xuLy8gdGhpcyBpcyBhdXRvZ2VuZXJhdGVkIGZpbGUsIHNlZSBzY3JpcHRzL3ZlcnNpb24tdXBkYXRlLmpzXG5leHBvcnRzLlBBQ0tBR0VfVkVSU0lPTiA9ICcwLjIzLjAnO1xuZXhwb3J0cy5QQUNLQUdFX05BTUUgPSAnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWZzJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-fs/build/src/version.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-generic-pool/build/src/index.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-generic-pool/build/src/index.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GenericPoolInstrumentation = void 0;\nvar instrumentation_1 = __webpack_require__(/*! ./instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-generic-pool/build/src/instrumentation.js\");\nObject.defineProperty(exports, \"GenericPoolInstrumentation\", ({ enumerable: true, get: function () { return instrumentation_1.GenericPoolInstrumentation; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1nZW5lcmljLXBvb2wvYnVpbGQvc3JjL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtDQUFrQztBQUNsQyx3QkFBd0IsbUJBQU8sQ0FBQywrSEFBbUI7QUFDbkQsOERBQTZELEVBQUUscUNBQXFDLHdEQUF3RCxFQUFDO0FBQzdKIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1nZW5lcmljLXBvb2wvYnVpbGQvc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuR2VuZXJpY1Bvb2xJbnN0cnVtZW50YXRpb24gPSB2b2lkIDA7XG52YXIgaW5zdHJ1bWVudGF0aW9uXzEgPSByZXF1aXJlKFwiLi9pbnN0cnVtZW50YXRpb25cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJHZW5lcmljUG9vbEluc3RydW1lbnRhdGlvblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW5zdHJ1bWVudGF0aW9uXzEuR2VuZXJpY1Bvb2xJbnN0cnVtZW50YXRpb247IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-generic-pool/build/src/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-generic-pool/build/src/instrumentation.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-generic-pool/build/src/instrumentation.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = \"/monitoring\";globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.2\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GenericPoolInstrumentation = void 0;\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\n/** @knipignore */\nconst version_1 = __webpack_require__(/*! ./version */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-generic-pool/build/src/version.js\");\nconst MODULE_NAME = 'generic-pool';\nclass GenericPoolInstrumentation extends instrumentation_1.InstrumentationBase {\n    // only used for v2 - v2.3)\n    _isDisabled = false;\n    constructor(config = {}) {\n        super(version_1.PACKAGE_NAME, version_1.PACKAGE_VERSION, config);\n    }\n    init() {\n        return [\n            new instrumentation_1.InstrumentationNodeModuleDefinition(MODULE_NAME, ['>=3.0.0 <4'], moduleExports => {\n                const Pool = moduleExports.Pool;\n                if ((0, instrumentation_1.isWrapped)(Pool.prototype.acquire)) {\n                    this._unwrap(Pool.prototype, 'acquire');\n                }\n                this._wrap(Pool.prototype, 'acquire', this._acquirePatcher.bind(this));\n                return moduleExports;\n            }, moduleExports => {\n                const Pool = moduleExports.Pool;\n                this._unwrap(Pool.prototype, 'acquire');\n                return moduleExports;\n            }),\n            new instrumentation_1.InstrumentationNodeModuleDefinition(MODULE_NAME, ['>=2.4.0 <3'], moduleExports => {\n                const Pool = moduleExports.Pool;\n                if ((0, instrumentation_1.isWrapped)(Pool.prototype.acquire)) {\n                    this._unwrap(Pool.prototype, 'acquire');\n                }\n                this._wrap(Pool.prototype, 'acquire', this._acquireWithCallbacksPatcher.bind(this));\n                return moduleExports;\n            }, moduleExports => {\n                const Pool = moduleExports.Pool;\n                this._unwrap(Pool.prototype, 'acquire');\n                return moduleExports;\n            }),\n            new instrumentation_1.InstrumentationNodeModuleDefinition(MODULE_NAME, ['>=2.0.0 <2.4'], moduleExports => {\n                this._isDisabled = false;\n                if ((0, instrumentation_1.isWrapped)(moduleExports.Pool)) {\n                    this._unwrap(moduleExports, 'Pool');\n                }\n                this._wrap(moduleExports, 'Pool', this._poolWrapper.bind(this));\n                return moduleExports;\n            }, moduleExports => {\n                // since the object is created on the fly every time, we need to use\n                // a boolean switch here to disable the instrumentation\n                this._isDisabled = true;\n                return moduleExports;\n            }),\n        ];\n    }\n    _acquirePatcher(original) {\n        const instrumentation = this;\n        return function wrapped_acquire(...args) {\n            const parent = api.context.active();\n            const span = instrumentation.tracer.startSpan('generic-pool.acquire', {}, parent);\n            return api.context.with(api.trace.setSpan(parent, span), () => {\n                return original.call(this, ...args).then(value => {\n                    span.end();\n                    return value;\n                }, err => {\n                    span.recordException(err);\n                    span.end();\n                    throw err;\n                });\n            });\n        };\n    }\n    _poolWrapper(original) {\n        const instrumentation = this;\n        return function wrapped_pool() {\n            const pool = original.apply(this, arguments);\n            instrumentation._wrap(pool, 'acquire', instrumentation._acquireWithCallbacksPatcher.bind(instrumentation));\n            return pool;\n        };\n    }\n    _acquireWithCallbacksPatcher(original) {\n        const instrumentation = this;\n        return function wrapped_acquire(cb, priority) {\n            // only used for v2 - v2.3\n            if (instrumentation._isDisabled) {\n                return original.call(this, cb, priority);\n            }\n            const parent = api.context.active();\n            const span = instrumentation.tracer.startSpan('generic-pool.acquire', {}, parent);\n            return api.context.with(api.trace.setSpan(parent, span), () => {\n                original.call(this, (err, client) => {\n                    span.end();\n                    // Not checking whether cb is a function because\n                    // the original code doesn't do that either.\n                    if (cb) {\n                        return cb(err, client);\n                    }\n                }, priority);\n            });\n        };\n    }\n}\nexports.GenericPoolInstrumentation = GenericPoolInstrumentation;\n//# sourceMappingURL=instrumentation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-generic-pool/build/src/instrumentation.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-generic-pool/build/src/version.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-generic-pool/build/src/version.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PACKAGE_NAME = exports.PACKAGE_VERSION = void 0;\n// this is autogenerated file, see scripts/version-update.js\nexports.PACKAGE_VERSION = '0.47.0';\nexports.PACKAGE_NAME = '@opentelemetry/instrumentation-generic-pool';\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1nZW5lcmljLXBvb2wvYnVpbGQvc3JjL3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0JBQW9CLEdBQUcsdUJBQXVCO0FBQzlDO0FBQ0EsdUJBQXVCO0FBQ3ZCLG9CQUFvQjtBQUNwQiIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tZ2VuZXJpYy1wb29sL2J1aWxkL3NyYy92ZXJzaW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUEFDS0FHRV9OQU1FID0gZXhwb3J0cy5QQUNLQUdFX1ZFUlNJT04gPSB2b2lkIDA7XG4vLyB0aGlzIGlzIGF1dG9nZW5lcmF0ZWQgZmlsZSwgc2VlIHNjcmlwdHMvdmVyc2lvbi11cGRhdGUuanNcbmV4cG9ydHMuUEFDS0FHRV9WRVJTSU9OID0gJzAuNDcuMCc7XG5leHBvcnRzLlBBQ0tBR0VfTkFNRSA9ICdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tZ2VuZXJpYy1wb29sJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-generic-pool/build/src/version.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-graphql/build/src/enum.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-graphql/build/src/enum.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SpanNames = exports.TokenKind = exports.AllowedOperationTypes = void 0;\nvar AllowedOperationTypes;\n(function (AllowedOperationTypes) {\n    AllowedOperationTypes[\"QUERY\"] = \"query\";\n    AllowedOperationTypes[\"MUTATION\"] = \"mutation\";\n    AllowedOperationTypes[\"SUBSCRIPTION\"] = \"subscription\";\n})(AllowedOperationTypes = exports.AllowedOperationTypes || (exports.AllowedOperationTypes = {}));\nvar TokenKind;\n(function (TokenKind) {\n    TokenKind[\"SOF\"] = \"<SOF>\";\n    TokenKind[\"EOF\"] = \"<EOF>\";\n    TokenKind[\"BANG\"] = \"!\";\n    TokenKind[\"DOLLAR\"] = \"$\";\n    TokenKind[\"AMP\"] = \"&\";\n    TokenKind[\"PAREN_L\"] = \"(\";\n    TokenKind[\"PAREN_R\"] = \")\";\n    TokenKind[\"SPREAD\"] = \"...\";\n    TokenKind[\"COLON\"] = \":\";\n    TokenKind[\"EQUALS\"] = \"=\";\n    TokenKind[\"AT\"] = \"@\";\n    TokenKind[\"BRACKET_L\"] = \"[\";\n    TokenKind[\"BRACKET_R\"] = \"]\";\n    TokenKind[\"BRACE_L\"] = \"{\";\n    TokenKind[\"PIPE\"] = \"|\";\n    TokenKind[\"BRACE_R\"] = \"}\";\n    TokenKind[\"NAME\"] = \"Name\";\n    TokenKind[\"INT\"] = \"Int\";\n    TokenKind[\"FLOAT\"] = \"Float\";\n    TokenKind[\"STRING\"] = \"String\";\n    TokenKind[\"BLOCK_STRING\"] = \"BlockString\";\n    TokenKind[\"COMMENT\"] = \"Comment\";\n})(TokenKind = exports.TokenKind || (exports.TokenKind = {}));\nvar SpanNames;\n(function (SpanNames) {\n    SpanNames[\"EXECUTE\"] = \"graphql.execute\";\n    SpanNames[\"PARSE\"] = \"graphql.parse\";\n    SpanNames[\"RESOLVE\"] = \"graphql.resolve\";\n    SpanNames[\"VALIDATE\"] = \"graphql.validate\";\n    SpanNames[\"SCHEMA_VALIDATE\"] = \"graphql.validateSchema\";\n    SpanNames[\"SCHEMA_PARSE\"] = \"graphql.parseSchema\";\n})(SpanNames = exports.SpanNames || (exports.SpanNames = {}));\n//# sourceMappingURL=enum.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1ncmFwaHFsL2J1aWxkL3NyYy9lbnVtLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlCQUFpQixHQUFHLGlCQUFpQixHQUFHLDZCQUE2QjtBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw0REFBNEQsNkJBQTZCLEtBQUs7QUFDL0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsb0NBQW9DLGlCQUFpQixLQUFLO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLG9DQUFvQyxpQkFBaUIsS0FBSztBQUMzRCIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tZ3JhcGhxbC9idWlsZC9zcmMvZW51bS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlNwYW5OYW1lcyA9IGV4cG9ydHMuVG9rZW5LaW5kID0gZXhwb3J0cy5BbGxvd2VkT3BlcmF0aW9uVHlwZXMgPSB2b2lkIDA7XG52YXIgQWxsb3dlZE9wZXJhdGlvblR5cGVzO1xuKGZ1bmN0aW9uIChBbGxvd2VkT3BlcmF0aW9uVHlwZXMpIHtcbiAgICBBbGxvd2VkT3BlcmF0aW9uVHlwZXNbXCJRVUVSWVwiXSA9IFwicXVlcnlcIjtcbiAgICBBbGxvd2VkT3BlcmF0aW9uVHlwZXNbXCJNVVRBVElPTlwiXSA9IFwibXV0YXRpb25cIjtcbiAgICBBbGxvd2VkT3BlcmF0aW9uVHlwZXNbXCJTVUJTQ1JJUFRJT05cIl0gPSBcInN1YnNjcmlwdGlvblwiO1xufSkoQWxsb3dlZE9wZXJhdGlvblR5cGVzID0gZXhwb3J0cy5BbGxvd2VkT3BlcmF0aW9uVHlwZXMgfHwgKGV4cG9ydHMuQWxsb3dlZE9wZXJhdGlvblR5cGVzID0ge30pKTtcbnZhciBUb2tlbktpbmQ7XG4oZnVuY3Rpb24gKFRva2VuS2luZCkge1xuICAgIFRva2VuS2luZFtcIlNPRlwiXSA9IFwiPFNPRj5cIjtcbiAgICBUb2tlbktpbmRbXCJFT0ZcIl0gPSBcIjxFT0Y+XCI7XG4gICAgVG9rZW5LaW5kW1wiQkFOR1wiXSA9IFwiIVwiO1xuICAgIFRva2VuS2luZFtcIkRPTExBUlwiXSA9IFwiJFwiO1xuICAgIFRva2VuS2luZFtcIkFNUFwiXSA9IFwiJlwiO1xuICAgIFRva2VuS2luZFtcIlBBUkVOX0xcIl0gPSBcIihcIjtcbiAgICBUb2tlbktpbmRbXCJQQVJFTl9SXCJdID0gXCIpXCI7XG4gICAgVG9rZW5LaW5kW1wiU1BSRUFEXCJdID0gXCIuLi5cIjtcbiAgICBUb2tlbktpbmRbXCJDT0xPTlwiXSA9IFwiOlwiO1xuICAgIFRva2VuS2luZFtcIkVRVUFMU1wiXSA9IFwiPVwiO1xuICAgIFRva2VuS2luZFtcIkFUXCJdID0gXCJAXCI7XG4gICAgVG9rZW5LaW5kW1wiQlJBQ0tFVF9MXCJdID0gXCJbXCI7XG4gICAgVG9rZW5LaW5kW1wiQlJBQ0tFVF9SXCJdID0gXCJdXCI7XG4gICAgVG9rZW5LaW5kW1wiQlJBQ0VfTFwiXSA9IFwie1wiO1xuICAgIFRva2VuS2luZFtcIlBJUEVcIl0gPSBcInxcIjtcbiAgICBUb2tlbktpbmRbXCJCUkFDRV9SXCJdID0gXCJ9XCI7XG4gICAgVG9rZW5LaW5kW1wiTkFNRVwiXSA9IFwiTmFtZVwiO1xuICAgIFRva2VuS2luZFtcIklOVFwiXSA9IFwiSW50XCI7XG4gICAgVG9rZW5LaW5kW1wiRkxPQVRcIl0gPSBcIkZsb2F0XCI7XG4gICAgVG9rZW5LaW5kW1wiU1RSSU5HXCJdID0gXCJTdHJpbmdcIjtcbiAgICBUb2tlbktpbmRbXCJCTE9DS19TVFJJTkdcIl0gPSBcIkJsb2NrU3RyaW5nXCI7XG4gICAgVG9rZW5LaW5kW1wiQ09NTUVOVFwiXSA9IFwiQ29tbWVudFwiO1xufSkoVG9rZW5LaW5kID0gZXhwb3J0cy5Ub2tlbktpbmQgfHwgKGV4cG9ydHMuVG9rZW5LaW5kID0ge30pKTtcbnZhciBTcGFuTmFtZXM7XG4oZnVuY3Rpb24gKFNwYW5OYW1lcykge1xuICAgIFNwYW5OYW1lc1tcIkVYRUNVVEVcIl0gPSBcImdyYXBocWwuZXhlY3V0ZVwiO1xuICAgIFNwYW5OYW1lc1tcIlBBUlNFXCJdID0gXCJncmFwaHFsLnBhcnNlXCI7XG4gICAgU3Bhbk5hbWVzW1wiUkVTT0xWRVwiXSA9IFwiZ3JhcGhxbC5yZXNvbHZlXCI7XG4gICAgU3Bhbk5hbWVzW1wiVkFMSURBVEVcIl0gPSBcImdyYXBocWwudmFsaWRhdGVcIjtcbiAgICBTcGFuTmFtZXNbXCJTQ0hFTUFfVkFMSURBVEVcIl0gPSBcImdyYXBocWwudmFsaWRhdGVTY2hlbWFcIjtcbiAgICBTcGFuTmFtZXNbXCJTQ0hFTUFfUEFSU0VcIl0gPSBcImdyYXBocWwucGFyc2VTY2hlbWFcIjtcbn0pKFNwYW5OYW1lcyA9IGV4cG9ydHMuU3Bhbk5hbWVzIHx8IChleHBvcnRzLlNwYW5OYW1lcyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbnVtLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-graphql/build/src/enum.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-graphql/build/src/enums/AttributeNames.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-graphql/build/src/enums/AttributeNames.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AttributeNames = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar AttributeNames;\n(function (AttributeNames) {\n    AttributeNames[\"SOURCE\"] = \"graphql.source\";\n    AttributeNames[\"FIELD_NAME\"] = \"graphql.field.name\";\n    AttributeNames[\"FIELD_PATH\"] = \"graphql.field.path\";\n    AttributeNames[\"FIELD_TYPE\"] = \"graphql.field.type\";\n    AttributeNames[\"OPERATION_TYPE\"] = \"graphql.operation.type\";\n    AttributeNames[\"OPERATION_NAME\"] = \"graphql.operation.name\";\n    AttributeNames[\"VARIABLES\"] = \"graphql.variables.\";\n    AttributeNames[\"ERROR_VALIDATION_NAME\"] = \"graphql.validation.error\";\n})(AttributeNames = exports.AttributeNames || (exports.AttributeNames = {}));\n//# sourceMappingURL=AttributeNames.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1ncmFwaHFsL2J1aWxkL3NyYy9lbnVtcy9BdHRyaWJ1dGVOYW1lcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDhDQUE4QyxzQkFBc0IsS0FBSztBQUMxRSIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tZ3JhcGhxbC9idWlsZC9zcmMvZW51bXMvQXR0cmlidXRlTmFtZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkF0dHJpYnV0ZU5hbWVzID0gdm9pZCAwO1xuLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBBdHRyaWJ1dGVOYW1lcztcbihmdW5jdGlvbiAoQXR0cmlidXRlTmFtZXMpIHtcbiAgICBBdHRyaWJ1dGVOYW1lc1tcIlNPVVJDRVwiXSA9IFwiZ3JhcGhxbC5zb3VyY2VcIjtcbiAgICBBdHRyaWJ1dGVOYW1lc1tcIkZJRUxEX05BTUVcIl0gPSBcImdyYXBocWwuZmllbGQubmFtZVwiO1xuICAgIEF0dHJpYnV0ZU5hbWVzW1wiRklFTERfUEFUSFwiXSA9IFwiZ3JhcGhxbC5maWVsZC5wYXRoXCI7XG4gICAgQXR0cmlidXRlTmFtZXNbXCJGSUVMRF9UWVBFXCJdID0gXCJncmFwaHFsLmZpZWxkLnR5cGVcIjtcbiAgICBBdHRyaWJ1dGVOYW1lc1tcIk9QRVJBVElPTl9UWVBFXCJdID0gXCJncmFwaHFsLm9wZXJhdGlvbi50eXBlXCI7XG4gICAgQXR0cmlidXRlTmFtZXNbXCJPUEVSQVRJT05fTkFNRVwiXSA9IFwiZ3JhcGhxbC5vcGVyYXRpb24ubmFtZVwiO1xuICAgIEF0dHJpYnV0ZU5hbWVzW1wiVkFSSUFCTEVTXCJdID0gXCJncmFwaHFsLnZhcmlhYmxlcy5cIjtcbiAgICBBdHRyaWJ1dGVOYW1lc1tcIkVSUk9SX1ZBTElEQVRJT05fTkFNRVwiXSA9IFwiZ3JhcGhxbC52YWxpZGF0aW9uLmVycm9yXCI7XG59KShBdHRyaWJ1dGVOYW1lcyA9IGV4cG9ydHMuQXR0cmlidXRlTmFtZXMgfHwgKGV4cG9ydHMuQXR0cmlidXRlTmFtZXMgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXR0cmlidXRlTmFtZXMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-graphql/build/src/enums/AttributeNames.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-graphql/build/src/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-graphql/build/src/index.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GraphQLInstrumentation = void 0;\nvar instrumentation_1 = __webpack_require__(/*! ./instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-graphql/build/src/instrumentation.js\");\nObject.defineProperty(exports, \"GraphQLInstrumentation\", ({ enumerable: true, get: function () { return instrumentation_1.GraphQLInstrumentation; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1ncmFwaHFsL2J1aWxkL3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw4QkFBOEI7QUFDOUIsd0JBQXdCLG1CQUFPLENBQUMsMEhBQW1CO0FBQ25ELDBEQUF5RCxFQUFFLHFDQUFxQyxvREFBb0QsRUFBQztBQUNySiIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tZ3JhcGhxbC9idWlsZC9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5HcmFwaFFMSW5zdHJ1bWVudGF0aW9uID0gdm9pZCAwO1xudmFyIGluc3RydW1lbnRhdGlvbl8xID0gcmVxdWlyZShcIi4vaW5zdHJ1bWVudGF0aW9uXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiR3JhcGhRTEluc3RydW1lbnRhdGlvblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW5zdHJ1bWVudGF0aW9uXzEuR3JhcGhRTEluc3RydW1lbnRhdGlvbjsgfSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-graphql/build/src/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-graphql/build/src/instrumentation.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-graphql/build/src/instrumentation.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = \"/monitoring\";globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.2\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GraphQLInstrumentation = void 0;\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst enum_1 = __webpack_require__(/*! ./enum */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-graphql/build/src/enum.js\");\nconst AttributeNames_1 = __webpack_require__(/*! ./enums/AttributeNames */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-graphql/build/src/enums/AttributeNames.js\");\nconst symbols_1 = __webpack_require__(/*! ./symbols */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-graphql/build/src/symbols.js\");\nconst internal_types_1 = __webpack_require__(/*! ./internal-types */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-graphql/build/src/internal-types.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-graphql/build/src/utils.js\");\n/** @knipignore */\nconst version_1 = __webpack_require__(/*! ./version */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-graphql/build/src/version.js\");\nconst DEFAULT_CONFIG = {\n    mergeItems: false,\n    depth: -1,\n    allowValues: false,\n    ignoreResolveSpans: false,\n};\nconst supportedVersions = ['>=14.0.0 <17'];\nclass GraphQLInstrumentation extends instrumentation_1.InstrumentationBase {\n    constructor(config = {}) {\n        super(version_1.PACKAGE_NAME, version_1.PACKAGE_VERSION, { ...DEFAULT_CONFIG, ...config });\n    }\n    setConfig(config = {}) {\n        super.setConfig({ ...DEFAULT_CONFIG, ...config });\n    }\n    init() {\n        const module = new instrumentation_1.InstrumentationNodeModuleDefinition('graphql', supportedVersions);\n        module.files.push(this._addPatchingExecute());\n        module.files.push(this._addPatchingParser());\n        module.files.push(this._addPatchingValidate());\n        return module;\n    }\n    _addPatchingExecute() {\n        return new instrumentation_1.InstrumentationNodeModuleFile('graphql/execution/execute.js', supportedVersions, \n        // cannot make it work with appropriate type as execute function has 2\n        //types and/cannot import function but only types\n        (moduleExports) => {\n            if ((0, instrumentation_1.isWrapped)(moduleExports.execute)) {\n                this._unwrap(moduleExports, 'execute');\n            }\n            this._wrap(moduleExports, 'execute', this._patchExecute(moduleExports.defaultFieldResolver));\n            return moduleExports;\n        }, moduleExports => {\n            if (moduleExports) {\n                this._unwrap(moduleExports, 'execute');\n            }\n        });\n    }\n    _addPatchingParser() {\n        return new instrumentation_1.InstrumentationNodeModuleFile('graphql/language/parser.js', supportedVersions, (moduleExports) => {\n            if ((0, instrumentation_1.isWrapped)(moduleExports.parse)) {\n                this._unwrap(moduleExports, 'parse');\n            }\n            this._wrap(moduleExports, 'parse', this._patchParse());\n            return moduleExports;\n        }, (moduleExports) => {\n            if (moduleExports) {\n                this._unwrap(moduleExports, 'parse');\n            }\n        });\n    }\n    _addPatchingValidate() {\n        return new instrumentation_1.InstrumentationNodeModuleFile('graphql/validation/validate.js', supportedVersions, moduleExports => {\n            if ((0, instrumentation_1.isWrapped)(moduleExports.validate)) {\n                this._unwrap(moduleExports, 'validate');\n            }\n            this._wrap(moduleExports, 'validate', this._patchValidate());\n            return moduleExports;\n        }, moduleExports => {\n            if (moduleExports) {\n                this._unwrap(moduleExports, 'validate');\n            }\n        });\n    }\n    _patchExecute(defaultFieldResolved) {\n        const instrumentation = this;\n        return function execute(original) {\n            return function patchExecute() {\n                let processedArgs;\n                // case when apollo server is used for example\n                if (arguments.length >= 2) {\n                    const args = arguments;\n                    processedArgs = instrumentation._wrapExecuteArgs(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], defaultFieldResolved);\n                }\n                else {\n                    const args = arguments[0];\n                    processedArgs = instrumentation._wrapExecuteArgs(args.schema, args.document, args.rootValue, args.contextValue, args.variableValues, args.operationName, args.fieldResolver, args.typeResolver, defaultFieldResolved);\n                }\n                const operation = (0, utils_1.getOperation)(processedArgs.document, processedArgs.operationName);\n                const span = instrumentation._createExecuteSpan(operation, processedArgs);\n                processedArgs.contextValue[symbols_1.OTEL_GRAPHQL_DATA_SYMBOL] = {\n                    source: processedArgs.document\n                        ? processedArgs.document ||\n                            processedArgs.document[symbols_1.OTEL_GRAPHQL_DATA_SYMBOL]\n                        : undefined,\n                    span,\n                    fields: {},\n                };\n                return api_1.context.with(api_1.trace.setSpan(api_1.context.active(), span), () => {\n                    return (0, instrumentation_1.safeExecuteInTheMiddle)(() => {\n                        return original.apply(this, [\n                            processedArgs,\n                        ]);\n                    }, (err, result) => {\n                        instrumentation._handleExecutionResult(span, err, result);\n                    });\n                });\n            };\n        };\n    }\n    _handleExecutionResult(span, err, result) {\n        const config = this.getConfig();\n        if (result === undefined || err) {\n            (0, utils_1.endSpan)(span, err);\n            return;\n        }\n        if ((0, utils_1.isPromise)(result)) {\n            result.then(resultData => {\n                if (typeof config.responseHook !== 'function') {\n                    (0, utils_1.endSpan)(span);\n                    return;\n                }\n                this._executeResponseHook(span, resultData);\n            }, error => {\n                (0, utils_1.endSpan)(span, error);\n            });\n        }\n        else {\n            if (typeof config.responseHook !== 'function') {\n                (0, utils_1.endSpan)(span);\n                return;\n            }\n            this._executeResponseHook(span, result);\n        }\n    }\n    _executeResponseHook(span, result) {\n        const { responseHook } = this.getConfig();\n        if (!responseHook) {\n            return;\n        }\n        (0, instrumentation_1.safeExecuteInTheMiddle)(() => {\n            responseHook(span, result);\n        }, err => {\n            if (err) {\n                this._diag.error('Error running response hook', err);\n            }\n            (0, utils_1.endSpan)(span, undefined);\n        }, true);\n    }\n    _patchParse() {\n        const instrumentation = this;\n        return function parse(original) {\n            return function patchParse(source, options) {\n                return instrumentation._parse(this, original, source, options);\n            };\n        };\n    }\n    _patchValidate() {\n        const instrumentation = this;\n        return function validate(original) {\n            return function patchValidate(schema, documentAST, rules, options, typeInfo) {\n                return instrumentation._validate(this, original, schema, documentAST, rules, typeInfo, options);\n            };\n        };\n    }\n    _parse(obj, original, source, options) {\n        const config = this.getConfig();\n        const span = this.tracer.startSpan(enum_1.SpanNames.PARSE);\n        return api_1.context.with(api_1.trace.setSpan(api_1.context.active(), span), () => {\n            return (0, instrumentation_1.safeExecuteInTheMiddle)(() => {\n                return original.call(obj, source, options);\n            }, (err, result) => {\n                if (result) {\n                    const operation = (0, utils_1.getOperation)(result);\n                    if (!operation) {\n                        span.updateName(enum_1.SpanNames.SCHEMA_PARSE);\n                    }\n                    else if (result.loc) {\n                        (0, utils_1.addSpanSource)(span, result.loc, config.allowValues);\n                    }\n                }\n                (0, utils_1.endSpan)(span, err);\n            });\n        });\n    }\n    _validate(obj, original, schema, documentAST, rules, typeInfo, options) {\n        const span = this.tracer.startSpan(enum_1.SpanNames.VALIDATE, {});\n        return api_1.context.with(api_1.trace.setSpan(api_1.context.active(), span), () => {\n            return (0, instrumentation_1.safeExecuteInTheMiddle)(() => {\n                return original.call(obj, schema, documentAST, rules, options, typeInfo);\n            }, (err, errors) => {\n                if (!documentAST.loc) {\n                    span.updateName(enum_1.SpanNames.SCHEMA_VALIDATE);\n                }\n                if (errors && errors.length) {\n                    span.recordException({\n                        name: AttributeNames_1.AttributeNames.ERROR_VALIDATION_NAME,\n                        message: JSON.stringify(errors),\n                    });\n                }\n                (0, utils_1.endSpan)(span, err);\n            });\n        });\n    }\n    _createExecuteSpan(operation, processedArgs) {\n        const config = this.getConfig();\n        const span = this.tracer.startSpan(enum_1.SpanNames.EXECUTE, {});\n        if (operation) {\n            const { operation: operationType, name: nameNode } = operation;\n            span.setAttribute(AttributeNames_1.AttributeNames.OPERATION_TYPE, operationType);\n            const operationName = nameNode?.value;\n            // https://opentelemetry.io/docs/reference/specification/trace/semantic_conventions/instrumentation/graphql/\n            // > The span name MUST be of the format <graphql.operation.type> <graphql.operation.name> provided that graphql.operation.type and graphql.operation.name are available.\n            // > If graphql.operation.name is not available, the span SHOULD be named <graphql.operation.type>.\n            if (operationName) {\n                span.setAttribute(AttributeNames_1.AttributeNames.OPERATION_NAME, operationName);\n                span.updateName(`${operationType} ${operationName}`);\n            }\n            else {\n                span.updateName(operationType);\n            }\n        }\n        else {\n            let operationName = ' ';\n            if (processedArgs.operationName) {\n                operationName = ` \"${processedArgs.operationName}\" `;\n            }\n            operationName = internal_types_1.OPERATION_NOT_SUPPORTED.replace('$operationName$', operationName);\n            span.setAttribute(AttributeNames_1.AttributeNames.OPERATION_NAME, operationName);\n        }\n        if (processedArgs.document?.loc) {\n            (0, utils_1.addSpanSource)(span, processedArgs.document.loc, config.allowValues);\n        }\n        if (processedArgs.variableValues && config.allowValues) {\n            (0, utils_1.addInputVariableAttributes)(span, processedArgs.variableValues);\n        }\n        return span;\n    }\n    _wrapExecuteArgs(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver, defaultFieldResolved) {\n        if (!contextValue) {\n            contextValue = {};\n        }\n        if (contextValue[symbols_1.OTEL_GRAPHQL_DATA_SYMBOL] ||\n            this.getConfig().ignoreResolveSpans) {\n            return {\n                schema,\n                document,\n                rootValue,\n                contextValue,\n                variableValues,\n                operationName,\n                fieldResolver,\n                typeResolver,\n            };\n        }\n        const isUsingDefaultResolver = fieldResolver == null;\n        // follows graphql implementation here:\n        // https://github.com/graphql/graphql-js/blob/0b7daed9811731362c71900e12e5ea0d1ecc7f1f/src/execution/execute.ts#L494\n        const fieldResolverForExecute = fieldResolver ?? defaultFieldResolved;\n        fieldResolver = (0, utils_1.wrapFieldResolver)(this.tracer, () => this.getConfig(), fieldResolverForExecute, isUsingDefaultResolver);\n        if (schema) {\n            (0, utils_1.wrapFields)(schema.getQueryType(), this.tracer, () => this.getConfig());\n            (0, utils_1.wrapFields)(schema.getMutationType(), this.tracer, () => this.getConfig());\n        }\n        return {\n            schema,\n            document,\n            rootValue,\n            contextValue,\n            variableValues,\n            operationName,\n            fieldResolver,\n            typeResolver,\n        };\n    }\n}\nexports.GraphQLInstrumentation = GraphQLInstrumentation;\n//# sourceMappingURL=instrumentation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-graphql/build/src/instrumentation.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-graphql/build/src/internal-types.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-graphql/build/src/internal-types.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OPERATION_NOT_SUPPORTED = void 0;\nconst symbols_1 = __webpack_require__(/*! ./symbols */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-graphql/build/src/symbols.js\");\nexports.OPERATION_NOT_SUPPORTED = 'Operation$operationName$not' + ' supported';\n//# sourceMappingURL=internal-types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1ncmFwaHFsL2J1aWxkL3NyYy9pbnRlcm5hbC10eXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwrQkFBK0I7QUFDL0Isa0JBQWtCLG1CQUFPLENBQUMsMEdBQVc7QUFDckMsK0JBQStCO0FBQy9CIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1ncmFwaHFsL2J1aWxkL3NyYy9pbnRlcm5hbC10eXBlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk9QRVJBVElPTl9OT1RfU1VQUE9SVEVEID0gdm9pZCAwO1xuY29uc3Qgc3ltYm9sc18xID0gcmVxdWlyZShcIi4vc3ltYm9sc1wiKTtcbmV4cG9ydHMuT1BFUkFUSU9OX05PVF9TVVBQT1JURUQgPSAnT3BlcmF0aW9uJG9wZXJhdGlvbk5hbWUkbm90JyArICcgc3VwcG9ydGVkJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGVybmFsLXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-graphql/build/src/internal-types.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-graphql/build/src/symbols.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-graphql/build/src/symbols.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OTEL_GRAPHQL_DATA_SYMBOL = exports.OTEL_PATCHED_SYMBOL = void 0;\nexports.OTEL_PATCHED_SYMBOL = Symbol.for('opentelemetry.patched');\nexports.OTEL_GRAPHQL_DATA_SYMBOL = Symbol.for('opentelemetry.graphql_data');\n//# sourceMappingURL=symbols.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1ncmFwaHFsL2J1aWxkL3NyYy9zeW1ib2xzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdDQUFnQyxHQUFHLDJCQUEyQjtBQUM5RCwyQkFBMkI7QUFDM0IsZ0NBQWdDO0FBQ2hDIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1ncmFwaHFsL2J1aWxkL3NyYy9zeW1ib2xzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuT1RFTF9HUkFQSFFMX0RBVEFfU1lNQk9MID0gZXhwb3J0cy5PVEVMX1BBVENIRURfU1lNQk9MID0gdm9pZCAwO1xuZXhwb3J0cy5PVEVMX1BBVENIRURfU1lNQk9MID0gU3ltYm9sLmZvcignb3BlbnRlbGVtZXRyeS5wYXRjaGVkJyk7XG5leHBvcnRzLk9URUxfR1JBUEhRTF9EQVRBX1NZTUJPTCA9IFN5bWJvbC5mb3IoJ29wZW50ZWxlbWV0cnkuZ3JhcGhxbF9kYXRhJyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zeW1ib2xzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-graphql/build/src/symbols.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-graphql/build/src/utils.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-graphql/build/src/utils.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.wrapFieldResolver = exports.wrapFields = exports.getSourceFromLocation = exports.getOperation = exports.endSpan = exports.addSpanSource = exports.addInputVariableAttributes = exports.isPromise = void 0;\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst enum_1 = __webpack_require__(/*! ./enum */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-graphql/build/src/enum.js\");\nconst AttributeNames_1 = __webpack_require__(/*! ./enums/AttributeNames */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-graphql/build/src/enums/AttributeNames.js\");\nconst symbols_1 = __webpack_require__(/*! ./symbols */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-graphql/build/src/symbols.js\");\nconst OPERATION_VALUES = Object.values(enum_1.AllowedOperationTypes);\n// https://github.com/graphql/graphql-js/blob/main/src/jsutils/isPromise.ts\nconst isPromise = (value) => {\n    return typeof value?.then === 'function';\n};\nexports.isPromise = isPromise;\n// https://github.com/graphql/graphql-js/blob/main/src/jsutils/isObjectLike.ts\nconst isObjectLike = (value) => {\n    return typeof value == 'object' && value !== null;\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction addInputVariableAttribute(span, key, variable) {\n    if (Array.isArray(variable)) {\n        variable.forEach((value, idx) => {\n            addInputVariableAttribute(span, `${key}.${idx}`, value);\n        });\n    }\n    else if (variable instanceof Object) {\n        Object.entries(variable).forEach(([nestedKey, value]) => {\n            addInputVariableAttribute(span, `${key}.${nestedKey}`, value);\n        });\n    }\n    else {\n        span.setAttribute(`${AttributeNames_1.AttributeNames.VARIABLES}${String(key)}`, variable);\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction addInputVariableAttributes(span, variableValues) {\n    Object.entries(variableValues).forEach(([key, value]) => {\n        addInputVariableAttribute(span, key, value);\n    });\n}\nexports.addInputVariableAttributes = addInputVariableAttributes;\nfunction addSpanSource(span, loc, allowValues, start, end) {\n    const source = getSourceFromLocation(loc, allowValues, start, end);\n    span.setAttribute(AttributeNames_1.AttributeNames.SOURCE, source);\n}\nexports.addSpanSource = addSpanSource;\nfunction createFieldIfNotExists(tracer, getConfig, contextValue, info, path) {\n    let field = getField(contextValue, path);\n    let spanAdded = false;\n    if (!field) {\n        spanAdded = true;\n        const parent = getParentField(contextValue, path);\n        field = {\n            parent,\n            span: createResolverSpan(tracer, getConfig, contextValue, info, path, parent.span),\n            error: null,\n        };\n        addField(contextValue, path, field);\n    }\n    return { spanAdded, field };\n}\nfunction createResolverSpan(tracer, getConfig, contextValue, info, path, parentSpan) {\n    const attributes = {\n        [AttributeNames_1.AttributeNames.FIELD_NAME]: info.fieldName,\n        [AttributeNames_1.AttributeNames.FIELD_PATH]: path.join('.'),\n        [AttributeNames_1.AttributeNames.FIELD_TYPE]: info.returnType.toString(),\n    };\n    const span = tracer.startSpan(`${enum_1.SpanNames.RESOLVE} ${attributes[AttributeNames_1.AttributeNames.FIELD_PATH]}`, {\n        attributes,\n    }, parentSpan ? api.trace.setSpan(api.context.active(), parentSpan) : undefined);\n    const document = contextValue[symbols_1.OTEL_GRAPHQL_DATA_SYMBOL].source;\n    const fieldNode = info.fieldNodes.find(fieldNode => fieldNode.kind === 'Field');\n    if (fieldNode) {\n        addSpanSource(span, document.loc, getConfig().allowValues, fieldNode.loc?.start, fieldNode.loc?.end);\n    }\n    return span;\n}\nfunction endSpan(span, error) {\n    if (error) {\n        span.recordException(error);\n    }\n    span.end();\n}\nexports.endSpan = endSpan;\nfunction getOperation(document, operationName) {\n    if (!document || !Array.isArray(document.definitions)) {\n        return undefined;\n    }\n    if (operationName) {\n        return document.definitions\n            .filter(definition => OPERATION_VALUES.indexOf(definition?.operation) !== -1)\n            .find(definition => operationName === definition?.name?.value);\n    }\n    else {\n        return document.definitions.find(definition => OPERATION_VALUES.indexOf(definition?.operation) !== -1);\n    }\n}\nexports.getOperation = getOperation;\nfunction addField(contextValue, path, field) {\n    return (contextValue[symbols_1.OTEL_GRAPHQL_DATA_SYMBOL].fields[path.join('.')] =\n        field);\n}\nfunction getField(contextValue, path) {\n    return contextValue[symbols_1.OTEL_GRAPHQL_DATA_SYMBOL].fields[path.join('.')];\n}\nfunction getParentField(contextValue, path) {\n    for (let i = path.length - 1; i > 0; i--) {\n        const field = getField(contextValue, path.slice(0, i));\n        if (field) {\n            return field;\n        }\n    }\n    return {\n        span: contextValue[symbols_1.OTEL_GRAPHQL_DATA_SYMBOL].span,\n    };\n}\nfunction pathToArray(mergeItems, path) {\n    const flattened = [];\n    let curr = path;\n    while (curr) {\n        let key = curr.key;\n        if (mergeItems && typeof key === 'number') {\n            key = '*';\n        }\n        flattened.push(String(key));\n        curr = curr.prev;\n    }\n    return flattened.reverse();\n}\nfunction repeatBreak(i) {\n    return repeatChar('\\n', i);\n}\nfunction repeatSpace(i) {\n    return repeatChar(' ', i);\n}\nfunction repeatChar(char, to) {\n    let text = '';\n    for (let i = 0; i < to; i++) {\n        text += char;\n    }\n    return text;\n}\nconst KindsToBeRemoved = [\n    enum_1.TokenKind.FLOAT,\n    enum_1.TokenKind.STRING,\n    enum_1.TokenKind.INT,\n    enum_1.TokenKind.BLOCK_STRING,\n];\nfunction getSourceFromLocation(loc, allowValues = false, inputStart, inputEnd) {\n    let source = '';\n    if (loc?.startToken) {\n        const start = typeof inputStart === 'number' ? inputStart : loc.start;\n        const end = typeof inputEnd === 'number' ? inputEnd : loc.end;\n        let next = loc.startToken.next;\n        let previousLine = 1;\n        while (next) {\n            if (next.start < start) {\n                next = next.next;\n                previousLine = next?.line;\n                continue;\n            }\n            if (next.end > end) {\n                next = next.next;\n                previousLine = next?.line;\n                continue;\n            }\n            let value = next.value || next.kind;\n            let space = '';\n            if (!allowValues && KindsToBeRemoved.indexOf(next.kind) >= 0) {\n                // value = repeatChar('*', value.length);\n                value = '*';\n            }\n            if (next.kind === enum_1.TokenKind.STRING) {\n                value = `\"${value}\"`;\n            }\n            if (next.kind === enum_1.TokenKind.EOF) {\n                value = '';\n            }\n            if (next.line > previousLine) {\n                source += repeatBreak(next.line - previousLine);\n                previousLine = next.line;\n                space = repeatSpace(next.column - 1);\n            }\n            else {\n                if (next.line === next.prev?.line) {\n                    space = repeatSpace(next.start - (next.prev?.end || 0));\n                }\n            }\n            source += space + value;\n            if (next) {\n                next = next.next;\n            }\n        }\n    }\n    return source;\n}\nexports.getSourceFromLocation = getSourceFromLocation;\nfunction wrapFields(type, tracer, getConfig) {\n    if (!type ||\n        typeof type.getFields !== 'function' ||\n        type[symbols_1.OTEL_PATCHED_SYMBOL]) {\n        return;\n    }\n    const fields = type.getFields();\n    type[symbols_1.OTEL_PATCHED_SYMBOL] = true;\n    Object.keys(fields).forEach(key => {\n        const field = fields[key];\n        if (!field) {\n            return;\n        }\n        if (field.resolve) {\n            field.resolve = wrapFieldResolver(tracer, getConfig, field.resolve);\n        }\n        if (field.type) {\n            let unwrappedType = field.type;\n            while (unwrappedType.ofType) {\n                unwrappedType = unwrappedType.ofType;\n            }\n            wrapFields(unwrappedType, tracer, getConfig);\n        }\n    });\n}\nexports.wrapFields = wrapFields;\nconst handleResolveSpanError = (resolveSpan, err, shouldEndSpan) => {\n    if (!shouldEndSpan) {\n        return;\n    }\n    resolveSpan.recordException(err);\n    resolveSpan.setStatus({\n        code: api.SpanStatusCode.ERROR,\n        message: err.message,\n    });\n    resolveSpan.end();\n};\nconst handleResolveSpanSuccess = (resolveSpan, shouldEndSpan) => {\n    if (!shouldEndSpan) {\n        return;\n    }\n    resolveSpan.end();\n};\nfunction wrapFieldResolver(tracer, getConfig, fieldResolver, isDefaultResolver = false) {\n    if (wrappedFieldResolver[symbols_1.OTEL_PATCHED_SYMBOL] ||\n        typeof fieldResolver !== 'function') {\n        return fieldResolver;\n    }\n    function wrappedFieldResolver(source, args, contextValue, info) {\n        if (!fieldResolver) {\n            return undefined;\n        }\n        const config = getConfig();\n        // follows what graphql is doing to decide if this is a trivial resolver\n        // for which we don't need to create a resolve span\n        if (config.ignoreTrivialResolveSpans &&\n            isDefaultResolver &&\n            (isObjectLike(source) || typeof source === 'function')) {\n            const property = source[info.fieldName];\n            // a function execution is not trivial and should be recorder.\n            // property which is not a function is just a value and we don't want a \"resolve\" span for it\n            if (typeof property !== 'function') {\n                return fieldResolver.call(this, source, args, contextValue, info);\n            }\n        }\n        if (!contextValue[symbols_1.OTEL_GRAPHQL_DATA_SYMBOL]) {\n            return fieldResolver.call(this, source, args, contextValue, info);\n        }\n        const path = pathToArray(config.mergeItems, info && info.path);\n        const depth = path.filter((item) => typeof item === 'string').length;\n        let field;\n        let shouldEndSpan = false;\n        if (config.depth >= 0 && config.depth < depth) {\n            field = getParentField(contextValue, path);\n        }\n        else {\n            const newField = createFieldIfNotExists(tracer, getConfig, contextValue, info, path);\n            field = newField.field;\n            shouldEndSpan = newField.spanAdded;\n        }\n        return api.context.with(api.trace.setSpan(api.context.active(), field.span), () => {\n            try {\n                const res = fieldResolver.call(this, source, args, contextValue, info);\n                if ((0, exports.isPromise)(res)) {\n                    return res.then((r) => {\n                        handleResolveSpanSuccess(field.span, shouldEndSpan);\n                        return r;\n                    }, (err) => {\n                        handleResolveSpanError(field.span, err, shouldEndSpan);\n                        throw err;\n                    });\n                }\n                else {\n                    handleResolveSpanSuccess(field.span, shouldEndSpan);\n                    return res;\n                }\n            }\n            catch (err) {\n                handleResolveSpanError(field.span, err, shouldEndSpan);\n                throw err;\n            }\n        });\n    }\n    wrappedFieldResolver[symbols_1.OTEL_PATCHED_SYMBOL] = true;\n    return wrappedFieldResolver;\n}\nexports.wrapFieldResolver = wrapFieldResolver;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-graphql/build/src/utils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-graphql/build/src/version.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-graphql/build/src/version.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PACKAGE_NAME = exports.PACKAGE_VERSION = void 0;\n// this is autogenerated file, see scripts/version-update.js\nexports.PACKAGE_VERSION = '0.51.0';\nexports.PACKAGE_NAME = '@opentelemetry/instrumentation-graphql';\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1ncmFwaHFsL2J1aWxkL3NyYy92ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQixHQUFHLHVCQUF1QjtBQUM5QztBQUNBLHVCQUF1QjtBQUN2QixvQkFBb0I7QUFDcEIiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWdyYXBocWwvYnVpbGQvc3JjL3ZlcnNpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5QQUNLQUdFX05BTUUgPSBleHBvcnRzLlBBQ0tBR0VfVkVSU0lPTiA9IHZvaWQgMDtcbi8vIHRoaXMgaXMgYXV0b2dlbmVyYXRlZCBmaWxlLCBzZWUgc2NyaXB0cy92ZXJzaW9uLXVwZGF0ZS5qc1xuZXhwb3J0cy5QQUNLQUdFX1ZFUlNJT04gPSAnMC41MS4wJztcbmV4cG9ydHMuUEFDS0FHRV9OQU1FID0gJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1ncmFwaHFsJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-graphql/build/src/version.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-hapi/build/src/enums/AttributeNames.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-hapi/build/src/enums/AttributeNames.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AttributeNames = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar AttributeNames;\n(function (AttributeNames) {\n    AttributeNames[\"HAPI_TYPE\"] = \"hapi.type\";\n    AttributeNames[\"PLUGIN_NAME\"] = \"hapi.plugin.name\";\n    AttributeNames[\"EXT_TYPE\"] = \"server.ext.type\";\n})(AttributeNames = exports.AttributeNames || (exports.AttributeNames = {}));\n//# sourceMappingURL=AttributeNames.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1oYXBpL2J1aWxkL3NyYy9lbnVtcy9BdHRyaWJ1dGVOYW1lcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsOENBQThDLHNCQUFzQixLQUFLO0FBQzFFIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1oYXBpL2J1aWxkL3NyYy9lbnVtcy9BdHRyaWJ1dGVOYW1lcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXR0cmlidXRlTmFtZXMgPSB2b2lkIDA7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xudmFyIEF0dHJpYnV0ZU5hbWVzO1xuKGZ1bmN0aW9uIChBdHRyaWJ1dGVOYW1lcykge1xuICAgIEF0dHJpYnV0ZU5hbWVzW1wiSEFQSV9UWVBFXCJdID0gXCJoYXBpLnR5cGVcIjtcbiAgICBBdHRyaWJ1dGVOYW1lc1tcIlBMVUdJTl9OQU1FXCJdID0gXCJoYXBpLnBsdWdpbi5uYW1lXCI7XG4gICAgQXR0cmlidXRlTmFtZXNbXCJFWFRfVFlQRVwiXSA9IFwic2VydmVyLmV4dC50eXBlXCI7XG59KShBdHRyaWJ1dGVOYW1lcyA9IGV4cG9ydHMuQXR0cmlidXRlTmFtZXMgfHwgKGV4cG9ydHMuQXR0cmlidXRlTmFtZXMgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXR0cmlidXRlTmFtZXMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-hapi/build/src/enums/AttributeNames.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-hapi/build/src/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-hapi/build/src/index.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AttributeNames = exports.HapiInstrumentation = void 0;\nvar instrumentation_1 = __webpack_require__(/*! ./instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-hapi/build/src/instrumentation.js\");\nObject.defineProperty(exports, \"HapiInstrumentation\", ({ enumerable: true, get: function () { return instrumentation_1.HapiInstrumentation; } }));\nvar AttributeNames_1 = __webpack_require__(/*! ./enums/AttributeNames */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-hapi/build/src/enums/AttributeNames.js\");\nObject.defineProperty(exports, \"AttributeNames\", ({ enumerable: true, get: function () { return AttributeNames_1.AttributeNames; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1oYXBpL2J1aWxkL3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0IsR0FBRywyQkFBMkI7QUFDcEQsd0JBQXdCLG1CQUFPLENBQUMsdUhBQW1CO0FBQ25ELHVEQUFzRCxFQUFFLHFDQUFxQyxpREFBaUQsRUFBQztBQUMvSSx1QkFBdUIsbUJBQU8sQ0FBQyxpSUFBd0I7QUFDdkQsa0RBQWlELEVBQUUscUNBQXFDLDJDQUEyQyxFQUFDO0FBQ3BJIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1oYXBpL2J1aWxkL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkF0dHJpYnV0ZU5hbWVzID0gZXhwb3J0cy5IYXBpSW5zdHJ1bWVudGF0aW9uID0gdm9pZCAwO1xudmFyIGluc3RydW1lbnRhdGlvbl8xID0gcmVxdWlyZShcIi4vaW5zdHJ1bWVudGF0aW9uXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSGFwaUluc3RydW1lbnRhdGlvblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW5zdHJ1bWVudGF0aW9uXzEuSGFwaUluc3RydW1lbnRhdGlvbjsgfSB9KTtcbnZhciBBdHRyaWJ1dGVOYW1lc18xID0gcmVxdWlyZShcIi4vZW51bXMvQXR0cmlidXRlTmFtZXNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJBdHRyaWJ1dGVOYW1lc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQXR0cmlidXRlTmFtZXNfMS5BdHRyaWJ1dGVOYW1lczsgfSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-hapi/build/src/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-hapi/build/src/instrumentation.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-hapi/build/src/instrumentation.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = \"/monitoring\";globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.2\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HapiInstrumentation = void 0;\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst core_1 = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/index.js\");\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\n/** @knipignore */\nconst version_1 = __webpack_require__(/*! ./version */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-hapi/build/src/version.js\");\nconst internal_types_1 = __webpack_require__(/*! ./internal-types */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-hapi/build/src/internal-types.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-hapi/build/src/utils.js\");\n/** Hapi instrumentation for OpenTelemetry */\nclass HapiInstrumentation extends instrumentation_1.InstrumentationBase {\n    _semconvStability;\n    constructor(config = {}) {\n        super(version_1.PACKAGE_NAME, version_1.PACKAGE_VERSION, config);\n        this._semconvStability = (0, instrumentation_1.semconvStabilityFromStr)('http', process.env.OTEL_SEMCONV_STABILITY_OPT_IN);\n    }\n    init() {\n        return new instrumentation_1.InstrumentationNodeModuleDefinition(internal_types_1.HapiComponentName, ['>=17.0.0 <22'], (module) => {\n            const moduleExports = module[Symbol.toStringTag] === 'Module' ? module.default : module;\n            if (!(0, instrumentation_1.isWrapped)(moduleExports.server)) {\n                this._wrap(moduleExports, 'server', this._getServerPatch.bind(this));\n            }\n            if (!(0, instrumentation_1.isWrapped)(moduleExports.Server)) {\n                this._wrap(moduleExports, 'Server', this._getServerPatch.bind(this));\n            }\n            return moduleExports;\n        }, (module) => {\n            const moduleExports = module[Symbol.toStringTag] === 'Module' ? module.default : module;\n            this._massUnwrap([moduleExports], ['server', 'Server']);\n        });\n    }\n    /**\n     * Patches the Hapi.server and Hapi.Server functions in order to instrument\n     * the server.route, server.ext, and server.register functions via calls to the\n     * @function _getServerRoutePatch, @function _getServerExtPatch, and\n     * @function _getServerRegisterPatch functions\n     * @param original - the original Hapi Server creation function\n     */\n    _getServerPatch(original) {\n        const instrumentation = this;\n        const self = this;\n        return function server(opts) {\n            const newServer = original.apply(this, [opts]);\n            self._wrap(newServer, 'route', originalRouter => {\n                return instrumentation._getServerRoutePatch.bind(instrumentation)(originalRouter);\n            });\n            // Casting as any is necessary here due to multiple overloads on the Hapi.ext\n            // function, which requires supporting a variety of different parameters\n            // as extension inputs\n            self._wrap(newServer, 'ext', originalExtHandler => {\n                return instrumentation._getServerExtPatch.bind(instrumentation)(\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                originalExtHandler);\n            });\n            // Casting as any is necessary here due to multiple overloads on the Hapi.Server.register\n            // function, which requires supporting a variety of different types of Plugin inputs\n            self._wrap(newServer, 'register', \n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            instrumentation._getServerRegisterPatch.bind(instrumentation));\n            return newServer;\n        };\n    }\n    /**\n     * Patches the plugin register function used by the Hapi Server. This function\n     * goes through each plugin that is being registered and adds instrumentation\n     * via a call to the @function _wrapRegisterHandler function.\n     * @param {RegisterFunction<T>} original - the original register function which\n     * registers each plugin on the server\n     */\n    _getServerRegisterPatch(original) {\n        const instrumentation = this;\n        return function register(pluginInput, options) {\n            if (Array.isArray(pluginInput)) {\n                for (const pluginObj of pluginInput) {\n                    const plugin = (0, utils_1.getPluginFromInput)(pluginObj);\n                    instrumentation._wrapRegisterHandler(plugin);\n                }\n            }\n            else {\n                const plugin = (0, utils_1.getPluginFromInput)(pluginInput);\n                instrumentation._wrapRegisterHandler(plugin);\n            }\n            return original.apply(this, [pluginInput, options]);\n        };\n    }\n    /**\n     * Patches the Server.ext function which adds extension methods to the specified\n     * point along the request lifecycle. This function accepts the full range of\n     * accepted input into the standard Hapi `server.ext` function. For each extension,\n     * it adds instrumentation to the handler via a call to the @function _wrapExtMethods\n     * function.\n     * @param original - the original ext function which adds the extension method to the server\n     * @param {string} [pluginName] - if present, represents the name of the plugin responsible\n     * for adding this server extension. Else, signifies that the extension was added directly\n     */\n    _getServerExtPatch(original, pluginName) {\n        const instrumentation = this;\n        return function ext(...args) {\n            if (Array.isArray(args[0])) {\n                const eventsList = args[0];\n                for (let i = 0; i < eventsList.length; i++) {\n                    const eventObj = eventsList[i];\n                    if ((0, utils_1.isLifecycleExtType)(eventObj.type)) {\n                        const lifecycleEventObj = eventObj;\n                        const handler = instrumentation._wrapExtMethods(lifecycleEventObj.method, eventObj.type, pluginName);\n                        lifecycleEventObj.method = handler;\n                        eventsList[i] = lifecycleEventObj;\n                    }\n                }\n                return original.apply(this, args);\n            }\n            else if ((0, utils_1.isDirectExtInput)(args)) {\n                const extInput = args;\n                const method = extInput[1];\n                const handler = instrumentation._wrapExtMethods(method, extInput[0], pluginName);\n                return original.apply(this, [extInput[0], handler, extInput[2]]);\n            }\n            else if ((0, utils_1.isLifecycleExtEventObj)(args[0])) {\n                const lifecycleEventObj = args[0];\n                const handler = instrumentation._wrapExtMethods(lifecycleEventObj.method, lifecycleEventObj.type, pluginName);\n                lifecycleEventObj.method = handler;\n                return original.call(this, lifecycleEventObj);\n            }\n            return original.apply(this, args);\n        };\n    }\n    /**\n     * Patches the Server.route function. This function accepts either one or an array\n     * of Hapi.ServerRoute objects and adds instrumentation on each route via a call to\n     * the @function _wrapRouteHandler function.\n     * @param {HapiServerRouteInputMethod} original - the original route function which adds\n     * the route to the server\n     * @param {string} [pluginName] - if present, represents the name of the plugin responsible\n     * for adding this server route. Else, signifies that the route was added directly\n     */\n    _getServerRoutePatch(original, pluginName) {\n        const instrumentation = this;\n        return function route(route) {\n            if (Array.isArray(route)) {\n                for (let i = 0; i < route.length; i++) {\n                    const newRoute = instrumentation._wrapRouteHandler.call(instrumentation, route[i], pluginName);\n                    route[i] = newRoute;\n                }\n            }\n            else {\n                route = instrumentation._wrapRouteHandler.call(instrumentation, route, pluginName);\n            }\n            return original.apply(this, [route]);\n        };\n    }\n    /**\n     * Wraps newly registered plugins to add instrumentation to the plugin's clone of\n     * the original server. Specifically, wraps the server.route and server.ext functions\n     * via calls to @function _getServerRoutePatch and @function _getServerExtPatch\n     * @param {Hapi.Plugin<T>} plugin - the new plugin which is being instrumented\n     */\n    _wrapRegisterHandler(plugin) {\n        const instrumentation = this;\n        const pluginName = (0, utils_1.getPluginName)(plugin);\n        const oldRegister = plugin.register;\n        const self = this;\n        const newRegisterHandler = function (server, options) {\n            self._wrap(server, 'route', original => {\n                return instrumentation._getServerRoutePatch.bind(instrumentation)(original, pluginName);\n            });\n            // Casting as any is necessary here due to multiple overloads on the Hapi.ext\n            // function, which requires supporting a variety of different parameters\n            // as extension inputs\n            self._wrap(server, 'ext', originalExtHandler => {\n                return instrumentation._getServerExtPatch.bind(instrumentation)(\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                originalExtHandler, pluginName);\n            });\n            return oldRegister.call(this, server, options);\n        };\n        plugin.register = newRegisterHandler;\n    }\n    /**\n     * Wraps request extension methods to add instrumentation to each new extension handler.\n     * Patches each individual extension in order to create the\n     * span and propagate context. It does not create spans when there is no parent span.\n     * @param {PatchableExtMethod | PatchableExtMethod[]} method - the request extension\n     * handler which is being instrumented\n     * @param {Hapi.ServerRequestExtType} extPoint - the point in the Hapi request lifecycle\n     * which this extension targets\n     * @param {string} [pluginName] - if present, represents the name of the plugin responsible\n     * for adding this server route. Else, signifies that the route was added directly\n     */\n    _wrapExtMethods(method, extPoint, pluginName) {\n        const instrumentation = this;\n        if (method instanceof Array) {\n            for (let i = 0; i < method.length; i++) {\n                method[i] = instrumentation._wrapExtMethods(method[i], extPoint);\n            }\n            return method;\n        }\n        else if ((0, utils_1.isPatchableExtMethod)(method)) {\n            if (method[internal_types_1.handlerPatched] === true)\n                return method;\n            method[internal_types_1.handlerPatched] = true;\n            const newHandler = async function (...params) {\n                if (api.trace.getSpan(api.context.active()) === undefined) {\n                    return await method.apply(this, params);\n                }\n                const metadata = (0, utils_1.getExtMetadata)(extPoint, pluginName);\n                const span = instrumentation.tracer.startSpan(metadata.name, {\n                    attributes: metadata.attributes,\n                });\n                try {\n                    return await api.context.with(api.trace.setSpan(api.context.active(), span), method, undefined, ...params);\n                }\n                catch (err) {\n                    span.recordException(err);\n                    span.setStatus({\n                        code: api.SpanStatusCode.ERROR,\n                        message: err.message,\n                    });\n                    throw err;\n                }\n                finally {\n                    span.end();\n                }\n            };\n            return newHandler;\n        }\n        return method;\n    }\n    /**\n     * Patches each individual route handler method in order to create the\n     * span and propagate context. It does not create spans when there is no parent span.\n     * @param {PatchableServerRoute} route - the route handler which is being instrumented\n     * @param {string} [pluginName] - if present, represents the name of the plugin responsible\n     * for adding this server route. Else, signifies that the route was added directly\n     */\n    _wrapRouteHandler(route, pluginName) {\n        const instrumentation = this;\n        if (route[internal_types_1.handlerPatched] === true)\n            return route;\n        route[internal_types_1.handlerPatched] = true;\n        const wrapHandler = oldHandler => {\n            return async function (...params) {\n                if (api.trace.getSpan(api.context.active()) === undefined) {\n                    return await oldHandler.call(this, ...params);\n                }\n                const rpcMetadata = (0, core_1.getRPCMetadata)(api.context.active());\n                if (rpcMetadata?.type === core_1.RPCType.HTTP) {\n                    rpcMetadata.route = route.path;\n                }\n                const metadata = (0, utils_1.getRouteMetadata)(route, instrumentation._semconvStability, pluginName);\n                const span = instrumentation.tracer.startSpan(metadata.name, {\n                    attributes: metadata.attributes,\n                });\n                try {\n                    return await api.context.with(api.trace.setSpan(api.context.active(), span), () => oldHandler.call(this, ...params));\n                }\n                catch (err) {\n                    span.recordException(err);\n                    span.setStatus({\n                        code: api.SpanStatusCode.ERROR,\n                        message: err.message,\n                    });\n                    throw err;\n                }\n                finally {\n                    span.end();\n                }\n            };\n        };\n        if (typeof route.handler === 'function') {\n            route.handler = wrapHandler(route.handler);\n        }\n        else if (typeof route.options === 'function') {\n            const oldOptions = route.options;\n            route.options = function (server) {\n                const options = oldOptions(server);\n                if (typeof options.handler === 'function') {\n                    options.handler = wrapHandler(options.handler);\n                }\n                return options;\n            };\n        }\n        else if (typeof route.options?.handler === 'function') {\n            route.options.handler = wrapHandler(route.options.handler);\n        }\n        return route;\n    }\n}\nexports.HapiInstrumentation = HapiInstrumentation;\n//# sourceMappingURL=instrumentation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-hapi/build/src/instrumentation.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-hapi/build/src/internal-types.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-hapi/build/src/internal-types.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HapiLifecycleMethodNames = exports.HapiLayerType = exports.handlerPatched = exports.HapiComponentName = void 0;\nexports.HapiComponentName = '@hapi/hapi';\n/**\n * This symbol is used to mark a Hapi route handler or server extension handler as\n * already patched, since its possible to use these handlers multiple times\n * i.e. when allowing multiple versions of one plugin, or when registering a plugin\n * multiple times on different servers.\n */\nexports.handlerPatched = Symbol('hapi-handler-patched');\nexports.HapiLayerType = {\n    ROUTER: 'router',\n    PLUGIN: 'plugin',\n    EXT: 'server.ext',\n};\nexports.HapiLifecycleMethodNames = new Set([\n    'onPreAuth',\n    'onCredentials',\n    'onPostAuth',\n    'onPreHandler',\n    'onPostHandler',\n    'onPreResponse',\n    'onRequest',\n]);\n//# sourceMappingURL=internal-types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1oYXBpL2J1aWxkL3NyYy9pbnRlcm5hbC10eXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQ0FBZ0MsR0FBRyxxQkFBcUIsR0FBRyxzQkFBc0IsR0FBRyx5QkFBeUI7QUFDN0cseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QixxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1oYXBpL2J1aWxkL3NyYy9pbnRlcm5hbC10eXBlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkhhcGlMaWZlY3ljbGVNZXRob2ROYW1lcyA9IGV4cG9ydHMuSGFwaUxheWVyVHlwZSA9IGV4cG9ydHMuaGFuZGxlclBhdGNoZWQgPSBleHBvcnRzLkhhcGlDb21wb25lbnROYW1lID0gdm9pZCAwO1xuZXhwb3J0cy5IYXBpQ29tcG9uZW50TmFtZSA9ICdAaGFwaS9oYXBpJztcbi8qKlxuICogVGhpcyBzeW1ib2wgaXMgdXNlZCB0byBtYXJrIGEgSGFwaSByb3V0ZSBoYW5kbGVyIG9yIHNlcnZlciBleHRlbnNpb24gaGFuZGxlciBhc1xuICogYWxyZWFkeSBwYXRjaGVkLCBzaW5jZSBpdHMgcG9zc2libGUgdG8gdXNlIHRoZXNlIGhhbmRsZXJzIG11bHRpcGxlIHRpbWVzXG4gKiBpLmUuIHdoZW4gYWxsb3dpbmcgbXVsdGlwbGUgdmVyc2lvbnMgb2Ygb25lIHBsdWdpbiwgb3Igd2hlbiByZWdpc3RlcmluZyBhIHBsdWdpblxuICogbXVsdGlwbGUgdGltZXMgb24gZGlmZmVyZW50IHNlcnZlcnMuXG4gKi9cbmV4cG9ydHMuaGFuZGxlclBhdGNoZWQgPSBTeW1ib2woJ2hhcGktaGFuZGxlci1wYXRjaGVkJyk7XG5leHBvcnRzLkhhcGlMYXllclR5cGUgPSB7XG4gICAgUk9VVEVSOiAncm91dGVyJyxcbiAgICBQTFVHSU46ICdwbHVnaW4nLFxuICAgIEVYVDogJ3NlcnZlci5leHQnLFxufTtcbmV4cG9ydHMuSGFwaUxpZmVjeWNsZU1ldGhvZE5hbWVzID0gbmV3IFNldChbXG4gICAgJ29uUHJlQXV0aCcsXG4gICAgJ29uQ3JlZGVudGlhbHMnLFxuICAgICdvblBvc3RBdXRoJyxcbiAgICAnb25QcmVIYW5kbGVyJyxcbiAgICAnb25Qb3N0SGFuZGxlcicsXG4gICAgJ29uUHJlUmVzcG9uc2UnLFxuICAgICdvblJlcXVlc3QnLFxuXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnRlcm5hbC10eXBlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-hapi/build/src/internal-types.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-hapi/build/src/semconv.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-hapi/build/src/semconv.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ATTR_HTTP_METHOD = void 0;\n/*\n * This file contains a copy of unstable semantic convention definitions\n * used by this package.\n * @see https://github.com/open-telemetry/opentelemetry-js/tree/main/semantic-conventions#unstable-semconv\n */\n/**\n * Deprecated, use `http.request.method` instead.\n *\n * @example GET\n * @example POST\n * @example HEAD\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `http.request.method`.\n */\nexports.ATTR_HTTP_METHOD = 'http.method';\n//# sourceMappingURL=semconv.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1oYXBpL2J1aWxkL3NyYy9zZW1jb252LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QiIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24taGFwaS9idWlsZC9zcmMvc2VtY29udi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFUVFJfSFRUUF9NRVRIT0QgPSB2b2lkIDA7XG4vKlxuICogVGhpcyBmaWxlIGNvbnRhaW5zIGEgY29weSBvZiB1bnN0YWJsZSBzZW1hbnRpYyBjb252ZW50aW9uIGRlZmluaXRpb25zXG4gKiB1c2VkIGJ5IHRoaXMgcGFja2FnZS5cbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL29wZW4tdGVsZW1ldHJ5L29wZW50ZWxlbWV0cnktanMvdHJlZS9tYWluL3NlbWFudGljLWNvbnZlbnRpb25zI3Vuc3RhYmxlLXNlbWNvbnZcbiAqL1xuLyoqXG4gKiBEZXByZWNhdGVkLCB1c2UgYGh0dHAucmVxdWVzdC5tZXRob2RgIGluc3RlYWQuXG4gKlxuICogQGV4YW1wbGUgR0VUXG4gKiBAZXhhbXBsZSBQT1NUXG4gKiBAZXhhbXBsZSBIRUFEXG4gKlxuICogQGV4cGVyaW1lbnRhbCBUaGlzIGF0dHJpYnV0ZSBpcyBleHBlcmltZW50YWwgYW5kIGlzIHN1YmplY3QgdG8gYnJlYWtpbmcgY2hhbmdlcyBpbiBtaW5vciByZWxlYXNlcyBvZiBgQG9wZW50ZWxlbWV0cnkvc2VtYW50aWMtY29udmVudGlvbnNgLlxuICpcbiAqIEBkZXByZWNhdGVkIFJlcGxhY2VkIGJ5IGBodHRwLnJlcXVlc3QubWV0aG9kYC5cbiAqL1xuZXhwb3J0cy5BVFRSX0hUVFBfTUVUSE9EID0gJ2h0dHAubWV0aG9kJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlbWNvbnYuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-hapi/build/src/semconv.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-hapi/build/src/utils.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-hapi/build/src/utils.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getPluginFromInput = exports.getExtMetadata = exports.getRouteMetadata = exports.isPatchableExtMethod = exports.isDirectExtInput = exports.isLifecycleExtEventObj = exports.isLifecycleExtType = exports.getPluginName = void 0;\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst semconv_1 = __webpack_require__(/*! ./semconv */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-hapi/build/src/semconv.js\");\nconst internal_types_1 = __webpack_require__(/*! ./internal-types */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-hapi/build/src/internal-types.js\");\nconst AttributeNames_1 = __webpack_require__(/*! ./enums/AttributeNames */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-hapi/build/src/enums/AttributeNames.js\");\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nfunction getPluginName(plugin) {\n    if (plugin.name) {\n        return plugin.name;\n    }\n    else {\n        return plugin.pkg.name;\n    }\n}\nexports.getPluginName = getPluginName;\nconst isLifecycleExtType = (variableToCheck) => {\n    return (typeof variableToCheck === 'string' &&\n        internal_types_1.HapiLifecycleMethodNames.has(variableToCheck));\n};\nexports.isLifecycleExtType = isLifecycleExtType;\nconst isLifecycleExtEventObj = (variableToCheck) => {\n    const event = variableToCheck?.type;\n    return event !== undefined && (0, exports.isLifecycleExtType)(event);\n};\nexports.isLifecycleExtEventObj = isLifecycleExtEventObj;\nconst isDirectExtInput = (variableToCheck) => {\n    return (Array.isArray(variableToCheck) &&\n        variableToCheck.length <= 3 &&\n        (0, exports.isLifecycleExtType)(variableToCheck[0]) &&\n        typeof variableToCheck[1] === 'function');\n};\nexports.isDirectExtInput = isDirectExtInput;\nconst isPatchableExtMethod = (variableToCheck) => {\n    return !Array.isArray(variableToCheck);\n};\nexports.isPatchableExtMethod = isPatchableExtMethod;\nconst getRouteMetadata = (route, semconvStability, pluginName) => {\n    const attributes = {\n        [semantic_conventions_1.ATTR_HTTP_ROUTE]: route.path,\n    };\n    if (semconvStability & instrumentation_1.SemconvStability.OLD) {\n        attributes[semconv_1.ATTR_HTTP_METHOD] = route.method;\n    }\n    if (semconvStability & instrumentation_1.SemconvStability.STABLE) {\n        // Note: This currently does *not* normalize the method name to uppercase\n        // and conditionally include `http.request.method.original` as described\n        // at https://opentelemetry.io/docs/specs/semconv/http/http-spans/\n        // These attributes are for a *hapi* span, and not the parent HTTP span,\n        // so the HTTP span guidance doesn't strictly apply.\n        attributes[semantic_conventions_1.ATTR_HTTP_REQUEST_METHOD] = route.method;\n    }\n    let name;\n    if (pluginName) {\n        attributes[AttributeNames_1.AttributeNames.HAPI_TYPE] = internal_types_1.HapiLayerType.PLUGIN;\n        attributes[AttributeNames_1.AttributeNames.PLUGIN_NAME] = pluginName;\n        name = `${pluginName}: route - ${route.path}`;\n    }\n    else {\n        attributes[AttributeNames_1.AttributeNames.HAPI_TYPE] = internal_types_1.HapiLayerType.ROUTER;\n        name = `route - ${route.path}`;\n    }\n    return { attributes, name };\n};\nexports.getRouteMetadata = getRouteMetadata;\nconst getExtMetadata = (extPoint, pluginName) => {\n    if (pluginName) {\n        return {\n            attributes: {\n                [AttributeNames_1.AttributeNames.EXT_TYPE]: extPoint,\n                [AttributeNames_1.AttributeNames.HAPI_TYPE]: internal_types_1.HapiLayerType.EXT,\n                [AttributeNames_1.AttributeNames.PLUGIN_NAME]: pluginName,\n            },\n            name: `${pluginName}: ext - ${extPoint}`,\n        };\n    }\n    return {\n        attributes: {\n            [AttributeNames_1.AttributeNames.EXT_TYPE]: extPoint,\n            [AttributeNames_1.AttributeNames.HAPI_TYPE]: internal_types_1.HapiLayerType.EXT,\n        },\n        name: `ext - ${extPoint}`,\n    };\n};\nexports.getExtMetadata = getExtMetadata;\nconst getPluginFromInput = (pluginObj) => {\n    if ('plugin' in pluginObj) {\n        if ('plugin' in pluginObj.plugin) {\n            return pluginObj.plugin.plugin;\n        }\n        return pluginObj.plugin;\n    }\n    return pluginObj;\n};\nexports.getPluginFromInput = getPluginFromInput;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-hapi/build/src/utils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-hapi/build/src/version.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-hapi/build/src/version.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PACKAGE_NAME = exports.PACKAGE_VERSION = void 0;\n// this is autogenerated file, see scripts/version-update.js\nexports.PACKAGE_VERSION = '0.50.0';\nexports.PACKAGE_NAME = '@opentelemetry/instrumentation-hapi';\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1oYXBpL2J1aWxkL3NyYy92ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQixHQUFHLHVCQUF1QjtBQUM5QztBQUNBLHVCQUF1QjtBQUN2QixvQkFBb0I7QUFDcEIiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWhhcGkvYnVpbGQvc3JjL3ZlcnNpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5QQUNLQUdFX05BTUUgPSBleHBvcnRzLlBBQ0tBR0VfVkVSU0lPTiA9IHZvaWQgMDtcbi8vIHRoaXMgaXMgYXV0b2dlbmVyYXRlZCBmaWxlLCBzZWUgc2NyaXB0cy92ZXJzaW9uLXVwZGF0ZS5qc1xuZXhwb3J0cy5QQUNLQUdFX1ZFUlNJT04gPSAnMC41MC4wJztcbmV4cG9ydHMuUEFDS0FHRV9OQU1FID0gJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1oYXBpJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-hapi/build/src/version.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-http/build/src/enums/AttributeNames.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-http/build/src/enums/AttributeNames.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AttributeNames = void 0;\n/**\n * https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/http.md\n */\nvar AttributeNames;\n(function (AttributeNames) {\n    AttributeNames[\"HTTP_ERROR_NAME\"] = \"http.error_name\";\n    AttributeNames[\"HTTP_ERROR_MESSAGE\"] = \"http.error_message\";\n    AttributeNames[\"HTTP_STATUS_TEXT\"] = \"http.status_text\";\n})(AttributeNames = exports.AttributeNames || (exports.AttributeNames = {}));\n//# sourceMappingURL=AttributeNames.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1odHRwL2J1aWxkL3NyYy9lbnVtcy9BdHRyaWJ1dGVOYW1lcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsOENBQThDLHNCQUFzQixLQUFLO0FBQzFFIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1odHRwL2J1aWxkL3NyYy9lbnVtcy9BdHRyaWJ1dGVOYW1lcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkF0dHJpYnV0ZU5hbWVzID0gdm9pZCAwO1xuLyoqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vb3Blbi10ZWxlbWV0cnkvb3BlbnRlbGVtZXRyeS1zcGVjaWZpY2F0aW9uL2Jsb2IvbWFzdGVyL3NwZWNpZmljYXRpb24vdHJhY2Uvc2VtYW50aWNfY29udmVudGlvbnMvaHR0cC5tZFxuICovXG52YXIgQXR0cmlidXRlTmFtZXM7XG4oZnVuY3Rpb24gKEF0dHJpYnV0ZU5hbWVzKSB7XG4gICAgQXR0cmlidXRlTmFtZXNbXCJIVFRQX0VSUk9SX05BTUVcIl0gPSBcImh0dHAuZXJyb3JfbmFtZVwiO1xuICAgIEF0dHJpYnV0ZU5hbWVzW1wiSFRUUF9FUlJPUl9NRVNTQUdFXCJdID0gXCJodHRwLmVycm9yX21lc3NhZ2VcIjtcbiAgICBBdHRyaWJ1dGVOYW1lc1tcIkhUVFBfU1RBVFVTX1RFWFRcIl0gPSBcImh0dHAuc3RhdHVzX3RleHRcIjtcbn0pKEF0dHJpYnV0ZU5hbWVzID0gZXhwb3J0cy5BdHRyaWJ1dGVOYW1lcyB8fCAoZXhwb3J0cy5BdHRyaWJ1dGVOYW1lcyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BdHRyaWJ1dGVOYW1lcy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-http/build/src/enums/AttributeNames.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-http/build/src/http.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-http/build/src/http.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HttpInstrumentation = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst core_1 = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/index.js\");\nconst url = __webpack_require__(/*! url */ \"url\");\nconst version_1 = __webpack_require__(/*! ./version */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-http/build/src/version.js\");\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-http/build/src/utils.js\");\n/**\n * `node:http` and `node:https` instrumentation for OpenTelemetry\n */\nclass HttpInstrumentation extends instrumentation_1.InstrumentationBase {\n    /** keep track on spans not ended */\n    _spanNotEnded = new WeakSet();\n    _headerCapture;\n    _semconvStability = instrumentation_1.SemconvStability.OLD;\n    constructor(config = {}) {\n        super('@opentelemetry/instrumentation-http', version_1.VERSION, config);\n        this._headerCapture = this._createHeaderCapture();\n        this._semconvStability = (0, instrumentation_1.semconvStabilityFromStr)('http', process.env.OTEL_SEMCONV_STABILITY_OPT_IN);\n    }\n    _updateMetricInstruments() {\n        this._oldHttpServerDurationHistogram = this.meter.createHistogram('http.server.duration', {\n            description: 'Measures the duration of inbound HTTP requests.',\n            unit: 'ms',\n            valueType: api_1.ValueType.DOUBLE,\n        });\n        this._oldHttpClientDurationHistogram = this.meter.createHistogram('http.client.duration', {\n            description: 'Measures the duration of outbound HTTP requests.',\n            unit: 'ms',\n            valueType: api_1.ValueType.DOUBLE,\n        });\n        this._stableHttpServerDurationHistogram = this.meter.createHistogram(semantic_conventions_1.METRIC_HTTP_SERVER_REQUEST_DURATION, {\n            description: 'Duration of HTTP server requests.',\n            unit: 's',\n            valueType: api_1.ValueType.DOUBLE,\n            advice: {\n                explicitBucketBoundaries: [\n                    0.005, 0.01, 0.025, 0.05, 0.075, 0.1, 0.25, 0.5, 0.75, 1, 2.5, 5,\n                    7.5, 10,\n                ],\n            },\n        });\n        this._stableHttpClientDurationHistogram = this.meter.createHistogram(semantic_conventions_1.METRIC_HTTP_CLIENT_REQUEST_DURATION, {\n            description: 'Duration of HTTP client requests.',\n            unit: 's',\n            valueType: api_1.ValueType.DOUBLE,\n            advice: {\n                explicitBucketBoundaries: [\n                    0.005, 0.01, 0.025, 0.05, 0.075, 0.1, 0.25, 0.5, 0.75, 1, 2.5, 5,\n                    7.5, 10,\n                ],\n            },\n        });\n    }\n    _recordServerDuration(durationMs, oldAttributes, stableAttributes) {\n        if (this._semconvStability & instrumentation_1.SemconvStability.OLD) {\n            // old histogram is counted in MS\n            this._oldHttpServerDurationHistogram.record(durationMs, oldAttributes);\n        }\n        if (this._semconvStability & instrumentation_1.SemconvStability.STABLE) {\n            // stable histogram is counted in S\n            this._stableHttpServerDurationHistogram.record(durationMs / 1000, stableAttributes);\n        }\n    }\n    _recordClientDuration(durationMs, oldAttributes, stableAttributes) {\n        if (this._semconvStability & instrumentation_1.SemconvStability.OLD) {\n            // old histogram is counted in MS\n            this._oldHttpClientDurationHistogram.record(durationMs, oldAttributes);\n        }\n        if (this._semconvStability & instrumentation_1.SemconvStability.STABLE) {\n            // stable histogram is counted in S\n            this._stableHttpClientDurationHistogram.record(durationMs / 1000, stableAttributes);\n        }\n    }\n    setConfig(config = {}) {\n        super.setConfig(config);\n        this._headerCapture = this._createHeaderCapture();\n    }\n    init() {\n        return [this._getHttpsInstrumentation(), this._getHttpInstrumentation()];\n    }\n    _getHttpInstrumentation() {\n        return new instrumentation_1.InstrumentationNodeModuleDefinition('http', ['*'], (moduleExports) => {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const isESM = moduleExports[Symbol.toStringTag] === 'Module';\n            if (!this.getConfig().disableOutgoingRequestInstrumentation) {\n                const patchedRequest = this._wrap(moduleExports, 'request', this._getPatchOutgoingRequestFunction('http'));\n                const patchedGet = this._wrap(moduleExports, 'get', this._getPatchOutgoingGetFunction(patchedRequest));\n                if (isESM) {\n                    // To handle `import http from 'http'`, which returns the default\n                    // export, we need to set `module.default.*`.\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    moduleExports.default.request = patchedRequest;\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    moduleExports.default.get = patchedGet;\n                }\n            }\n            if (!this.getConfig().disableIncomingRequestInstrumentation) {\n                this._wrap(moduleExports.Server.prototype, 'emit', this._getPatchIncomingRequestFunction('http'));\n            }\n            return moduleExports;\n        }, (moduleExports) => {\n            if (moduleExports === undefined)\n                return;\n            if (!this.getConfig().disableOutgoingRequestInstrumentation) {\n                this._unwrap(moduleExports, 'request');\n                this._unwrap(moduleExports, 'get');\n            }\n            if (!this.getConfig().disableIncomingRequestInstrumentation) {\n                this._unwrap(moduleExports.Server.prototype, 'emit');\n            }\n        });\n    }\n    _getHttpsInstrumentation() {\n        return new instrumentation_1.InstrumentationNodeModuleDefinition('https', ['*'], (moduleExports) => {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const isESM = moduleExports[Symbol.toStringTag] === 'Module';\n            if (!this.getConfig().disableOutgoingRequestInstrumentation) {\n                const patchedRequest = this._wrap(moduleExports, 'request', this._getPatchHttpsOutgoingRequestFunction('https'));\n                const patchedGet = this._wrap(moduleExports, 'get', this._getPatchHttpsOutgoingGetFunction(patchedRequest));\n                if (isESM) {\n                    // To handle `import https from 'https'`, which returns the default\n                    // export, we need to set `module.default.*`.\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    moduleExports.default.request = patchedRequest;\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    moduleExports.default.get = patchedGet;\n                }\n            }\n            if (!this.getConfig().disableIncomingRequestInstrumentation) {\n                this._wrap(moduleExports.Server.prototype, 'emit', this._getPatchIncomingRequestFunction('https'));\n            }\n            return moduleExports;\n        }, (moduleExports) => {\n            if (moduleExports === undefined)\n                return;\n            if (!this.getConfig().disableOutgoingRequestInstrumentation) {\n                this._unwrap(moduleExports, 'request');\n                this._unwrap(moduleExports, 'get');\n            }\n            if (!this.getConfig().disableIncomingRequestInstrumentation) {\n                this._unwrap(moduleExports.Server.prototype, 'emit');\n            }\n        });\n    }\n    /**\n     * Creates spans for incoming requests, restoring spans' context if applied.\n     */\n    _getPatchIncomingRequestFunction(component) {\n        return (original) => {\n            return this._incomingRequestFunction(component, original);\n        };\n    }\n    /**\n     * Creates spans for outgoing requests, sending spans' context for distributed\n     * tracing.\n     */\n    _getPatchOutgoingRequestFunction(component) {\n        return (original) => {\n            return this._outgoingRequestFunction(component, original);\n        };\n    }\n    _getPatchOutgoingGetFunction(clientRequest) {\n        return (_original) => {\n            // Re-implement http.get. This needs to be done (instead of using\n            // getPatchOutgoingRequestFunction to patch it) because we need to\n            // set the trace context header before the returned http.ClientRequest is\n            // ended. The Node.js docs state that the only differences between\n            // request and get are that (1) get defaults to the HTTP GET method and\n            // (2) the returned request object is ended immediately. The former is\n            // already true (at least in supported Node versions up to v10), so we\n            // simply follow the latter. Ref:\n            // https://nodejs.org/dist/latest/docs/api/http.html#http_http_get_options_callback\n            // https://github.com/googleapis/cloud-trace-nodejs/blob/master/src/instrumentations/instrumentation-http.ts#L198\n            return function outgoingGetRequest(options, ...args) {\n                const req = clientRequest(options, ...args);\n                req.end();\n                return req;\n            };\n        };\n    }\n    /** Patches HTTPS outgoing requests */\n    _getPatchHttpsOutgoingRequestFunction(component) {\n        return (original) => {\n            const instrumentation = this;\n            return function httpsOutgoingRequest(\n            // eslint-disable-next-line node/no-unsupported-features/node-builtins\n            options, ...args) {\n                // Makes sure options will have default HTTPS parameters\n                if (component === 'https' &&\n                    typeof options === 'object' &&\n                    options?.constructor?.name !== 'URL') {\n                    options = Object.assign({}, options);\n                    instrumentation._setDefaultOptions(options);\n                }\n                return instrumentation._getPatchOutgoingRequestFunction(component)(original)(options, ...args);\n            };\n        };\n    }\n    _setDefaultOptions(options) {\n        options.protocol = options.protocol || 'https:';\n        options.port = options.port || 443;\n    }\n    /** Patches HTTPS outgoing get requests */\n    _getPatchHttpsOutgoingGetFunction(clientRequest) {\n        return (original) => {\n            const instrumentation = this;\n            return function httpsOutgoingRequest(\n            // eslint-disable-next-line node/no-unsupported-features/node-builtins\n            options, ...args) {\n                return instrumentation._getPatchOutgoingGetFunction(clientRequest)(original)(options, ...args);\n            };\n        };\n    }\n    /**\n     * Attach event listeners to a client request to end span and add span attributes.\n     *\n     * @param request The original request object.\n     * @param span representing the current operation\n     * @param startTime representing the start time of the request to calculate duration in Metric\n     * @param oldMetricAttributes metric attributes for old semantic conventions\n     * @param stableMetricAttributes metric attributes for new semantic conventions\n     */\n    _traceClientRequest(request, span, startTime, oldMetricAttributes, stableMetricAttributes) {\n        if (this.getConfig().requestHook) {\n            this._callRequestHook(span, request);\n        }\n        /**\n         * Determines if the request has errored or the response has ended/errored.\n         */\n        let responseFinished = false;\n        /*\n         * User 'response' event listeners can be added before our listener,\n         * force our listener to be the first, so response emitter is bound\n         * before any user listeners are added to it.\n         */\n        request.prependListener('response', (response) => {\n            this._diag.debug('outgoingRequest on response()');\n            if (request.listenerCount('response') <= 1) {\n                response.resume();\n            }\n            const responseAttributes = (0, utils_1.getOutgoingRequestAttributesOnResponse)(response, this._semconvStability);\n            span.setAttributes(responseAttributes);\n            oldMetricAttributes = Object.assign(oldMetricAttributes, (0, utils_1.getOutgoingRequestMetricAttributesOnResponse)(responseAttributes));\n            stableMetricAttributes = Object.assign(stableMetricAttributes, (0, utils_1.getOutgoingStableRequestMetricAttributesOnResponse)(responseAttributes));\n            if (this.getConfig().responseHook) {\n                this._callResponseHook(span, response);\n            }\n            this._headerCapture.client.captureRequestHeaders(span, header => request.getHeader(header));\n            this._headerCapture.client.captureResponseHeaders(span, header => response.headers[header]);\n            api_1.context.bind(api_1.context.active(), response);\n            const endHandler = () => {\n                this._diag.debug('outgoingRequest on end()');\n                if (responseFinished) {\n                    return;\n                }\n                responseFinished = true;\n                let status;\n                if (response.aborted && !response.complete) {\n                    status = { code: api_1.SpanStatusCode.ERROR };\n                }\n                else {\n                    // behaves same for new and old semconv\n                    status = {\n                        code: (0, utils_1.parseResponseStatus)(api_1.SpanKind.CLIENT, response.statusCode),\n                    };\n                }\n                span.setStatus(status);\n                if (this.getConfig().applyCustomAttributesOnSpan) {\n                    (0, instrumentation_1.safeExecuteInTheMiddle)(() => this.getConfig().applyCustomAttributesOnSpan(span, request, response), () => { }, true);\n                }\n                this._closeHttpSpan(span, api_1.SpanKind.CLIENT, startTime, oldMetricAttributes, stableMetricAttributes);\n            };\n            response.on('end', endHandler);\n            response.on(events_1.errorMonitor, (error) => {\n                this._diag.debug('outgoingRequest on error()', error);\n                if (responseFinished) {\n                    return;\n                }\n                responseFinished = true;\n                (0, utils_1.setSpanWithError)(span, error, this._semconvStability);\n                span.setStatus({\n                    code: api_1.SpanStatusCode.ERROR,\n                    message: error.message,\n                });\n                this._closeHttpSpan(span, api_1.SpanKind.CLIENT, startTime, oldMetricAttributes, stableMetricAttributes);\n            });\n        });\n        request.on('close', () => {\n            this._diag.debug('outgoingRequest on request close()');\n            if (request.aborted || responseFinished) {\n                return;\n            }\n            responseFinished = true;\n            this._closeHttpSpan(span, api_1.SpanKind.CLIENT, startTime, oldMetricAttributes, stableMetricAttributes);\n        });\n        request.on(events_1.errorMonitor, (error) => {\n            this._diag.debug('outgoingRequest on request error()', error);\n            if (responseFinished) {\n                return;\n            }\n            responseFinished = true;\n            (0, utils_1.setSpanWithError)(span, error, this._semconvStability);\n            this._closeHttpSpan(span, api_1.SpanKind.CLIENT, startTime, oldMetricAttributes, stableMetricAttributes);\n        });\n        this._diag.debug('http.ClientRequest return request');\n        return request;\n    }\n    _incomingRequestFunction(component, original) {\n        const instrumentation = this;\n        return function incomingRequest(event, ...args) {\n            // Only traces request events\n            if (event !== 'request') {\n                return original.apply(this, [event, ...args]);\n            }\n            const request = args[0];\n            const response = args[1];\n            const method = request.method || 'GET';\n            instrumentation._diag.debug(`${component} instrumentation incomingRequest`);\n            if ((0, instrumentation_1.safeExecuteInTheMiddle)(() => instrumentation.getConfig().ignoreIncomingRequestHook?.(request), (e) => {\n                if (e != null) {\n                    instrumentation._diag.error('caught ignoreIncomingRequestHook error: ', e);\n                }\n            }, true)) {\n                return api_1.context.with((0, core_1.suppressTracing)(api_1.context.active()), () => {\n                    api_1.context.bind(api_1.context.active(), request);\n                    api_1.context.bind(api_1.context.active(), response);\n                    return original.apply(this, [event, ...args]);\n                });\n            }\n            const headers = request.headers;\n            const spanAttributes = (0, utils_1.getIncomingRequestAttributes)(request, {\n                component: component,\n                serverName: instrumentation.getConfig().serverName,\n                hookAttributes: instrumentation._callStartSpanHook(request, instrumentation.getConfig().startIncomingSpanHook),\n                semconvStability: instrumentation._semconvStability,\n                enableSyntheticSourceDetection: instrumentation.getConfig().enableSyntheticSourceDetection || false,\n            }, instrumentation._diag);\n            const spanOptions = {\n                kind: api_1.SpanKind.SERVER,\n                attributes: spanAttributes,\n            };\n            const startTime = (0, core_1.hrTime)();\n            const oldMetricAttributes = (0, utils_1.getIncomingRequestMetricAttributes)(spanAttributes);\n            // request method and url.scheme are both required span attributes\n            const stableMetricAttributes = {\n                [semantic_conventions_1.ATTR_HTTP_REQUEST_METHOD]: spanAttributes[semantic_conventions_1.ATTR_HTTP_REQUEST_METHOD],\n                [semantic_conventions_1.ATTR_URL_SCHEME]: spanAttributes[semantic_conventions_1.ATTR_URL_SCHEME],\n            };\n            // recommended if and only if one was sent, same as span recommendation\n            if (spanAttributes[semantic_conventions_1.ATTR_NETWORK_PROTOCOL_VERSION]) {\n                stableMetricAttributes[semantic_conventions_1.ATTR_NETWORK_PROTOCOL_VERSION] =\n                    spanAttributes[semantic_conventions_1.ATTR_NETWORK_PROTOCOL_VERSION];\n            }\n            const ctx = api_1.propagation.extract(api_1.ROOT_CONTEXT, headers);\n            const span = instrumentation._startHttpSpan(method, spanOptions, ctx);\n            const rpcMetadata = {\n                type: core_1.RPCType.HTTP,\n                span,\n            };\n            return api_1.context.with((0, core_1.setRPCMetadata)(api_1.trace.setSpan(ctx, span), rpcMetadata), () => {\n                api_1.context.bind(api_1.context.active(), request);\n                api_1.context.bind(api_1.context.active(), response);\n                if (instrumentation.getConfig().requestHook) {\n                    instrumentation._callRequestHook(span, request);\n                }\n                if (instrumentation.getConfig().responseHook) {\n                    instrumentation._callResponseHook(span, response);\n                }\n                instrumentation._headerCapture.server.captureRequestHeaders(span, header => request.headers[header]);\n                // After 'error', no further events other than 'close' should be emitted.\n                let hasError = false;\n                response.on('close', () => {\n                    if (hasError) {\n                        return;\n                    }\n                    instrumentation._onServerResponseFinish(request, response, span, oldMetricAttributes, stableMetricAttributes, startTime);\n                });\n                response.on(events_1.errorMonitor, (err) => {\n                    hasError = true;\n                    instrumentation._onServerResponseError(span, oldMetricAttributes, stableMetricAttributes, startTime, err);\n                });\n                return (0, instrumentation_1.safeExecuteInTheMiddle)(() => original.apply(this, [event, ...args]), error => {\n                    if (error) {\n                        (0, utils_1.setSpanWithError)(span, error, instrumentation._semconvStability);\n                        instrumentation._closeHttpSpan(span, api_1.SpanKind.SERVER, startTime, oldMetricAttributes, stableMetricAttributes);\n                        throw error;\n                    }\n                });\n            });\n        };\n    }\n    _outgoingRequestFunction(component, original) {\n        const instrumentation = this;\n        return function outgoingRequest(options, ...args) {\n            if (!(0, utils_1.isValidOptionsType)(options)) {\n                return original.apply(this, [options, ...args]);\n            }\n            const extraOptions = typeof args[0] === 'object' &&\n                (typeof options === 'string' || options instanceof url.URL)\n                ? args.shift()\n                : undefined;\n            const { method, invalidUrl, optionsParsed } = (0, utils_1.getRequestInfo)(instrumentation._diag, options, extraOptions);\n            if ((0, instrumentation_1.safeExecuteInTheMiddle)(() => instrumentation\n                .getConfig()\n                .ignoreOutgoingRequestHook?.(optionsParsed), (e) => {\n                if (e != null) {\n                    instrumentation._diag.error('caught ignoreOutgoingRequestHook error: ', e);\n                }\n            }, true)) {\n                return original.apply(this, [optionsParsed, ...args]);\n            }\n            const { hostname, port } = (0, utils_1.extractHostnameAndPort)(optionsParsed);\n            const attributes = (0, utils_1.getOutgoingRequestAttributes)(optionsParsed, {\n                component,\n                port,\n                hostname,\n                hookAttributes: instrumentation._callStartSpanHook(optionsParsed, instrumentation.getConfig().startOutgoingSpanHook),\n            }, instrumentation._semconvStability, instrumentation.getConfig().enableSyntheticSourceDetection || false);\n            const startTime = (0, core_1.hrTime)();\n            const oldMetricAttributes = (0, utils_1.getOutgoingRequestMetricAttributes)(attributes);\n            // request method, server address, and server port are both required span attributes\n            const stableMetricAttributes = {\n                [semantic_conventions_1.ATTR_HTTP_REQUEST_METHOD]: attributes[semantic_conventions_1.ATTR_HTTP_REQUEST_METHOD],\n                [semantic_conventions_1.ATTR_SERVER_ADDRESS]: attributes[semantic_conventions_1.ATTR_SERVER_ADDRESS],\n                [semantic_conventions_1.ATTR_SERVER_PORT]: attributes[semantic_conventions_1.ATTR_SERVER_PORT],\n            };\n            // required if and only if one was sent, same as span requirement\n            if (attributes[semantic_conventions_1.ATTR_HTTP_RESPONSE_STATUS_CODE]) {\n                stableMetricAttributes[semantic_conventions_1.ATTR_HTTP_RESPONSE_STATUS_CODE] =\n                    attributes[semantic_conventions_1.ATTR_HTTP_RESPONSE_STATUS_CODE];\n            }\n            // recommended if and only if one was sent, same as span recommendation\n            if (attributes[semantic_conventions_1.ATTR_NETWORK_PROTOCOL_VERSION]) {\n                stableMetricAttributes[semantic_conventions_1.ATTR_NETWORK_PROTOCOL_VERSION] =\n                    attributes[semantic_conventions_1.ATTR_NETWORK_PROTOCOL_VERSION];\n            }\n            const spanOptions = {\n                kind: api_1.SpanKind.CLIENT,\n                attributes,\n            };\n            const span = instrumentation._startHttpSpan(method, spanOptions);\n            const parentContext = api_1.context.active();\n            const requestContext = api_1.trace.setSpan(parentContext, span);\n            if (!optionsParsed.headers) {\n                optionsParsed.headers = {};\n            }\n            else {\n                // Make a copy of the headers object to avoid mutating an object the\n                // caller might have a reference to.\n                optionsParsed.headers = Object.assign({}, optionsParsed.headers);\n            }\n            api_1.propagation.inject(requestContext, optionsParsed.headers);\n            return api_1.context.with(requestContext, () => {\n                /*\n                 * The response callback is registered before ClientRequest is bound,\n                 * thus it is needed to bind it before the function call.\n                 */\n                const cb = args[args.length - 1];\n                if (typeof cb === 'function') {\n                    args[args.length - 1] = api_1.context.bind(parentContext, cb);\n                }\n                const request = (0, instrumentation_1.safeExecuteInTheMiddle)(() => {\n                    if (invalidUrl) {\n                        // we know that the url is invalid, there's no point in injecting context as it will fail validation.\n                        // Passing in what the user provided will give the user an error that matches what they'd see without\n                        // the instrumentation.\n                        return original.apply(this, [options, ...args]);\n                    }\n                    else {\n                        return original.apply(this, [optionsParsed, ...args]);\n                    }\n                }, error => {\n                    if (error) {\n                        (0, utils_1.setSpanWithError)(span, error, instrumentation._semconvStability);\n                        instrumentation._closeHttpSpan(span, api_1.SpanKind.CLIENT, startTime, oldMetricAttributes, stableMetricAttributes);\n                        throw error;\n                    }\n                });\n                instrumentation._diag.debug(`${component} instrumentation outgoingRequest`);\n                api_1.context.bind(parentContext, request);\n                return instrumentation._traceClientRequest(request, span, startTime, oldMetricAttributes, stableMetricAttributes);\n            });\n        };\n    }\n    _onServerResponseFinish(request, response, span, oldMetricAttributes, stableMetricAttributes, startTime) {\n        const attributes = (0, utils_1.getIncomingRequestAttributesOnResponse)(request, response, this._semconvStability);\n        oldMetricAttributes = Object.assign(oldMetricAttributes, (0, utils_1.getIncomingRequestMetricAttributesOnResponse)(attributes));\n        stableMetricAttributes = Object.assign(stableMetricAttributes, (0, utils_1.getIncomingStableRequestMetricAttributesOnResponse)(attributes));\n        this._headerCapture.server.captureResponseHeaders(span, header => response.getHeader(header));\n        span.setAttributes(attributes).setStatus({\n            code: (0, utils_1.parseResponseStatus)(api_1.SpanKind.SERVER, response.statusCode),\n        });\n        const route = attributes[semantic_conventions_1.ATTR_HTTP_ROUTE];\n        if (route) {\n            span.updateName(`${request.method || 'GET'} ${route}`);\n        }\n        if (this.getConfig().applyCustomAttributesOnSpan) {\n            (0, instrumentation_1.safeExecuteInTheMiddle)(() => this.getConfig().applyCustomAttributesOnSpan(span, request, response), () => { }, true);\n        }\n        this._closeHttpSpan(span, api_1.SpanKind.SERVER, startTime, oldMetricAttributes, stableMetricAttributes);\n    }\n    _onServerResponseError(span, oldMetricAttributes, stableMetricAttributes, startTime, error) {\n        (0, utils_1.setSpanWithError)(span, error, this._semconvStability);\n        // TODO get error attributes for metrics\n        this._closeHttpSpan(span, api_1.SpanKind.SERVER, startTime, oldMetricAttributes, stableMetricAttributes);\n    }\n    _startHttpSpan(name, options, ctx = api_1.context.active()) {\n        /*\n         * If a parent is required but not present, we use a `NoopSpan` to still\n         * propagate context without recording it.\n         */\n        const requireParent = options.kind === api_1.SpanKind.CLIENT\n            ? this.getConfig().requireParentforOutgoingSpans\n            : this.getConfig().requireParentforIncomingSpans;\n        let span;\n        const currentSpan = api_1.trace.getSpan(ctx);\n        if (requireParent === true && currentSpan === undefined) {\n            span = api_1.trace.wrapSpanContext(api_1.INVALID_SPAN_CONTEXT);\n        }\n        else if (requireParent === true && currentSpan?.spanContext().isRemote) {\n            span = currentSpan;\n        }\n        else {\n            span = this.tracer.startSpan(name, options, ctx);\n        }\n        this._spanNotEnded.add(span);\n        return span;\n    }\n    _closeHttpSpan(span, spanKind, startTime, oldMetricAttributes, stableMetricAttributes) {\n        if (!this._spanNotEnded.has(span)) {\n            return;\n        }\n        span.end();\n        this._spanNotEnded.delete(span);\n        // Record metrics\n        const duration = (0, core_1.hrTimeToMilliseconds)((0, core_1.hrTimeDuration)(startTime, (0, core_1.hrTime)()));\n        if (spanKind === api_1.SpanKind.SERVER) {\n            this._recordServerDuration(duration, oldMetricAttributes, stableMetricAttributes);\n        }\n        else if (spanKind === api_1.SpanKind.CLIENT) {\n            this._recordClientDuration(duration, oldMetricAttributes, stableMetricAttributes);\n        }\n    }\n    _callResponseHook(span, response) {\n        (0, instrumentation_1.safeExecuteInTheMiddle)(() => this.getConfig().responseHook(span, response), () => { }, true);\n    }\n    _callRequestHook(span, request) {\n        (0, instrumentation_1.safeExecuteInTheMiddle)(() => this.getConfig().requestHook(span, request), () => { }, true);\n    }\n    _callStartSpanHook(request, hookFunc) {\n        if (typeof hookFunc === 'function') {\n            return (0, instrumentation_1.safeExecuteInTheMiddle)(() => hookFunc(request), () => { }, true);\n        }\n    }\n    _createHeaderCapture() {\n        const config = this.getConfig();\n        return {\n            client: {\n                captureRequestHeaders: (0, utils_1.headerCapture)('request', config.headersToSpanAttributes?.client?.requestHeaders ?? []),\n                captureResponseHeaders: (0, utils_1.headerCapture)('response', config.headersToSpanAttributes?.client?.responseHeaders ?? []),\n            },\n            server: {\n                captureRequestHeaders: (0, utils_1.headerCapture)('request', config.headersToSpanAttributes?.server?.requestHeaders ?? []),\n                captureResponseHeaders: (0, utils_1.headerCapture)('response', config.headersToSpanAttributes?.server?.responseHeaders ?? []),\n            },\n        };\n    }\n}\nexports.HttpInstrumentation = HttpInstrumentation;\n//# sourceMappingURL=http.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-http/build/src/http.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-http/build/src/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-http/build/src/index.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HttpInstrumentation = void 0;\nvar http_1 = __webpack_require__(/*! ./http */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-http/build/src/http.js\");\nObject.defineProperty(exports, \"HttpInstrumentation\", ({ enumerable: true, get: function () { return http_1.HttpInstrumentation; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1odHRwL2J1aWxkL3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwyQkFBMkI7QUFDM0IsYUFBYSxtQkFBTyxDQUFDLGlHQUFRO0FBQzdCLHVEQUFzRCxFQUFFLHFDQUFxQyxzQ0FBc0MsRUFBQztBQUNwSSIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24taHR0cC9idWlsZC9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5IdHRwSW5zdHJ1bWVudGF0aW9uID0gdm9pZCAwO1xudmFyIGh0dHBfMSA9IHJlcXVpcmUoXCIuL2h0dHBcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJIdHRwSW5zdHJ1bWVudGF0aW9uXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBodHRwXzEuSHR0cEluc3RydW1lbnRhdGlvbjsgfSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-http/build/src/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-http/build/src/internal-types.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-http/build/src/internal-types.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SYNTHETIC_BOT_NAMES = exports.SYNTHETIC_TEST_NAMES = void 0;\n/**\n * Names of possible synthetic test sources.\n */\nexports.SYNTHETIC_TEST_NAMES = ['alwayson'];\n/**\n * Names of possible synthetic bot sources.\n */\nexports.SYNTHETIC_BOT_NAMES = ['googlebot', 'bingbot'];\n//# sourceMappingURL=internal-types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1odHRwL2J1aWxkL3NyYy9pbnRlcm5hbC10eXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwyQkFBMkIsR0FBRyw0QkFBNEI7QUFDMUQ7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQiIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24taHR0cC9idWlsZC9zcmMvaW50ZXJuYWwtdHlwZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TWU5USEVUSUNfQk9UX05BTUVTID0gZXhwb3J0cy5TWU5USEVUSUNfVEVTVF9OQU1FUyA9IHZvaWQgMDtcbi8qKlxuICogTmFtZXMgb2YgcG9zc2libGUgc3ludGhldGljIHRlc3Qgc291cmNlcy5cbiAqL1xuZXhwb3J0cy5TWU5USEVUSUNfVEVTVF9OQU1FUyA9IFsnYWx3YXlzb24nXTtcbi8qKlxuICogTmFtZXMgb2YgcG9zc2libGUgc3ludGhldGljIGJvdCBzb3VyY2VzLlxuICovXG5leHBvcnRzLlNZTlRIRVRJQ19CT1RfTkFNRVMgPSBbJ2dvb2dsZWJvdCcsICdiaW5nYm90J107XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnRlcm5hbC10eXBlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-http/build/src/internal-types.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-http/build/src/semconv.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-http/build/src/semconv.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HTTP_FLAVOR_VALUE_HTTP_1_1 = exports.NET_TRANSPORT_VALUE_IP_UDP = exports.NET_TRANSPORT_VALUE_IP_TCP = exports.ATTR_NET_TRANSPORT = exports.ATTR_NET_PEER_PORT = exports.ATTR_NET_PEER_NAME = exports.ATTR_NET_PEER_IP = exports.ATTR_NET_HOST_PORT = exports.ATTR_NET_HOST_NAME = exports.ATTR_NET_HOST_IP = exports.ATTR_HTTP_USER_AGENT = exports.ATTR_HTTP_URL = exports.ATTR_HTTP_TARGET = exports.ATTR_HTTP_STATUS_CODE = exports.ATTR_HTTP_SERVER_NAME = exports.ATTR_HTTP_SCHEME = exports.ATTR_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED = exports.ATTR_HTTP_RESPONSE_CONTENT_LENGTH = exports.ATTR_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED = exports.ATTR_HTTP_REQUEST_CONTENT_LENGTH = exports.ATTR_HTTP_METHOD = exports.ATTR_HTTP_HOST = exports.ATTR_HTTP_FLAVOR = exports.ATTR_HTTP_CLIENT_IP = exports.USER_AGENT_SYNTHETIC_TYPE_VALUE_TEST = exports.USER_AGENT_SYNTHETIC_TYPE_VALUE_BOT = exports.ATTR_USER_AGENT_SYNTHETIC_TYPE = void 0;\n/*\n * This file contains a copy of unstable semantic convention definitions\n * used by this package.\n * @see https://github.com/open-telemetry/opentelemetry-js/tree/main/semantic-conventions#unstable-semconv\n */\n/**\n * Specifies the category of synthetic traffic, such as tests or bots.\n *\n * @note This attribute **MAY** be derived from the contents of the `user_agent.original` attribute. Components that populate the attribute are responsible for determining what they consider to be synthetic bot or test traffic. This attribute can either be set for self-identification purposes, or on telemetry detected to be generated as a result of a synthetic request. This attribute is useful for distinguishing between genuine client traffic and synthetic traffic generated by bots or tests.\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexports.ATTR_USER_AGENT_SYNTHETIC_TYPE = 'user_agent.synthetic.type';\n/**\n * Enum value \"bot\" for attribute {@link ATTR_USER_AGENT_SYNTHETIC_TYPE}.\n */\nexports.USER_AGENT_SYNTHETIC_TYPE_VALUE_BOT = 'bot';\n/**\n * Enum value \"test\" for attribute {@link ATTR_USER_AGENT_SYNTHETIC_TYPE}.\n */\nexports.USER_AGENT_SYNTHETIC_TYPE_VALUE_TEST = 'test';\n/**\n * Deprecated, use `client.address` instead.\n *\n * @example \"83.164.160.102\"\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `client.address`.\n */\nexports.ATTR_HTTP_CLIENT_IP = 'http.client_ip';\n/**\n * Deprecated, use `network.protocol.name` instead.\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `network.protocol.name`.\n */\nexports.ATTR_HTTP_FLAVOR = 'http.flavor';\n/**\n * Deprecated, use one of `server.address`, `client.address` or `http.request.header.host` instead, depending on the usage.\n *\n * @example www.example.org\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by one of `server.address`, `client.address` or `http.request.header.host`, depending on the usage.\n */\nexports.ATTR_HTTP_HOST = 'http.host';\n/**\n * Deprecated, use `http.request.method` instead.\n *\n * @example GET\n * @example POST\n * @example HEAD\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `http.request.method`.\n */\nexports.ATTR_HTTP_METHOD = 'http.method';\n/**\n * Deprecated, use `http.request.header.<key>` instead.\n *\n * @example 3495\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `http.request.header.<key>`.\n */\nexports.ATTR_HTTP_REQUEST_CONTENT_LENGTH = 'http.request_content_length';\n/**\n * Deprecated, use `http.request.body.size` instead.\n *\n * @example 5493\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `http.request.body.size`.\n */\nexports.ATTR_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED = 'http.request_content_length_uncompressed';\n/**\n * Deprecated, use `http.response.header.<key>` instead.\n *\n * @example 3495\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `http.response.header.<key>`.\n */\nexports.ATTR_HTTP_RESPONSE_CONTENT_LENGTH = 'http.response_content_length';\n/**\n * Deprecated, use `http.response.body.size` instead.\n *\n * @example 5493\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replace by `http.response.body.size`.\n */\nexports.ATTR_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED = 'http.response_content_length_uncompressed';\n/**\n * Deprecated, use `url.scheme` instead.\n *\n * @example http\n * @example https\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `url.scheme` instead.\n */\nexports.ATTR_HTTP_SCHEME = 'http.scheme';\n/**\n * Deprecated, use `server.address` instead.\n *\n * @example example.com\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `server.address`.\n */\nexports.ATTR_HTTP_SERVER_NAME = 'http.server_name';\n/**\n * Deprecated, use `http.response.status_code` instead.\n *\n * @example 200\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `http.response.status_code`.\n */\nexports.ATTR_HTTP_STATUS_CODE = 'http.status_code';\n/**\n * Deprecated, use `url.path` and `url.query` instead.\n *\n * @example /search?q=OpenTelemetry#SemConv\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Split to `url.path` and `url.query.\n */\nexports.ATTR_HTTP_TARGET = 'http.target';\n/**\n * Deprecated, use `url.full` instead.\n *\n * @example https://www.foo.bar/search?q=OpenTelemetry#SemConv\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `url.full`.\n */\nexports.ATTR_HTTP_URL = 'http.url';\n/**\n * Deprecated, use `user_agent.original` instead.\n *\n * @example CERN-LineMode/2.15 libwww/2.17b3\n * @example Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `user_agent.original`.\n */\nexports.ATTR_HTTP_USER_AGENT = 'http.user_agent';\n/**\n * Deprecated, use `network.local.address`.\n *\n * @example \"192.168.0.1\"\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `network.local.address`.\n */\nexports.ATTR_NET_HOST_IP = 'net.host.ip';\n/**\n * Deprecated, use `server.address`.\n *\n * @example example.com\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `server.address`.\n */\nexports.ATTR_NET_HOST_NAME = 'net.host.name';\n/**\n * Deprecated, use `server.port`.\n *\n * @example 8080\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `server.port`.\n */\nexports.ATTR_NET_HOST_PORT = 'net.host.port';\n/**\n * Deprecated, use `network.peer.address`.\n *\n * @example \"127.0.0.1\"\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `network.peer.address`.\n */\nexports.ATTR_NET_PEER_IP = 'net.peer.ip';\n/**\n * Deprecated, use `server.address` on client spans and `client.address` on server spans.\n *\n * @example example.com\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `server.address` on client spans and `client.address` on server spans.\n */\nexports.ATTR_NET_PEER_NAME = 'net.peer.name';\n/**\n * Deprecated, use `server.port` on client spans and `client.port` on server spans.\n *\n * @example 8080\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `server.port` on client spans and `client.port` on server spans.\n */\nexports.ATTR_NET_PEER_PORT = 'net.peer.port';\n/**\n * Deprecated, use `network.transport`.\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `network.transport`.\n */\nexports.ATTR_NET_TRANSPORT = 'net.transport';\n/**\n * Enum value \"ip_tcp\" for attribute {@link ATTR_NET_TRANSPORT}.\n */\nexports.NET_TRANSPORT_VALUE_IP_TCP = 'ip_tcp';\n/**\n * Enum value \"ip_udp\" for attribute {@link ATTR_NET_TRANSPORT}.\n */\nexports.NET_TRANSPORT_VALUE_IP_UDP = 'ip_udp';\n/**\n * Enum value \"1.1\" for attribute {@link ATTR_HTTP_FLAVOR}.\n */\nexports.HTTP_FLAVOR_VALUE_HTTP_1_1 = '1.1';\n//# sourceMappingURL=semconv.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-http/build/src/semconv.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-http/build/src/utils.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-http/build/src/utils.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.headerCapture = exports.getIncomingStableRequestMetricAttributesOnResponse = exports.getIncomingRequestMetricAttributesOnResponse = exports.getIncomingRequestAttributesOnResponse = exports.getIncomingRequestMetricAttributes = exports.getIncomingRequestAttributes = exports.getRemoteClientAddress = exports.getOutgoingStableRequestMetricAttributesOnResponse = exports.getOutgoingRequestMetricAttributesOnResponse = exports.getOutgoingRequestAttributesOnResponse = exports.setAttributesFromHttpKind = exports.getOutgoingRequestMetricAttributes = exports.getOutgoingRequestAttributes = exports.extractHostnameAndPort = exports.isValidOptionsType = exports.getRequestInfo = exports.isCompressed = exports.setResponseContentLengthAttribute = exports.setRequestContentLengthAttribute = exports.setSpanWithError = exports.satisfiesPattern = exports.parseResponseStatus = exports.getAbsoluteUrl = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst semconv_1 = __webpack_require__(/*! ./semconv */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-http/build/src/semconv.js\");\nconst core_1 = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/index.js\");\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst url = __webpack_require__(/*! url */ \"url\");\nconst AttributeNames_1 = __webpack_require__(/*! ./enums/AttributeNames */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-http/build/src/enums/AttributeNames.js\");\nconst internal_types_1 = __webpack_require__(/*! ./internal-types */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-http/build/src/internal-types.js\");\n// eslint-disable-next-line @typescript-eslint/no-require-imports\nconst forwardedParse = __webpack_require__(/*! forwarded-parse */ \"(instrument)/./node_modules/forwarded-parse/index.js\");\n/**\n * Get an absolute url\n */\nconst getAbsoluteUrl = (requestUrl, headers, fallbackProtocol = 'http:') => {\n    const reqUrlObject = requestUrl || {};\n    const protocol = reqUrlObject.protocol || fallbackProtocol;\n    const port = (reqUrlObject.port || '').toString();\n    const path = reqUrlObject.path || '/';\n    let host = reqUrlObject.host || reqUrlObject.hostname || headers.host || 'localhost';\n    // if there is no port in host and there is a port\n    // it should be displayed if it's not 80 and 443 (default ports)\n    if (host.indexOf(':') === -1 &&\n        port &&\n        port !== '80' &&\n        port !== '443') {\n        host += `:${port}`;\n    }\n    return `${protocol}//${host}${path}`;\n};\nexports.getAbsoluteUrl = getAbsoluteUrl;\n/**\n * Parse status code from HTTP response. [More details](https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/data-http.md#status)\n */\nconst parseResponseStatus = (kind, statusCode) => {\n    const upperBound = kind === api_1.SpanKind.CLIENT ? 400 : 500;\n    // 1xx, 2xx, 3xx are OK on client and server\n    // 4xx is OK on server\n    if (statusCode && statusCode >= 100 && statusCode < upperBound) {\n        return api_1.SpanStatusCode.UNSET;\n    }\n    // All other codes are error\n    return api_1.SpanStatusCode.ERROR;\n};\nexports.parseResponseStatus = parseResponseStatus;\n/**\n * Check whether the given obj match pattern\n * @param constant e.g URL of request\n * @param pattern Match pattern\n */\nconst satisfiesPattern = (constant, pattern) => {\n    if (typeof pattern === 'string') {\n        return pattern === constant;\n    }\n    else if (pattern instanceof RegExp) {\n        return pattern.test(constant);\n    }\n    else if (typeof pattern === 'function') {\n        return pattern(constant);\n    }\n    else {\n        throw new TypeError('Pattern is in unsupported datatype');\n    }\n};\nexports.satisfiesPattern = satisfiesPattern;\n/**\n * Sets the span with the error passed in params\n * @param {Span} span the span that need to be set\n * @param {Error} error error that will be set to span\n * @param {SemconvStability} semconvStability determines which semconv version to use\n */\nconst setSpanWithError = (span, error, semconvStability) => {\n    const message = error.message;\n    if (semconvStability & instrumentation_1.SemconvStability.OLD) {\n        span.setAttribute(AttributeNames_1.AttributeNames.HTTP_ERROR_NAME, error.name);\n        span.setAttribute(AttributeNames_1.AttributeNames.HTTP_ERROR_MESSAGE, message);\n    }\n    if (semconvStability & instrumentation_1.SemconvStability.STABLE) {\n        span.setAttribute(semantic_conventions_1.ATTR_ERROR_TYPE, error.name);\n    }\n    span.setStatus({ code: api_1.SpanStatusCode.ERROR, message });\n    span.recordException(error);\n};\nexports.setSpanWithError = setSpanWithError;\n/**\n * Adds attributes for request content-length and content-encoding HTTP headers\n * @param { IncomingMessage } Request object whose headers will be analyzed\n * @param { Attributes } Attributes object to be modified\n */\nconst setRequestContentLengthAttribute = (request, attributes) => {\n    const length = getContentLength(request.headers);\n    if (length === null)\n        return;\n    if ((0, exports.isCompressed)(request.headers)) {\n        attributes[semconv_1.ATTR_HTTP_REQUEST_CONTENT_LENGTH] = length;\n    }\n    else {\n        attributes[semconv_1.ATTR_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED] = length;\n    }\n};\nexports.setRequestContentLengthAttribute = setRequestContentLengthAttribute;\n/**\n * Adds attributes for response content-length and content-encoding HTTP headers\n * @param { IncomingMessage } Response object whose headers will be analyzed\n * @param { Attributes } Attributes object to be modified\n *\n * @deprecated this is for an older version of semconv. It is retained for compatibility using OTEL_SEMCONV_STABILITY_OPT_IN\n */\nconst setResponseContentLengthAttribute = (response, attributes) => {\n    const length = getContentLength(response.headers);\n    if (length === null)\n        return;\n    if ((0, exports.isCompressed)(response.headers)) {\n        attributes[semconv_1.ATTR_HTTP_RESPONSE_CONTENT_LENGTH] = length;\n    }\n    else {\n        attributes[semconv_1.ATTR_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED] = length;\n    }\n};\nexports.setResponseContentLengthAttribute = setResponseContentLengthAttribute;\nfunction getContentLength(headers) {\n    const contentLengthHeader = headers['content-length'];\n    if (contentLengthHeader === undefined)\n        return null;\n    const contentLength = parseInt(contentLengthHeader, 10);\n    if (isNaN(contentLength))\n        return null;\n    return contentLength;\n}\nconst isCompressed = (headers) => {\n    const encoding = headers['content-encoding'];\n    return !!encoding && encoding !== 'identity';\n};\nexports.isCompressed = isCompressed;\n/**\n * Mimics Node.js conversion of URL strings to RequestOptions expected by\n * `http.request` and `https.request` APIs.\n *\n * See https://github.com/nodejs/node/blob/2505e217bba05fc581b572c685c5cf280a16c5a3/lib/internal/url.js#L1415-L1437\n *\n * @param stringUrl\n * @throws TypeError if the URL is not valid.\n */\nfunction stringUrlToHttpOptions(stringUrl) {\n    // This is heavily inspired by Node.js handling of the same situation, trying\n    // to follow it as closely as possible while keeping in mind that we only\n    // deal with string URLs, not URL objects.\n    const { hostname, pathname, port, username, password, search, protocol, hash, href, origin, host, } = new URL(stringUrl);\n    const options = {\n        protocol: protocol,\n        hostname: hostname && hostname[0] === '[' ? hostname.slice(1, -1) : hostname,\n        hash: hash,\n        search: search,\n        pathname: pathname,\n        path: `${pathname || ''}${search || ''}`,\n        href: href,\n        origin: origin,\n        host: host,\n    };\n    if (port !== '') {\n        options.port = Number(port);\n    }\n    if (username || password) {\n        options.auth = `${decodeURIComponent(username)}:${decodeURIComponent(password)}`;\n    }\n    return options;\n}\n/**\n * Makes sure options is an url object\n * return an object with default value and parsed options\n * @param logger component logger\n * @param options original options for the request\n * @param [extraOptions] additional options for the request\n */\nconst getRequestInfo = (logger, options, extraOptions) => {\n    let pathname;\n    let origin;\n    let optionsParsed;\n    let invalidUrl = false;\n    if (typeof options === 'string') {\n        try {\n            const convertedOptions = stringUrlToHttpOptions(options);\n            optionsParsed = convertedOptions;\n            pathname = convertedOptions.pathname || '/';\n        }\n        catch (e) {\n            invalidUrl = true;\n            logger.verbose('Unable to parse URL provided to HTTP request, using fallback to determine path. Original error:', e);\n            // for backward compatibility with how url.parse() behaved.\n            optionsParsed = {\n                path: options,\n            };\n            pathname = optionsParsed.path || '/';\n        }\n        origin = `${optionsParsed.protocol || 'http:'}//${optionsParsed.host}`;\n        if (extraOptions !== undefined) {\n            Object.assign(optionsParsed, extraOptions);\n        }\n    }\n    else if (options instanceof url.URL) {\n        optionsParsed = {\n            protocol: options.protocol,\n            hostname: typeof options.hostname === 'string' && options.hostname.startsWith('[')\n                ? options.hostname.slice(1, -1)\n                : options.hostname,\n            path: `${options.pathname || ''}${options.search || ''}`,\n        };\n        if (options.port !== '') {\n            optionsParsed.port = Number(options.port);\n        }\n        if (options.username || options.password) {\n            optionsParsed.auth = `${options.username}:${options.password}`;\n        }\n        pathname = options.pathname;\n        origin = options.origin;\n        if (extraOptions !== undefined) {\n            Object.assign(optionsParsed, extraOptions);\n        }\n    }\n    else {\n        optionsParsed = Object.assign({ protocol: options.host ? 'http:' : undefined }, options);\n        const hostname = optionsParsed.host ||\n            (optionsParsed.port != null\n                ? `${optionsParsed.hostname}${optionsParsed.port}`\n                : optionsParsed.hostname);\n        origin = `${optionsParsed.protocol || 'http:'}//${hostname}`;\n        pathname = options.pathname;\n        if (!pathname && optionsParsed.path) {\n            try {\n                const parsedUrl = new URL(optionsParsed.path, origin);\n                pathname = parsedUrl.pathname || '/';\n            }\n            catch {\n                pathname = '/';\n            }\n        }\n    }\n    // some packages return method in lowercase..\n    // ensure upperCase for consistency\n    const method = optionsParsed.method\n        ? optionsParsed.method.toUpperCase()\n        : 'GET';\n    return { origin, pathname, method, optionsParsed, invalidUrl };\n};\nexports.getRequestInfo = getRequestInfo;\n/**\n * Makes sure options is of type string or object\n * @param options for the request\n */\nconst isValidOptionsType = (options) => {\n    if (!options) {\n        return false;\n    }\n    const type = typeof options;\n    return type === 'string' || (type === 'object' && !Array.isArray(options));\n};\nexports.isValidOptionsType = isValidOptionsType;\nconst extractHostnameAndPort = (requestOptions) => {\n    if (requestOptions.hostname && requestOptions.port) {\n        return { hostname: requestOptions.hostname, port: requestOptions.port };\n    }\n    const matches = requestOptions.host?.match(/^([^:/ ]+)(:\\d{1,5})?/) || null;\n    const hostname = requestOptions.hostname || (matches === null ? 'localhost' : matches[1]);\n    let port = requestOptions.port;\n    if (!port) {\n        if (matches && matches[2]) {\n            // remove the leading \":\". The extracted port would be something like \":8080\"\n            port = matches[2].substring(1);\n        }\n        else {\n            port = requestOptions.protocol === 'https:' ? '443' : '80';\n        }\n    }\n    return { hostname, port };\n};\nexports.extractHostnameAndPort = extractHostnameAndPort;\n/**\n * Returns outgoing request attributes scoped to the options passed to the request\n * @param {ParsedRequestOptions} requestOptions the same options used to make the request\n * @param {{ component: string, hostname: string, hookAttributes?: Attributes }} options used to pass data needed to create attributes\n * @param {SemconvStability} semconvStability determines which semconv version to use\n */\nconst getOutgoingRequestAttributes = (requestOptions, options, semconvStability, enableSyntheticSourceDetection) => {\n    const hostname = options.hostname;\n    const port = options.port;\n    const method = requestOptions.method ?? 'GET';\n    const normalizedMethod = normalizeMethod(method);\n    const headers = requestOptions.headers || {};\n    const userAgent = headers['user-agent'];\n    const urlFull = (0, exports.getAbsoluteUrl)(requestOptions, headers, `${options.component}:`);\n    const oldAttributes = {\n        [semconv_1.ATTR_HTTP_URL]: urlFull,\n        [semconv_1.ATTR_HTTP_METHOD]: method,\n        [semconv_1.ATTR_HTTP_TARGET]: requestOptions.path || '/',\n        [semconv_1.ATTR_NET_PEER_NAME]: hostname,\n        [semconv_1.ATTR_HTTP_HOST]: headers.host ?? `${hostname}:${port}`,\n    };\n    const newAttributes = {\n        // Required attributes\n        [semantic_conventions_1.ATTR_HTTP_REQUEST_METHOD]: normalizedMethod,\n        [semantic_conventions_1.ATTR_SERVER_ADDRESS]: hostname,\n        [semantic_conventions_1.ATTR_SERVER_PORT]: Number(port),\n        [semantic_conventions_1.ATTR_URL_FULL]: urlFull,\n        [semantic_conventions_1.ATTR_USER_AGENT_ORIGINAL]: userAgent,\n        // leaving out protocol version, it is not yet negotiated\n        // leaving out protocol name, it is only required when protocol version is set\n        // retries and redirects not supported\n        // Opt-in attributes left off for now\n    };\n    // conditionally required if request method required case normalization\n    if (method !== normalizedMethod) {\n        newAttributes[semantic_conventions_1.ATTR_HTTP_REQUEST_METHOD_ORIGINAL] = method;\n    }\n    if (enableSyntheticSourceDetection && userAgent) {\n        newAttributes[semconv_1.ATTR_USER_AGENT_SYNTHETIC_TYPE] = getSyntheticType(userAgent);\n    }\n    if (userAgent !== undefined) {\n        oldAttributes[semconv_1.ATTR_HTTP_USER_AGENT] = userAgent;\n    }\n    switch (semconvStability) {\n        case instrumentation_1.SemconvStability.STABLE:\n            return Object.assign(newAttributes, options.hookAttributes);\n        case instrumentation_1.SemconvStability.OLD:\n            return Object.assign(oldAttributes, options.hookAttributes);\n    }\n    return Object.assign(oldAttributes, newAttributes, options.hookAttributes);\n};\nexports.getOutgoingRequestAttributes = getOutgoingRequestAttributes;\n/**\n * Returns outgoing request Metric attributes scoped to the request data\n * @param {Attributes} spanAttributes the span attributes\n */\nconst getOutgoingRequestMetricAttributes = (spanAttributes) => {\n    const metricAttributes = {};\n    metricAttributes[semconv_1.ATTR_HTTP_METHOD] = spanAttributes[semconv_1.ATTR_HTTP_METHOD];\n    metricAttributes[semconv_1.ATTR_NET_PEER_NAME] = spanAttributes[semconv_1.ATTR_NET_PEER_NAME];\n    //TODO: http.url attribute, it should substitute any parameters to avoid high cardinality.\n    return metricAttributes;\n};\nexports.getOutgoingRequestMetricAttributes = getOutgoingRequestMetricAttributes;\n/**\n * Returns attributes related to the kind of HTTP protocol used\n * @param {string} [kind] Kind of HTTP protocol used: \"1.0\", \"1.1\", \"2\", \"SPDY\" or \"QUIC\".\n */\nconst setAttributesFromHttpKind = (kind, attributes) => {\n    if (kind) {\n        attributes[semconv_1.ATTR_HTTP_FLAVOR] = kind;\n        if (kind.toUpperCase() !== 'QUIC') {\n            attributes[semconv_1.ATTR_NET_TRANSPORT] = semconv_1.NET_TRANSPORT_VALUE_IP_TCP;\n        }\n        else {\n            attributes[semconv_1.ATTR_NET_TRANSPORT] = semconv_1.NET_TRANSPORT_VALUE_IP_UDP;\n        }\n    }\n};\nexports.setAttributesFromHttpKind = setAttributesFromHttpKind;\n/**\n * Returns the type of synthetic source based on the user agent\n * @param {OutgoingHttpHeader} userAgent the user agent string\n */\nconst getSyntheticType = (userAgent) => {\n    const userAgentString = String(userAgent).toLowerCase();\n    for (const name of internal_types_1.SYNTHETIC_TEST_NAMES) {\n        if (userAgentString.includes(name)) {\n            return semconv_1.USER_AGENT_SYNTHETIC_TYPE_VALUE_TEST;\n        }\n    }\n    for (const name of internal_types_1.SYNTHETIC_BOT_NAMES) {\n        if (userAgentString.includes(name)) {\n            return semconv_1.USER_AGENT_SYNTHETIC_TYPE_VALUE_BOT;\n        }\n    }\n    return;\n};\n/**\n * Returns outgoing request attributes scoped to the response data\n * @param {IncomingMessage} response the response object\n * @param {SemconvStability} semconvStability determines which semconv version to use\n */\nconst getOutgoingRequestAttributesOnResponse = (response, semconvStability) => {\n    const { statusCode, statusMessage, httpVersion, socket } = response;\n    const oldAttributes = {};\n    const stableAttributes = {};\n    if (statusCode != null) {\n        stableAttributes[semantic_conventions_1.ATTR_HTTP_RESPONSE_STATUS_CODE] = statusCode;\n    }\n    if (socket) {\n        const { remoteAddress, remotePort } = socket;\n        oldAttributes[semconv_1.ATTR_NET_PEER_IP] = remoteAddress;\n        oldAttributes[semconv_1.ATTR_NET_PEER_PORT] = remotePort;\n        // Recommended\n        stableAttributes[semantic_conventions_1.ATTR_NETWORK_PEER_ADDRESS] = remoteAddress;\n        stableAttributes[semantic_conventions_1.ATTR_NETWORK_PEER_PORT] = remotePort;\n        stableAttributes[semantic_conventions_1.ATTR_NETWORK_PROTOCOL_VERSION] = response.httpVersion;\n    }\n    (0, exports.setResponseContentLengthAttribute)(response, oldAttributes);\n    if (statusCode) {\n        oldAttributes[semconv_1.ATTR_HTTP_STATUS_CODE] = statusCode;\n        oldAttributes[AttributeNames_1.AttributeNames.HTTP_STATUS_TEXT] = (statusMessage || '').toUpperCase();\n    }\n    (0, exports.setAttributesFromHttpKind)(httpVersion, oldAttributes);\n    switch (semconvStability) {\n        case instrumentation_1.SemconvStability.STABLE:\n            return stableAttributes;\n        case instrumentation_1.SemconvStability.OLD:\n            return oldAttributes;\n    }\n    return Object.assign(oldAttributes, stableAttributes);\n};\nexports.getOutgoingRequestAttributesOnResponse = getOutgoingRequestAttributesOnResponse;\n/**\n * Returns outgoing request Metric attributes scoped to the response data\n * @param {Attributes} spanAttributes the span attributes\n */\nconst getOutgoingRequestMetricAttributesOnResponse = (spanAttributes) => {\n    const metricAttributes = {};\n    metricAttributes[semconv_1.ATTR_NET_PEER_PORT] = spanAttributes[semconv_1.ATTR_NET_PEER_PORT];\n    metricAttributes[semconv_1.ATTR_HTTP_STATUS_CODE] =\n        spanAttributes[semconv_1.ATTR_HTTP_STATUS_CODE];\n    metricAttributes[semconv_1.ATTR_HTTP_FLAVOR] = spanAttributes[semconv_1.ATTR_HTTP_FLAVOR];\n    return metricAttributes;\n};\nexports.getOutgoingRequestMetricAttributesOnResponse = getOutgoingRequestMetricAttributesOnResponse;\nconst getOutgoingStableRequestMetricAttributesOnResponse = (spanAttributes) => {\n    const metricAttributes = {};\n    if (spanAttributes[semantic_conventions_1.ATTR_NETWORK_PROTOCOL_VERSION]) {\n        metricAttributes[semantic_conventions_1.ATTR_NETWORK_PROTOCOL_VERSION] =\n            spanAttributes[semantic_conventions_1.ATTR_NETWORK_PROTOCOL_VERSION];\n    }\n    if (spanAttributes[semantic_conventions_1.ATTR_HTTP_RESPONSE_STATUS_CODE]) {\n        metricAttributes[semantic_conventions_1.ATTR_HTTP_RESPONSE_STATUS_CODE] =\n            spanAttributes[semantic_conventions_1.ATTR_HTTP_RESPONSE_STATUS_CODE];\n    }\n    return metricAttributes;\n};\nexports.getOutgoingStableRequestMetricAttributesOnResponse = getOutgoingStableRequestMetricAttributesOnResponse;\nfunction parseHostHeader(hostHeader, proto) {\n    const parts = hostHeader.split(':');\n    // no semicolon implies ipv4 dotted syntax or host name without port\n    // x.x.x.x\n    // example.com\n    if (parts.length === 1) {\n        if (proto === 'http') {\n            return { host: parts[0], port: '80' };\n        }\n        if (proto === 'https') {\n            return { host: parts[0], port: '443' };\n        }\n        return { host: parts[0] };\n    }\n    // single semicolon implies ipv4 dotted syntax or host name with port\n    // x.x.x.x:yyyy\n    // example.com:yyyy\n    if (parts.length === 2) {\n        return {\n            host: parts[0],\n            port: parts[1],\n        };\n    }\n    // more than 2 parts implies ipv6 syntax with multiple colons\n    // [x:x:x:x:x:x:x:x]\n    // [x:x:x:x:x:x:x:x]:yyyy\n    if (parts[0].startsWith('[')) {\n        if (parts[parts.length - 1].endsWith(']')) {\n            if (proto === 'http') {\n                return { host: hostHeader, port: '80' };\n            }\n            if (proto === 'https') {\n                return { host: hostHeader, port: '443' };\n            }\n        }\n        else if (parts[parts.length - 2].endsWith(']')) {\n            return {\n                host: parts.slice(0, -1).join(':'),\n                port: parts[parts.length - 1],\n            };\n        }\n    }\n    // if nothing above matches just return the host header\n    return { host: hostHeader };\n}\n/**\n * Get server.address and port according to http semconv 1.27\n * https://github.com/open-telemetry/semantic-conventions/blob/bf0a2c1134f206f034408b201dbec37960ed60ec/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes\n */\nfunction getServerAddress(request, component) {\n    const forwardedHeader = request.headers['forwarded'];\n    if (forwardedHeader) {\n        for (const entry of parseForwardedHeader(forwardedHeader)) {\n            if (entry.host) {\n                return parseHostHeader(entry.host, entry.proto);\n            }\n        }\n    }\n    const xForwardedHost = request.headers['x-forwarded-host'];\n    if (typeof xForwardedHost === 'string') {\n        if (typeof request.headers['x-forwarded-proto'] === 'string') {\n            return parseHostHeader(xForwardedHost, request.headers['x-forwarded-proto']);\n        }\n        if (Array.isArray(request.headers['x-forwarded-proto'])) {\n            return parseHostHeader(xForwardedHost, request.headers['x-forwarded-proto'][0]);\n        }\n        return parseHostHeader(xForwardedHost);\n    }\n    else if (Array.isArray(xForwardedHost) &&\n        typeof xForwardedHost[0] === 'string' &&\n        xForwardedHost[0].length > 0) {\n        if (typeof request.headers['x-forwarded-proto'] === 'string') {\n            return parseHostHeader(xForwardedHost[0], request.headers['x-forwarded-proto']);\n        }\n        if (Array.isArray(request.headers['x-forwarded-proto'])) {\n            return parseHostHeader(xForwardedHost[0], request.headers['x-forwarded-proto'][0]);\n        }\n        return parseHostHeader(xForwardedHost[0]);\n    }\n    const host = request.headers['host'];\n    if (typeof host === 'string' && host.length > 0) {\n        return parseHostHeader(host, component);\n    }\n    return null;\n}\n/**\n * Get server.address and port according to http semconv 1.27\n * https://github.com/open-telemetry/semantic-conventions/blob/bf0a2c1134f206f034408b201dbec37960ed60ec/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes\n */\nfunction getRemoteClientAddress(request) {\n    const forwardedHeader = request.headers['forwarded'];\n    if (forwardedHeader) {\n        for (const entry of parseForwardedHeader(forwardedHeader)) {\n            if (entry.for) {\n                return entry.for;\n            }\n        }\n    }\n    const xForwardedFor = request.headers['x-forwarded-for'];\n    if (typeof xForwardedFor === 'string') {\n        return xForwardedFor;\n    }\n    else if (Array.isArray(xForwardedFor)) {\n        return xForwardedFor[0];\n    }\n    const remote = request.socket.remoteAddress;\n    if (remote) {\n        return remote;\n    }\n    return null;\n}\nexports.getRemoteClientAddress = getRemoteClientAddress;\nfunction getInfoFromIncomingMessage(component, request, logger) {\n    try {\n        if (request.headers.host) {\n            return new URL(request.url ?? '/', `${component}://${request.headers.host}`);\n        }\n        else {\n            const unsafeParsedUrl = new URL(request.url ?? '/', \n            // using localhost as a workaround to still use the URL constructor for parsing\n            `${component}://localhost`);\n            // since we use localhost as a workaround, ensure we hide the rest of the properties to avoid\n            // our workaround leaking though.\n            return {\n                pathname: unsafeParsedUrl.pathname,\n                search: unsafeParsedUrl.search,\n                toString: function () {\n                    // we cannot use the result of unsafeParsedUrl.toString as it's potentially wrong.\n                    return unsafeParsedUrl.pathname + unsafeParsedUrl.search;\n                },\n            };\n        }\n    }\n    catch (e) {\n        // something is wrong, use undefined - this *should* never happen, logging\n        // for troubleshooting in case it does happen.\n        logger.verbose('Unable to get URL from request', e);\n        return {};\n    }\n}\n/**\n * Returns incoming request attributes scoped to the request data\n * @param {IncomingMessage} request the request object\n * @param {{ component: string, serverName?: string, hookAttributes?: Attributes }} options used to pass data needed to create attributes\n * @param {SemconvStability} semconvStability determines which semconv version to use\n */\nconst getIncomingRequestAttributes = (request, options, logger) => {\n    const headers = request.headers;\n    const userAgent = headers['user-agent'];\n    const ips = headers['x-forwarded-for'];\n    const httpVersion = request.httpVersion;\n    const host = headers.host;\n    const hostname = host?.replace(/^(.*)(:[0-9]{1,5})/, '$1') || 'localhost';\n    const method = request.method;\n    const normalizedMethod = normalizeMethod(method);\n    const serverAddress = getServerAddress(request, options.component);\n    const serverName = options.serverName;\n    const remoteClientAddress = getRemoteClientAddress(request);\n    const newAttributes = {\n        [semantic_conventions_1.ATTR_HTTP_REQUEST_METHOD]: normalizedMethod,\n        [semantic_conventions_1.ATTR_URL_SCHEME]: options.component,\n        [semantic_conventions_1.ATTR_SERVER_ADDRESS]: serverAddress?.host,\n        [semantic_conventions_1.ATTR_NETWORK_PEER_ADDRESS]: request.socket.remoteAddress,\n        [semantic_conventions_1.ATTR_NETWORK_PEER_PORT]: request.socket.remotePort,\n        [semantic_conventions_1.ATTR_NETWORK_PROTOCOL_VERSION]: request.httpVersion,\n        [semantic_conventions_1.ATTR_USER_AGENT_ORIGINAL]: userAgent,\n    };\n    const parsedUrl = getInfoFromIncomingMessage(options.component, request, logger);\n    if (parsedUrl?.pathname != null) {\n        newAttributes[semantic_conventions_1.ATTR_URL_PATH] = parsedUrl.pathname;\n    }\n    if (parsedUrl.search) {\n        // Remove leading '?' from URL search (https://developer.mozilla.org/en-US/docs/Web/API/URL/search).\n        newAttributes[semantic_conventions_1.ATTR_URL_QUERY] = parsedUrl.search.slice(1);\n    }\n    if (remoteClientAddress != null) {\n        newAttributes[semantic_conventions_1.ATTR_CLIENT_ADDRESS] = remoteClientAddress.split(',')[0];\n    }\n    if (serverAddress?.port != null) {\n        newAttributes[semantic_conventions_1.ATTR_SERVER_PORT] = Number(serverAddress.port);\n    }\n    // conditionally required if request method required case normalization\n    if (method !== normalizedMethod) {\n        newAttributes[semantic_conventions_1.ATTR_HTTP_REQUEST_METHOD_ORIGINAL] = method;\n    }\n    if (options.enableSyntheticSourceDetection && userAgent) {\n        newAttributes[semconv_1.ATTR_USER_AGENT_SYNTHETIC_TYPE] = getSyntheticType(userAgent);\n    }\n    const oldAttributes = {\n        [semconv_1.ATTR_HTTP_URL]: parsedUrl.toString(),\n        [semconv_1.ATTR_HTTP_HOST]: host,\n        [semconv_1.ATTR_NET_HOST_NAME]: hostname,\n        [semconv_1.ATTR_HTTP_METHOD]: method,\n        [semconv_1.ATTR_HTTP_SCHEME]: options.component,\n    };\n    if (typeof ips === 'string') {\n        oldAttributes[semconv_1.ATTR_HTTP_CLIENT_IP] = ips.split(',')[0];\n    }\n    if (typeof serverName === 'string') {\n        oldAttributes[semconv_1.ATTR_HTTP_SERVER_NAME] = serverName;\n    }\n    if (parsedUrl?.pathname) {\n        oldAttributes[semconv_1.ATTR_HTTP_TARGET] =\n            parsedUrl?.pathname + parsedUrl?.search || '/';\n    }\n    if (userAgent !== undefined) {\n        oldAttributes[semconv_1.ATTR_HTTP_USER_AGENT] = userAgent;\n    }\n    (0, exports.setRequestContentLengthAttribute)(request, oldAttributes);\n    (0, exports.setAttributesFromHttpKind)(httpVersion, oldAttributes);\n    switch (options.semconvStability) {\n        case instrumentation_1.SemconvStability.STABLE:\n            return Object.assign(newAttributes, options.hookAttributes);\n        case instrumentation_1.SemconvStability.OLD:\n            return Object.assign(oldAttributes, options.hookAttributes);\n    }\n    return Object.assign(oldAttributes, newAttributes, options.hookAttributes);\n};\nexports.getIncomingRequestAttributes = getIncomingRequestAttributes;\n/**\n * Returns incoming request Metric attributes scoped to the request data\n * @param {Attributes} spanAttributes the span attributes\n * @param {{ component: string }} options used to pass data needed to create attributes\n */\nconst getIncomingRequestMetricAttributes = (spanAttributes) => {\n    const metricAttributes = {};\n    metricAttributes[semconv_1.ATTR_HTTP_SCHEME] = spanAttributes[semconv_1.ATTR_HTTP_SCHEME];\n    metricAttributes[semconv_1.ATTR_HTTP_METHOD] = spanAttributes[semconv_1.ATTR_HTTP_METHOD];\n    metricAttributes[semconv_1.ATTR_NET_HOST_NAME] = spanAttributes[semconv_1.ATTR_NET_HOST_NAME];\n    metricAttributes[semconv_1.ATTR_HTTP_FLAVOR] = spanAttributes[semconv_1.ATTR_HTTP_FLAVOR];\n    //TODO: http.target attribute, it should substitute any parameters to avoid high cardinality.\n    return metricAttributes;\n};\nexports.getIncomingRequestMetricAttributes = getIncomingRequestMetricAttributes;\n/**\n * Returns incoming request attributes scoped to the response data\n * @param {(ServerResponse & { socket: Socket; })} response the response object\n */\nconst getIncomingRequestAttributesOnResponse = (request, response, semconvStability) => {\n    // take socket from the request,\n    // since it may be detached from the response object in keep-alive mode\n    const { socket } = request;\n    const { statusCode, statusMessage } = response;\n    const newAttributes = {\n        [semantic_conventions_1.ATTR_HTTP_RESPONSE_STATUS_CODE]: statusCode,\n    };\n    const rpcMetadata = (0, core_1.getRPCMetadata)(api_1.context.active());\n    const oldAttributes = {};\n    if (socket) {\n        const { localAddress, localPort, remoteAddress, remotePort } = socket;\n        oldAttributes[semconv_1.ATTR_NET_HOST_IP] = localAddress;\n        oldAttributes[semconv_1.ATTR_NET_HOST_PORT] = localPort;\n        oldAttributes[semconv_1.ATTR_NET_PEER_IP] = remoteAddress;\n        oldAttributes[semconv_1.ATTR_NET_PEER_PORT] = remotePort;\n    }\n    oldAttributes[semconv_1.ATTR_HTTP_STATUS_CODE] = statusCode;\n    oldAttributes[AttributeNames_1.AttributeNames.HTTP_STATUS_TEXT] = (statusMessage || '').toUpperCase();\n    if (rpcMetadata?.type === core_1.RPCType.HTTP && rpcMetadata.route !== undefined) {\n        oldAttributes[semantic_conventions_1.ATTR_HTTP_ROUTE] = rpcMetadata.route;\n        newAttributes[semantic_conventions_1.ATTR_HTTP_ROUTE] = rpcMetadata.route;\n    }\n    switch (semconvStability) {\n        case instrumentation_1.SemconvStability.STABLE:\n            return newAttributes;\n        case instrumentation_1.SemconvStability.OLD:\n            return oldAttributes;\n    }\n    return Object.assign(oldAttributes, newAttributes);\n};\nexports.getIncomingRequestAttributesOnResponse = getIncomingRequestAttributesOnResponse;\n/**\n * Returns incoming request Metric attributes scoped to the request data\n * @param {Attributes} spanAttributes the span attributes\n */\nconst getIncomingRequestMetricAttributesOnResponse = (spanAttributes) => {\n    const metricAttributes = {};\n    metricAttributes[semconv_1.ATTR_HTTP_STATUS_CODE] =\n        spanAttributes[semconv_1.ATTR_HTTP_STATUS_CODE];\n    metricAttributes[semconv_1.ATTR_NET_HOST_PORT] = spanAttributes[semconv_1.ATTR_NET_HOST_PORT];\n    if (spanAttributes[semantic_conventions_1.ATTR_HTTP_ROUTE] !== undefined) {\n        metricAttributes[semantic_conventions_1.ATTR_HTTP_ROUTE] = spanAttributes[semantic_conventions_1.ATTR_HTTP_ROUTE];\n    }\n    return metricAttributes;\n};\nexports.getIncomingRequestMetricAttributesOnResponse = getIncomingRequestMetricAttributesOnResponse;\n/**\n * Returns incoming stable request Metric attributes scoped to the request data\n * @param {Attributes} spanAttributes the span attributes\n */\nconst getIncomingStableRequestMetricAttributesOnResponse = (spanAttributes) => {\n    const metricAttributes = {};\n    if (spanAttributes[semantic_conventions_1.ATTR_HTTP_ROUTE] !== undefined) {\n        metricAttributes[semantic_conventions_1.ATTR_HTTP_ROUTE] = spanAttributes[semantic_conventions_1.ATTR_HTTP_ROUTE];\n    }\n    // required if and only if one was sent, same as span requirement\n    if (spanAttributes[semantic_conventions_1.ATTR_HTTP_RESPONSE_STATUS_CODE]) {\n        metricAttributes[semantic_conventions_1.ATTR_HTTP_RESPONSE_STATUS_CODE] =\n            spanAttributes[semantic_conventions_1.ATTR_HTTP_RESPONSE_STATUS_CODE];\n    }\n    return metricAttributes;\n};\nexports.getIncomingStableRequestMetricAttributesOnResponse = getIncomingStableRequestMetricAttributesOnResponse;\nfunction headerCapture(type, headers) {\n    const normalizedHeaders = new Map();\n    for (let i = 0, len = headers.length; i < len; i++) {\n        const capturedHeader = headers[i].toLowerCase();\n        normalizedHeaders.set(capturedHeader, capturedHeader.replace(/-/g, '_'));\n    }\n    return (span, getHeader) => {\n        for (const capturedHeader of normalizedHeaders.keys()) {\n            const value = getHeader(capturedHeader);\n            if (value === undefined) {\n                continue;\n            }\n            const normalizedHeader = normalizedHeaders.get(capturedHeader);\n            const key = `http.${type}.header.${normalizedHeader}`;\n            if (typeof value === 'string') {\n                span.setAttribute(key, [value]);\n            }\n            else if (Array.isArray(value)) {\n                span.setAttribute(key, value);\n            }\n            else {\n                span.setAttribute(key, [value]);\n            }\n        }\n    };\n}\nexports.headerCapture = headerCapture;\nconst KNOWN_METHODS = new Set([\n    // methods from https://www.rfc-editor.org/rfc/rfc9110.html#name-methods\n    'GET',\n    'HEAD',\n    'POST',\n    'PUT',\n    'DELETE',\n    'CONNECT',\n    'OPTIONS',\n    'TRACE',\n    // PATCH from https://www.rfc-editor.org/rfc/rfc5789.html\n    'PATCH',\n]);\nfunction normalizeMethod(method) {\n    if (method == null) {\n        return 'GET';\n    }\n    const upper = method.toUpperCase();\n    if (KNOWN_METHODS.has(upper)) {\n        return upper;\n    }\n    return '_OTHER';\n}\nfunction parseForwardedHeader(header) {\n    try {\n        return forwardedParse(header);\n    }\n    catch {\n        return [];\n    }\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-http/build/src/utils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-http/build/src/version.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-http/build/src/version.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.VERSION = void 0;\n// this is autogenerated file, see scripts/version-update.js\nexports.VERSION = '0.203.0';\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1odHRwL2J1aWxkL3NyYy92ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGVBQWU7QUFDZjtBQUNBLGVBQWU7QUFDZiIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24taHR0cC9idWlsZC9zcmMvdmVyc2lvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlZFUlNJT04gPSB2b2lkIDA7XG4vLyB0aGlzIGlzIGF1dG9nZW5lcmF0ZWQgZmlsZSwgc2VlIHNjcmlwdHMvdmVyc2lvbi11cGRhdGUuanNcbmV4cG9ydHMuVkVSU0lPTiA9ICcwLjIwMy4wJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-http/build/src/version.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-ioredis/build/src/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-ioredis/build/src/index.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.IORedisInstrumentation = void 0;\nvar instrumentation_1 = __webpack_require__(/*! ./instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-ioredis/build/src/instrumentation.js\");\nObject.defineProperty(exports, \"IORedisInstrumentation\", ({ enumerable: true, get: function () { return instrumentation_1.IORedisInstrumentation; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1pb3JlZGlzL2J1aWxkL3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw4QkFBOEI7QUFDOUIsd0JBQXdCLG1CQUFPLENBQUMsMEhBQW1CO0FBQ25ELDBEQUF5RCxFQUFFLHFDQUFxQyxvREFBb0QsRUFBQztBQUNySiIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24taW9yZWRpcy9idWlsZC9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5JT1JlZGlzSW5zdHJ1bWVudGF0aW9uID0gdm9pZCAwO1xudmFyIGluc3RydW1lbnRhdGlvbl8xID0gcmVxdWlyZShcIi4vaW5zdHJ1bWVudGF0aW9uXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSU9SZWRpc0luc3RydW1lbnRhdGlvblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW5zdHJ1bWVudGF0aW9uXzEuSU9SZWRpc0luc3RydW1lbnRhdGlvbjsgfSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-ioredis/build/src/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-ioredis/build/src/instrumentation.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-ioredis/build/src/instrumentation.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = \"/monitoring\";globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.2\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.IORedisInstrumentation = void 0;\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst instrumentation_2 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-ioredis/build/src/utils.js\");\nconst redis_common_1 = __webpack_require__(/*! @opentelemetry/redis-common */ \"(instrument)/./node_modules/@opentelemetry/redis-common/build/src/index.js\");\n/** @knipignore */\nconst version_1 = __webpack_require__(/*! ./version */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-ioredis/build/src/version.js\");\nconst DEFAULT_CONFIG = {\n    requireParentSpan: true,\n};\nclass IORedisInstrumentation extends instrumentation_1.InstrumentationBase {\n    constructor(config = {}) {\n        super(version_1.PACKAGE_NAME, version_1.PACKAGE_VERSION, { ...DEFAULT_CONFIG, ...config });\n    }\n    setConfig(config = {}) {\n        super.setConfig({ ...DEFAULT_CONFIG, ...config });\n    }\n    init() {\n        return [\n            new instrumentation_1.InstrumentationNodeModuleDefinition('ioredis', ['>=2.0.0 <6'], (module, moduleVersion) => {\n                const moduleExports = module[Symbol.toStringTag] === 'Module'\n                    ? module.default // ESM\n                    : module; // CommonJS\n                if ((0, instrumentation_1.isWrapped)(moduleExports.prototype.sendCommand)) {\n                    this._unwrap(moduleExports.prototype, 'sendCommand');\n                }\n                this._wrap(moduleExports.prototype, 'sendCommand', this._patchSendCommand(moduleVersion));\n                if ((0, instrumentation_1.isWrapped)(moduleExports.prototype.connect)) {\n                    this._unwrap(moduleExports.prototype, 'connect');\n                }\n                this._wrap(moduleExports.prototype, 'connect', this._patchConnection());\n                return module;\n            }, module => {\n                if (module === undefined)\n                    return;\n                const moduleExports = module[Symbol.toStringTag] === 'Module'\n                    ? module.default // ESM\n                    : module; // CommonJS\n                this._unwrap(moduleExports.prototype, 'sendCommand');\n                this._unwrap(moduleExports.prototype, 'connect');\n            }),\n        ];\n    }\n    /**\n     * Patch send command internal to trace requests\n     */\n    _patchSendCommand(moduleVersion) {\n        return (original) => {\n            return this._traceSendCommand(original, moduleVersion);\n        };\n    }\n    _patchConnection() {\n        return (original) => {\n            return this._traceConnection(original);\n        };\n    }\n    _traceSendCommand(original, moduleVersion) {\n        const instrumentation = this;\n        return function (cmd) {\n            if (arguments.length < 1 || typeof cmd !== 'object') {\n                return original.apply(this, arguments);\n            }\n            const config = instrumentation.getConfig();\n            const dbStatementSerializer = config.dbStatementSerializer || redis_common_1.defaultDbStatementSerializer;\n            const hasNoParentSpan = api_1.trace.getSpan(api_1.context.active()) === undefined;\n            if (config.requireParentSpan === true && hasNoParentSpan) {\n                return original.apply(this, arguments);\n            }\n            const span = instrumentation.tracer.startSpan(cmd.name, {\n                kind: api_1.SpanKind.CLIENT,\n                attributes: {\n                    [semantic_conventions_1.SEMATTRS_DB_SYSTEM]: semantic_conventions_1.DBSYSTEMVALUES_REDIS,\n                    [semantic_conventions_1.SEMATTRS_DB_STATEMENT]: dbStatementSerializer(cmd.name, cmd.args),\n                },\n            });\n            const { requestHook } = config;\n            if (requestHook) {\n                (0, instrumentation_2.safeExecuteInTheMiddle)(() => requestHook(span, {\n                    moduleVersion,\n                    cmdName: cmd.name,\n                    cmdArgs: cmd.args,\n                }), e => {\n                    if (e) {\n                        api_1.diag.error('ioredis instrumentation: request hook failed', e);\n                    }\n                }, true);\n            }\n            const { host, port } = this.options;\n            span.setAttributes({\n                [semantic_conventions_1.SEMATTRS_NET_PEER_NAME]: host,\n                [semantic_conventions_1.SEMATTRS_NET_PEER_PORT]: port,\n                [semantic_conventions_1.SEMATTRS_DB_CONNECTION_STRING]: `redis://${host}:${port}`,\n            });\n            try {\n                const result = original.apply(this, arguments);\n                const origResolve = cmd.resolve;\n                /* eslint-disable @typescript-eslint/no-explicit-any */\n                cmd.resolve = function (result) {\n                    (0, instrumentation_2.safeExecuteInTheMiddle)(() => config.responseHook?.(span, cmd.name, cmd.args, result), e => {\n                        if (e) {\n                            api_1.diag.error('ioredis instrumentation: response hook failed', e);\n                        }\n                    }, true);\n                    (0, utils_1.endSpan)(span, null);\n                    origResolve(result);\n                };\n                const origReject = cmd.reject;\n                cmd.reject = function (err) {\n                    (0, utils_1.endSpan)(span, err);\n                    origReject(err);\n                };\n                return result;\n            }\n            catch (error) {\n                (0, utils_1.endSpan)(span, error);\n                throw error;\n            }\n        };\n    }\n    _traceConnection(original) {\n        const instrumentation = this;\n        return function () {\n            const hasNoParentSpan = api_1.trace.getSpan(api_1.context.active()) === undefined;\n            if (instrumentation.getConfig().requireParentSpan === true &&\n                hasNoParentSpan) {\n                return original.apply(this, arguments);\n            }\n            const span = instrumentation.tracer.startSpan('connect', {\n                kind: api_1.SpanKind.CLIENT,\n                attributes: {\n                    [semantic_conventions_1.SEMATTRS_DB_SYSTEM]: semantic_conventions_1.DBSYSTEMVALUES_REDIS,\n                    [semantic_conventions_1.SEMATTRS_DB_STATEMENT]: 'connect',\n                },\n            });\n            const { host, port } = this.options;\n            span.setAttributes({\n                [semantic_conventions_1.SEMATTRS_NET_PEER_NAME]: host,\n                [semantic_conventions_1.SEMATTRS_NET_PEER_PORT]: port,\n                [semantic_conventions_1.SEMATTRS_DB_CONNECTION_STRING]: `redis://${host}:${port}`,\n            });\n            try {\n                const client = original.apply(this, arguments);\n                (0, utils_1.endSpan)(span, null);\n                return client;\n            }\n            catch (error) {\n                (0, utils_1.endSpan)(span, error);\n                throw error;\n            }\n        };\n    }\n}\nexports.IORedisInstrumentation = IORedisInstrumentation;\n//# sourceMappingURL=instrumentation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-ioredis/build/src/instrumentation.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-ioredis/build/src/utils.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-ioredis/build/src/utils.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.endSpan = void 0;\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst endSpan = (span, err) => {\n    if (err) {\n        span.recordException(err);\n        span.setStatus({\n            code: api_1.SpanStatusCode.ERROR,\n            message: err.message,\n        });\n    }\n    span.end();\n};\nexports.endSpan = endSpan;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1pb3JlZGlzL2J1aWxkL3NyYy91dGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxlQUFlO0FBQ2YsY0FBYyxtQkFBTyxDQUFDLDZGQUFvQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1pb3JlZGlzL2J1aWxkL3NyYy91dGlscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmVuZFNwYW4gPSB2b2lkIDA7XG5jb25zdCBhcGlfMSA9IHJlcXVpcmUoXCJAb3BlbnRlbGVtZXRyeS9hcGlcIik7XG5jb25zdCBlbmRTcGFuID0gKHNwYW4sIGVycikgPT4ge1xuICAgIGlmIChlcnIpIHtcbiAgICAgICAgc3Bhbi5yZWNvcmRFeGNlcHRpb24oZXJyKTtcbiAgICAgICAgc3Bhbi5zZXRTdGF0dXMoe1xuICAgICAgICAgICAgY29kZTogYXBpXzEuU3BhblN0YXR1c0NvZGUuRVJST1IsXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnIubWVzc2FnZSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHNwYW4uZW5kKCk7XG59O1xuZXhwb3J0cy5lbmRTcGFuID0gZW5kU3Bhbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-ioredis/build/src/utils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-ioredis/build/src/version.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-ioredis/build/src/version.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PACKAGE_NAME = exports.PACKAGE_VERSION = void 0;\n// this is autogenerated file, see scripts/version-update.js\nexports.PACKAGE_VERSION = '0.51.0';\nexports.PACKAGE_NAME = '@opentelemetry/instrumentation-ioredis';\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1pb3JlZGlzL2J1aWxkL3NyYy92ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQixHQUFHLHVCQUF1QjtBQUM5QztBQUNBLHVCQUF1QjtBQUN2QixvQkFBb0I7QUFDcEIiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWlvcmVkaXMvYnVpbGQvc3JjL3ZlcnNpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5QQUNLQUdFX05BTUUgPSBleHBvcnRzLlBBQ0tBR0VfVkVSU0lPTiA9IHZvaWQgMDtcbi8vIHRoaXMgaXMgYXV0b2dlbmVyYXRlZCBmaWxlLCBzZWUgc2NyaXB0cy92ZXJzaW9uLXVwZGF0ZS5qc1xuZXhwb3J0cy5QQUNLQUdFX1ZFUlNJT04gPSAnMC41MS4wJztcbmV4cG9ydHMuUEFDS0FHRV9OQU1FID0gJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1pb3JlZGlzJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-ioredis/build/src/version.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-kafkajs/build/src/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-kafkajs/build/src/index.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors, Aspecto\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.KafkaJsInstrumentation = void 0;\nvar instrumentation_1 = __webpack_require__(/*! ./instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-kafkajs/build/src/instrumentation.js\");\nObject.defineProperty(exports, \"KafkaJsInstrumentation\", ({ enumerable: true, get: function () { return instrumentation_1.KafkaJsInstrumentation; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1rYWZrYWpzL2J1aWxkL3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw4QkFBOEI7QUFDOUIsd0JBQXdCLG1CQUFPLENBQUMsMEhBQW1CO0FBQ25ELDBEQUF5RCxFQUFFLHFDQUFxQyxvREFBb0QsRUFBQztBQUNySiIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24ta2Fma2Fqcy9idWlsZC9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnMsIEFzcGVjdG9cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5LYWZrYUpzSW5zdHJ1bWVudGF0aW9uID0gdm9pZCAwO1xudmFyIGluc3RydW1lbnRhdGlvbl8xID0gcmVxdWlyZShcIi4vaW5zdHJ1bWVudGF0aW9uXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiS2Fma2FKc0luc3RydW1lbnRhdGlvblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW5zdHJ1bWVudGF0aW9uXzEuS2Fma2FKc0luc3RydW1lbnRhdGlvbjsgfSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-kafkajs/build/src/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-kafkajs/build/src/instrumentation.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-kafkajs/build/src/instrumentation.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = \"/monitoring\";globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.2\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";\n/*\n * Copyright The OpenTelemetry Authors, Aspecto\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.KafkaJsInstrumentation = void 0;\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst internal_types_1 = __webpack_require__(/*! ./internal-types */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-kafkajs/build/src/internal-types.js\");\nconst propagator_1 = __webpack_require__(/*! ./propagator */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-kafkajs/build/src/propagator.js\");\nconst semconv_1 = __webpack_require__(/*! ./semconv */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-kafkajs/build/src/semconv.js\");\n/** @knipignore */\nconst version_1 = __webpack_require__(/*! ./version */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-kafkajs/build/src/version.js\");\nfunction prepareCounter(meter, value, attributes) {\n    return (errorType) => {\n        meter.add(value, {\n            ...attributes,\n            ...(errorType ? { [semantic_conventions_1.ATTR_ERROR_TYPE]: errorType } : {}),\n        });\n    };\n}\nfunction prepareDurationHistogram(meter, value, attributes) {\n    return (errorType) => {\n        meter.record((Date.now() - value) / 1000, {\n            ...attributes,\n            ...(errorType ? { [semantic_conventions_1.ATTR_ERROR_TYPE]: errorType } : {}),\n        });\n    };\n}\nconst HISTOGRAM_BUCKET_BOUNDARIES = [\n    0.005, 0.01, 0.025, 0.05, 0.075, 0.1, 0.25, 0.5, 0.75, 1, 2.5, 5, 7.5, 10,\n];\nclass KafkaJsInstrumentation extends instrumentation_1.InstrumentationBase {\n    constructor(config = {}) {\n        super(version_1.PACKAGE_NAME, version_1.PACKAGE_VERSION, config);\n    }\n    _updateMetricInstruments() {\n        this._clientDuration = this.meter.createHistogram(semconv_1.METRIC_MESSAGING_CLIENT_OPERATION_DURATION, { advice: { explicitBucketBoundaries: HISTOGRAM_BUCKET_BOUNDARIES } });\n        this._sentMessages = this.meter.createCounter(semconv_1.METRIC_MESSAGING_CLIENT_SENT_MESSAGES);\n        this._consumedMessages = this.meter.createCounter(semconv_1.METRIC_MESSAGING_CLIENT_CONSUMED_MESSAGES);\n        this._processDuration = this.meter.createHistogram(semconv_1.METRIC_MESSAGING_PROCESS_DURATION, { advice: { explicitBucketBoundaries: HISTOGRAM_BUCKET_BOUNDARIES } });\n    }\n    init() {\n        const unpatch = (moduleExports) => {\n            if ((0, instrumentation_1.isWrapped)(moduleExports?.Kafka?.prototype.producer)) {\n                this._unwrap(moduleExports.Kafka.prototype, 'producer');\n            }\n            if ((0, instrumentation_1.isWrapped)(moduleExports?.Kafka?.prototype.consumer)) {\n                this._unwrap(moduleExports.Kafka.prototype, 'consumer');\n            }\n        };\n        const module = new instrumentation_1.InstrumentationNodeModuleDefinition('kafkajs', ['>=0.3.0 <3'], (moduleExports) => {\n            unpatch(moduleExports);\n            this._wrap(moduleExports?.Kafka?.prototype, 'producer', this._getProducerPatch());\n            this._wrap(moduleExports?.Kafka?.prototype, 'consumer', this._getConsumerPatch());\n            return moduleExports;\n        }, unpatch);\n        return module;\n    }\n    _getConsumerPatch() {\n        const instrumentation = this;\n        return (original) => {\n            return function consumer(...args) {\n                const newConsumer = original.apply(this, args);\n                if ((0, instrumentation_1.isWrapped)(newConsumer.run)) {\n                    instrumentation._unwrap(newConsumer, 'run');\n                }\n                instrumentation._wrap(newConsumer, 'run', instrumentation._getConsumerRunPatch());\n                instrumentation._setKafkaEventListeners(newConsumer);\n                return newConsumer;\n            };\n        };\n    }\n    _setKafkaEventListeners(kafkaObj) {\n        if (kafkaObj[internal_types_1.EVENT_LISTENERS_SET])\n            return;\n        // The REQUEST Consumer event was added in kafkajs@1.5.0.\n        if (kafkaObj.events?.REQUEST) {\n            kafkaObj.on(kafkaObj.events.REQUEST, this._recordClientDurationMetric.bind(this));\n        }\n        kafkaObj[internal_types_1.EVENT_LISTENERS_SET] = true;\n    }\n    _recordClientDurationMetric(event) {\n        const [address, port] = event.payload.broker.split(':');\n        this._clientDuration.record(event.payload.duration / 1000, {\n            [semconv_1.ATTR_MESSAGING_SYSTEM]: semconv_1.MESSAGING_SYSTEM_VALUE_KAFKA,\n            [semconv_1.ATTR_MESSAGING_OPERATION_NAME]: `${event.payload.apiName}`,\n            [semantic_conventions_1.ATTR_SERVER_ADDRESS]: address,\n            [semantic_conventions_1.ATTR_SERVER_PORT]: Number.parseInt(port, 10),\n        });\n    }\n    _getProducerPatch() {\n        const instrumentation = this;\n        return (original) => {\n            return function consumer(...args) {\n                const newProducer = original.apply(this, args);\n                if ((0, instrumentation_1.isWrapped)(newProducer.sendBatch)) {\n                    instrumentation._unwrap(newProducer, 'sendBatch');\n                }\n                instrumentation._wrap(newProducer, 'sendBatch', instrumentation._getSendBatchPatch());\n                if ((0, instrumentation_1.isWrapped)(newProducer.send)) {\n                    instrumentation._unwrap(newProducer, 'send');\n                }\n                instrumentation._wrap(newProducer, 'send', instrumentation._getSendPatch());\n                if ((0, instrumentation_1.isWrapped)(newProducer.transaction)) {\n                    instrumentation._unwrap(newProducer, 'transaction');\n                }\n                instrumentation._wrap(newProducer, 'transaction', instrumentation._getProducerTransactionPatch());\n                instrumentation._setKafkaEventListeners(newProducer);\n                return newProducer;\n            };\n        };\n    }\n    _getConsumerRunPatch() {\n        const instrumentation = this;\n        return (original) => {\n            return function run(...args) {\n                const config = args[0];\n                if (config?.eachMessage) {\n                    if ((0, instrumentation_1.isWrapped)(config.eachMessage)) {\n                        instrumentation._unwrap(config, 'eachMessage');\n                    }\n                    instrumentation._wrap(config, 'eachMessage', instrumentation._getConsumerEachMessagePatch());\n                }\n                if (config?.eachBatch) {\n                    if ((0, instrumentation_1.isWrapped)(config.eachBatch)) {\n                        instrumentation._unwrap(config, 'eachBatch');\n                    }\n                    instrumentation._wrap(config, 'eachBatch', instrumentation._getConsumerEachBatchPatch());\n                }\n                return original.call(this, config);\n            };\n        };\n    }\n    _getConsumerEachMessagePatch() {\n        const instrumentation = this;\n        return (original) => {\n            return function eachMessage(...args) {\n                const payload = args[0];\n                const propagatedContext = api_1.propagation.extract(api_1.ROOT_CONTEXT, payload.message.headers, propagator_1.bufferTextMapGetter);\n                const span = instrumentation._startConsumerSpan({\n                    topic: payload.topic,\n                    message: payload.message,\n                    operationType: semconv_1.MESSAGING_OPERATION_TYPE_VALUE_PROCESS,\n                    ctx: propagatedContext,\n                    attributes: {\n                        [semconv_1.ATTR_MESSAGING_DESTINATION_PARTITION_ID]: String(payload.partition),\n                    },\n                });\n                const pendingMetrics = [\n                    prepareDurationHistogram(instrumentation._processDuration, Date.now(), {\n                        [semconv_1.ATTR_MESSAGING_SYSTEM]: semconv_1.MESSAGING_SYSTEM_VALUE_KAFKA,\n                        [semconv_1.ATTR_MESSAGING_OPERATION_NAME]: 'process',\n                        [semconv_1.ATTR_MESSAGING_DESTINATION_NAME]: payload.topic,\n                        [semconv_1.ATTR_MESSAGING_DESTINATION_PARTITION_ID]: String(payload.partition),\n                    }),\n                    prepareCounter(instrumentation._consumedMessages, 1, {\n                        [semconv_1.ATTR_MESSAGING_SYSTEM]: semconv_1.MESSAGING_SYSTEM_VALUE_KAFKA,\n                        [semconv_1.ATTR_MESSAGING_OPERATION_NAME]: 'process',\n                        [semconv_1.ATTR_MESSAGING_DESTINATION_NAME]: payload.topic,\n                        [semconv_1.ATTR_MESSAGING_DESTINATION_PARTITION_ID]: String(payload.partition),\n                    }),\n                ];\n                const eachMessagePromise = api_1.context.with(api_1.trace.setSpan(propagatedContext, span), () => {\n                    return original.apply(this, args);\n                });\n                return instrumentation._endSpansOnPromise([span], pendingMetrics, eachMessagePromise);\n            };\n        };\n    }\n    _getConsumerEachBatchPatch() {\n        return (original) => {\n            const instrumentation = this;\n            return function eachBatch(...args) {\n                const payload = args[0];\n                // https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/messaging.md#topic-with-multiple-consumers\n                const receivingSpan = instrumentation._startConsumerSpan({\n                    topic: payload.batch.topic,\n                    message: undefined,\n                    operationType: semconv_1.MESSAGING_OPERATION_TYPE_VALUE_RECEIVE,\n                    ctx: api_1.ROOT_CONTEXT,\n                    attributes: {\n                        [semconv_1.ATTR_MESSAGING_BATCH_MESSAGE_COUNT]: payload.batch.messages.length,\n                        [semconv_1.ATTR_MESSAGING_DESTINATION_PARTITION_ID]: String(payload.batch.partition),\n                    },\n                });\n                return api_1.context.with(api_1.trace.setSpan(api_1.context.active(), receivingSpan), () => {\n                    const startTime = Date.now();\n                    const spans = [];\n                    const pendingMetrics = [\n                        prepareCounter(instrumentation._consumedMessages, payload.batch.messages.length, {\n                            [semconv_1.ATTR_MESSAGING_SYSTEM]: semconv_1.MESSAGING_SYSTEM_VALUE_KAFKA,\n                            [semconv_1.ATTR_MESSAGING_OPERATION_NAME]: 'process',\n                            [semconv_1.ATTR_MESSAGING_DESTINATION_NAME]: payload.batch.topic,\n                            [semconv_1.ATTR_MESSAGING_DESTINATION_PARTITION_ID]: String(payload.batch.partition),\n                        }),\n                    ];\n                    payload.batch.messages.forEach(message => {\n                        const propagatedContext = api_1.propagation.extract(api_1.ROOT_CONTEXT, message.headers, propagator_1.bufferTextMapGetter);\n                        const spanContext = api_1.trace\n                            .getSpan(propagatedContext)\n                            ?.spanContext();\n                        let origSpanLink;\n                        if (spanContext) {\n                            origSpanLink = {\n                                context: spanContext,\n                            };\n                        }\n                        spans.push(instrumentation._startConsumerSpan({\n                            topic: payload.batch.topic,\n                            message,\n                            operationType: semconv_1.MESSAGING_OPERATION_TYPE_VALUE_PROCESS,\n                            link: origSpanLink,\n                            attributes: {\n                                [semconv_1.ATTR_MESSAGING_DESTINATION_PARTITION_ID]: String(payload.batch.partition),\n                            },\n                        }));\n                        pendingMetrics.push(prepareDurationHistogram(instrumentation._processDuration, startTime, {\n                            [semconv_1.ATTR_MESSAGING_SYSTEM]: semconv_1.MESSAGING_SYSTEM_VALUE_KAFKA,\n                            [semconv_1.ATTR_MESSAGING_OPERATION_NAME]: 'process',\n                            [semconv_1.ATTR_MESSAGING_DESTINATION_NAME]: payload.batch.topic,\n                            [semconv_1.ATTR_MESSAGING_DESTINATION_PARTITION_ID]: String(payload.batch.partition),\n                        }));\n                    });\n                    const batchMessagePromise = original.apply(this, args);\n                    spans.unshift(receivingSpan);\n                    return instrumentation._endSpansOnPromise(spans, pendingMetrics, batchMessagePromise);\n                });\n            };\n        };\n    }\n    _getProducerTransactionPatch() {\n        const instrumentation = this;\n        return (original) => {\n            return function transaction(...args) {\n                const transactionSpan = instrumentation.tracer.startSpan('transaction');\n                const transactionPromise = original.apply(this, args);\n                transactionPromise\n                    .then((transaction) => {\n                    const originalSend = transaction.send;\n                    transaction.send = function send(...args) {\n                        return api_1.context.with(api_1.trace.setSpan(api_1.context.active(), transactionSpan), () => {\n                            const patched = instrumentation._getSendPatch()(originalSend);\n                            return patched.apply(this, args).catch(err => {\n                                transactionSpan.setStatus({\n                                    code: api_1.SpanStatusCode.ERROR,\n                                    message: err?.message,\n                                });\n                                transactionSpan.recordException(err);\n                                throw err;\n                            });\n                        });\n                    };\n                    const originalSendBatch = transaction.sendBatch;\n                    transaction.sendBatch = function sendBatch(...args) {\n                        return api_1.context.with(api_1.trace.setSpan(api_1.context.active(), transactionSpan), () => {\n                            const patched = instrumentation._getSendBatchPatch()(originalSendBatch);\n                            return patched.apply(this, args).catch(err => {\n                                transactionSpan.setStatus({\n                                    code: api_1.SpanStatusCode.ERROR,\n                                    message: err?.message,\n                                });\n                                transactionSpan.recordException(err);\n                                throw err;\n                            });\n                        });\n                    };\n                    const originalCommit = transaction.commit;\n                    transaction.commit = function commit(...args) {\n                        const originCommitPromise = originalCommit\n                            .apply(this, args)\n                            .then(() => {\n                            transactionSpan.setStatus({ code: api_1.SpanStatusCode.OK });\n                        });\n                        return instrumentation._endSpansOnPromise([transactionSpan], [], originCommitPromise);\n                    };\n                    const originalAbort = transaction.abort;\n                    transaction.abort = function abort(...args) {\n                        const originAbortPromise = originalAbort.apply(this, args);\n                        return instrumentation._endSpansOnPromise([transactionSpan], [], originAbortPromise);\n                    };\n                })\n                    .catch(err => {\n                    transactionSpan.setStatus({\n                        code: api_1.SpanStatusCode.ERROR,\n                        message: err?.message,\n                    });\n                    transactionSpan.recordException(err);\n                    transactionSpan.end();\n                });\n                return transactionPromise;\n            };\n        };\n    }\n    _getSendBatchPatch() {\n        const instrumentation = this;\n        return (original) => {\n            return function sendBatch(...args) {\n                const batch = args[0];\n                const messages = batch.topicMessages || [];\n                const spans = [];\n                const pendingMetrics = [];\n                messages.forEach(topicMessage => {\n                    topicMessage.messages.forEach(message => {\n                        spans.push(instrumentation._startProducerSpan(topicMessage.topic, message));\n                        pendingMetrics.push(prepareCounter(instrumentation._sentMessages, 1, {\n                            [semconv_1.ATTR_MESSAGING_SYSTEM]: semconv_1.MESSAGING_SYSTEM_VALUE_KAFKA,\n                            [semconv_1.ATTR_MESSAGING_OPERATION_NAME]: 'send',\n                            [semconv_1.ATTR_MESSAGING_DESTINATION_NAME]: topicMessage.topic,\n                            ...(message.partition !== undefined\n                                ? {\n                                    [semconv_1.ATTR_MESSAGING_DESTINATION_PARTITION_ID]: String(message.partition),\n                                }\n                                : {}),\n                        }));\n                    });\n                });\n                const origSendResult = original.apply(this, args);\n                return instrumentation._endSpansOnPromise(spans, pendingMetrics, origSendResult);\n            };\n        };\n    }\n    _getSendPatch() {\n        const instrumentation = this;\n        return (original) => {\n            return function send(...args) {\n                const record = args[0];\n                const spans = record.messages.map(message => {\n                    return instrumentation._startProducerSpan(record.topic, message);\n                });\n                const pendingMetrics = record.messages.map(m => prepareCounter(instrumentation._sentMessages, 1, {\n                    [semconv_1.ATTR_MESSAGING_SYSTEM]: semconv_1.MESSAGING_SYSTEM_VALUE_KAFKA,\n                    [semconv_1.ATTR_MESSAGING_OPERATION_NAME]: 'send',\n                    [semconv_1.ATTR_MESSAGING_DESTINATION_NAME]: record.topic,\n                    ...(m.partition !== undefined\n                        ? {\n                            [semconv_1.ATTR_MESSAGING_DESTINATION_PARTITION_ID]: String(m.partition),\n                        }\n                        : {}),\n                }));\n                const origSendResult = original.apply(this, args);\n                return instrumentation._endSpansOnPromise(spans, pendingMetrics, origSendResult);\n            };\n        };\n    }\n    _endSpansOnPromise(spans, pendingMetrics, sendPromise) {\n        return Promise.resolve(sendPromise)\n            .then(result => {\n            pendingMetrics.forEach(m => m());\n            return result;\n        })\n            .catch(reason => {\n            let errorMessage;\n            let errorType = semantic_conventions_1.ERROR_TYPE_VALUE_OTHER;\n            if (typeof reason === 'string' || reason === undefined) {\n                errorMessage = reason;\n            }\n            else if (typeof reason === 'object' &&\n                Object.prototype.hasOwnProperty.call(reason, 'message')) {\n                errorMessage = reason.message;\n                errorType = reason.constructor.name;\n            }\n            pendingMetrics.forEach(m => m(errorType));\n            spans.forEach(span => {\n                span.setAttribute(semantic_conventions_1.ATTR_ERROR_TYPE, errorType);\n                span.setStatus({\n                    code: api_1.SpanStatusCode.ERROR,\n                    message: errorMessage,\n                });\n            });\n            throw reason;\n        })\n            .finally(() => {\n            spans.forEach(span => span.end());\n        });\n    }\n    _startConsumerSpan({ topic, message, operationType, ctx, link, attributes, }) {\n        const operationName = operationType === semconv_1.MESSAGING_OPERATION_TYPE_VALUE_RECEIVE\n            ? 'poll' // for batch processing spans\n            : operationType; // for individual message processing spans\n        const span = this.tracer.startSpan(`${operationName} ${topic}`, {\n            kind: operationType === semconv_1.MESSAGING_OPERATION_TYPE_VALUE_RECEIVE\n                ? api_1.SpanKind.CLIENT\n                : api_1.SpanKind.CONSUMER,\n            attributes: {\n                ...attributes,\n                [semconv_1.ATTR_MESSAGING_SYSTEM]: semconv_1.MESSAGING_SYSTEM_VALUE_KAFKA,\n                [semconv_1.ATTR_MESSAGING_DESTINATION_NAME]: topic,\n                [semconv_1.ATTR_MESSAGING_OPERATION_TYPE]: operationType,\n                [semconv_1.ATTR_MESSAGING_OPERATION_NAME]: operationName,\n                [semconv_1.ATTR_MESSAGING_KAFKA_MESSAGE_KEY]: message?.key\n                    ? String(message.key)\n                    : undefined,\n                [semconv_1.ATTR_MESSAGING_KAFKA_MESSAGE_TOMBSTONE]: message?.key && message.value === null ? true : undefined,\n                [semconv_1.ATTR_MESSAGING_KAFKA_OFFSET]: message?.offset,\n            },\n            links: link ? [link] : [],\n        }, ctx);\n        const { consumerHook } = this.getConfig();\n        if (consumerHook && message) {\n            (0, instrumentation_1.safeExecuteInTheMiddle)(() => consumerHook(span, { topic, message }), e => {\n                if (e)\n                    this._diag.error('consumerHook error', e);\n            }, true);\n        }\n        return span;\n    }\n    _startProducerSpan(topic, message) {\n        const span = this.tracer.startSpan(`send ${topic}`, {\n            kind: api_1.SpanKind.PRODUCER,\n            attributes: {\n                [semconv_1.ATTR_MESSAGING_SYSTEM]: semconv_1.MESSAGING_SYSTEM_VALUE_KAFKA,\n                [semconv_1.ATTR_MESSAGING_DESTINATION_NAME]: topic,\n                [semconv_1.ATTR_MESSAGING_KAFKA_MESSAGE_KEY]: message.key\n                    ? String(message.key)\n                    : undefined,\n                [semconv_1.ATTR_MESSAGING_KAFKA_MESSAGE_TOMBSTONE]: message.key && message.value === null ? true : undefined,\n                [semconv_1.ATTR_MESSAGING_DESTINATION_PARTITION_ID]: message.partition !== undefined\n                    ? String(message.partition)\n                    : undefined,\n                [semconv_1.ATTR_MESSAGING_OPERATION_NAME]: 'send',\n                [semconv_1.ATTR_MESSAGING_OPERATION_TYPE]: semconv_1.MESSAGING_OPERATION_TYPE_VALUE_SEND,\n            },\n        });\n        message.headers = message.headers ?? {};\n        api_1.propagation.inject(api_1.trace.setSpan(api_1.context.active(), span), message.headers);\n        const { producerHook } = this.getConfig();\n        if (producerHook) {\n            (0, instrumentation_1.safeExecuteInTheMiddle)(() => producerHook(span, { topic, message }), e => {\n                if (e)\n                    this._diag.error('producerHook error', e);\n            }, true);\n        }\n        return span;\n    }\n}\nexports.KafkaJsInstrumentation = KafkaJsInstrumentation;\n//# sourceMappingURL=instrumentation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-kafkajs/build/src/instrumentation.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-kafkajs/build/src/internal-types.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-kafkajs/build/src/internal-types.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors, Aspecto\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EVENT_LISTENERS_SET = void 0;\nexports.EVENT_LISTENERS_SET = Symbol('opentelemetry.instrumentation.kafkajs.eventListenersSet');\n//# sourceMappingURL=internal-types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1rYWZrYWpzL2J1aWxkL3NyYy9pbnRlcm5hbC10eXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwyQkFBMkI7QUFDM0IsMkJBQTJCO0FBQzNCIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1rYWZrYWpzL2J1aWxkL3NyYy9pbnRlcm5hbC10eXBlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9ycywgQXNwZWN0b1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkVWRU5UX0xJU1RFTkVSU19TRVQgPSB2b2lkIDA7XG5leHBvcnRzLkVWRU5UX0xJU1RFTkVSU19TRVQgPSBTeW1ib2woJ29wZW50ZWxlbWV0cnkuaW5zdHJ1bWVudGF0aW9uLmthZmthanMuZXZlbnRMaXN0ZW5lcnNTZXQnKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGVybmFsLXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-kafkajs/build/src/internal-types.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-kafkajs/build/src/propagator.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-kafkajs/build/src/propagator.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.bufferTextMapGetter = void 0;\n/*\nsame as open telemetry's `defaultTextMapGetter`,\nbut also handle case where header is buffer,\nadding toString() to make sure string is returned\n*/\nexports.bufferTextMapGetter = {\n    get(carrier, key) {\n        if (!carrier) {\n            return undefined;\n        }\n        const keys = Object.keys(carrier);\n        for (const carrierKey of keys) {\n            if (carrierKey === key || carrierKey.toLowerCase() === key) {\n                return carrier[carrierKey]?.toString();\n            }\n        }\n        return undefined;\n    },\n    keys(carrier) {\n        return carrier ? Object.keys(carrier) : [];\n    },\n};\n//# sourceMappingURL=propagator.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1rYWZrYWpzL2J1aWxkL3NyYy9wcm9wYWdhdG9yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1rYWZrYWpzL2J1aWxkL3NyYy9wcm9wYWdhdG9yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5idWZmZXJUZXh0TWFwR2V0dGVyID0gdm9pZCAwO1xuLypcbnNhbWUgYXMgb3BlbiB0ZWxlbWV0cnkncyBgZGVmYXVsdFRleHRNYXBHZXR0ZXJgLFxuYnV0IGFsc28gaGFuZGxlIGNhc2Ugd2hlcmUgaGVhZGVyIGlzIGJ1ZmZlcixcbmFkZGluZyB0b1N0cmluZygpIHRvIG1ha2Ugc3VyZSBzdHJpbmcgaXMgcmV0dXJuZWRcbiovXG5leHBvcnRzLmJ1ZmZlclRleHRNYXBHZXR0ZXIgPSB7XG4gICAgZ2V0KGNhcnJpZXIsIGtleSkge1xuICAgICAgICBpZiAoIWNhcnJpZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGNhcnJpZXIpO1xuICAgICAgICBmb3IgKGNvbnN0IGNhcnJpZXJLZXkgb2Yga2V5cykge1xuICAgICAgICAgICAgaWYgKGNhcnJpZXJLZXkgPT09IGtleSB8fCBjYXJyaWVyS2V5LnRvTG93ZXJDYXNlKCkgPT09IGtleSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYXJyaWVyW2NhcnJpZXJLZXldPy50b1N0cmluZygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSxcbiAgICBrZXlzKGNhcnJpZXIpIHtcbiAgICAgICAgcmV0dXJuIGNhcnJpZXIgPyBPYmplY3Qua2V5cyhjYXJyaWVyKSA6IFtdO1xuICAgIH0sXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvcGFnYXRvci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-kafkajs/build/src/propagator.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-kafkajs/build/src/semconv.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-kafkajs/build/src/semconv.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.METRIC_MESSAGING_PROCESS_DURATION = exports.METRIC_MESSAGING_CLIENT_SENT_MESSAGES = exports.METRIC_MESSAGING_CLIENT_OPERATION_DURATION = exports.METRIC_MESSAGING_CLIENT_CONSUMED_MESSAGES = exports.MESSAGING_SYSTEM_VALUE_KAFKA = exports.MESSAGING_OPERATION_TYPE_VALUE_SEND = exports.MESSAGING_OPERATION_TYPE_VALUE_RECEIVE = exports.MESSAGING_OPERATION_TYPE_VALUE_PROCESS = exports.ATTR_MESSAGING_SYSTEM = exports.ATTR_MESSAGING_OPERATION_TYPE = exports.ATTR_MESSAGING_OPERATION_NAME = exports.ATTR_MESSAGING_KAFKA_OFFSET = exports.ATTR_MESSAGING_KAFKA_MESSAGE_TOMBSTONE = exports.ATTR_MESSAGING_KAFKA_MESSAGE_KEY = exports.ATTR_MESSAGING_DESTINATION_PARTITION_ID = exports.ATTR_MESSAGING_DESTINATION_NAME = exports.ATTR_MESSAGING_BATCH_MESSAGE_COUNT = void 0;\n/*\n * This file contains a copy of unstable semantic convention definitions\n * used by this package.\n * @see https://github.com/open-telemetry/opentelemetry-js/tree/main/semantic-conventions#unstable-semconv\n */\n/**\n * The number of messages sent, received, or processed in the scope of the batching operation.\n *\n * @example 0\n * @example 1\n * @example 2\n *\n * @note Instrumentations **SHOULD NOT** set `messaging.batch.message_count` on spans that operate with a single message. When a messaging client library supports both batch and single-message API for the same operation, instrumentations **SHOULD** use `messaging.batch.message_count` for batching APIs and **SHOULD NOT** use it for single-message APIs.\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexports.ATTR_MESSAGING_BATCH_MESSAGE_COUNT = 'messaging.batch.message_count';\n/**\n * The message destination name\n *\n * @example MyQueue\n * @example MyTopic\n *\n * @note Destination name **SHOULD** uniquely identify a specific queue, topic or other entity within the broker. If\n * the broker doesn't have such notion, the destination name **SHOULD** uniquely identify the broker.\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexports.ATTR_MESSAGING_DESTINATION_NAME = 'messaging.destination.name';\n/**\n * The identifier of the partition messages are sent to or received from, unique within the `messaging.destination.name`.\n *\n * @example \"1\"\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexports.ATTR_MESSAGING_DESTINATION_PARTITION_ID = 'messaging.destination.partition.id';\n/**\n * Message keys in Kafka are used for grouping alike messages to ensure they're processed on the same partition. They differ from `messaging.message.id` in that they're not unique. If the key is `null`, the attribute **MUST NOT** be set.\n *\n * @example \"myKey\"\n *\n * @note If the key type is not string, it's string representation has to be supplied for the attribute. If the key has no unambiguous, canonical string form, don't include its value.\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexports.ATTR_MESSAGING_KAFKA_MESSAGE_KEY = 'messaging.kafka.message.key';\n/**\n * A boolean that is true if the message is a tombstone.\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexports.ATTR_MESSAGING_KAFKA_MESSAGE_TOMBSTONE = 'messaging.kafka.message.tombstone';\n/**\n * The offset of a record in the corresponding Kafka partition.\n *\n * @example 42\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexports.ATTR_MESSAGING_KAFKA_OFFSET = 'messaging.kafka.offset';\n/**\n * The system-specific name of the messaging operation.\n *\n * @example ack\n * @example nack\n * @example send\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexports.ATTR_MESSAGING_OPERATION_NAME = 'messaging.operation.name';\n/**\n * A string identifying the type of the messaging operation.\n *\n * @note If a custom value is used, it **MUST** be of low cardinality.\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexports.ATTR_MESSAGING_OPERATION_TYPE = 'messaging.operation.type';\n/**\n * The messaging system as identified by the client instrumentation.\n *\n * @note The actual messaging system may differ from the one known by the client. For example, when using Kafka client libraries to communicate with Azure Event Hubs, the `messaging.system` is set to `kafka` based on the instrumentation's best knowledge.\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexports.ATTR_MESSAGING_SYSTEM = 'messaging.system';\n/**\n * Enum value \"process\" for attribute {@link ATTR_MESSAGING_OPERATION_TYPE}.\n */\nexports.MESSAGING_OPERATION_TYPE_VALUE_PROCESS = 'process';\n/**\n * Enum value \"receive\" for attribute {@link ATTR_MESSAGING_OPERATION_TYPE}.\n */\nexports.MESSAGING_OPERATION_TYPE_VALUE_RECEIVE = 'receive';\n/**\n * Enum value \"send\" for attribute {@link ATTR_MESSAGING_OPERATION_TYPE}.\n */\nexports.MESSAGING_OPERATION_TYPE_VALUE_SEND = 'send';\n/**\n * Enum value \"kafka\" for attribute {@link ATTR_MESSAGING_SYSTEM}.\n */\nexports.MESSAGING_SYSTEM_VALUE_KAFKA = 'kafka';\n/**\n * Number of messages that were delivered to the application.\n *\n * @note Records the number of messages pulled from the broker or number of messages dispatched to the application in push-based scenarios.\n * The metric **SHOULD** be reported once per message delivery. For example, if receiving and processing operations are both instrumented for a single message delivery, this counter is incremented when the message is received and not reported when it is processed.\n *\n * @experimental This metric is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexports.METRIC_MESSAGING_CLIENT_CONSUMED_MESSAGES = 'messaging.client.consumed.messages';\n/**\n * Duration of messaging operation initiated by a producer or consumer client.\n *\n * @note This metric **SHOULD NOT** be used to report processing duration - processing duration is reported in `messaging.process.duration` metric.\n *\n * @experimental This metric is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexports.METRIC_MESSAGING_CLIENT_OPERATION_DURATION = 'messaging.client.operation.duration';\n/**\n * Number of messages producer attempted to send to the broker.\n *\n * @note This metric **MUST NOT** count messages that were created but haven't yet been sent.\n *\n * @experimental This metric is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexports.METRIC_MESSAGING_CLIENT_SENT_MESSAGES = 'messaging.client.sent.messages';\n/**\n * Duration of processing operation.\n *\n * @note This metric **MUST** be reported for operations with `messaging.operation.type` that matches `process`.\n *\n * @experimental This metric is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexports.METRIC_MESSAGING_PROCESS_DURATION = 'messaging.process.duration';\n//# sourceMappingURL=semconv.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-kafkajs/build/src/semconv.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-kafkajs/build/src/version.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-kafkajs/build/src/version.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PACKAGE_NAME = exports.PACKAGE_VERSION = void 0;\n// this is autogenerated file, see scripts/version-update.js\nexports.PACKAGE_VERSION = '0.13.0';\nexports.PACKAGE_NAME = '@opentelemetry/instrumentation-kafkajs';\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1rYWZrYWpzL2J1aWxkL3NyYy92ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQixHQUFHLHVCQUF1QjtBQUM5QztBQUNBLHVCQUF1QjtBQUN2QixvQkFBb0I7QUFDcEIiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWthZmthanMvYnVpbGQvc3JjL3ZlcnNpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5QQUNLQUdFX05BTUUgPSBleHBvcnRzLlBBQ0tBR0VfVkVSU0lPTiA9IHZvaWQgMDtcbi8vIHRoaXMgaXMgYXV0b2dlbmVyYXRlZCBmaWxlLCBzZWUgc2NyaXB0cy92ZXJzaW9uLXVwZGF0ZS5qc1xuZXhwb3J0cy5QQUNLQUdFX1ZFUlNJT04gPSAnMC4xMy4wJztcbmV4cG9ydHMuUEFDS0FHRV9OQU1FID0gJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1rYWZrYWpzJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-kafkajs/build/src/version.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-knex/build/src/constants.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-knex/build/src/constants.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SUPPORTED_VERSIONS = exports.MODULE_NAME = void 0;\nexports.MODULE_NAME = 'knex';\nexports.SUPPORTED_VERSIONS = [\n    // use \"lib/execution\" for runner.js, \"lib\" for client.js as basepath, latest tested 0.95.6\n    '>=0.22.0 <4',\n    // use \"lib\" as basepath\n    '>=0.10.0 <0.18.0',\n    '>=0.19.0 <0.22.0',\n    // use \"src\" as basepath\n    '>=0.18.0 <0.19.0',\n];\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1rbmV4L2J1aWxkL3NyYy9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMEJBQTBCLEdBQUcsbUJBQW1CO0FBQ2hELG1CQUFtQjtBQUNuQiwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1rbmV4L2J1aWxkL3NyYy9jb25zdGFudHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TVVBQT1JURURfVkVSU0lPTlMgPSBleHBvcnRzLk1PRFVMRV9OQU1FID0gdm9pZCAwO1xuZXhwb3J0cy5NT0RVTEVfTkFNRSA9ICdrbmV4JztcbmV4cG9ydHMuU1VQUE9SVEVEX1ZFUlNJT05TID0gW1xuICAgIC8vIHVzZSBcImxpYi9leGVjdXRpb25cIiBmb3IgcnVubmVyLmpzLCBcImxpYlwiIGZvciBjbGllbnQuanMgYXMgYmFzZXBhdGgsIGxhdGVzdCB0ZXN0ZWQgMC45NS42XG4gICAgJz49MC4yMi4wIDw0JyxcbiAgICAvLyB1c2UgXCJsaWJcIiBhcyBiYXNlcGF0aFxuICAgICc+PTAuMTAuMCA8MC4xOC4wJyxcbiAgICAnPj0wLjE5LjAgPDAuMjIuMCcsXG4gICAgLy8gdXNlIFwic3JjXCIgYXMgYmFzZXBhdGhcbiAgICAnPj0wLjE4LjAgPDAuMTkuMCcsXG5dO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-knex/build/src/constants.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-knex/build/src/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-knex/build/src/index.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.KnexInstrumentation = void 0;\nvar instrumentation_1 = __webpack_require__(/*! ./instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-knex/build/src/instrumentation.js\");\nObject.defineProperty(exports, \"KnexInstrumentation\", ({ enumerable: true, get: function () { return instrumentation_1.KnexInstrumentation; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1rbmV4L2J1aWxkL3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwyQkFBMkI7QUFDM0Isd0JBQXdCLG1CQUFPLENBQUMsdUhBQW1CO0FBQ25ELHVEQUFzRCxFQUFFLHFDQUFxQyxpREFBaUQsRUFBQztBQUMvSSIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24ta25leC9idWlsZC9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5LbmV4SW5zdHJ1bWVudGF0aW9uID0gdm9pZCAwO1xudmFyIGluc3RydW1lbnRhdGlvbl8xID0gcmVxdWlyZShcIi4vaW5zdHJ1bWVudGF0aW9uXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiS25leEluc3RydW1lbnRhdGlvblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW5zdHJ1bWVudGF0aW9uXzEuS25leEluc3RydW1lbnRhdGlvbjsgfSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-knex/build/src/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-knex/build/src/instrumentation.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-knex/build/src/instrumentation.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = \"/monitoring\";globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.2\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.KnexInstrumentation = void 0;\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\n/** @knipignore */\nconst version_1 = __webpack_require__(/*! ./version */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-knex/build/src/version.js\");\nconst constants = __webpack_require__(/*! ./constants */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-knex/build/src/constants.js\");\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst utils = __webpack_require__(/*! ./utils */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-knex/build/src/utils.js\");\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst contextSymbol = Symbol('opentelemetry.instrumentation-knex.context');\nconst DEFAULT_CONFIG = {\n    maxQueryLength: 1022,\n    requireParentSpan: false,\n};\nclass KnexInstrumentation extends instrumentation_1.InstrumentationBase {\n    _semconvStability;\n    constructor(config = {}) {\n        super(version_1.PACKAGE_NAME, version_1.PACKAGE_VERSION, { ...DEFAULT_CONFIG, ...config });\n        this._semconvStability = (0, instrumentation_1.semconvStabilityFromStr)('database', process.env.OTEL_SEMCONV_STABILITY_OPT_IN);\n    }\n    setConfig(config = {}) {\n        super.setConfig({ ...DEFAULT_CONFIG, ...config });\n    }\n    init() {\n        const module = new instrumentation_1.InstrumentationNodeModuleDefinition(constants.MODULE_NAME, constants.SUPPORTED_VERSIONS);\n        module.files.push(this.getClientNodeModuleFileInstrumentation('src'), this.getClientNodeModuleFileInstrumentation('lib'), this.getRunnerNodeModuleFileInstrumentation('src'), this.getRunnerNodeModuleFileInstrumentation('lib'), this.getRunnerNodeModuleFileInstrumentation('lib/execution'));\n        return module;\n    }\n    getRunnerNodeModuleFileInstrumentation(basePath) {\n        return new instrumentation_1.InstrumentationNodeModuleFile(`knex/${basePath}/runner.js`, constants.SUPPORTED_VERSIONS, (Runner, moduleVersion) => {\n            this.ensureWrapped(Runner.prototype, 'query', this.createQueryWrapper(moduleVersion));\n            return Runner;\n        }, (Runner, moduleVersion) => {\n            this._unwrap(Runner.prototype, 'query');\n            return Runner;\n        });\n    }\n    getClientNodeModuleFileInstrumentation(basePath) {\n        return new instrumentation_1.InstrumentationNodeModuleFile(`knex/${basePath}/client.js`, constants.SUPPORTED_VERSIONS, (Client) => {\n            this.ensureWrapped(Client.prototype, 'queryBuilder', this.storeContext.bind(this));\n            this.ensureWrapped(Client.prototype, 'schemaBuilder', this.storeContext.bind(this));\n            this.ensureWrapped(Client.prototype, 'raw', this.storeContext.bind(this));\n            return Client;\n        }, (Client) => {\n            this._unwrap(Client.prototype, 'queryBuilder');\n            this._unwrap(Client.prototype, 'schemaBuilder');\n            this._unwrap(Client.prototype, 'raw');\n            return Client;\n        });\n    }\n    createQueryWrapper(moduleVersion) {\n        const instrumentation = this;\n        return function wrapQuery(original) {\n            return function wrapped_logging_method(query) {\n                const config = this.client.config;\n                const table = utils.extractTableName(this.builder);\n                // `method` actually refers to the knex API method - Not exactly \"operation\"\n                // in the spec sense, but matches most of the time.\n                const operation = query?.method;\n                const name = config?.connection?.filename || config?.connection?.database;\n                const { maxQueryLength } = instrumentation.getConfig();\n                const attributes = {\n                    'knex.version': moduleVersion,\n                };\n                const transport = config?.connection?.filename === ':memory:' ? 'inproc' : undefined;\n                if (instrumentation._semconvStability & instrumentation_1.SemconvStability.OLD) {\n                    Object.assign(attributes, {\n                        [semantic_conventions_1.SEMATTRS_DB_SYSTEM]: utils.mapSystem(config.client),\n                        [semantic_conventions_1.SEMATTRS_DB_SQL_TABLE]: table,\n                        [semantic_conventions_1.SEMATTRS_DB_OPERATION]: operation,\n                        [semantic_conventions_1.SEMATTRS_DB_USER]: config?.connection?.user,\n                        [semantic_conventions_1.SEMATTRS_DB_NAME]: name,\n                        [semantic_conventions_1.SEMATTRS_NET_PEER_NAME]: config?.connection?.host,\n                        [semantic_conventions_1.SEMATTRS_NET_PEER_PORT]: config?.connection?.port,\n                        [semantic_conventions_1.SEMATTRS_NET_TRANSPORT]: transport,\n                    });\n                }\n                if (instrumentation._semconvStability & instrumentation_1.SemconvStability.STABLE) {\n                    Object.assign(attributes, {\n                        [semantic_conventions_1.ATTR_DB_SYSTEM_NAME]: utils.mapSystem(config.client),\n                        [semantic_conventions_1.ATTR_DB_COLLECTION_NAME]: table,\n                        [semantic_conventions_1.ATTR_DB_OPERATION_NAME]: operation,\n                        [semantic_conventions_1.ATTR_DB_NAMESPACE]: name,\n                        [semantic_conventions_1.ATTR_SERVER_ADDRESS]: config?.connection?.host,\n                        [semantic_conventions_1.ATTR_SERVER_PORT]: config?.connection?.port,\n                    });\n                }\n                if (maxQueryLength) {\n                    // filters both undefined and 0\n                    const queryText = utils.limitLength(query?.sql, maxQueryLength);\n                    if (instrumentation._semconvStability & instrumentation_1.SemconvStability.STABLE) {\n                        attributes[semantic_conventions_1.ATTR_DB_QUERY_TEXT] = queryText;\n                    }\n                    if (instrumentation._semconvStability & instrumentation_1.SemconvStability.OLD) {\n                        attributes[semantic_conventions_1.SEMATTRS_DB_STATEMENT] = queryText;\n                    }\n                }\n                const parentContext = this.builder[contextSymbol] || api.context.active();\n                const parentSpan = api.trace.getSpan(parentContext);\n                const hasActiveParent = parentSpan && api.trace.isSpanContextValid(parentSpan.spanContext());\n                if (instrumentation._config.requireParentSpan && !hasActiveParent) {\n                    return original.bind(this)(...arguments);\n                }\n                const span = instrumentation.tracer.startSpan(utils.getName(name, operation, table), {\n                    kind: api.SpanKind.CLIENT,\n                    attributes,\n                }, parentContext);\n                const spanContext = api.trace.setSpan(api.context.active(), span);\n                return api.context\n                    .with(spanContext, original, this, ...arguments)\n                    .then((result) => {\n                    span.end();\n                    return result;\n                })\n                    .catch((err) => {\n                    // knex adds full query with all the binding values to the message,\n                    // we want to undo that without changing the original error\n                    const formatter = utils.getFormatter(this);\n                    const fullQuery = formatter(query.sql, query.bindings || []);\n                    const message = err.message.replace(fullQuery + ' - ', '');\n                    const exc = utils.otelExceptionFromKnexError(err, message);\n                    span.recordException(exc);\n                    span.setStatus({ code: api.SpanStatusCode.ERROR, message });\n                    span.end();\n                    throw err;\n                });\n            };\n        };\n    }\n    storeContext(original) {\n        return function wrapped_logging_method() {\n            const builder = original.apply(this, arguments);\n            // Builder is a custom promise type and when awaited it fails to propagate context.\n            // We store the parent context at the moment of initiating the builder\n            // otherwise we'd have nothing to attach the span as a child for in `query`.\n            Object.defineProperty(builder, contextSymbol, {\n                value: api.context.active(),\n            });\n            return builder;\n        };\n    }\n    ensureWrapped(obj, methodName, wrapper) {\n        if ((0, instrumentation_1.isWrapped)(obj[methodName])) {\n            this._unwrap(obj, methodName);\n        }\n        this._wrap(obj, methodName, wrapper);\n    }\n}\nexports.KnexInstrumentation = KnexInstrumentation;\n//# sourceMappingURL=instrumentation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-knex/build/src/instrumentation.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-knex/build/src/semconv.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-knex/build/src/semconv.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DB_SYSTEM_NAME_VALUE_SQLITE = void 0;\n/*\n * This file contains a copy of unstable semantic convention definitions\n * used by this package.\n * @see https://github.com/open-telemetry/opentelemetry-js/tree/main/semantic-conventions#unstable-semconv\n */\n/**\n * Enum value \"sqlite\" for attribute {@link ATTR_DB_SYSTEM_NAME}.\n */\nexports.DB_SYSTEM_NAME_VALUE_SQLITE = 'sqlite';\n//# sourceMappingURL=semconv.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1rbmV4L2J1aWxkL3NyYy9zZW1jb252LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsMEJBQTBCO0FBQ2hFO0FBQ0EsbUNBQW1DO0FBQ25DIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1rbmV4L2J1aWxkL3NyYy9zZW1jb252LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuREJfU1lTVEVNX05BTUVfVkFMVUVfU1FMSVRFID0gdm9pZCAwO1xuLypcbiAqIFRoaXMgZmlsZSBjb250YWlucyBhIGNvcHkgb2YgdW5zdGFibGUgc2VtYW50aWMgY29udmVudGlvbiBkZWZpbml0aW9uc1xuICogdXNlZCBieSB0aGlzIHBhY2thZ2UuXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9vcGVuLXRlbGVtZXRyeS9vcGVudGVsZW1ldHJ5LWpzL3RyZWUvbWFpbi9zZW1hbnRpYy1jb252ZW50aW9ucyN1bnN0YWJsZS1zZW1jb252XG4gKi9cbi8qKlxuICogRW51bSB2YWx1ZSBcInNxbGl0ZVwiIGZvciBhdHRyaWJ1dGUge0BsaW5rIEFUVFJfREJfU1lTVEVNX05BTUV9LlxuICovXG5leHBvcnRzLkRCX1NZU1RFTV9OQU1FX1ZBTFVFX1NRTElURSA9ICdzcWxpdGUnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VtY29udi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-knex/build/src/semconv.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-knex/build/src/utils.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-knex/build/src/utils.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.extractTableName = exports.limitLength = exports.getName = exports.mapSystem = exports.otelExceptionFromKnexError = exports.getFormatter = void 0;\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst semconv_1 = __webpack_require__(/*! ./semconv */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-knex/build/src/semconv.js\");\nconst getFormatter = (runner) => {\n    if (runner) {\n        if (runner.client) {\n            if (runner.client._formatQuery) {\n                return runner.client._formatQuery.bind(runner.client);\n            }\n            else if (runner.client.SqlString) {\n                return runner.client.SqlString.format.bind(runner.client.SqlString);\n            }\n        }\n        if (runner.builder) {\n            return runner.builder.toString.bind(runner.builder);\n        }\n    }\n    return () => '<noop formatter>';\n};\nexports.getFormatter = getFormatter;\nfunction otelExceptionFromKnexError(err, message) {\n    if (!(err && err instanceof Error)) {\n        return err;\n    }\n    return {\n        message,\n        code: err.code,\n        stack: err.stack,\n        name: err.name,\n    };\n}\nexports.otelExceptionFromKnexError = otelExceptionFromKnexError;\nconst systemMap = new Map([\n    ['sqlite3', semconv_1.DB_SYSTEM_NAME_VALUE_SQLITE],\n    ['pg', semantic_conventions_1.DB_SYSTEM_NAME_VALUE_POSTGRESQL],\n]);\nconst mapSystem = (knexSystem) => {\n    return systemMap.get(knexSystem) || knexSystem;\n};\nexports.mapSystem = mapSystem;\nconst getName = (db, operation, table) => {\n    if (operation) {\n        if (table) {\n            return `${operation} ${db}.${table}`;\n        }\n        return `${operation} ${db}`;\n    }\n    return db;\n};\nexports.getName = getName;\nconst limitLength = (str, maxLength) => {\n    if (typeof str === 'string' &&\n        typeof maxLength === 'number' &&\n        0 < maxLength &&\n        maxLength < str.length) {\n        return str.substring(0, maxLength) + '..';\n    }\n    return str;\n};\nexports.limitLength = limitLength;\nconst extractTableName = (builder) => {\n    const table = builder?._single?.table;\n    if (typeof table === 'object') {\n        return (0, exports.extractTableName)(table);\n    }\n    return table;\n};\nexports.extractTableName = extractTableName;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1rbmV4L2J1aWxkL3NyYy91dGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0IsR0FBRyxtQkFBbUIsR0FBRyxlQUFlLEdBQUcsaUJBQWlCLEdBQUcsa0NBQWtDLEdBQUcsb0JBQW9CO0FBQ2hKLCtCQUErQixtQkFBTyxDQUFDLCtIQUFxQztBQUM1RSxrQkFBa0IsbUJBQU8sQ0FBQyx1R0FBVztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixXQUFXLEVBQUUsR0FBRyxHQUFHLE1BQU07QUFDL0M7QUFDQSxrQkFBa0IsV0FBVyxFQUFFLEdBQUc7QUFDbEM7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QiIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24ta25leC9idWlsZC9zcmMvdXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5leHRyYWN0VGFibGVOYW1lID0gZXhwb3J0cy5saW1pdExlbmd0aCA9IGV4cG9ydHMuZ2V0TmFtZSA9IGV4cG9ydHMubWFwU3lzdGVtID0gZXhwb3J0cy5vdGVsRXhjZXB0aW9uRnJvbUtuZXhFcnJvciA9IGV4cG9ydHMuZ2V0Rm9ybWF0dGVyID0gdm9pZCAwO1xuY29uc3Qgc2VtYW50aWNfY29udmVudGlvbnNfMSA9IHJlcXVpcmUoXCJAb3BlbnRlbGVtZXRyeS9zZW1hbnRpYy1jb252ZW50aW9uc1wiKTtcbmNvbnN0IHNlbWNvbnZfMSA9IHJlcXVpcmUoXCIuL3NlbWNvbnZcIik7XG5jb25zdCBnZXRGb3JtYXR0ZXIgPSAocnVubmVyKSA9PiB7XG4gICAgaWYgKHJ1bm5lcikge1xuICAgICAgICBpZiAocnVubmVyLmNsaWVudCkge1xuICAgICAgICAgICAgaWYgKHJ1bm5lci5jbGllbnQuX2Zvcm1hdFF1ZXJ5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJ1bm5lci5jbGllbnQuX2Zvcm1hdFF1ZXJ5LmJpbmQocnVubmVyLmNsaWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChydW5uZXIuY2xpZW50LlNxbFN0cmluZykge1xuICAgICAgICAgICAgICAgIHJldHVybiBydW5uZXIuY2xpZW50LlNxbFN0cmluZy5mb3JtYXQuYmluZChydW5uZXIuY2xpZW50LlNxbFN0cmluZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJ1bm5lci5idWlsZGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gcnVubmVyLmJ1aWxkZXIudG9TdHJpbmcuYmluZChydW5uZXIuYnVpbGRlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICgpID0+ICc8bm9vcCBmb3JtYXR0ZXI+Jztcbn07XG5leHBvcnRzLmdldEZvcm1hdHRlciA9IGdldEZvcm1hdHRlcjtcbmZ1bmN0aW9uIG90ZWxFeGNlcHRpb25Gcm9tS25leEVycm9yKGVyciwgbWVzc2FnZSkge1xuICAgIGlmICghKGVyciAmJiBlcnIgaW5zdGFuY2VvZiBFcnJvcikpIHtcbiAgICAgICAgcmV0dXJuIGVycjtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgY29kZTogZXJyLmNvZGUsXG4gICAgICAgIHN0YWNrOiBlcnIuc3RhY2ssXG4gICAgICAgIG5hbWU6IGVyci5uYW1lLFxuICAgIH07XG59XG5leHBvcnRzLm90ZWxFeGNlcHRpb25Gcm9tS25leEVycm9yID0gb3RlbEV4Y2VwdGlvbkZyb21LbmV4RXJyb3I7XG5jb25zdCBzeXN0ZW1NYXAgPSBuZXcgTWFwKFtcbiAgICBbJ3NxbGl0ZTMnLCBzZW1jb252XzEuREJfU1lTVEVNX05BTUVfVkFMVUVfU1FMSVRFXSxcbiAgICBbJ3BnJywgc2VtYW50aWNfY29udmVudGlvbnNfMS5EQl9TWVNURU1fTkFNRV9WQUxVRV9QT1NUR1JFU1FMXSxcbl0pO1xuY29uc3QgbWFwU3lzdGVtID0gKGtuZXhTeXN0ZW0pID0+IHtcbiAgICByZXR1cm4gc3lzdGVtTWFwLmdldChrbmV4U3lzdGVtKSB8fCBrbmV4U3lzdGVtO1xufTtcbmV4cG9ydHMubWFwU3lzdGVtID0gbWFwU3lzdGVtO1xuY29uc3QgZ2V0TmFtZSA9IChkYiwgb3BlcmF0aW9uLCB0YWJsZSkgPT4ge1xuICAgIGlmIChvcGVyYXRpb24pIHtcbiAgICAgICAgaWYgKHRhYmxlKSB7XG4gICAgICAgICAgICByZXR1cm4gYCR7b3BlcmF0aW9ufSAke2RifS4ke3RhYmxlfWA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGAke29wZXJhdGlvbn0gJHtkYn1gO1xuICAgIH1cbiAgICByZXR1cm4gZGI7XG59O1xuZXhwb3J0cy5nZXROYW1lID0gZ2V0TmFtZTtcbmNvbnN0IGxpbWl0TGVuZ3RoID0gKHN0ciwgbWF4TGVuZ3RoKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnICYmXG4gICAgICAgIHR5cGVvZiBtYXhMZW5ndGggPT09ICdudW1iZXInICYmXG4gICAgICAgIDAgPCBtYXhMZW5ndGggJiZcbiAgICAgICAgbWF4TGVuZ3RoIDwgc3RyLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gc3RyLnN1YnN0cmluZygwLCBtYXhMZW5ndGgpICsgJy4uJztcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbn07XG5leHBvcnRzLmxpbWl0TGVuZ3RoID0gbGltaXRMZW5ndGg7XG5jb25zdCBleHRyYWN0VGFibGVOYW1lID0gKGJ1aWxkZXIpID0+IHtcbiAgICBjb25zdCB0YWJsZSA9IGJ1aWxkZXI/Ll9zaW5nbGU/LnRhYmxlO1xuICAgIGlmICh0eXBlb2YgdGFibGUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiAoMCwgZXhwb3J0cy5leHRyYWN0VGFibGVOYW1lKSh0YWJsZSk7XG4gICAgfVxuICAgIHJldHVybiB0YWJsZTtcbn07XG5leHBvcnRzLmV4dHJhY3RUYWJsZU5hbWUgPSBleHRyYWN0VGFibGVOYW1lO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-knex/build/src/utils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-knex/build/src/version.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-knex/build/src/version.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PACKAGE_NAME = exports.PACKAGE_VERSION = void 0;\n// this is autogenerated file, see scripts/version-update.js\nexports.PACKAGE_VERSION = '0.48.0';\nexports.PACKAGE_NAME = '@opentelemetry/instrumentation-knex';\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1rbmV4L2J1aWxkL3NyYy92ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQixHQUFHLHVCQUF1QjtBQUM5QztBQUNBLHVCQUF1QjtBQUN2QixvQkFBb0I7QUFDcEIiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWtuZXgvYnVpbGQvc3JjL3ZlcnNpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5QQUNLQUdFX05BTUUgPSBleHBvcnRzLlBBQ0tBR0VfVkVSU0lPTiA9IHZvaWQgMDtcbi8vIHRoaXMgaXMgYXV0b2dlbmVyYXRlZCBmaWxlLCBzZWUgc2NyaXB0cy92ZXJzaW9uLXVwZGF0ZS5qc1xuZXhwb3J0cy5QQUNLQUdFX1ZFUlNJT04gPSAnMC40OC4wJztcbmV4cG9ydHMuUEFDS0FHRV9OQU1FID0gJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1rbmV4Jztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-knex/build/src/version.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-koa/build/src/enums/AttributeNames.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-koa/build/src/enums/AttributeNames.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AttributeNames = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar AttributeNames;\n(function (AttributeNames) {\n    AttributeNames[\"KOA_TYPE\"] = \"koa.type\";\n    AttributeNames[\"KOA_NAME\"] = \"koa.name\";\n})(AttributeNames = exports.AttributeNames || (exports.AttributeNames = {}));\n//# sourceMappingURL=AttributeNames.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1rb2EvYnVpbGQvc3JjL2VudW1zL0F0dHJpYnV0ZU5hbWVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsOENBQThDLHNCQUFzQixLQUFLO0FBQzFFIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1rb2EvYnVpbGQvc3JjL2VudW1zL0F0dHJpYnV0ZU5hbWVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BdHRyaWJ1dGVOYW1lcyA9IHZvaWQgMDtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG52YXIgQXR0cmlidXRlTmFtZXM7XG4oZnVuY3Rpb24gKEF0dHJpYnV0ZU5hbWVzKSB7XG4gICAgQXR0cmlidXRlTmFtZXNbXCJLT0FfVFlQRVwiXSA9IFwia29hLnR5cGVcIjtcbiAgICBBdHRyaWJ1dGVOYW1lc1tcIktPQV9OQU1FXCJdID0gXCJrb2EubmFtZVwiO1xufSkoQXR0cmlidXRlTmFtZXMgPSBleHBvcnRzLkF0dHJpYnV0ZU5hbWVzIHx8IChleHBvcnRzLkF0dHJpYnV0ZU5hbWVzID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUF0dHJpYnV0ZU5hbWVzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-koa/build/src/enums/AttributeNames.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-koa/build/src/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-koa/build/src/index.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.KoaLayerType = exports.AttributeNames = exports.KoaInstrumentation = void 0;\nvar instrumentation_1 = __webpack_require__(/*! ./instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-koa/build/src/instrumentation.js\");\nObject.defineProperty(exports, \"KoaInstrumentation\", ({ enumerable: true, get: function () { return instrumentation_1.KoaInstrumentation; } }));\nvar AttributeNames_1 = __webpack_require__(/*! ./enums/AttributeNames */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-koa/build/src/enums/AttributeNames.js\");\nObject.defineProperty(exports, \"AttributeNames\", ({ enumerable: true, get: function () { return AttributeNames_1.AttributeNames; } }));\nvar types_1 = __webpack_require__(/*! ./types */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-koa/build/src/types.js\");\nObject.defineProperty(exports, \"KoaLayerType\", ({ enumerable: true, get: function () { return types_1.KoaLayerType; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1rb2EvYnVpbGQvc3JjL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQixHQUFHLHNCQUFzQixHQUFHLDBCQUEwQjtBQUMxRSx3QkFBd0IsbUJBQU8sQ0FBQyxzSEFBbUI7QUFDbkQsc0RBQXFELEVBQUUscUNBQXFDLGdEQUFnRCxFQUFDO0FBQzdJLHVCQUF1QixtQkFBTyxDQUFDLGdJQUF3QjtBQUN2RCxrREFBaUQsRUFBRSxxQ0FBcUMsMkNBQTJDLEVBQUM7QUFDcEksY0FBYyxtQkFBTyxDQUFDLGtHQUFTO0FBQy9CLGdEQUErQyxFQUFFLHFDQUFxQyxnQ0FBZ0MsRUFBQztBQUN2SCIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24ta29hL2J1aWxkL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLktvYUxheWVyVHlwZSA9IGV4cG9ydHMuQXR0cmlidXRlTmFtZXMgPSBleHBvcnRzLktvYUluc3RydW1lbnRhdGlvbiA9IHZvaWQgMDtcbnZhciBpbnN0cnVtZW50YXRpb25fMSA9IHJlcXVpcmUoXCIuL2luc3RydW1lbnRhdGlvblwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIktvYUluc3RydW1lbnRhdGlvblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW5zdHJ1bWVudGF0aW9uXzEuS29hSW5zdHJ1bWVudGF0aW9uOyB9IH0pO1xudmFyIEF0dHJpYnV0ZU5hbWVzXzEgPSByZXF1aXJlKFwiLi9lbnVtcy9BdHRyaWJ1dGVOYW1lc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkF0dHJpYnV0ZU5hbWVzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBBdHRyaWJ1dGVOYW1lc18xLkF0dHJpYnV0ZU5hbWVzOyB9IH0pO1xudmFyIHR5cGVzXzEgPSByZXF1aXJlKFwiLi90eXBlc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIktvYUxheWVyVHlwZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdHlwZXNfMS5Lb2FMYXllclR5cGU7IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-koa/build/src/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-koa/build/src/instrumentation.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-koa/build/src/instrumentation.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = \"/monitoring\";globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.2\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.KoaInstrumentation = void 0;\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-koa/build/src/types.js\");\n/** @knipignore */\nconst version_1 = __webpack_require__(/*! ./version */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-koa/build/src/version.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-koa/build/src/utils.js\");\nconst core_1 = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/index.js\");\nconst internal_types_1 = __webpack_require__(/*! ./internal-types */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-koa/build/src/internal-types.js\");\n/** Koa instrumentation for OpenTelemetry */\nclass KoaInstrumentation extends instrumentation_1.InstrumentationBase {\n    constructor(config = {}) {\n        super(version_1.PACKAGE_NAME, version_1.PACKAGE_VERSION, config);\n    }\n    init() {\n        return new instrumentation_1.InstrumentationNodeModuleDefinition('koa', ['>=2.0.0 <3'], (module) => {\n            const moduleExports = module[Symbol.toStringTag] === 'Module'\n                ? module.default // ESM\n                : module; // CommonJS\n            if (moduleExports == null) {\n                return moduleExports;\n            }\n            if ((0, instrumentation_1.isWrapped)(moduleExports.prototype.use)) {\n                this._unwrap(moduleExports.prototype, 'use');\n            }\n            this._wrap(moduleExports.prototype, 'use', this._getKoaUsePatch.bind(this));\n            return module;\n        }, (module) => {\n            const moduleExports = module[Symbol.toStringTag] === 'Module'\n                ? module.default // ESM\n                : module; // CommonJS\n            if ((0, instrumentation_1.isWrapped)(moduleExports.prototype.use)) {\n                this._unwrap(moduleExports.prototype, 'use');\n            }\n        });\n    }\n    /**\n     * Patches the Koa.use function in order to instrument each original\n     * middleware layer which is introduced\n     * @param {KoaMiddleware} middleware - the original middleware function\n     */\n    _getKoaUsePatch(original) {\n        const plugin = this;\n        return function use(middlewareFunction) {\n            let patchedFunction;\n            if (middlewareFunction.router) {\n                patchedFunction = plugin._patchRouterDispatch(middlewareFunction);\n            }\n            else {\n                patchedFunction = plugin._patchLayer(middlewareFunction, false);\n            }\n            return original.apply(this, [patchedFunction]);\n        };\n    }\n    /**\n     * Patches the dispatch function used by @koa/router. This function\n     * goes through each routed middleware and adds instrumentation via a call\n     * to the @function _patchLayer function.\n     * @param {KoaMiddleware} dispatchLayer - the original dispatch function which dispatches\n     * routed middleware\n     */\n    _patchRouterDispatch(dispatchLayer) {\n        api.diag.debug('Patching @koa/router dispatch');\n        const router = dispatchLayer.router;\n        const routesStack = router?.stack ?? [];\n        for (const pathLayer of routesStack) {\n            const path = pathLayer.path;\n            const pathStack = pathLayer.stack;\n            for (let j = 0; j < pathStack.length; j++) {\n                const routedMiddleware = pathStack[j];\n                pathStack[j] = this._patchLayer(routedMiddleware, true, path);\n            }\n        }\n        return dispatchLayer;\n    }\n    /**\n     * Patches each individual @param middlewareLayer function in order to create the\n     * span and propagate context. It does not create spans when there is no parent span.\n     * @param {KoaMiddleware} middlewareLayer - the original middleware function.\n     * @param {boolean} isRouter - tracks whether the original middleware function\n     * was dispatched by the router originally\n     * @param {string?} layerPath - if present, provides additional data from the\n     * router about the routed path which the middleware is attached to\n     */\n    _patchLayer(middlewareLayer, isRouter, layerPath) {\n        const layerType = isRouter ? types_1.KoaLayerType.ROUTER : types_1.KoaLayerType.MIDDLEWARE;\n        // Skip patching layer if its ignored in the config\n        if (middlewareLayer[internal_types_1.kLayerPatched] === true ||\n            (0, utils_1.isLayerIgnored)(layerType, this.getConfig()))\n            return middlewareLayer;\n        if (middlewareLayer.constructor.name === 'GeneratorFunction' ||\n            middlewareLayer.constructor.name === 'AsyncGeneratorFunction') {\n            api.diag.debug('ignoring generator-based Koa middleware layer');\n            return middlewareLayer;\n        }\n        middlewareLayer[internal_types_1.kLayerPatched] = true;\n        api.diag.debug('patching Koa middleware layer');\n        return async (context, next) => {\n            const parent = api.trace.getSpan(api.context.active());\n            if (parent === undefined) {\n                return middlewareLayer(context, next);\n            }\n            const metadata = (0, utils_1.getMiddlewareMetadata)(context, middlewareLayer, isRouter, layerPath);\n            const span = this.tracer.startSpan(metadata.name, {\n                attributes: metadata.attributes,\n            });\n            const rpcMetadata = (0, core_1.getRPCMetadata)(api.context.active());\n            if (rpcMetadata?.type === core_1.RPCType.HTTP && context._matchedRoute) {\n                rpcMetadata.route = context._matchedRoute.toString();\n            }\n            const { requestHook } = this.getConfig();\n            if (requestHook) {\n                (0, instrumentation_1.safeExecuteInTheMiddle)(() => requestHook(span, {\n                    context,\n                    middlewareLayer,\n                    layerType,\n                }), e => {\n                    if (e) {\n                        api.diag.error('koa instrumentation: request hook failed', e);\n                    }\n                }, true);\n            }\n            const newContext = api.trace.setSpan(api.context.active(), span);\n            return api.context.with(newContext, async () => {\n                try {\n                    return await middlewareLayer(context, next);\n                }\n                catch (err) {\n                    span.recordException(err);\n                    throw err;\n                }\n                finally {\n                    span.end();\n                }\n            });\n        };\n    }\n}\nexports.KoaInstrumentation = KoaInstrumentation;\n//# sourceMappingURL=instrumentation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-koa/build/src/instrumentation.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-koa/build/src/internal-types.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-koa/build/src/internal-types.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.kLayerPatched = void 0;\n/**\n * This symbol is used to mark a Koa layer as being already instrumented\n * since its possible to use a given layer multiple times (ex: middlewares)\n */\nexports.kLayerPatched = Symbol('koa-layer-patched');\n//# sourceMappingURL=internal-types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1rb2EvYnVpbGQvc3JjL2ludGVybmFsLXR5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQiIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24ta29hL2J1aWxkL3NyYy9pbnRlcm5hbC10eXBlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMua0xheWVyUGF0Y2hlZCA9IHZvaWQgMDtcbi8qKlxuICogVGhpcyBzeW1ib2wgaXMgdXNlZCB0byBtYXJrIGEgS29hIGxheWVyIGFzIGJlaW5nIGFscmVhZHkgaW5zdHJ1bWVudGVkXG4gKiBzaW5jZSBpdHMgcG9zc2libGUgdG8gdXNlIGEgZ2l2ZW4gbGF5ZXIgbXVsdGlwbGUgdGltZXMgKGV4OiBtaWRkbGV3YXJlcylcbiAqL1xuZXhwb3J0cy5rTGF5ZXJQYXRjaGVkID0gU3ltYm9sKCdrb2EtbGF5ZXItcGF0Y2hlZCcpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50ZXJuYWwtdHlwZXMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-koa/build/src/internal-types.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-koa/build/src/types.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-koa/build/src/types.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.KoaLayerType = void 0;\nvar KoaLayerType;\n(function (KoaLayerType) {\n    KoaLayerType[\"ROUTER\"] = \"router\";\n    KoaLayerType[\"MIDDLEWARE\"] = \"middleware\";\n})(KoaLayerType = exports.KoaLayerType || (exports.KoaLayerType = {}));\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1rb2EvYnVpbGQvc3JjL3R5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsMENBQTBDLG9CQUFvQixLQUFLO0FBQ3BFIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1rb2EvYnVpbGQvc3JjL3R5cGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Lb2FMYXllclR5cGUgPSB2b2lkIDA7XG52YXIgS29hTGF5ZXJUeXBlO1xuKGZ1bmN0aW9uIChLb2FMYXllclR5cGUpIHtcbiAgICBLb2FMYXllclR5cGVbXCJST1VURVJcIl0gPSBcInJvdXRlclwiO1xuICAgIEtvYUxheWVyVHlwZVtcIk1JRERMRVdBUkVcIl0gPSBcIm1pZGRsZXdhcmVcIjtcbn0pKEtvYUxheWVyVHlwZSA9IGV4cG9ydHMuS29hTGF5ZXJUeXBlIHx8IChleHBvcnRzLktvYUxheWVyVHlwZSA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-koa/build/src/types.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-koa/build/src/utils.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-koa/build/src/utils.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isLayerIgnored = exports.getMiddlewareMetadata = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst types_1 = __webpack_require__(/*! ./types */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-koa/build/src/types.js\");\nconst AttributeNames_1 = __webpack_require__(/*! ./enums/AttributeNames */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-koa/build/src/enums/AttributeNames.js\");\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst getMiddlewareMetadata = (context, layer, isRouter, layerPath) => {\n    if (isRouter) {\n        return {\n            attributes: {\n                [AttributeNames_1.AttributeNames.KOA_NAME]: layerPath?.toString(),\n                [AttributeNames_1.AttributeNames.KOA_TYPE]: types_1.KoaLayerType.ROUTER,\n                [semantic_conventions_1.SEMATTRS_HTTP_ROUTE]: layerPath?.toString(),\n            },\n            name: context._matchedRouteName || `router - ${layerPath}`,\n        };\n    }\n    else {\n        return {\n            attributes: {\n                [AttributeNames_1.AttributeNames.KOA_NAME]: layer.name ?? 'middleware',\n                [AttributeNames_1.AttributeNames.KOA_TYPE]: types_1.KoaLayerType.MIDDLEWARE,\n            },\n            name: `middleware - ${layer.name}`,\n        };\n    }\n};\nexports.getMiddlewareMetadata = getMiddlewareMetadata;\n/**\n * Check whether the given request is ignored by configuration\n * @param [list] List of ignore patterns\n * @param [onException] callback for doing something when an exception has\n *     occurred\n */\nconst isLayerIgnored = (type, config) => {\n    return !!(Array.isArray(config?.ignoreLayersType) &&\n        config?.ignoreLayersType?.includes(type));\n};\nexports.isLayerIgnored = isLayerIgnored;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1rb2EvYnVpbGQvc3JjL3V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNCQUFzQixHQUFHLDZCQUE2QjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsbUJBQU8sQ0FBQyxrR0FBUztBQUNqQyx5QkFBeUIsbUJBQU8sQ0FBQyxnSUFBd0I7QUFDekQsK0JBQStCLG1CQUFPLENBQUMsK0hBQXFDO0FBQzVFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLDJEQUEyRCxVQUFVO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLGtDQUFrQyxXQUFXO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QiIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24ta29hL2J1aWxkL3NyYy91dGlscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNMYXllcklnbm9yZWQgPSBleHBvcnRzLmdldE1pZGRsZXdhcmVNZXRhZGF0YSA9IHZvaWQgMDtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XG5jb25zdCBBdHRyaWJ1dGVOYW1lc18xID0gcmVxdWlyZShcIi4vZW51bXMvQXR0cmlidXRlTmFtZXNcIik7XG5jb25zdCBzZW1hbnRpY19jb252ZW50aW9uc18xID0gcmVxdWlyZShcIkBvcGVudGVsZW1ldHJ5L3NlbWFudGljLWNvbnZlbnRpb25zXCIpO1xuY29uc3QgZ2V0TWlkZGxld2FyZU1ldGFkYXRhID0gKGNvbnRleHQsIGxheWVyLCBpc1JvdXRlciwgbGF5ZXJQYXRoKSA9PiB7XG4gICAgaWYgKGlzUm91dGVyKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgICAgICAgW0F0dHJpYnV0ZU5hbWVzXzEuQXR0cmlidXRlTmFtZXMuS09BX05BTUVdOiBsYXllclBhdGg/LnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgW0F0dHJpYnV0ZU5hbWVzXzEuQXR0cmlidXRlTmFtZXMuS09BX1RZUEVdOiB0eXBlc18xLktvYUxheWVyVHlwZS5ST1VURVIsXG4gICAgICAgICAgICAgICAgW3NlbWFudGljX2NvbnZlbnRpb25zXzEuU0VNQVRUUlNfSFRUUF9ST1VURV06IGxheWVyUGF0aD8udG9TdHJpbmcoKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuYW1lOiBjb250ZXh0Ll9tYXRjaGVkUm91dGVOYW1lIHx8IGByb3V0ZXIgLSAke2xheWVyUGF0aH1gLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgICAgICBbQXR0cmlidXRlTmFtZXNfMS5BdHRyaWJ1dGVOYW1lcy5LT0FfTkFNRV06IGxheWVyLm5hbWUgPz8gJ21pZGRsZXdhcmUnLFxuICAgICAgICAgICAgICAgIFtBdHRyaWJ1dGVOYW1lc18xLkF0dHJpYnV0ZU5hbWVzLktPQV9UWVBFXTogdHlwZXNfMS5Lb2FMYXllclR5cGUuTUlERExFV0FSRSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuYW1lOiBgbWlkZGxld2FyZSAtICR7bGF5ZXIubmFtZX1gLFxuICAgICAgICB9O1xuICAgIH1cbn07XG5leHBvcnRzLmdldE1pZGRsZXdhcmVNZXRhZGF0YSA9IGdldE1pZGRsZXdhcmVNZXRhZGF0YTtcbi8qKlxuICogQ2hlY2sgd2hldGhlciB0aGUgZ2l2ZW4gcmVxdWVzdCBpcyBpZ25vcmVkIGJ5IGNvbmZpZ3VyYXRpb25cbiAqIEBwYXJhbSBbbGlzdF0gTGlzdCBvZiBpZ25vcmUgcGF0dGVybnNcbiAqIEBwYXJhbSBbb25FeGNlcHRpb25dIGNhbGxiYWNrIGZvciBkb2luZyBzb21ldGhpbmcgd2hlbiBhbiBleGNlcHRpb24gaGFzXG4gKiAgICAgb2NjdXJyZWRcbiAqL1xuY29uc3QgaXNMYXllcklnbm9yZWQgPSAodHlwZSwgY29uZmlnKSA9PiB7XG4gICAgcmV0dXJuICEhKEFycmF5LmlzQXJyYXkoY29uZmlnPy5pZ25vcmVMYXllcnNUeXBlKSAmJlxuICAgICAgICBjb25maWc/Lmlnbm9yZUxheWVyc1R5cGU/LmluY2x1ZGVzKHR5cGUpKTtcbn07XG5leHBvcnRzLmlzTGF5ZXJJZ25vcmVkID0gaXNMYXllcklnbm9yZWQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-koa/build/src/utils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-koa/build/src/version.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-koa/build/src/version.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PACKAGE_NAME = exports.PACKAGE_VERSION = void 0;\n// this is autogenerated file, see scripts/version-update.js\nexports.PACKAGE_VERSION = '0.51.0';\nexports.PACKAGE_NAME = '@opentelemetry/instrumentation-koa';\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1rb2EvYnVpbGQvc3JjL3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0JBQW9CLEdBQUcsdUJBQXVCO0FBQzlDO0FBQ0EsdUJBQXVCO0FBQ3ZCLG9CQUFvQjtBQUNwQiIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24ta29hL2J1aWxkL3NyYy92ZXJzaW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUEFDS0FHRV9OQU1FID0gZXhwb3J0cy5QQUNLQUdFX1ZFUlNJT04gPSB2b2lkIDA7XG4vLyB0aGlzIGlzIGF1dG9nZW5lcmF0ZWQgZmlsZSwgc2VlIHNjcmlwdHMvdmVyc2lvbi11cGRhdGUuanNcbmV4cG9ydHMuUEFDS0FHRV9WRVJTSU9OID0gJzAuNTEuMCc7XG5leHBvcnRzLlBBQ0tBR0VfTkFNRSA9ICdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24ta29hJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-koa/build/src/version.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-lru-memoizer/build/src/index.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-lru-memoizer/build/src/index.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LruMemoizerInstrumentation = void 0;\nvar instrumentation_1 = __webpack_require__(/*! ./instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-lru-memoizer/build/src/instrumentation.js\");\nObject.defineProperty(exports, \"LruMemoizerInstrumentation\", ({ enumerable: true, get: function () { return instrumentation_1.LruMemoizerInstrumentation; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1scnUtbWVtb2l6ZXIvYnVpbGQvc3JjL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtDQUFrQztBQUNsQyx3QkFBd0IsbUJBQU8sQ0FBQywrSEFBbUI7QUFDbkQsOERBQTZELEVBQUUscUNBQXFDLHdEQUF3RCxFQUFDO0FBQzdKIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1scnUtbWVtb2l6ZXIvYnVpbGQvc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTHJ1TWVtb2l6ZXJJbnN0cnVtZW50YXRpb24gPSB2b2lkIDA7XG52YXIgaW5zdHJ1bWVudGF0aW9uXzEgPSByZXF1aXJlKFwiLi9pbnN0cnVtZW50YXRpb25cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJMcnVNZW1vaXplckluc3RydW1lbnRhdGlvblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW5zdHJ1bWVudGF0aW9uXzEuTHJ1TWVtb2l6ZXJJbnN0cnVtZW50YXRpb247IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-lru-memoizer/build/src/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-lru-memoizer/build/src/instrumentation.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-lru-memoizer/build/src/instrumentation.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = \"/monitoring\";globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.2\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LruMemoizerInstrumentation = void 0;\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\n/** @knipignore */\nconst version_1 = __webpack_require__(/*! ./version */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-lru-memoizer/build/src/version.js\");\nclass LruMemoizerInstrumentation extends instrumentation_1.InstrumentationBase {\n    constructor(config = {}) {\n        super(version_1.PACKAGE_NAME, version_1.PACKAGE_VERSION, config);\n    }\n    init() {\n        return [\n            new instrumentation_1.InstrumentationNodeModuleDefinition('lru-memoizer', ['>=1.3 <3'], moduleExports => {\n                // moduleExports is a function which receives an options object,\n                // and returns a \"memoizer\" function upon invocation.\n                // We want to patch this \"memoizer's\" internal function\n                const asyncMemoizer = function () {\n                    // This following function is invoked every time the user wants to get a (possible) memoized value\n                    // We replace it with another function in which we bind the current context to the last argument (callback)\n                    const origMemoizer = moduleExports.apply(this, arguments);\n                    return function () {\n                        const modifiedArguments = [...arguments];\n                        // last argument is the callback\n                        const origCallback = modifiedArguments.pop();\n                        const callbackWithContext = typeof origCallback === 'function'\n                            ? api_1.context.bind(api_1.context.active(), origCallback)\n                            : origCallback;\n                        modifiedArguments.push(callbackWithContext);\n                        return origMemoizer.apply(this, modifiedArguments);\n                    };\n                };\n                // sync function preserves context, but we still need to export it\n                // as the lru-memoizer package does\n                asyncMemoizer.sync = moduleExports.sync;\n                return asyncMemoizer;\n            }, undefined // no need to disable as this instrumentation does not create any spans\n            ),\n        ];\n    }\n}\nexports.LruMemoizerInstrumentation = LruMemoizerInstrumentation;\n//# sourceMappingURL=instrumentation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1scnUtbWVtb2l6ZXIvYnVpbGQvc3JjL2luc3RydW1lbnRhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYSxDQUFDLHdEQUF3RCx5Q0FBeUMsMENBQTBDLDhDQUE4QztBQUN2TTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0NBQWtDO0FBQ2xDLGNBQWMsbUJBQU8sQ0FBQyw2RkFBb0I7QUFDMUMsMEJBQTBCLG1CQUFPLENBQUMscUhBQWdDO0FBQ2xFO0FBQ0Esa0JBQWtCLG1CQUFPLENBQUMsK0dBQVc7QUFDckM7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1scnUtbWVtb2l6ZXIvYnVpbGQvc3JjL2luc3RydW1lbnRhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjs7Z2xvYmFsVGhpc1tcIl9zZW50cnlSZXdyaXRlc1R1bm5lbFBhdGhcIl0gPSBcIi9tb25pdG9yaW5nXCI7Z2xvYmFsVGhpc1tcIlNFTlRSWV9SRUxFQVNFXCJdID0gdW5kZWZpbmVkO2dsb2JhbFRoaXNbXCJfc2VudHJ5QmFzZVBhdGhcIl0gPSB1bmRlZmluZWQ7Z2xvYmFsVGhpc1tcIl9zZW50cnlOZXh0SnNWZXJzaW9uXCJdID0gXCIxNS41LjJcIjtnbG9iYWxUaGlzW1wiX3NlbnRyeVJld3JpdGVGcmFtZXNEaXN0RGlyXCJdID0gXCIubmV4dFwiO1xuLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTHJ1TWVtb2l6ZXJJbnN0cnVtZW50YXRpb24gPSB2b2lkIDA7XG5jb25zdCBhcGlfMSA9IHJlcXVpcmUoXCJAb3BlbnRlbGVtZXRyeS9hcGlcIik7XG5jb25zdCBpbnN0cnVtZW50YXRpb25fMSA9IHJlcXVpcmUoXCJAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb25cIik7XG4vKiogQGtuaXBpZ25vcmUgKi9cbmNvbnN0IHZlcnNpb25fMSA9IHJlcXVpcmUoXCIuL3ZlcnNpb25cIik7XG5jbGFzcyBMcnVNZW1vaXplckluc3RydW1lbnRhdGlvbiBleHRlbmRzIGluc3RydW1lbnRhdGlvbl8xLkluc3RydW1lbnRhdGlvbkJhc2Uge1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKHZlcnNpb25fMS5QQUNLQUdFX05BTUUsIHZlcnNpb25fMS5QQUNLQUdFX1ZFUlNJT04sIGNvbmZpZyk7XG4gICAgfVxuICAgIGluaXQoKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBuZXcgaW5zdHJ1bWVudGF0aW9uXzEuSW5zdHJ1bWVudGF0aW9uTm9kZU1vZHVsZURlZmluaXRpb24oJ2xydS1tZW1vaXplcicsIFsnPj0xLjMgPDMnXSwgbW9kdWxlRXhwb3J0cyA9PiB7XG4gICAgICAgICAgICAgICAgLy8gbW9kdWxlRXhwb3J0cyBpcyBhIGZ1bmN0aW9uIHdoaWNoIHJlY2VpdmVzIGFuIG9wdGlvbnMgb2JqZWN0LFxuICAgICAgICAgICAgICAgIC8vIGFuZCByZXR1cm5zIGEgXCJtZW1vaXplclwiIGZ1bmN0aW9uIHVwb24gaW52b2NhdGlvbi5cbiAgICAgICAgICAgICAgICAvLyBXZSB3YW50IHRvIHBhdGNoIHRoaXMgXCJtZW1vaXplcidzXCIgaW50ZXJuYWwgZnVuY3Rpb25cbiAgICAgICAgICAgICAgICBjb25zdCBhc3luY01lbW9pemVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIGZvbGxvd2luZyBmdW5jdGlvbiBpcyBpbnZva2VkIGV2ZXJ5IHRpbWUgdGhlIHVzZXIgd2FudHMgdG8gZ2V0IGEgKHBvc3NpYmxlKSBtZW1vaXplZCB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICAvLyBXZSByZXBsYWNlIGl0IHdpdGggYW5vdGhlciBmdW5jdGlvbiBpbiB3aGljaCB3ZSBiaW5kIHRoZSBjdXJyZW50IGNvbnRleHQgdG8gdGhlIGxhc3QgYXJndW1lbnQgKGNhbGxiYWNrKVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvcmlnTWVtb2l6ZXIgPSBtb2R1bGVFeHBvcnRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtb2RpZmllZEFyZ3VtZW50cyA9IFsuLi5hcmd1bWVudHNdO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGFzdCBhcmd1bWVudCBpcyB0aGUgY2FsbGJhY2tcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9yaWdDYWxsYmFjayA9IG1vZGlmaWVkQXJndW1lbnRzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FsbGJhY2tXaXRoQ29udGV4dCA9IHR5cGVvZiBvcmlnQ2FsbGJhY2sgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGFwaV8xLmNvbnRleHQuYmluZChhcGlfMS5jb250ZXh0LmFjdGl2ZSgpLCBvcmlnQ2FsbGJhY2spXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBvcmlnQ2FsbGJhY2s7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RpZmllZEFyZ3VtZW50cy5wdXNoKGNhbGxiYWNrV2l0aENvbnRleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9yaWdNZW1vaXplci5hcHBseSh0aGlzLCBtb2RpZmllZEFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAvLyBzeW5jIGZ1bmN0aW9uIHByZXNlcnZlcyBjb250ZXh0LCBidXQgd2Ugc3RpbGwgbmVlZCB0byBleHBvcnQgaXRcbiAgICAgICAgICAgICAgICAvLyBhcyB0aGUgbHJ1LW1lbW9pemVyIHBhY2thZ2UgZG9lc1xuICAgICAgICAgICAgICAgIGFzeW5jTWVtb2l6ZXIuc3luYyA9IG1vZHVsZUV4cG9ydHMuc3luYztcbiAgICAgICAgICAgICAgICByZXR1cm4gYXN5bmNNZW1vaXplcjtcbiAgICAgICAgICAgIH0sIHVuZGVmaW5lZCAvLyBubyBuZWVkIHRvIGRpc2FibGUgYXMgdGhpcyBpbnN0cnVtZW50YXRpb24gZG9lcyBub3QgY3JlYXRlIGFueSBzcGFuc1xuICAgICAgICAgICAgKSxcbiAgICAgICAgXTtcbiAgICB9XG59XG5leHBvcnRzLkxydU1lbW9pemVySW5zdHJ1bWVudGF0aW9uID0gTHJ1TWVtb2l6ZXJJbnN0cnVtZW50YXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnN0cnVtZW50YXRpb24uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-lru-memoizer/build/src/instrumentation.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-lru-memoizer/build/src/version.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-lru-memoizer/build/src/version.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PACKAGE_NAME = exports.PACKAGE_VERSION = void 0;\n// this is autogenerated file, see scripts/version-update.js\nexports.PACKAGE_VERSION = '0.48.0';\nexports.PACKAGE_NAME = '@opentelemetry/instrumentation-lru-memoizer';\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1scnUtbWVtb2l6ZXIvYnVpbGQvc3JjL3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0JBQW9CLEdBQUcsdUJBQXVCO0FBQzlDO0FBQ0EsdUJBQXVCO0FBQ3ZCLG9CQUFvQjtBQUNwQiIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tbHJ1LW1lbW9pemVyL2J1aWxkL3NyYy92ZXJzaW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUEFDS0FHRV9OQU1FID0gZXhwb3J0cy5QQUNLQUdFX1ZFUlNJT04gPSB2b2lkIDA7XG4vLyB0aGlzIGlzIGF1dG9nZW5lcmF0ZWQgZmlsZSwgc2VlIHNjcmlwdHMvdmVyc2lvbi11cGRhdGUuanNcbmV4cG9ydHMuUEFDS0FHRV9WRVJTSU9OID0gJzAuNDguMCc7XG5leHBvcnRzLlBBQ0tBR0VfTkFNRSA9ICdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tbHJ1LW1lbW9pemVyJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-lru-memoizer/build/src/version.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-mongodb/build/src/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-mongodb/build/src/index.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongodbCommandType = exports.MongoDBInstrumentation = void 0;\nvar instrumentation_1 = __webpack_require__(/*! ./instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-mongodb/build/src/instrumentation.js\");\nObject.defineProperty(exports, \"MongoDBInstrumentation\", ({ enumerable: true, get: function () { return instrumentation_1.MongoDBInstrumentation; } }));\nvar types_1 = __webpack_require__(/*! ./types */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-mongodb/build/src/types.js\");\nObject.defineProperty(exports, \"MongodbCommandType\", ({ enumerable: true, get: function () { return types_1.MongodbCommandType; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1tb25nb2RiL2J1aWxkL3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwwQkFBMEIsR0FBRyw4QkFBOEI7QUFDM0Qsd0JBQXdCLG1CQUFPLENBQUMsMEhBQW1CO0FBQ25ELDBEQUF5RCxFQUFFLHFDQUFxQyxvREFBb0QsRUFBQztBQUNySixjQUFjLG1CQUFPLENBQUMsc0dBQVM7QUFDL0Isc0RBQXFELEVBQUUscUNBQXFDLHNDQUFzQyxFQUFDO0FBQ25JIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1tb25nb2RiL2J1aWxkL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1vbmdvZGJDb21tYW5kVHlwZSA9IGV4cG9ydHMuTW9uZ29EQkluc3RydW1lbnRhdGlvbiA9IHZvaWQgMDtcbnZhciBpbnN0cnVtZW50YXRpb25fMSA9IHJlcXVpcmUoXCIuL2luc3RydW1lbnRhdGlvblwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk1vbmdvREJJbnN0cnVtZW50YXRpb25cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGluc3RydW1lbnRhdGlvbl8xLk1vbmdvREJJbnN0cnVtZW50YXRpb247IH0gfSk7XG52YXIgdHlwZXNfMSA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTW9uZ29kYkNvbW1hbmRUeXBlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0eXBlc18xLk1vbmdvZGJDb21tYW5kVHlwZTsgfSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-mongodb/build/src/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-mongodb/build/src/instrumentation.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-mongodb/build/src/instrumentation.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = \"/monitoring\";globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.2\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongoDBInstrumentation = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst internal_types_1 = __webpack_require__(/*! ./internal-types */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-mongodb/build/src/internal-types.js\");\n/** @knipignore */\nconst version_1 = __webpack_require__(/*! ./version */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-mongodb/build/src/version.js\");\nconst DEFAULT_CONFIG = {\n    requireParentSpan: true,\n};\n/** mongodb instrumentation plugin for OpenTelemetry */\nclass MongoDBInstrumentation extends instrumentation_1.InstrumentationBase {\n    constructor(config = {}) {\n        super(version_1.PACKAGE_NAME, version_1.PACKAGE_VERSION, { ...DEFAULT_CONFIG, ...config });\n    }\n    setConfig(config = {}) {\n        super.setConfig({ ...DEFAULT_CONFIG, ...config });\n    }\n    _updateMetricInstruments() {\n        this._connectionsUsage = this.meter.createUpDownCounter('db.client.connections.usage', {\n            description: 'The number of connections that are currently in state described by the state attribute.',\n            unit: '{connection}',\n        });\n    }\n    init() {\n        const { v3PatchConnection: v3PatchConnection, v3UnpatchConnection: v3UnpatchConnection, } = this._getV3ConnectionPatches();\n        const { v4PatchConnect, v4UnpatchConnect } = this._getV4ConnectPatches();\n        const { v4PatchConnectionCallback, v4PatchConnectionPromise, v4UnpatchConnection, } = this._getV4ConnectionPatches();\n        const { v4PatchConnectionPool, v4UnpatchConnectionPool } = this._getV4ConnectionPoolPatches();\n        const { v4PatchSessions, v4UnpatchSessions } = this._getV4SessionsPatches();\n        return [\n            new instrumentation_1.InstrumentationNodeModuleDefinition('mongodb', ['>=3.3.0 <4'], undefined, undefined, [\n                new instrumentation_1.InstrumentationNodeModuleFile('mongodb/lib/core/wireprotocol/index.js', ['>=3.3.0 <4'], v3PatchConnection, v3UnpatchConnection),\n            ]),\n            new instrumentation_1.InstrumentationNodeModuleDefinition('mongodb', ['>=4.0.0 <7'], undefined, undefined, [\n                new instrumentation_1.InstrumentationNodeModuleFile('mongodb/lib/cmap/connection.js', ['>=4.0.0 <6.4'], v4PatchConnectionCallback, v4UnpatchConnection),\n                new instrumentation_1.InstrumentationNodeModuleFile('mongodb/lib/cmap/connection.js', ['>=6.4.0 <7'], v4PatchConnectionPromise, v4UnpatchConnection),\n                new instrumentation_1.InstrumentationNodeModuleFile('mongodb/lib/cmap/connection_pool.js', ['>=4.0.0 <6.4'], v4PatchConnectionPool, v4UnpatchConnectionPool),\n                new instrumentation_1.InstrumentationNodeModuleFile('mongodb/lib/cmap/connect.js', ['>=4.0.0 <7'], v4PatchConnect, v4UnpatchConnect),\n                new instrumentation_1.InstrumentationNodeModuleFile('mongodb/lib/sessions.js', ['>=4.0.0 <7'], v4PatchSessions, v4UnpatchSessions),\n            ]),\n        ];\n    }\n    _getV3ConnectionPatches() {\n        return {\n            v3PatchConnection: (moduleExports) => {\n                // patch insert operation\n                if ((0, instrumentation_1.isWrapped)(moduleExports.insert)) {\n                    this._unwrap(moduleExports, 'insert');\n                }\n                this._wrap(moduleExports, 'insert', this._getV3PatchOperation('insert'));\n                // patch remove operation\n                if ((0, instrumentation_1.isWrapped)(moduleExports.remove)) {\n                    this._unwrap(moduleExports, 'remove');\n                }\n                this._wrap(moduleExports, 'remove', this._getV3PatchOperation('remove'));\n                // patch update operation\n                if ((0, instrumentation_1.isWrapped)(moduleExports.update)) {\n                    this._unwrap(moduleExports, 'update');\n                }\n                this._wrap(moduleExports, 'update', this._getV3PatchOperation('update'));\n                // patch other command\n                if ((0, instrumentation_1.isWrapped)(moduleExports.command)) {\n                    this._unwrap(moduleExports, 'command');\n                }\n                this._wrap(moduleExports, 'command', this._getV3PatchCommand());\n                // patch query\n                if ((0, instrumentation_1.isWrapped)(moduleExports.query)) {\n                    this._unwrap(moduleExports, 'query');\n                }\n                this._wrap(moduleExports, 'query', this._getV3PatchFind());\n                // patch get more operation on cursor\n                if ((0, instrumentation_1.isWrapped)(moduleExports.getMore)) {\n                    this._unwrap(moduleExports, 'getMore');\n                }\n                this._wrap(moduleExports, 'getMore', this._getV3PatchCursor());\n                return moduleExports;\n            },\n            v3UnpatchConnection: (moduleExports) => {\n                if (moduleExports === undefined)\n                    return;\n                this._unwrap(moduleExports, 'insert');\n                this._unwrap(moduleExports, 'remove');\n                this._unwrap(moduleExports, 'update');\n                this._unwrap(moduleExports, 'command');\n                this._unwrap(moduleExports, 'query');\n                this._unwrap(moduleExports, 'getMore');\n            },\n        };\n    }\n    _getV4SessionsPatches() {\n        return {\n            v4PatchSessions: (moduleExports) => {\n                if ((0, instrumentation_1.isWrapped)(moduleExports.acquire)) {\n                    this._unwrap(moduleExports, 'acquire');\n                }\n                this._wrap(moduleExports.ServerSessionPool.prototype, 'acquire', this._getV4AcquireCommand());\n                if ((0, instrumentation_1.isWrapped)(moduleExports.release)) {\n                    this._unwrap(moduleExports, 'release');\n                }\n                this._wrap(moduleExports.ServerSessionPool.prototype, 'release', this._getV4ReleaseCommand());\n                return moduleExports;\n            },\n            v4UnpatchSessions: (moduleExports) => {\n                if (moduleExports === undefined)\n                    return;\n                if ((0, instrumentation_1.isWrapped)(moduleExports.acquire)) {\n                    this._unwrap(moduleExports, 'acquire');\n                }\n                if ((0, instrumentation_1.isWrapped)(moduleExports.release)) {\n                    this._unwrap(moduleExports, 'release');\n                }\n            },\n        };\n    }\n    _getV4AcquireCommand() {\n        const instrumentation = this;\n        return (original) => {\n            return function patchAcquire() {\n                const nSessionsBeforeAcquire = this.sessions.length;\n                const session = original.call(this);\n                const nSessionsAfterAcquire = this.sessions.length;\n                if (nSessionsBeforeAcquire === nSessionsAfterAcquire) {\n                    //no session in the pool. a new session was created and used\n                    instrumentation._connectionsUsage.add(1, {\n                        state: 'used',\n                        'pool.name': instrumentation._poolName,\n                    });\n                }\n                else if (nSessionsBeforeAcquire - 1 === nSessionsAfterAcquire) {\n                    //a session was already in the pool. remove it from the pool and use it.\n                    instrumentation._connectionsUsage.add(-1, {\n                        state: 'idle',\n                        'pool.name': instrumentation._poolName,\n                    });\n                    instrumentation._connectionsUsage.add(1, {\n                        state: 'used',\n                        'pool.name': instrumentation._poolName,\n                    });\n                }\n                return session;\n            };\n        };\n    }\n    _getV4ReleaseCommand() {\n        const instrumentation = this;\n        return (original) => {\n            return function patchRelease(session) {\n                const cmdPromise = original.call(this, session);\n                instrumentation._connectionsUsage.add(-1, {\n                    state: 'used',\n                    'pool.name': instrumentation._poolName,\n                });\n                instrumentation._connectionsUsage.add(1, {\n                    state: 'idle',\n                    'pool.name': instrumentation._poolName,\n                });\n                return cmdPromise;\n            };\n        };\n    }\n    _getV4ConnectionPoolPatches() {\n        return {\n            v4PatchConnectionPool: (moduleExports) => {\n                const poolPrototype = moduleExports.ConnectionPool.prototype;\n                if ((0, instrumentation_1.isWrapped)(poolPrototype.checkOut)) {\n                    this._unwrap(poolPrototype, 'checkOut');\n                }\n                this._wrap(poolPrototype, 'checkOut', this._getV4ConnectionPoolCheckOut());\n                return moduleExports;\n            },\n            v4UnpatchConnectionPool: (moduleExports) => {\n                if (moduleExports === undefined)\n                    return;\n                this._unwrap(moduleExports.ConnectionPool.prototype, 'checkOut');\n            },\n        };\n    }\n    _getV4ConnectPatches() {\n        return {\n            v4PatchConnect: (moduleExports) => {\n                if ((0, instrumentation_1.isWrapped)(moduleExports.connect)) {\n                    this._unwrap(moduleExports, 'connect');\n                }\n                this._wrap(moduleExports, 'connect', this._getV4ConnectCommand());\n                return moduleExports;\n            },\n            v4UnpatchConnect: (moduleExports) => {\n                if (moduleExports === undefined)\n                    return;\n                this._unwrap(moduleExports, 'connect');\n            },\n        };\n    }\n    // This patch will become unnecessary once\n    // https://jira.mongodb.org/browse/NODE-5639 is done.\n    _getV4ConnectionPoolCheckOut() {\n        return (original) => {\n            return function patchedCheckout(callback) {\n                const patchedCallback = api_1.context.bind(api_1.context.active(), callback);\n                return original.call(this, patchedCallback);\n            };\n        };\n    }\n    _getV4ConnectCommand() {\n        const instrumentation = this;\n        return (original) => {\n            return function patchedConnect(options, callback) {\n                // from v6.4 `connect` method only accepts an options param and returns a promise\n                // with the connection\n                if (original.length === 1) {\n                    const result = original.call(this, options);\n                    if (result && typeof result.then === 'function') {\n                        result.then(() => instrumentation.setPoolName(options), \n                        // this handler is set to pass the lint rules\n                        () => undefined);\n                    }\n                    return result;\n                }\n                // Earlier versions expects a callback param and return void\n                const patchedCallback = function (err, conn) {\n                    if (err || !conn) {\n                        callback(err, conn);\n                        return;\n                    }\n                    instrumentation.setPoolName(options);\n                    callback(err, conn);\n                };\n                return original.call(this, options, patchedCallback);\n            };\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _getV4ConnectionPatches() {\n        return {\n            v4PatchConnectionCallback: (moduleExports) => {\n                // patch insert operation\n                if ((0, instrumentation_1.isWrapped)(moduleExports.Connection.prototype.command)) {\n                    this._unwrap(moduleExports.Connection.prototype, 'command');\n                }\n                this._wrap(moduleExports.Connection.prototype, 'command', this._getV4PatchCommandCallback());\n                return moduleExports;\n            },\n            v4PatchConnectionPromise: (moduleExports) => {\n                // patch insert operation\n                if ((0, instrumentation_1.isWrapped)(moduleExports.Connection.prototype.command)) {\n                    this._unwrap(moduleExports.Connection.prototype, 'command');\n                }\n                this._wrap(moduleExports.Connection.prototype, 'command', this._getV4PatchCommandPromise());\n                return moduleExports;\n            },\n            v4UnpatchConnection: (moduleExports) => {\n                if (moduleExports === undefined)\n                    return;\n                this._unwrap(moduleExports.Connection.prototype, 'command');\n            },\n        };\n    }\n    /** Creates spans for common operations */\n    _getV3PatchOperation(operationName) {\n        const instrumentation = this;\n        return (original) => {\n            return function patchedServerCommand(server, ns, ops, options, callback) {\n                const currentSpan = api_1.trace.getSpan(api_1.context.active());\n                const skipInstrumentation = instrumentation._checkSkipInstrumentation(currentSpan);\n                const resultHandler = typeof options === 'function' ? options : callback;\n                if (skipInstrumentation ||\n                    typeof resultHandler !== 'function' ||\n                    typeof ops !== 'object') {\n                    if (typeof options === 'function') {\n                        return original.call(this, server, ns, ops, options);\n                    }\n                    else {\n                        return original.call(this, server, ns, ops, options, callback);\n                    }\n                }\n                const span = instrumentation.tracer.startSpan(`mongodb.${operationName}`, {\n                    kind: api_1.SpanKind.CLIENT,\n                });\n                instrumentation._populateV3Attributes(span, ns, server, \n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                ops[0], operationName);\n                const patchedCallback = instrumentation._patchEnd(span, resultHandler);\n                // handle when options is the callback to send the correct number of args\n                if (typeof options === 'function') {\n                    return original.call(this, server, ns, ops, patchedCallback);\n                }\n                else {\n                    return original.call(this, server, ns, ops, options, patchedCallback);\n                }\n            };\n        };\n    }\n    /** Creates spans for command operation */\n    _getV3PatchCommand() {\n        const instrumentation = this;\n        return (original) => {\n            return function patchedServerCommand(server, ns, cmd, options, callback) {\n                const currentSpan = api_1.trace.getSpan(api_1.context.active());\n                const skipInstrumentation = instrumentation._checkSkipInstrumentation(currentSpan);\n                const resultHandler = typeof options === 'function' ? options : callback;\n                if (skipInstrumentation ||\n                    typeof resultHandler !== 'function' ||\n                    typeof cmd !== 'object') {\n                    if (typeof options === 'function') {\n                        return original.call(this, server, ns, cmd, options);\n                    }\n                    else {\n                        return original.call(this, server, ns, cmd, options, callback);\n                    }\n                }\n                const commandType = MongoDBInstrumentation._getCommandType(cmd);\n                const type = commandType === internal_types_1.MongodbCommandType.UNKNOWN ? 'command' : commandType;\n                const span = instrumentation.tracer.startSpan(`mongodb.${type}`, {\n                    kind: api_1.SpanKind.CLIENT,\n                });\n                const operation = commandType === internal_types_1.MongodbCommandType.UNKNOWN ? undefined : commandType;\n                instrumentation._populateV3Attributes(span, ns, server, cmd, operation);\n                const patchedCallback = instrumentation._patchEnd(span, resultHandler);\n                // handle when options is the callback to send the correct number of args\n                if (typeof options === 'function') {\n                    return original.call(this, server, ns, cmd, patchedCallback);\n                }\n                else {\n                    return original.call(this, server, ns, cmd, options, patchedCallback);\n                }\n            };\n        };\n    }\n    /** Creates spans for command operation */\n    _getV4PatchCommandCallback() {\n        const instrumentation = this;\n        return (original) => {\n            return function patchedV4ServerCommand(ns, cmd, options, callback) {\n                const currentSpan = api_1.trace.getSpan(api_1.context.active());\n                const skipInstrumentation = instrumentation._checkSkipInstrumentation(currentSpan);\n                const resultHandler = callback;\n                const commandType = Object.keys(cmd)[0];\n                if (typeof cmd !== 'object' || cmd.ismaster || cmd.hello) {\n                    return original.call(this, ns, cmd, options, callback);\n                }\n                let span = undefined;\n                if (!skipInstrumentation) {\n                    span = instrumentation.tracer.startSpan(`mongodb.${commandType}`, {\n                        kind: api_1.SpanKind.CLIENT,\n                    });\n                    instrumentation._populateV4Attributes(span, this, ns, cmd, commandType);\n                }\n                const patchedCallback = instrumentation._patchEnd(span, resultHandler, this.id, commandType);\n                return original.call(this, ns, cmd, options, patchedCallback);\n            };\n        };\n    }\n    _getV4PatchCommandPromise() {\n        const instrumentation = this;\n        return (original) => {\n            return function patchedV4ServerCommand(...args) {\n                const [ns, cmd] = args;\n                const currentSpan = api_1.trace.getSpan(api_1.context.active());\n                const skipInstrumentation = instrumentation._checkSkipInstrumentation(currentSpan);\n                const commandType = Object.keys(cmd)[0];\n                const resultHandler = () => undefined;\n                if (typeof cmd !== 'object' || cmd.ismaster || cmd.hello) {\n                    return original.apply(this, args);\n                }\n                let span = undefined;\n                if (!skipInstrumentation) {\n                    span = instrumentation.tracer.startSpan(`mongodb.${commandType}`, {\n                        kind: api_1.SpanKind.CLIENT,\n                    });\n                    instrumentation._populateV4Attributes(span, this, ns, cmd, commandType);\n                }\n                const patchedCallback = instrumentation._patchEnd(span, resultHandler, this.id, commandType);\n                const result = original.apply(this, args);\n                result.then((res) => patchedCallback(null, res), (err) => patchedCallback(err));\n                return result;\n            };\n        };\n    }\n    /** Creates spans for find operation */\n    _getV3PatchFind() {\n        const instrumentation = this;\n        return (original) => {\n            return function patchedServerCommand(server, ns, cmd, cursorState, options, callback) {\n                const currentSpan = api_1.trace.getSpan(api_1.context.active());\n                const skipInstrumentation = instrumentation._checkSkipInstrumentation(currentSpan);\n                const resultHandler = typeof options === 'function' ? options : callback;\n                if (skipInstrumentation ||\n                    typeof resultHandler !== 'function' ||\n                    typeof cmd !== 'object') {\n                    if (typeof options === 'function') {\n                        return original.call(this, server, ns, cmd, cursorState, options);\n                    }\n                    else {\n                        return original.call(this, server, ns, cmd, cursorState, options, callback);\n                    }\n                }\n                const span = instrumentation.tracer.startSpan('mongodb.find', {\n                    kind: api_1.SpanKind.CLIENT,\n                });\n                instrumentation._populateV3Attributes(span, ns, server, cmd, 'find');\n                const patchedCallback = instrumentation._patchEnd(span, resultHandler);\n                // handle when options is the callback to send the correct number of args\n                if (typeof options === 'function') {\n                    return original.call(this, server, ns, cmd, cursorState, patchedCallback);\n                }\n                else {\n                    return original.call(this, server, ns, cmd, cursorState, options, patchedCallback);\n                }\n            };\n        };\n    }\n    /** Creates spans for find operation */\n    _getV3PatchCursor() {\n        const instrumentation = this;\n        return (original) => {\n            return function patchedServerCommand(server, ns, cursorState, batchSize, options, callback) {\n                const currentSpan = api_1.trace.getSpan(api_1.context.active());\n                const skipInstrumentation = instrumentation._checkSkipInstrumentation(currentSpan);\n                const resultHandler = typeof options === 'function' ? options : callback;\n                if (skipInstrumentation || typeof resultHandler !== 'function') {\n                    if (typeof options === 'function') {\n                        return original.call(this, server, ns, cursorState, batchSize, options);\n                    }\n                    else {\n                        return original.call(this, server, ns, cursorState, batchSize, options, callback);\n                    }\n                }\n                const span = instrumentation.tracer.startSpan('mongodb.getMore', {\n                    kind: api_1.SpanKind.CLIENT,\n                });\n                instrumentation._populateV3Attributes(span, ns, server, cursorState.cmd, 'getMore');\n                const patchedCallback = instrumentation._patchEnd(span, resultHandler);\n                // handle when options is the callback to send the correct number of args\n                if (typeof options === 'function') {\n                    return original.call(this, server, ns, cursorState, batchSize, patchedCallback);\n                }\n                else {\n                    return original.call(this, server, ns, cursorState, batchSize, options, patchedCallback);\n                }\n            };\n        };\n    }\n    /**\n     * Get the mongodb command type from the object.\n     * @param command Internal mongodb command object\n     */\n    static _getCommandType(command) {\n        if (command.createIndexes !== undefined) {\n            return internal_types_1.MongodbCommandType.CREATE_INDEXES;\n        }\n        else if (command.findandmodify !== undefined) {\n            return internal_types_1.MongodbCommandType.FIND_AND_MODIFY;\n        }\n        else if (command.ismaster !== undefined) {\n            return internal_types_1.MongodbCommandType.IS_MASTER;\n        }\n        else if (command.count !== undefined) {\n            return internal_types_1.MongodbCommandType.COUNT;\n        }\n        else if (command.aggregate !== undefined) {\n            return internal_types_1.MongodbCommandType.AGGREGATE;\n        }\n        else {\n            return internal_types_1.MongodbCommandType.UNKNOWN;\n        }\n    }\n    /**\n     * Populate span's attributes by fetching related metadata from the context\n     * @param span span to add attributes to\n     * @param connectionCtx mongodb internal connection context\n     * @param ns mongodb namespace\n     * @param command mongodb internal representation of a command\n     */\n    _populateV4Attributes(span, connectionCtx, ns, command, operation) {\n        let host, port;\n        if (connectionCtx) {\n            const hostParts = typeof connectionCtx.address === 'string'\n                ? connectionCtx.address.split(':')\n                : '';\n            if (hostParts.length === 2) {\n                host = hostParts[0];\n                port = hostParts[1];\n            }\n        }\n        // capture parameters within the query as well if enhancedDatabaseReporting is enabled.\n        let commandObj;\n        if (command?.documents && command.documents[0]) {\n            commandObj = command.documents[0];\n        }\n        else if (command?.cursors) {\n            commandObj = command.cursors;\n        }\n        else {\n            commandObj = command;\n        }\n        this._addAllSpanAttributes(span, ns.db, ns.collection, host, port, commandObj, operation);\n    }\n    /**\n     * Populate span's attributes by fetching related metadata from the context\n     * @param span span to add attributes to\n     * @param ns mongodb namespace\n     * @param topology mongodb internal representation of the network topology\n     * @param command mongodb internal representation of a command\n     */\n    _populateV3Attributes(span, ns, topology, command, operation) {\n        // add network attributes to determine the remote server\n        let host;\n        let port;\n        if (topology && topology.s) {\n            host = topology.s.options?.host ?? topology.s.host;\n            port = (topology.s.options?.port ?? topology.s.port)?.toString();\n            if (host == null || port == null) {\n                const address = topology.description?.address;\n                if (address) {\n                    const addressSegments = address.split(':');\n                    host = addressSegments[0];\n                    port = addressSegments[1];\n                }\n            }\n        }\n        // The namespace is a combination of the database name and the name of the\n        // collection or index, like so: [database-name].[collection-or-index-name].\n        // It could be a string or an instance of MongoDBNamespace, as such we\n        // always coerce to a string to extract db and collection.\n        const [dbName, dbCollection] = ns.toString().split('.');\n        // capture parameters within the query as well if enhancedDatabaseReporting is enabled.\n        const commandObj = command?.query ?? command?.q ?? command;\n        this._addAllSpanAttributes(span, dbName, dbCollection, host, port, commandObj, operation);\n    }\n    _addAllSpanAttributes(span, dbName, dbCollection, host, port, commandObj, operation) {\n        // add database related attributes\n        span.setAttributes({\n            [semantic_conventions_1.SEMATTRS_DB_SYSTEM]: semantic_conventions_1.DBSYSTEMVALUES_MONGODB,\n            [semantic_conventions_1.SEMATTRS_DB_NAME]: dbName,\n            [semantic_conventions_1.SEMATTRS_DB_MONGODB_COLLECTION]: dbCollection,\n            [semantic_conventions_1.SEMATTRS_DB_OPERATION]: operation,\n            [semantic_conventions_1.SEMATTRS_DB_CONNECTION_STRING]: `mongodb://${host}:${port}/${dbName}`,\n        });\n        if (host && port) {\n            span.setAttribute(semantic_conventions_1.SEMATTRS_NET_PEER_NAME, host);\n            const portNumber = parseInt(port, 10);\n            if (!isNaN(portNumber)) {\n                span.setAttribute(semantic_conventions_1.SEMATTRS_NET_PEER_PORT, portNumber);\n            }\n        }\n        if (!commandObj)\n            return;\n        const { dbStatementSerializer: configDbStatementSerializer } = this.getConfig();\n        const dbStatementSerializer = typeof configDbStatementSerializer === 'function'\n            ? configDbStatementSerializer\n            : this._defaultDbStatementSerializer.bind(this);\n        (0, instrumentation_1.safeExecuteInTheMiddle)(() => {\n            const query = dbStatementSerializer(commandObj);\n            span.setAttribute(semantic_conventions_1.SEMATTRS_DB_STATEMENT, query);\n        }, err => {\n            if (err) {\n                this._diag.error('Error running dbStatementSerializer hook', err);\n            }\n        }, true);\n    }\n    _defaultDbStatementSerializer(commandObj) {\n        const { enhancedDatabaseReporting } = this.getConfig();\n        const resultObj = enhancedDatabaseReporting\n            ? commandObj\n            : this._scrubStatement(commandObj);\n        return JSON.stringify(resultObj);\n    }\n    _scrubStatement(value) {\n        if (Array.isArray(value)) {\n            return value.map(element => this._scrubStatement(element));\n        }\n        if (typeof value === 'object' && value !== null) {\n            return Object.fromEntries(Object.entries(value).map(([key, element]) => [\n                key,\n                this._scrubStatement(element),\n            ]));\n        }\n        // A value like string or number, possible contains PII, scrub it\n        return '?';\n    }\n    /**\n     * Triggers the response hook in case it is defined.\n     * @param span The span to add the results to.\n     * @param result The command result\n     */\n    _handleExecutionResult(span, result) {\n        const { responseHook } = this.getConfig();\n        if (typeof responseHook === 'function') {\n            (0, instrumentation_1.safeExecuteInTheMiddle)(() => {\n                responseHook(span, { data: result });\n            }, err => {\n                if (err) {\n                    this._diag.error('Error running response hook', err);\n                }\n            }, true);\n        }\n    }\n    /**\n     * Ends a created span.\n     * @param span The created span to end.\n     * @param resultHandler A callback function.\n     * @param connectionId: The connection ID of the Command response.\n     */\n    _patchEnd(span, resultHandler, connectionId, commandType) {\n        // mongodb is using \"tick\" when calling a callback, this way the context\n        // in final callback (resultHandler) is lost\n        const activeContext = api_1.context.active();\n        const instrumentation = this;\n        return function patchedEnd(...args) {\n            const error = args[0];\n            if (span) {\n                if (error instanceof Error) {\n                    span?.setStatus({\n                        code: api_1.SpanStatusCode.ERROR,\n                        message: error.message,\n                    });\n                }\n                else {\n                    const result = args[1];\n                    instrumentation._handleExecutionResult(span, result);\n                }\n                span.end();\n            }\n            return api_1.context.with(activeContext, () => {\n                if (commandType === 'endSessions') {\n                    instrumentation._connectionsUsage.add(-1, {\n                        state: 'idle',\n                        'pool.name': instrumentation._poolName,\n                    });\n                }\n                return resultHandler.apply(this, args);\n            });\n        };\n    }\n    setPoolName(options) {\n        const host = options.hostAddress?.host;\n        const port = options.hostAddress?.port;\n        const database = options.dbName;\n        const poolName = `mongodb://${host}:${port}/${database}`;\n        this._poolName = poolName;\n    }\n    _checkSkipInstrumentation(currentSpan) {\n        const requireParentSpan = this.getConfig().requireParentSpan;\n        const hasNoParentSpan = currentSpan === undefined;\n        return requireParentSpan === true && hasNoParentSpan;\n    }\n}\nexports.MongoDBInstrumentation = MongoDBInstrumentation;\n//# sourceMappingURL=instrumentation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-mongodb/build/src/instrumentation.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-mongodb/build/src/internal-types.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-mongodb/build/src/internal-types.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongodbCommandType = void 0;\nvar MongodbCommandType;\n(function (MongodbCommandType) {\n    MongodbCommandType[\"CREATE_INDEXES\"] = \"createIndexes\";\n    MongodbCommandType[\"FIND_AND_MODIFY\"] = \"findAndModify\";\n    MongodbCommandType[\"IS_MASTER\"] = \"isMaster\";\n    MongodbCommandType[\"COUNT\"] = \"count\";\n    MongodbCommandType[\"AGGREGATE\"] = \"aggregate\";\n    MongodbCommandType[\"UNKNOWN\"] = \"unknown\";\n})(MongodbCommandType = exports.MongodbCommandType || (exports.MongodbCommandType = {}));\n//# sourceMappingURL=internal-types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1tb25nb2RiL2J1aWxkL3NyYy9pbnRlcm5hbC10eXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsc0RBQXNELDBCQUEwQixLQUFLO0FBQ3RGIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1tb25nb2RiL2J1aWxkL3NyYy9pbnRlcm5hbC10eXBlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1vbmdvZGJDb21tYW5kVHlwZSA9IHZvaWQgMDtcbnZhciBNb25nb2RiQ29tbWFuZFR5cGU7XG4oZnVuY3Rpb24gKE1vbmdvZGJDb21tYW5kVHlwZSkge1xuICAgIE1vbmdvZGJDb21tYW5kVHlwZVtcIkNSRUFURV9JTkRFWEVTXCJdID0gXCJjcmVhdGVJbmRleGVzXCI7XG4gICAgTW9uZ29kYkNvbW1hbmRUeXBlW1wiRklORF9BTkRfTU9ESUZZXCJdID0gXCJmaW5kQW5kTW9kaWZ5XCI7XG4gICAgTW9uZ29kYkNvbW1hbmRUeXBlW1wiSVNfTUFTVEVSXCJdID0gXCJpc01hc3RlclwiO1xuICAgIE1vbmdvZGJDb21tYW5kVHlwZVtcIkNPVU5UXCJdID0gXCJjb3VudFwiO1xuICAgIE1vbmdvZGJDb21tYW5kVHlwZVtcIkFHR1JFR0FURVwiXSA9IFwiYWdncmVnYXRlXCI7XG4gICAgTW9uZ29kYkNvbW1hbmRUeXBlW1wiVU5LTk9XTlwiXSA9IFwidW5rbm93blwiO1xufSkoTW9uZ29kYkNvbW1hbmRUeXBlID0gZXhwb3J0cy5Nb25nb2RiQ29tbWFuZFR5cGUgfHwgKGV4cG9ydHMuTW9uZ29kYkNvbW1hbmRUeXBlID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGVybmFsLXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-mongodb/build/src/internal-types.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-mongodb/build/src/types.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-mongodb/build/src/types.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongodbCommandType = void 0;\nvar MongodbCommandType;\n(function (MongodbCommandType) {\n    MongodbCommandType[\"CREATE_INDEXES\"] = \"createIndexes\";\n    MongodbCommandType[\"FIND_AND_MODIFY\"] = \"findAndModify\";\n    MongodbCommandType[\"IS_MASTER\"] = \"isMaster\";\n    MongodbCommandType[\"COUNT\"] = \"count\";\n    MongodbCommandType[\"UNKNOWN\"] = \"unknown\";\n})(MongodbCommandType = exports.MongodbCommandType || (exports.MongodbCommandType = {}));\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1tb25nb2RiL2J1aWxkL3NyYy90eXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHNEQUFzRCwwQkFBMEIsS0FBSztBQUN0RiIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tbW9uZ29kYi9idWlsZC9zcmMvdHlwZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Nb25nb2RiQ29tbWFuZFR5cGUgPSB2b2lkIDA7XG52YXIgTW9uZ29kYkNvbW1hbmRUeXBlO1xuKGZ1bmN0aW9uIChNb25nb2RiQ29tbWFuZFR5cGUpIHtcbiAgICBNb25nb2RiQ29tbWFuZFR5cGVbXCJDUkVBVEVfSU5ERVhFU1wiXSA9IFwiY3JlYXRlSW5kZXhlc1wiO1xuICAgIE1vbmdvZGJDb21tYW5kVHlwZVtcIkZJTkRfQU5EX01PRElGWVwiXSA9IFwiZmluZEFuZE1vZGlmeVwiO1xuICAgIE1vbmdvZGJDb21tYW5kVHlwZVtcIklTX01BU1RFUlwiXSA9IFwiaXNNYXN0ZXJcIjtcbiAgICBNb25nb2RiQ29tbWFuZFR5cGVbXCJDT1VOVFwiXSA9IFwiY291bnRcIjtcbiAgICBNb25nb2RiQ29tbWFuZFR5cGVbXCJVTktOT1dOXCJdID0gXCJ1bmtub3duXCI7XG59KShNb25nb2RiQ29tbWFuZFR5cGUgPSBleHBvcnRzLk1vbmdvZGJDb21tYW5kVHlwZSB8fCAoZXhwb3J0cy5Nb25nb2RiQ29tbWFuZFR5cGUgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-mongodb/build/src/types.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-mongodb/build/src/version.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-mongodb/build/src/version.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PACKAGE_NAME = exports.PACKAGE_VERSION = void 0;\n// this is autogenerated file, see scripts/version-update.js\nexports.PACKAGE_VERSION = '0.56.0';\nexports.PACKAGE_NAME = '@opentelemetry/instrumentation-mongodb';\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1tb25nb2RiL2J1aWxkL3NyYy92ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQixHQUFHLHVCQUF1QjtBQUM5QztBQUNBLHVCQUF1QjtBQUN2QixvQkFBb0I7QUFDcEIiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLW1vbmdvZGIvYnVpbGQvc3JjL3ZlcnNpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5QQUNLQUdFX05BTUUgPSBleHBvcnRzLlBBQ0tBR0VfVkVSU0lPTiA9IHZvaWQgMDtcbi8vIHRoaXMgaXMgYXV0b2dlbmVyYXRlZCBmaWxlLCBzZWUgc2NyaXB0cy92ZXJzaW9uLXVwZGF0ZS5qc1xuZXhwb3J0cy5QQUNLQUdFX1ZFUlNJT04gPSAnMC41Ni4wJztcbmV4cG9ydHMuUEFDS0FHRV9OQU1FID0gJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1tb25nb2RiJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-mongodb/build/src/version.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-mongoose/build/src/index.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-mongoose/build/src/index.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongooseInstrumentation = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar mongoose_1 = __webpack_require__(/*! ./mongoose */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-mongoose/build/src/mongoose.js\");\nObject.defineProperty(exports, \"MongooseInstrumentation\", ({ enumerable: true, get: function () { return mongoose_1.MongooseInstrumentation; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1tb25nb29zZS9idWlsZC9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixtQkFBTyxDQUFDLDZHQUFZO0FBQ3JDLDJEQUEwRCxFQUFFLHFDQUFxQyw4Q0FBOEMsRUFBQztBQUNoSiIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tbW9uZ29vc2UvYnVpbGQvc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Nb25nb29zZUluc3RydW1lbnRhdGlvbiA9IHZvaWQgMDtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG52YXIgbW9uZ29vc2VfMSA9IHJlcXVpcmUoXCIuL21vbmdvb3NlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTW9uZ29vc2VJbnN0cnVtZW50YXRpb25cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vbmdvb3NlXzEuTW9uZ29vc2VJbnN0cnVtZW50YXRpb247IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-mongoose/build/src/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-mongoose/build/src/mongoose.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-mongoose/build/src/mongoose.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongooseInstrumentation = exports._STORED_PARENT_SPAN = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst core_1 = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/index.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-mongoose/build/src/utils.js\");\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\n/** @knipignore */\nconst version_1 = __webpack_require__(/*! ./version */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-mongoose/build/src/version.js\");\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst contextCaptureFunctionsCommon = [\n    'deleteOne',\n    'deleteMany',\n    'find',\n    'findOne',\n    'estimatedDocumentCount',\n    'countDocuments',\n    'distinct',\n    'where',\n    '$where',\n    'findOneAndUpdate',\n    'findOneAndDelete',\n    'findOneAndReplace',\n];\nconst contextCaptureFunctions6 = [\n    'remove',\n    'count',\n    'findOneAndRemove',\n    ...contextCaptureFunctionsCommon,\n];\nconst contextCaptureFunctions7 = [\n    'count',\n    'findOneAndRemove',\n    ...contextCaptureFunctionsCommon,\n];\nconst contextCaptureFunctions8 = [...contextCaptureFunctionsCommon];\nfunction getContextCaptureFunctions(moduleVersion) {\n    /* istanbul ignore next */\n    if (!moduleVersion) {\n        return contextCaptureFunctionsCommon;\n    }\n    else if (moduleVersion.startsWith('6.') || moduleVersion.startsWith('5.')) {\n        return contextCaptureFunctions6;\n    }\n    else if (moduleVersion.startsWith('7.')) {\n        return contextCaptureFunctions7;\n    }\n    else {\n        return contextCaptureFunctions8;\n    }\n}\nfunction instrumentRemove(moduleVersion) {\n    return ((moduleVersion &&\n        (moduleVersion.startsWith('5.') || moduleVersion.startsWith('6.'))) ||\n        false);\n}\n// when mongoose functions are called, we store the original call context\n// and then set it as the parent for the spans created by Query/Aggregate exec()\n// calls. this bypass the unlinked spans issue on thenables await operations.\nexports._STORED_PARENT_SPAN = Symbol('stored-parent-span');\nclass MongooseInstrumentation extends instrumentation_1.InstrumentationBase {\n    constructor(config = {}) {\n        super(version_1.PACKAGE_NAME, version_1.PACKAGE_VERSION, config);\n    }\n    init() {\n        const module = new instrumentation_1.InstrumentationNodeModuleDefinition('mongoose', ['>=5.9.7 <9'], this.patch.bind(this), this.unpatch.bind(this));\n        return module;\n    }\n    patch(module, moduleVersion) {\n        const moduleExports = module[Symbol.toStringTag] === 'Module'\n            ? module.default // ESM\n            : module; // CommonJS\n        this._wrap(moduleExports.Model.prototype, 'save', this.patchOnModelMethods('save', moduleVersion));\n        // mongoose applies this code on module require:\n        // Model.prototype.$save = Model.prototype.save;\n        // which captures the save function before it is patched.\n        // so we need to apply the same logic after instrumenting the save function.\n        moduleExports.Model.prototype.$save = moduleExports.Model.prototype.save;\n        if (instrumentRemove(moduleVersion)) {\n            this._wrap(moduleExports.Model.prototype, 'remove', this.patchOnModelMethods('remove', moduleVersion));\n        }\n        this._wrap(moduleExports.Query.prototype, 'exec', this.patchQueryExec(moduleVersion));\n        this._wrap(moduleExports.Aggregate.prototype, 'exec', this.patchAggregateExec(moduleVersion));\n        const contextCaptureFunctions = getContextCaptureFunctions(moduleVersion);\n        contextCaptureFunctions.forEach((funcName) => {\n            this._wrap(moduleExports.Query.prototype, funcName, this.patchAndCaptureSpanContext(funcName));\n        });\n        this._wrap(moduleExports.Model, 'aggregate', this.patchModelAggregate());\n        this._wrap(moduleExports.Model, 'insertMany', this.patchModelStatic('insertMany', moduleVersion));\n        this._wrap(moduleExports.Model, 'bulkWrite', this.patchModelStatic('bulkWrite', moduleVersion));\n        return moduleExports;\n    }\n    unpatch(module, moduleVersion) {\n        const moduleExports = module[Symbol.toStringTag] === 'Module'\n            ? module.default // ESM\n            : module; // CommonJS\n        const contextCaptureFunctions = getContextCaptureFunctions(moduleVersion);\n        this._unwrap(moduleExports.Model.prototype, 'save');\n        // revert the patch for $save which we applied by aliasing it to patched `save`\n        moduleExports.Model.prototype.$save = moduleExports.Model.prototype.save;\n        if (instrumentRemove(moduleVersion)) {\n            this._unwrap(moduleExports.Model.prototype, 'remove');\n        }\n        this._unwrap(moduleExports.Query.prototype, 'exec');\n        this._unwrap(moduleExports.Aggregate.prototype, 'exec');\n        contextCaptureFunctions.forEach((funcName) => {\n            this._unwrap(moduleExports.Query.prototype, funcName);\n        });\n        this._unwrap(moduleExports.Model, 'aggregate');\n        this._unwrap(moduleExports.Model, 'insertMany');\n        this._unwrap(moduleExports.Model, 'bulkWrite');\n    }\n    patchAggregateExec(moduleVersion) {\n        const self = this;\n        return (originalAggregate) => {\n            return function exec(callback) {\n                if (self.getConfig().requireParentSpan &&\n                    api_1.trace.getSpan(api_1.context.active()) === undefined) {\n                    return originalAggregate.apply(this, arguments);\n                }\n                const parentSpan = this[exports._STORED_PARENT_SPAN];\n                const attributes = {};\n                const { dbStatementSerializer } = self.getConfig();\n                if (dbStatementSerializer) {\n                    attributes[semantic_conventions_1.SEMATTRS_DB_STATEMENT] = dbStatementSerializer('aggregate', {\n                        options: this.options,\n                        aggregatePipeline: this._pipeline,\n                    });\n                }\n                const span = self._startSpan(this._model.collection, this._model?.modelName, 'aggregate', attributes, parentSpan);\n                return self._handleResponse(span, originalAggregate, this, arguments, callback, moduleVersion);\n            };\n        };\n    }\n    patchQueryExec(moduleVersion) {\n        const self = this;\n        return (originalExec) => {\n            return function exec(callback) {\n                if (self.getConfig().requireParentSpan &&\n                    api_1.trace.getSpan(api_1.context.active()) === undefined) {\n                    return originalExec.apply(this, arguments);\n                }\n                const parentSpan = this[exports._STORED_PARENT_SPAN];\n                const attributes = {};\n                const { dbStatementSerializer } = self.getConfig();\n                if (dbStatementSerializer) {\n                    attributes[semantic_conventions_1.SEMATTRS_DB_STATEMENT] = dbStatementSerializer(this.op, {\n                        condition: this._conditions,\n                        updates: this._update,\n                        options: this.options,\n                        fields: this._fields,\n                    });\n                }\n                const span = self._startSpan(this.mongooseCollection, this.model.modelName, this.op, attributes, parentSpan);\n                return self._handleResponse(span, originalExec, this, arguments, callback, moduleVersion);\n            };\n        };\n    }\n    patchOnModelMethods(op, moduleVersion) {\n        const self = this;\n        return (originalOnModelFunction) => {\n            return function method(options, callback) {\n                if (self.getConfig().requireParentSpan &&\n                    api_1.trace.getSpan(api_1.context.active()) === undefined) {\n                    return originalOnModelFunction.apply(this, arguments);\n                }\n                const serializePayload = { document: this };\n                if (options && !(options instanceof Function)) {\n                    serializePayload.options = options;\n                }\n                const attributes = {};\n                const { dbStatementSerializer } = self.getConfig();\n                if (dbStatementSerializer) {\n                    attributes[semantic_conventions_1.SEMATTRS_DB_STATEMENT] = dbStatementSerializer(op, serializePayload);\n                }\n                const span = self._startSpan(this.constructor.collection, this.constructor.modelName, op, attributes);\n                if (options instanceof Function) {\n                    callback = options;\n                    options = undefined;\n                }\n                return self._handleResponse(span, originalOnModelFunction, this, arguments, callback, moduleVersion);\n            };\n        };\n    }\n    patchModelStatic(op, moduleVersion) {\n        const self = this;\n        return (original) => {\n            return function patchedStatic(docsOrOps, options, callback) {\n                if (self.getConfig().requireParentSpan &&\n                    api_1.trace.getSpan(api_1.context.active()) === undefined) {\n                    return original.apply(this, arguments);\n                }\n                if (typeof options === 'function') {\n                    callback = options;\n                    options = undefined;\n                }\n                const serializePayload = {};\n                switch (op) {\n                    case 'insertMany':\n                        serializePayload.documents = docsOrOps;\n                        break;\n                    case 'bulkWrite':\n                        serializePayload.operations = docsOrOps;\n                        break;\n                    default:\n                        serializePayload.document = docsOrOps;\n                        break;\n                }\n                if (options !== undefined) {\n                    serializePayload.options = options;\n                }\n                const attributes = {};\n                const { dbStatementSerializer } = self.getConfig();\n                if (dbStatementSerializer) {\n                    attributes[semantic_conventions_1.SEMATTRS_DB_STATEMENT] = dbStatementSerializer(op, serializePayload);\n                }\n                const span = self._startSpan(this.collection, this.modelName, op, attributes);\n                return self._handleResponse(span, original, this, arguments, callback, moduleVersion);\n            };\n        };\n    }\n    // we want to capture the otel span on the object which is calling exec.\n    // in the special case of aggregate, we need have no function to path\n    // on the Aggregate object to capture the context on, so we patch\n    // the aggregate of Model, and set the context on the Aggregate object\n    patchModelAggregate() {\n        const self = this;\n        return (original) => {\n            return function captureSpanContext() {\n                const currentSpan = api_1.trace.getSpan(api_1.context.active());\n                const aggregate = self._callOriginalFunction(() => original.apply(this, arguments));\n                if (aggregate)\n                    aggregate[exports._STORED_PARENT_SPAN] = currentSpan;\n                return aggregate;\n            };\n        };\n    }\n    patchAndCaptureSpanContext(funcName) {\n        const self = this;\n        return (original) => {\n            return function captureSpanContext() {\n                this[exports._STORED_PARENT_SPAN] = api_1.trace.getSpan(api_1.context.active());\n                return self._callOriginalFunction(() => original.apply(this, arguments));\n            };\n        };\n    }\n    _startSpan(collection, modelName, operation, attributes, parentSpan) {\n        return this.tracer.startSpan(`mongoose.${modelName}.${operation}`, {\n            kind: api_1.SpanKind.CLIENT,\n            attributes: {\n                ...attributes,\n                ...(0, utils_1.getAttributesFromCollection)(collection),\n                [semantic_conventions_1.SEMATTRS_DB_OPERATION]: operation,\n                [semantic_conventions_1.SEMATTRS_DB_SYSTEM]: 'mongoose',\n            },\n        }, parentSpan ? api_1.trace.setSpan(api_1.context.active(), parentSpan) : undefined);\n    }\n    _handleResponse(span, exec, originalThis, args, callback, moduleVersion = undefined) {\n        const self = this;\n        if (callback instanceof Function) {\n            return self._callOriginalFunction(() => (0, utils_1.handleCallbackResponse)(callback, exec, originalThis, span, args, self.getConfig().responseHook, moduleVersion));\n        }\n        else {\n            const response = self._callOriginalFunction(() => exec.apply(originalThis, args));\n            return (0, utils_1.handlePromiseResponse)(response, span, self.getConfig().responseHook, moduleVersion);\n        }\n    }\n    _callOriginalFunction(originalFunction) {\n        if (this.getConfig().suppressInternalInstrumentation) {\n            return api_1.context.with((0, core_1.suppressTracing)(api_1.context.active()), originalFunction);\n        }\n        else {\n            return originalFunction();\n        }\n    }\n}\nexports.MongooseInstrumentation = MongooseInstrumentation;\n//# sourceMappingURL=mongoose.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-mongoose/build/src/mongoose.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-mongoose/build/src/utils.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-mongoose/build/src/utils.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.handleCallbackResponse = exports.handlePromiseResponse = exports.getAttributesFromCollection = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nfunction getAttributesFromCollection(collection) {\n    return {\n        [semantic_conventions_1.SEMATTRS_DB_MONGODB_COLLECTION]: collection.name,\n        [semantic_conventions_1.SEMATTRS_DB_NAME]: collection.conn.name,\n        [semantic_conventions_1.SEMATTRS_DB_USER]: collection.conn.user,\n        [semantic_conventions_1.SEMATTRS_NET_PEER_NAME]: collection.conn.host,\n        [semantic_conventions_1.SEMATTRS_NET_PEER_PORT]: collection.conn.port,\n    };\n}\nexports.getAttributesFromCollection = getAttributesFromCollection;\nfunction setErrorStatus(span, error = {}) {\n    span.recordException(error);\n    span.setStatus({\n        code: api_1.SpanStatusCode.ERROR,\n        message: `${error.message} ${error.code ? `\\nMongoose Error Code: ${error.code}` : ''}`,\n    });\n}\nfunction applyResponseHook(span, response, responseHook, moduleVersion = undefined) {\n    if (!responseHook) {\n        return;\n    }\n    (0, instrumentation_1.safeExecuteInTheMiddle)(() => responseHook(span, { moduleVersion, response }), e => {\n        if (e) {\n            api_1.diag.error('mongoose instrumentation: responseHook error', e);\n        }\n    }, true);\n}\nfunction handlePromiseResponse(execResponse, span, responseHook, moduleVersion = undefined) {\n    if (!(execResponse instanceof Promise)) {\n        applyResponseHook(span, execResponse, responseHook, moduleVersion);\n        span.end();\n        return execResponse;\n    }\n    return execResponse\n        .then(response => {\n        applyResponseHook(span, response, responseHook, moduleVersion);\n        return response;\n    })\n        .catch(err => {\n        setErrorStatus(span, err);\n        throw err;\n    })\n        .finally(() => span.end());\n}\nexports.handlePromiseResponse = handlePromiseResponse;\nfunction handleCallbackResponse(callback, exec, originalThis, span, args, responseHook, moduleVersion = undefined) {\n    let callbackArgumentIndex = 0;\n    if (args.length === 2) {\n        callbackArgumentIndex = 1;\n    }\n    else if (args.length === 3) {\n        callbackArgumentIndex = 2;\n    }\n    args[callbackArgumentIndex] = (err, response) => {\n        err\n            ? setErrorStatus(span, err)\n            : applyResponseHook(span, response, responseHook, moduleVersion);\n        span.end();\n        return callback(err, response);\n    };\n    return exec.apply(originalThis, args);\n}\nexports.handleCallbackResponse = handleCallbackResponse;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1tb25nb29zZS9idWlsZC9zcmMvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsOEJBQThCLEdBQUcsNkJBQTZCLEdBQUcsbUNBQW1DO0FBQ3BHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsbUJBQU8sQ0FBQyw2RkFBb0I7QUFDMUMsMEJBQTBCLG1CQUFPLENBQUMscUhBQWdDO0FBQ2xFLCtCQUErQixtQkFBTyxDQUFDLCtIQUFxQztBQUM1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkMsd0NBQXdDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixlQUFlLEVBQUUsdUNBQXVDLFdBQVcsT0FBTztBQUM5RixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZFQUE2RSx5QkFBeUI7QUFDdEc7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QiIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tbW9uZ29vc2UvYnVpbGQvc3JjL3V0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5oYW5kbGVDYWxsYmFja1Jlc3BvbnNlID0gZXhwb3J0cy5oYW5kbGVQcm9taXNlUmVzcG9uc2UgPSBleHBvcnRzLmdldEF0dHJpYnV0ZXNGcm9tQ29sbGVjdGlvbiA9IHZvaWQgMDtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5jb25zdCBhcGlfMSA9IHJlcXVpcmUoXCJAb3BlbnRlbGVtZXRyeS9hcGlcIik7XG5jb25zdCBpbnN0cnVtZW50YXRpb25fMSA9IHJlcXVpcmUoXCJAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb25cIik7XG5jb25zdCBzZW1hbnRpY19jb252ZW50aW9uc18xID0gcmVxdWlyZShcIkBvcGVudGVsZW1ldHJ5L3NlbWFudGljLWNvbnZlbnRpb25zXCIpO1xuZnVuY3Rpb24gZ2V0QXR0cmlidXRlc0Zyb21Db2xsZWN0aW9uKGNvbGxlY3Rpb24pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBbc2VtYW50aWNfY29udmVudGlvbnNfMS5TRU1BVFRSU19EQl9NT05HT0RCX0NPTExFQ1RJT05dOiBjb2xsZWN0aW9uLm5hbWUsXG4gICAgICAgIFtzZW1hbnRpY19jb252ZW50aW9uc18xLlNFTUFUVFJTX0RCX05BTUVdOiBjb2xsZWN0aW9uLmNvbm4ubmFtZSxcbiAgICAgICAgW3NlbWFudGljX2NvbnZlbnRpb25zXzEuU0VNQVRUUlNfREJfVVNFUl06IGNvbGxlY3Rpb24uY29ubi51c2VyLFxuICAgICAgICBbc2VtYW50aWNfY29udmVudGlvbnNfMS5TRU1BVFRSU19ORVRfUEVFUl9OQU1FXTogY29sbGVjdGlvbi5jb25uLmhvc3QsXG4gICAgICAgIFtzZW1hbnRpY19jb252ZW50aW9uc18xLlNFTUFUVFJTX05FVF9QRUVSX1BPUlRdOiBjb2xsZWN0aW9uLmNvbm4ucG9ydCxcbiAgICB9O1xufVxuZXhwb3J0cy5nZXRBdHRyaWJ1dGVzRnJvbUNvbGxlY3Rpb24gPSBnZXRBdHRyaWJ1dGVzRnJvbUNvbGxlY3Rpb247XG5mdW5jdGlvbiBzZXRFcnJvclN0YXR1cyhzcGFuLCBlcnJvciA9IHt9KSB7XG4gICAgc3Bhbi5yZWNvcmRFeGNlcHRpb24oZXJyb3IpO1xuICAgIHNwYW4uc2V0U3RhdHVzKHtcbiAgICAgICAgY29kZTogYXBpXzEuU3BhblN0YXR1c0NvZGUuRVJST1IsXG4gICAgICAgIG1lc3NhZ2U6IGAke2Vycm9yLm1lc3NhZ2V9ICR7ZXJyb3IuY29kZSA/IGBcXG5Nb25nb29zZSBFcnJvciBDb2RlOiAke2Vycm9yLmNvZGV9YCA6ICcnfWAsXG4gICAgfSk7XG59XG5mdW5jdGlvbiBhcHBseVJlc3BvbnNlSG9vayhzcGFuLCByZXNwb25zZSwgcmVzcG9uc2VIb29rLCBtb2R1bGVWZXJzaW9uID0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKCFyZXNwb25zZUhvb2spIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAoMCwgaW5zdHJ1bWVudGF0aW9uXzEuc2FmZUV4ZWN1dGVJblRoZU1pZGRsZSkoKCkgPT4gcmVzcG9uc2VIb29rKHNwYW4sIHsgbW9kdWxlVmVyc2lvbiwgcmVzcG9uc2UgfSksIGUgPT4ge1xuICAgICAgICBpZiAoZSkge1xuICAgICAgICAgICAgYXBpXzEuZGlhZy5lcnJvcignbW9uZ29vc2UgaW5zdHJ1bWVudGF0aW9uOiByZXNwb25zZUhvb2sgZXJyb3InLCBlKTtcbiAgICAgICAgfVxuICAgIH0sIHRydWUpO1xufVxuZnVuY3Rpb24gaGFuZGxlUHJvbWlzZVJlc3BvbnNlKGV4ZWNSZXNwb25zZSwgc3BhbiwgcmVzcG9uc2VIb29rLCBtb2R1bGVWZXJzaW9uID0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKCEoZXhlY1Jlc3BvbnNlIGluc3RhbmNlb2YgUHJvbWlzZSkpIHtcbiAgICAgICAgYXBwbHlSZXNwb25zZUhvb2soc3BhbiwgZXhlY1Jlc3BvbnNlLCByZXNwb25zZUhvb2ssIG1vZHVsZVZlcnNpb24pO1xuICAgICAgICBzcGFuLmVuZCgpO1xuICAgICAgICByZXR1cm4gZXhlY1Jlc3BvbnNlO1xuICAgIH1cbiAgICByZXR1cm4gZXhlY1Jlc3BvbnNlXG4gICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgYXBwbHlSZXNwb25zZUhvb2soc3BhbiwgcmVzcG9uc2UsIHJlc3BvbnNlSG9vaywgbW9kdWxlVmVyc2lvbik7XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9KVxuICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgc2V0RXJyb3JTdGF0dXMoc3BhbiwgZXJyKTtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgIH0pXG4gICAgICAgIC5maW5hbGx5KCgpID0+IHNwYW4uZW5kKCkpO1xufVxuZXhwb3J0cy5oYW5kbGVQcm9taXNlUmVzcG9uc2UgPSBoYW5kbGVQcm9taXNlUmVzcG9uc2U7XG5mdW5jdGlvbiBoYW5kbGVDYWxsYmFja1Jlc3BvbnNlKGNhbGxiYWNrLCBleGVjLCBvcmlnaW5hbFRoaXMsIHNwYW4sIGFyZ3MsIHJlc3BvbnNlSG9vaywgbW9kdWxlVmVyc2lvbiA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBjYWxsYmFja0FyZ3VtZW50SW5kZXggPSAwO1xuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICBjYWxsYmFja0FyZ3VtZW50SW5kZXggPSAxO1xuICAgIH1cbiAgICBlbHNlIGlmIChhcmdzLmxlbmd0aCA9PT0gMykge1xuICAgICAgICBjYWxsYmFja0FyZ3VtZW50SW5kZXggPSAyO1xuICAgIH1cbiAgICBhcmdzW2NhbGxiYWNrQXJndW1lbnRJbmRleF0gPSAoZXJyLCByZXNwb25zZSkgPT4ge1xuICAgICAgICBlcnJcbiAgICAgICAgICAgID8gc2V0RXJyb3JTdGF0dXMoc3BhbiwgZXJyKVxuICAgICAgICAgICAgOiBhcHBseVJlc3BvbnNlSG9vayhzcGFuLCByZXNwb25zZSwgcmVzcG9uc2VIb29rLCBtb2R1bGVWZXJzaW9uKTtcbiAgICAgICAgc3Bhbi5lbmQoKTtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVyciwgcmVzcG9uc2UpO1xuICAgIH07XG4gICAgcmV0dXJuIGV4ZWMuYXBwbHkob3JpZ2luYWxUaGlzLCBhcmdzKTtcbn1cbmV4cG9ydHMuaGFuZGxlQ2FsbGJhY2tSZXNwb25zZSA9IGhhbmRsZUNhbGxiYWNrUmVzcG9uc2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-mongoose/build/src/utils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-mongoose/build/src/version.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-mongoose/build/src/version.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PACKAGE_NAME = exports.PACKAGE_VERSION = void 0;\n// this is autogenerated file, see scripts/version-update.js\nexports.PACKAGE_VERSION = '0.50.0';\nexports.PACKAGE_NAME = '@opentelemetry/instrumentation-mongoose';\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1tb25nb29zZS9idWlsZC9zcmMvdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0IsR0FBRyx1QkFBdUI7QUFDOUM7QUFDQSx1QkFBdUI7QUFDdkIsb0JBQW9CO0FBQ3BCIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1tb25nb29zZS9idWlsZC9zcmMvdmVyc2lvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlBBQ0tBR0VfTkFNRSA9IGV4cG9ydHMuUEFDS0FHRV9WRVJTSU9OID0gdm9pZCAwO1xuLy8gdGhpcyBpcyBhdXRvZ2VuZXJhdGVkIGZpbGUsIHNlZSBzY3JpcHRzL3ZlcnNpb24tdXBkYXRlLmpzXG5leHBvcnRzLlBBQ0tBR0VfVkVSU0lPTiA9ICcwLjUwLjAnO1xuZXhwb3J0cy5QQUNLQUdFX05BTUUgPSAnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLW1vbmdvb3NlJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-mongoose/build/src/version.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-mysql/build/src/AttributeNames.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-mysql/build/src/AttributeNames.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AttributeNames = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Mysql specific attributes not covered by semantic conventions\nvar AttributeNames;\n(function (AttributeNames) {\n    AttributeNames[\"MYSQL_VALUES\"] = \"db.mysql.values\";\n})(AttributeNames = exports.AttributeNames || (exports.AttributeNames = {}));\n//# sourceMappingURL=AttributeNames.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1teXNxbC9idWlsZC9zcmMvQXR0cmlidXRlTmFtZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw4Q0FBOEMsc0JBQXNCLEtBQUs7QUFDMUUiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLW15c3FsL2J1aWxkL3NyYy9BdHRyaWJ1dGVOYW1lcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXR0cmlidXRlTmFtZXMgPSB2b2lkIDA7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLy8gTXlzcWwgc3BlY2lmaWMgYXR0cmlidXRlcyBub3QgY292ZXJlZCBieSBzZW1hbnRpYyBjb252ZW50aW9uc1xudmFyIEF0dHJpYnV0ZU5hbWVzO1xuKGZ1bmN0aW9uIChBdHRyaWJ1dGVOYW1lcykge1xuICAgIEF0dHJpYnV0ZU5hbWVzW1wiTVlTUUxfVkFMVUVTXCJdID0gXCJkYi5teXNxbC52YWx1ZXNcIjtcbn0pKEF0dHJpYnV0ZU5hbWVzID0gZXhwb3J0cy5BdHRyaWJ1dGVOYW1lcyB8fCAoZXhwb3J0cy5BdHRyaWJ1dGVOYW1lcyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BdHRyaWJ1dGVOYW1lcy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-mysql/build/src/AttributeNames.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-mysql/build/src/index.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-mysql/build/src/index.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MySQLInstrumentation = void 0;\nvar instrumentation_1 = __webpack_require__(/*! ./instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-mysql/build/src/instrumentation.js\");\nObject.defineProperty(exports, \"MySQLInstrumentation\", ({ enumerable: true, get: function () { return instrumentation_1.MySQLInstrumentation; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1teXNxbC9idWlsZC9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNEJBQTRCO0FBQzVCLHdCQUF3QixtQkFBTyxDQUFDLHdIQUFtQjtBQUNuRCx3REFBdUQsRUFBRSxxQ0FBcUMsa0RBQWtELEVBQUM7QUFDakoiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLW15c3FsL2J1aWxkL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk15U1FMSW5zdHJ1bWVudGF0aW9uID0gdm9pZCAwO1xudmFyIGluc3RydW1lbnRhdGlvbl8xID0gcmVxdWlyZShcIi4vaW5zdHJ1bWVudGF0aW9uXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTXlTUUxJbnN0cnVtZW50YXRpb25cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGluc3RydW1lbnRhdGlvbl8xLk15U1FMSW5zdHJ1bWVudGF0aW9uOyB9IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-mysql/build/src/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-mysql/build/src/instrumentation.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-mysql/build/src/instrumentation.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = \"/monitoring\";globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.2\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MySQLInstrumentation = void 0;\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst AttributeNames_1 = __webpack_require__(/*! ./AttributeNames */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-mysql/build/src/AttributeNames.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-mysql/build/src/utils.js\");\n/** @knipignore */\nconst version_1 = __webpack_require__(/*! ./version */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-mysql/build/src/version.js\");\nclass MySQLInstrumentation extends instrumentation_1.InstrumentationBase {\n    static COMMON_ATTRIBUTES = {\n        [semantic_conventions_1.SEMATTRS_DB_SYSTEM]: semantic_conventions_1.DBSYSTEMVALUES_MYSQL,\n    };\n    constructor(config = {}) {\n        super(version_1.PACKAGE_NAME, version_1.PACKAGE_VERSION, config);\n        this._setMetricInstruments();\n    }\n    setMeterProvider(meterProvider) {\n        super.setMeterProvider(meterProvider);\n        this._setMetricInstruments();\n    }\n    _setMetricInstruments() {\n        this._connectionsUsage = this.meter.createUpDownCounter('db.client.connections.usage', //TODO:: use semantic convention\n        {\n            description: 'The number of connections that are currently in state described by the state attribute.',\n            unit: '{connection}',\n        });\n    }\n    init() {\n        return [\n            new instrumentation_1.InstrumentationNodeModuleDefinition('mysql', ['>=2.0.0 <3'], (moduleExports) => {\n                if ((0, instrumentation_1.isWrapped)(moduleExports.createConnection)) {\n                    this._unwrap(moduleExports, 'createConnection');\n                }\n                this._wrap(moduleExports, 'createConnection', this._patchCreateConnection());\n                if ((0, instrumentation_1.isWrapped)(moduleExports.createPool)) {\n                    this._unwrap(moduleExports, 'createPool');\n                }\n                this._wrap(moduleExports, 'createPool', this._patchCreatePool());\n                if ((0, instrumentation_1.isWrapped)(moduleExports.createPoolCluster)) {\n                    this._unwrap(moduleExports, 'createPoolCluster');\n                }\n                this._wrap(moduleExports, 'createPoolCluster', this._patchCreatePoolCluster());\n                return moduleExports;\n            }, (moduleExports) => {\n                if (moduleExports === undefined)\n                    return;\n                this._unwrap(moduleExports, 'createConnection');\n                this._unwrap(moduleExports, 'createPool');\n                this._unwrap(moduleExports, 'createPoolCluster');\n            }),\n        ];\n    }\n    // global export function\n    _patchCreateConnection() {\n        return (originalCreateConnection) => {\n            const thisPlugin = this;\n            return function createConnection(_connectionUri) {\n                const originalResult = originalCreateConnection(...arguments);\n                // This is unwrapped on next call after unpatch\n                thisPlugin._wrap(originalResult, 'query', thisPlugin._patchQuery(originalResult));\n                return originalResult;\n            };\n        };\n    }\n    // global export function\n    _patchCreatePool() {\n        return (originalCreatePool) => {\n            const thisPlugin = this;\n            return function createPool(_config) {\n                const pool = originalCreatePool(...arguments);\n                thisPlugin._wrap(pool, 'query', thisPlugin._patchQuery(pool));\n                thisPlugin._wrap(pool, 'getConnection', thisPlugin._patchGetConnection(pool));\n                thisPlugin._wrap(pool, 'end', thisPlugin._patchPoolEnd(pool));\n                thisPlugin._setPoolcallbacks(pool, thisPlugin, '');\n                return pool;\n            };\n        };\n    }\n    _patchPoolEnd(pool) {\n        return (originalPoolEnd) => {\n            const thisPlugin = this;\n            return function end(callback) {\n                const nAll = pool._allConnections.length;\n                const nFree = pool._freeConnections.length;\n                const nUsed = nAll - nFree;\n                const poolName = (0, utils_1.getPoolName)(pool);\n                thisPlugin._connectionsUsage.add(-nUsed, {\n                    state: 'used',\n                    name: poolName,\n                });\n                thisPlugin._connectionsUsage.add(-nFree, {\n                    state: 'idle',\n                    name: poolName,\n                });\n                originalPoolEnd.apply(pool, arguments);\n            };\n        };\n    }\n    // global export function\n    _patchCreatePoolCluster() {\n        return (originalCreatePoolCluster) => {\n            const thisPlugin = this;\n            return function createPool(_config) {\n                const cluster = originalCreatePoolCluster(...arguments);\n                // This is unwrapped on next call after unpatch\n                thisPlugin._wrap(cluster, 'getConnection', thisPlugin._patchGetConnection(cluster));\n                thisPlugin._wrap(cluster, 'add', thisPlugin._patchAdd(cluster));\n                return cluster;\n            };\n        };\n    }\n    _patchAdd(cluster) {\n        return (originalAdd) => {\n            const thisPlugin = this;\n            return function add(id, config) {\n                // Unwrap if unpatch has been called\n                if (!thisPlugin['_enabled']) {\n                    thisPlugin._unwrap(cluster, 'add');\n                    return originalAdd.apply(cluster, arguments);\n                }\n                originalAdd.apply(cluster, arguments);\n                const nodes = cluster['_nodes'];\n                if (nodes) {\n                    const nodeId = typeof id === 'object'\n                        ? 'CLUSTER::' + cluster._lastId\n                        : String(id);\n                    const pool = nodes[nodeId].pool;\n                    thisPlugin._setPoolcallbacks(pool, thisPlugin, id);\n                }\n            };\n        };\n    }\n    // method on cluster or pool\n    _patchGetConnection(pool) {\n        return (originalGetConnection) => {\n            const thisPlugin = this;\n            return function getConnection(arg1, arg2, arg3) {\n                // Unwrap if unpatch has been called\n                if (!thisPlugin['_enabled']) {\n                    thisPlugin._unwrap(pool, 'getConnection');\n                    return originalGetConnection.apply(pool, arguments);\n                }\n                if (arguments.length === 1 && typeof arg1 === 'function') {\n                    const patchFn = thisPlugin._getConnectionCallbackPatchFn(arg1);\n                    return originalGetConnection.call(pool, patchFn);\n                }\n                if (arguments.length === 2 && typeof arg2 === 'function') {\n                    const patchFn = thisPlugin._getConnectionCallbackPatchFn(arg2);\n                    return originalGetConnection.call(pool, arg1, patchFn);\n                }\n                if (arguments.length === 3 && typeof arg3 === 'function') {\n                    const patchFn = thisPlugin._getConnectionCallbackPatchFn(arg3);\n                    return originalGetConnection.call(pool, arg1, arg2, patchFn);\n                }\n                return originalGetConnection.apply(pool, arguments);\n            };\n        };\n    }\n    _getConnectionCallbackPatchFn(cb) {\n        const thisPlugin = this;\n        const activeContext = api_1.context.active();\n        return function (err, connection) {\n            if (connection) {\n                // this is the callback passed into a query\n                // no need to unwrap\n                if (!(0, instrumentation_1.isWrapped)(connection.query)) {\n                    thisPlugin._wrap(connection, 'query', thisPlugin._patchQuery(connection));\n                }\n            }\n            if (typeof cb === 'function') {\n                api_1.context.with(activeContext, cb, this, err, connection);\n            }\n        };\n    }\n    _patchQuery(connection) {\n        return (originalQuery) => {\n            const thisPlugin = this;\n            return function query(query, _valuesOrCallback, _callback) {\n                if (!thisPlugin['_enabled']) {\n                    thisPlugin._unwrap(connection, 'query');\n                    return originalQuery.apply(connection, arguments);\n                }\n                const span = thisPlugin.tracer.startSpan((0, utils_1.getSpanName)(query), {\n                    kind: api_1.SpanKind.CLIENT,\n                    attributes: {\n                        ...MySQLInstrumentation.COMMON_ATTRIBUTES,\n                        ...(0, utils_1.getConnectionAttributes)(connection.config),\n                    },\n                });\n                span.setAttribute(semantic_conventions_1.SEMATTRS_DB_STATEMENT, (0, utils_1.getDbStatement)(query));\n                if (thisPlugin.getConfig().enhancedDatabaseReporting) {\n                    let values;\n                    if (Array.isArray(_valuesOrCallback)) {\n                        values = _valuesOrCallback;\n                    }\n                    else if (arguments[2]) {\n                        values = [_valuesOrCallback];\n                    }\n                    span.setAttribute(AttributeNames_1.AttributeNames.MYSQL_VALUES, (0, utils_1.getDbValues)(query, values));\n                }\n                const cbIndex = Array.from(arguments).findIndex(arg => typeof arg === 'function');\n                const parentContext = api_1.context.active();\n                if (cbIndex === -1) {\n                    const streamableQuery = api_1.context.with(api_1.trace.setSpan(api_1.context.active(), span), () => {\n                        return originalQuery.apply(connection, arguments);\n                    });\n                    api_1.context.bind(parentContext, streamableQuery);\n                    return streamableQuery\n                        .on('error', err => span.setStatus({\n                        code: api_1.SpanStatusCode.ERROR,\n                        message: err.message,\n                    }))\n                        .on('end', () => {\n                        span.end();\n                    });\n                }\n                else {\n                    thisPlugin._wrap(arguments, cbIndex, thisPlugin._patchCallbackQuery(span, parentContext));\n                    return api_1.context.with(api_1.trace.setSpan(api_1.context.active(), span), () => {\n                        return originalQuery.apply(connection, arguments);\n                    });\n                }\n            };\n        };\n    }\n    _patchCallbackQuery(span, parentContext) {\n        return (originalCallback) => {\n            return function (err, results, fields) {\n                if (err) {\n                    span.setStatus({\n                        code: api_1.SpanStatusCode.ERROR,\n                        message: err.message,\n                    });\n                }\n                span.end();\n                return api_1.context.with(parentContext, () => originalCallback(...arguments));\n            };\n        };\n    }\n    _setPoolcallbacks(pool, thisPlugin, id) {\n        //TODO:: use semantic convention\n        const poolName = id || (0, utils_1.getPoolName)(pool);\n        pool.on('connection', connection => {\n            thisPlugin._connectionsUsage.add(1, {\n                state: 'idle',\n                name: poolName,\n            });\n        });\n        pool.on('acquire', connection => {\n            thisPlugin._connectionsUsage.add(-1, {\n                state: 'idle',\n                name: poolName,\n            });\n            thisPlugin._connectionsUsage.add(1, {\n                state: 'used',\n                name: poolName,\n            });\n        });\n        pool.on('release', connection => {\n            thisPlugin._connectionsUsage.add(-1, {\n                state: 'used',\n                name: poolName,\n            });\n            thisPlugin._connectionsUsage.add(1, {\n                state: 'idle',\n                name: poolName,\n            });\n        });\n    }\n}\nexports.MySQLInstrumentation = MySQLInstrumentation;\n//# sourceMappingURL=instrumentation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-mysql/build/src/instrumentation.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-mysql/build/src/utils.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-mysql/build/src/utils.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getPoolName = exports.arrayStringifyHelper = exports.getSpanName = exports.getDbValues = exports.getDbStatement = exports.getConnectionAttributes = void 0;\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\n/**\n * Get an Attributes map from a mysql connection config object\n *\n * @param config ConnectionConfig\n */\nfunction getConnectionAttributes(config) {\n    const { host, port, database, user } = getConfig(config);\n    const portNumber = parseInt(port, 10);\n    if (!isNaN(portNumber)) {\n        return {\n            [semantic_conventions_1.SEMATTRS_NET_PEER_NAME]: host,\n            [semantic_conventions_1.SEMATTRS_NET_PEER_PORT]: portNumber,\n            [semantic_conventions_1.SEMATTRS_DB_CONNECTION_STRING]: getJDBCString(host, port, database),\n            [semantic_conventions_1.SEMATTRS_DB_NAME]: database,\n            [semantic_conventions_1.SEMATTRS_DB_USER]: user,\n        };\n    }\n    return {\n        [semantic_conventions_1.SEMATTRS_NET_PEER_NAME]: host,\n        [semantic_conventions_1.SEMATTRS_DB_CONNECTION_STRING]: getJDBCString(host, port, database),\n        [semantic_conventions_1.SEMATTRS_DB_NAME]: database,\n        [semantic_conventions_1.SEMATTRS_DB_USER]: user,\n    };\n}\nexports.getConnectionAttributes = getConnectionAttributes;\nfunction getConfig(config) {\n    const { host, port, database, user } = (config && config.connectionConfig) || config || {};\n    return { host, port, database, user };\n}\nfunction getJDBCString(host, port, database) {\n    let jdbcString = `jdbc:mysql://${host || 'localhost'}`;\n    if (typeof port === 'number') {\n        jdbcString += `:${port}`;\n    }\n    if (typeof database === 'string') {\n        jdbcString += `/${database}`;\n    }\n    return jdbcString;\n}\n/**\n * @returns the database statement being executed.\n */\nfunction getDbStatement(query) {\n    if (typeof query === 'string') {\n        return query;\n    }\n    else {\n        return query.sql;\n    }\n}\nexports.getDbStatement = getDbStatement;\nfunction getDbValues(query, values) {\n    if (typeof query === 'string') {\n        return arrayStringifyHelper(values);\n    }\n    else {\n        // According to https://github.com/mysqljs/mysql#performing-queries\n        // The values argument will override the values in the option object.\n        return arrayStringifyHelper(values || query.values);\n    }\n}\nexports.getDbValues = getDbValues;\n/**\n * The span name SHOULD be set to a low cardinality value\n * representing the statement executed on the database.\n *\n * @returns SQL statement without variable arguments or SQL verb\n */\nfunction getSpanName(query) {\n    const rawQuery = typeof query === 'object' ? query.sql : query;\n    // Extract the SQL verb\n    const firstSpace = rawQuery?.indexOf(' ');\n    if (typeof firstSpace === 'number' && firstSpace !== -1) {\n        return rawQuery?.substring(0, firstSpace);\n    }\n    return rawQuery;\n}\nexports.getSpanName = getSpanName;\nfunction arrayStringifyHelper(arr) {\n    if (arr)\n        return `[${arr.toString()}]`;\n    return '';\n}\nexports.arrayStringifyHelper = arrayStringifyHelper;\nfunction getPoolName(pool) {\n    const c = pool.config.connectionConfig;\n    let poolName = '';\n    poolName += c.host ? `host: '${c.host}', ` : '';\n    poolName += c.port ? `port: ${c.port}, ` : '';\n    poolName += c.database ? `database: '${c.database}', ` : '';\n    poolName += c.user ? `user: '${c.user}'` : '';\n    if (!c.user) {\n        poolName = poolName.substring(0, poolName.length - 2); //omit last comma\n    }\n    return poolName.trim();\n}\nexports.getPoolName = getPoolName;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1teXNxbC9idWlsZC9zcmMvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsbUJBQW1CLEdBQUcsNEJBQTRCLEdBQUcsbUJBQW1CLEdBQUcsbUJBQW1CLEdBQUcsc0JBQXNCLEdBQUcsK0JBQStCO0FBQ3pKLCtCQUErQixtQkFBTyxDQUFDLCtIQUFxQztBQUM1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDZCQUE2QjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0EsWUFBWSw2QkFBNkI7QUFDekMsYUFBYTtBQUNiO0FBQ0E7QUFDQSxxQ0FBcUMsb0JBQW9CO0FBQ3pEO0FBQ0EsMEJBQTBCLEtBQUs7QUFDL0I7QUFDQTtBQUNBLDBCQUEwQixTQUFTO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQSxtQkFBbUIsZUFBZTtBQUNsQztBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxPQUFPO0FBQzFDLGtDQUFrQyxPQUFPO0FBQ3pDLDJDQUEyQyxXQUFXO0FBQ3RELG1DQUFtQyxPQUFPO0FBQzFDO0FBQ0EsK0RBQStEO0FBQy9EO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQiIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tbXlzcWwvYnVpbGQvc3JjL3V0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0UG9vbE5hbWUgPSBleHBvcnRzLmFycmF5U3RyaW5naWZ5SGVscGVyID0gZXhwb3J0cy5nZXRTcGFuTmFtZSA9IGV4cG9ydHMuZ2V0RGJWYWx1ZXMgPSBleHBvcnRzLmdldERiU3RhdGVtZW50ID0gZXhwb3J0cy5nZXRDb25uZWN0aW9uQXR0cmlidXRlcyA9IHZvaWQgMDtcbmNvbnN0IHNlbWFudGljX2NvbnZlbnRpb25zXzEgPSByZXF1aXJlKFwiQG9wZW50ZWxlbWV0cnkvc2VtYW50aWMtY29udmVudGlvbnNcIik7XG4vKipcbiAqIEdldCBhbiBBdHRyaWJ1dGVzIG1hcCBmcm9tIGEgbXlzcWwgY29ubmVjdGlvbiBjb25maWcgb2JqZWN0XG4gKlxuICogQHBhcmFtIGNvbmZpZyBDb25uZWN0aW9uQ29uZmlnXG4gKi9cbmZ1bmN0aW9uIGdldENvbm5lY3Rpb25BdHRyaWJ1dGVzKGNvbmZpZykge1xuICAgIGNvbnN0IHsgaG9zdCwgcG9ydCwgZGF0YWJhc2UsIHVzZXIgfSA9IGdldENvbmZpZyhjb25maWcpO1xuICAgIGNvbnN0IHBvcnROdW1iZXIgPSBwYXJzZUludChwb3J0LCAxMCk7XG4gICAgaWYgKCFpc05hTihwb3J0TnVtYmVyKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgW3NlbWFudGljX2NvbnZlbnRpb25zXzEuU0VNQVRUUlNfTkVUX1BFRVJfTkFNRV06IGhvc3QsXG4gICAgICAgICAgICBbc2VtYW50aWNfY29udmVudGlvbnNfMS5TRU1BVFRSU19ORVRfUEVFUl9QT1JUXTogcG9ydE51bWJlcixcbiAgICAgICAgICAgIFtzZW1hbnRpY19jb252ZW50aW9uc18xLlNFTUFUVFJTX0RCX0NPTk5FQ1RJT05fU1RSSU5HXTogZ2V0SkRCQ1N0cmluZyhob3N0LCBwb3J0LCBkYXRhYmFzZSksXG4gICAgICAgICAgICBbc2VtYW50aWNfY29udmVudGlvbnNfMS5TRU1BVFRSU19EQl9OQU1FXTogZGF0YWJhc2UsXG4gICAgICAgICAgICBbc2VtYW50aWNfY29udmVudGlvbnNfMS5TRU1BVFRSU19EQl9VU0VSXTogdXNlcixcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgW3NlbWFudGljX2NvbnZlbnRpb25zXzEuU0VNQVRUUlNfTkVUX1BFRVJfTkFNRV06IGhvc3QsXG4gICAgICAgIFtzZW1hbnRpY19jb252ZW50aW9uc18xLlNFTUFUVFJTX0RCX0NPTk5FQ1RJT05fU1RSSU5HXTogZ2V0SkRCQ1N0cmluZyhob3N0LCBwb3J0LCBkYXRhYmFzZSksXG4gICAgICAgIFtzZW1hbnRpY19jb252ZW50aW9uc18xLlNFTUFUVFJTX0RCX05BTUVdOiBkYXRhYmFzZSxcbiAgICAgICAgW3NlbWFudGljX2NvbnZlbnRpb25zXzEuU0VNQVRUUlNfREJfVVNFUl06IHVzZXIsXG4gICAgfTtcbn1cbmV4cG9ydHMuZ2V0Q29ubmVjdGlvbkF0dHJpYnV0ZXMgPSBnZXRDb25uZWN0aW9uQXR0cmlidXRlcztcbmZ1bmN0aW9uIGdldENvbmZpZyhjb25maWcpIHtcbiAgICBjb25zdCB7IGhvc3QsIHBvcnQsIGRhdGFiYXNlLCB1c2VyIH0gPSAoY29uZmlnICYmIGNvbmZpZy5jb25uZWN0aW9uQ29uZmlnKSB8fCBjb25maWcgfHwge307XG4gICAgcmV0dXJuIHsgaG9zdCwgcG9ydCwgZGF0YWJhc2UsIHVzZXIgfTtcbn1cbmZ1bmN0aW9uIGdldEpEQkNTdHJpbmcoaG9zdCwgcG9ydCwgZGF0YWJhc2UpIHtcbiAgICBsZXQgamRiY1N0cmluZyA9IGBqZGJjOm15c3FsOi8vJHtob3N0IHx8ICdsb2NhbGhvc3QnfWA7XG4gICAgaWYgKHR5cGVvZiBwb3J0ID09PSAnbnVtYmVyJykge1xuICAgICAgICBqZGJjU3RyaW5nICs9IGA6JHtwb3J0fWA7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZGF0YWJhc2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGpkYmNTdHJpbmcgKz0gYC8ke2RhdGFiYXNlfWA7XG4gICAgfVxuICAgIHJldHVybiBqZGJjU3RyaW5nO1xufVxuLyoqXG4gKiBAcmV0dXJucyB0aGUgZGF0YWJhc2Ugc3RhdGVtZW50IGJlaW5nIGV4ZWN1dGVkLlxuICovXG5mdW5jdGlvbiBnZXREYlN0YXRlbWVudChxdWVyeSkge1xuICAgIGlmICh0eXBlb2YgcXVlcnkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBxdWVyeTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBxdWVyeS5zcWw7XG4gICAgfVxufVxuZXhwb3J0cy5nZXREYlN0YXRlbWVudCA9IGdldERiU3RhdGVtZW50O1xuZnVuY3Rpb24gZ2V0RGJWYWx1ZXMocXVlcnksIHZhbHVlcykge1xuICAgIGlmICh0eXBlb2YgcXVlcnkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBhcnJheVN0cmluZ2lmeUhlbHBlcih2YWx1ZXMpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gQWNjb3JkaW5nIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9teXNxbGpzL215c3FsI3BlcmZvcm1pbmctcXVlcmllc1xuICAgICAgICAvLyBUaGUgdmFsdWVzIGFyZ3VtZW50IHdpbGwgb3ZlcnJpZGUgdGhlIHZhbHVlcyBpbiB0aGUgb3B0aW9uIG9iamVjdC5cbiAgICAgICAgcmV0dXJuIGFycmF5U3RyaW5naWZ5SGVscGVyKHZhbHVlcyB8fCBxdWVyeS52YWx1ZXMpO1xuICAgIH1cbn1cbmV4cG9ydHMuZ2V0RGJWYWx1ZXMgPSBnZXREYlZhbHVlcztcbi8qKlxuICogVGhlIHNwYW4gbmFtZSBTSE9VTEQgYmUgc2V0IHRvIGEgbG93IGNhcmRpbmFsaXR5IHZhbHVlXG4gKiByZXByZXNlbnRpbmcgdGhlIHN0YXRlbWVudCBleGVjdXRlZCBvbiB0aGUgZGF0YWJhc2UuXG4gKlxuICogQHJldHVybnMgU1FMIHN0YXRlbWVudCB3aXRob3V0IHZhcmlhYmxlIGFyZ3VtZW50cyBvciBTUUwgdmVyYlxuICovXG5mdW5jdGlvbiBnZXRTcGFuTmFtZShxdWVyeSkge1xuICAgIGNvbnN0IHJhd1F1ZXJ5ID0gdHlwZW9mIHF1ZXJ5ID09PSAnb2JqZWN0JyA/IHF1ZXJ5LnNxbCA6IHF1ZXJ5O1xuICAgIC8vIEV4dHJhY3QgdGhlIFNRTCB2ZXJiXG4gICAgY29uc3QgZmlyc3RTcGFjZSA9IHJhd1F1ZXJ5Py5pbmRleE9mKCcgJyk7XG4gICAgaWYgKHR5cGVvZiBmaXJzdFNwYWNlID09PSAnbnVtYmVyJyAmJiBmaXJzdFNwYWNlICE9PSAtMSkge1xuICAgICAgICByZXR1cm4gcmF3UXVlcnk/LnN1YnN0cmluZygwLCBmaXJzdFNwYWNlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJhd1F1ZXJ5O1xufVxuZXhwb3J0cy5nZXRTcGFuTmFtZSA9IGdldFNwYW5OYW1lO1xuZnVuY3Rpb24gYXJyYXlTdHJpbmdpZnlIZWxwZXIoYXJyKSB7XG4gICAgaWYgKGFycilcbiAgICAgICAgcmV0dXJuIGBbJHthcnIudG9TdHJpbmcoKX1dYDtcbiAgICByZXR1cm4gJyc7XG59XG5leHBvcnRzLmFycmF5U3RyaW5naWZ5SGVscGVyID0gYXJyYXlTdHJpbmdpZnlIZWxwZXI7XG5mdW5jdGlvbiBnZXRQb29sTmFtZShwb29sKSB7XG4gICAgY29uc3QgYyA9IHBvb2wuY29uZmlnLmNvbm5lY3Rpb25Db25maWc7XG4gICAgbGV0IHBvb2xOYW1lID0gJyc7XG4gICAgcG9vbE5hbWUgKz0gYy5ob3N0ID8gYGhvc3Q6ICcke2MuaG9zdH0nLCBgIDogJyc7XG4gICAgcG9vbE5hbWUgKz0gYy5wb3J0ID8gYHBvcnQ6ICR7Yy5wb3J0fSwgYCA6ICcnO1xuICAgIHBvb2xOYW1lICs9IGMuZGF0YWJhc2UgPyBgZGF0YWJhc2U6ICcke2MuZGF0YWJhc2V9JywgYCA6ICcnO1xuICAgIHBvb2xOYW1lICs9IGMudXNlciA/IGB1c2VyOiAnJHtjLnVzZXJ9J2AgOiAnJztcbiAgICBpZiAoIWMudXNlcikge1xuICAgICAgICBwb29sTmFtZSA9IHBvb2xOYW1lLnN1YnN0cmluZygwLCBwb29sTmFtZS5sZW5ndGggLSAyKTsgLy9vbWl0IGxhc3QgY29tbWFcbiAgICB9XG4gICAgcmV0dXJuIHBvb2xOYW1lLnRyaW0oKTtcbn1cbmV4cG9ydHMuZ2V0UG9vbE5hbWUgPSBnZXRQb29sTmFtZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-mysql/build/src/utils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-mysql/build/src/version.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-mysql/build/src/version.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PACKAGE_NAME = exports.PACKAGE_VERSION = void 0;\n// this is autogenerated file, see scripts/version-update.js\nexports.PACKAGE_VERSION = '0.49.0';\nexports.PACKAGE_NAME = '@opentelemetry/instrumentation-mysql';\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1teXNxbC9idWlsZC9zcmMvdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0IsR0FBRyx1QkFBdUI7QUFDOUM7QUFDQSx1QkFBdUI7QUFDdkIsb0JBQW9CO0FBQ3BCIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1teXNxbC9idWlsZC9zcmMvdmVyc2lvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlBBQ0tBR0VfTkFNRSA9IGV4cG9ydHMuUEFDS0FHRV9WRVJTSU9OID0gdm9pZCAwO1xuLy8gdGhpcyBpcyBhdXRvZ2VuZXJhdGVkIGZpbGUsIHNlZSBzY3JpcHRzL3ZlcnNpb24tdXBkYXRlLmpzXG5leHBvcnRzLlBBQ0tBR0VfVkVSU0lPTiA9ICcwLjQ5LjAnO1xuZXhwb3J0cy5QQUNLQUdFX05BTUUgPSAnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLW15c3FsJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-mysql/build/src/version.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-mysql2/build/src/index.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-mysql2/build/src/index.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MySQL2Instrumentation = void 0;\nvar instrumentation_1 = __webpack_require__(/*! ./instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-mysql2/build/src/instrumentation.js\");\nObject.defineProperty(exports, \"MySQL2Instrumentation\", ({ enumerable: true, get: function () { return instrumentation_1.MySQL2Instrumentation; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1teXNxbDIvYnVpbGQvc3JjL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDZCQUE2QjtBQUM3Qix3QkFBd0IsbUJBQU8sQ0FBQyx5SEFBbUI7QUFDbkQseURBQXdELEVBQUUscUNBQXFDLG1EQUFtRCxFQUFDO0FBQ25KIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1teXNxbDIvYnVpbGQvc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTXlTUUwySW5zdHJ1bWVudGF0aW9uID0gdm9pZCAwO1xudmFyIGluc3RydW1lbnRhdGlvbl8xID0gcmVxdWlyZShcIi4vaW5zdHJ1bWVudGF0aW9uXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTXlTUUwySW5zdHJ1bWVudGF0aW9uXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpbnN0cnVtZW50YXRpb25fMS5NeVNRTDJJbnN0cnVtZW50YXRpb247IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-mysql2/build/src/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-mysql2/build/src/instrumentation.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-mysql2/build/src/instrumentation.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = \"/monitoring\";globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.2\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MySQL2Instrumentation = void 0;\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst sql_common_1 = __webpack_require__(/*! @opentelemetry/sql-common */ \"(instrument)/./node_modules/@opentelemetry/sql-common/build/src/index.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-mysql2/build/src/utils.js\");\n/** @knipignore */\nconst version_1 = __webpack_require__(/*! ./version */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-mysql2/build/src/version.js\");\nconst supportedVersions = ['>=1.4.2 <4'];\nclass MySQL2Instrumentation extends instrumentation_1.InstrumentationBase {\n    static COMMON_ATTRIBUTES = {\n        [semantic_conventions_1.SEMATTRS_DB_SYSTEM]: semantic_conventions_1.DBSYSTEMVALUES_MYSQL,\n    };\n    constructor(config = {}) {\n        super(version_1.PACKAGE_NAME, version_1.PACKAGE_VERSION, config);\n    }\n    init() {\n        let format;\n        function setFormatFunction(moduleExports) {\n            if (!format && moduleExports.format) {\n                format = moduleExports.format;\n            }\n        }\n        const patch = (ConnectionPrototype) => {\n            if ((0, instrumentation_1.isWrapped)(ConnectionPrototype.query)) {\n                this._unwrap(ConnectionPrototype, 'query');\n            }\n            this._wrap(ConnectionPrototype, 'query', this._patchQuery(format, false));\n            if ((0, instrumentation_1.isWrapped)(ConnectionPrototype.execute)) {\n                this._unwrap(ConnectionPrototype, 'execute');\n            }\n            this._wrap(ConnectionPrototype, 'execute', this._patchQuery(format, true));\n        };\n        const unpatch = (ConnectionPrototype) => {\n            this._unwrap(ConnectionPrototype, 'query');\n            this._unwrap(ConnectionPrototype, 'execute');\n        };\n        return [\n            new instrumentation_1.InstrumentationNodeModuleDefinition('mysql2', supportedVersions, (moduleExports) => {\n                setFormatFunction(moduleExports);\n                return moduleExports;\n            }, () => { }, [\n                new instrumentation_1.InstrumentationNodeModuleFile('mysql2/promise.js', supportedVersions, (moduleExports) => {\n                    setFormatFunction(moduleExports);\n                    return moduleExports;\n                }, () => { }),\n                new instrumentation_1.InstrumentationNodeModuleFile('mysql2/lib/connection.js', supportedVersions, (moduleExports) => {\n                    const ConnectionPrototype = (0, utils_1.getConnectionPrototypeToInstrument)(moduleExports);\n                    patch(ConnectionPrototype);\n                    return moduleExports;\n                }, (moduleExports) => {\n                    if (moduleExports === undefined)\n                        return;\n                    const ConnectionPrototype = (0, utils_1.getConnectionPrototypeToInstrument)(moduleExports);\n                    unpatch(ConnectionPrototype);\n                }),\n            ]),\n        ];\n    }\n    _patchQuery(format, isPrepared) {\n        return (originalQuery) => {\n            const thisPlugin = this;\n            return function query(query, _valuesOrCallback, _callback) {\n                let values;\n                if (Array.isArray(_valuesOrCallback)) {\n                    values = _valuesOrCallback;\n                }\n                else if (arguments[2]) {\n                    values = [_valuesOrCallback];\n                }\n                const { maskStatement, maskStatementHook, responseHook } = thisPlugin.getConfig();\n                const span = thisPlugin.tracer.startSpan((0, utils_1.getSpanName)(query), {\n                    kind: api.SpanKind.CLIENT,\n                    attributes: {\n                        ...MySQL2Instrumentation.COMMON_ATTRIBUTES,\n                        ...(0, utils_1.getConnectionAttributes)(this.config),\n                        [semantic_conventions_1.SEMATTRS_DB_STATEMENT]: (0, utils_1.getDbStatement)(query, format, values, maskStatement, maskStatementHook),\n                    },\n                });\n                if (!isPrepared &&\n                    thisPlugin.getConfig().addSqlCommenterCommentToQueries) {\n                    arguments[0] = query =\n                        typeof query === 'string'\n                            ? (0, sql_common_1.addSqlCommenterComment)(span, query)\n                            : Object.assign(query, {\n                                sql: (0, sql_common_1.addSqlCommenterComment)(span, query.sql),\n                            });\n                }\n                const endSpan = (0, utils_1.once)((err, results) => {\n                    if (err) {\n                        span.setStatus({\n                            code: api.SpanStatusCode.ERROR,\n                            message: err.message,\n                        });\n                    }\n                    else {\n                        if (typeof responseHook === 'function') {\n                            (0, instrumentation_1.safeExecuteInTheMiddle)(() => {\n                                responseHook(span, {\n                                    queryResults: results,\n                                });\n                            }, err => {\n                                if (err) {\n                                    thisPlugin._diag.warn('Failed executing responseHook', err);\n                                }\n                            }, true);\n                        }\n                    }\n                    span.end();\n                });\n                if (arguments.length === 1) {\n                    if (typeof query.onResult === 'function') {\n                        thisPlugin._wrap(query, 'onResult', thisPlugin._patchCallbackQuery(endSpan));\n                    }\n                    const streamableQuery = originalQuery.apply(this, arguments);\n                    // `end` in mysql behaves similarly to `result` in mysql2.\n                    streamableQuery\n                        .once('error', err => {\n                        endSpan(err);\n                    })\n                        .once('result', results => {\n                        endSpan(undefined, results);\n                    });\n                    return streamableQuery;\n                }\n                if (typeof arguments[1] === 'function') {\n                    thisPlugin._wrap(arguments, 1, thisPlugin._patchCallbackQuery(endSpan));\n                }\n                else if (typeof arguments[2] === 'function') {\n                    thisPlugin._wrap(arguments, 2, thisPlugin._patchCallbackQuery(endSpan));\n                }\n                return originalQuery.apply(this, arguments);\n            };\n        };\n    }\n    _patchCallbackQuery(endSpan) {\n        return (originalCallback) => {\n            return function (err, results, fields) {\n                endSpan(err, results);\n                return originalCallback(...arguments);\n            };\n        };\n    }\n}\nexports.MySQL2Instrumentation = MySQL2Instrumentation;\n//# sourceMappingURL=instrumentation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-mysql2/build/src/instrumentation.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-mysql2/build/src/utils.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-mysql2/build/src/utils.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getConnectionPrototypeToInstrument = exports.once = exports.getSpanName = exports.getDbStatement = exports.getConnectionAttributes = void 0;\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\n/**\n * Get an Attributes map from a mysql connection config object\n *\n * @param config ConnectionConfig\n */\nfunction getConnectionAttributes(config) {\n    const { host, port, database, user } = getConfig(config);\n    const portNumber = parseInt(port, 10);\n    if (!isNaN(portNumber)) {\n        return {\n            [semantic_conventions_1.SEMATTRS_NET_PEER_NAME]: host,\n            [semantic_conventions_1.SEMATTRS_NET_PEER_PORT]: portNumber,\n            [semantic_conventions_1.SEMATTRS_DB_CONNECTION_STRING]: getJDBCString(host, port, database),\n            [semantic_conventions_1.SEMATTRS_DB_NAME]: database,\n            [semantic_conventions_1.SEMATTRS_DB_USER]: user,\n        };\n    }\n    return {\n        [semantic_conventions_1.SEMATTRS_NET_PEER_NAME]: host,\n        [semantic_conventions_1.SEMATTRS_DB_CONNECTION_STRING]: getJDBCString(host, port, database),\n        [semantic_conventions_1.SEMATTRS_DB_NAME]: database,\n        [semantic_conventions_1.SEMATTRS_DB_USER]: user,\n    };\n}\nexports.getConnectionAttributes = getConnectionAttributes;\nfunction getConfig(config) {\n    const { host, port, database, user } = (config && config.connectionConfig) || config || {};\n    return { host, port, database, user };\n}\nfunction getJDBCString(host, port, database) {\n    let jdbcString = `jdbc:mysql://${host || 'localhost'}`;\n    if (typeof port === 'number') {\n        jdbcString += `:${port}`;\n    }\n    if (typeof database === 'string') {\n        jdbcString += `/${database}`;\n    }\n    return jdbcString;\n}\n/**\n * Conjures up the value for the db.statement attribute by formatting a SQL query.\n *\n * @returns the database statement being executed.\n */\nfunction getDbStatement(query, format, values, maskStatement = false, maskStatementHook = defaultMaskingHook) {\n    const [querySql, queryValues] = typeof query === 'string'\n        ? [query, values]\n        : [query.sql, hasValues(query) ? values || query.values : values];\n    try {\n        if (maskStatement) {\n            return maskStatementHook(querySql);\n        }\n        else if (format && queryValues) {\n            return format(querySql, queryValues);\n        }\n        else {\n            return querySql;\n        }\n    }\n    catch (e) {\n        return 'Could not determine the query due to an error in masking or formatting';\n    }\n}\nexports.getDbStatement = getDbStatement;\n/**\n * Replaces numeric values and quoted strings in the query with placeholders ('?').\n *\n * - `\\b\\d+\\b`: Matches whole numbers (integers) and replaces them with '?'.\n * - `([\"'])(?:(?=(\\\\?))\\2.)*?\\1`:\n *   - Matches quoted strings (both single `'` and double `\"` quotes).\n *   - Uses a lookahead `(?=(\\\\?))` to detect an optional backslash without consuming it immediately.\n *   - Captures the optional backslash `\\2` and ensures escaped quotes inside the string are handled correctly.\n *   - Ensures that only complete quoted strings are replaced with '?'.\n *\n * This prevents accidental replacement of escaped quotes within strings and ensures that the\n * query structure remains intact while masking sensitive data.\n */\nfunction defaultMaskingHook(query) {\n    return query\n        .replace(/\\b\\d+\\b/g, '?')\n        .replace(/([\"'])(?:(?=(\\\\?))\\2.)*?\\1/g, '?');\n}\nfunction hasValues(obj) {\n    return 'values' in obj;\n}\n/**\n * The span name SHOULD be set to a low cardinality value\n * representing the statement executed on the database.\n *\n * @returns SQL statement without variable arguments or SQL verb\n */\nfunction getSpanName(query) {\n    const rawQuery = typeof query === 'object' ? query.sql : query;\n    // Extract the SQL verb\n    const firstSpace = rawQuery?.indexOf(' ');\n    if (typeof firstSpace === 'number' && firstSpace !== -1) {\n        return rawQuery?.substring(0, firstSpace);\n    }\n    return rawQuery;\n}\nexports.getSpanName = getSpanName;\nconst once = (fn) => {\n    let called = false;\n    return (...args) => {\n        if (called)\n            return;\n        called = true;\n        return fn(...args);\n    };\n};\nexports.once = once;\nfunction getConnectionPrototypeToInstrument(connection) {\n    const connectionPrototype = connection.prototype;\n    const basePrototype = Object.getPrototypeOf(connectionPrototype);\n    // mysql2@3.11.5 included a refactoring, where most code was moved out of the `Connection` class and into a shared base\n    // so we need to instrument that instead, see https://github.com/sidorares/node-mysql2/pull/3081\n    // This checks if the functions we're instrumenting are there on the base - we cannot use the presence of a base\n    // prototype since EventEmitter is the base for mysql2@<=3.11.4\n    if (typeof basePrototype?.query === 'function' &&\n        typeof basePrototype?.execute === 'function') {\n        return basePrototype;\n    }\n    // otherwise instrument the connection directly.\n    return connectionPrototype;\n}\nexports.getConnectionPrototypeToInstrument = getConnectionPrototypeToInstrument;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-mysql2/build/src/utils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-mysql2/build/src/version.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-mysql2/build/src/version.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PACKAGE_NAME = exports.PACKAGE_VERSION = void 0;\n// this is autogenerated file, see scripts/version-update.js\nexports.PACKAGE_VERSION = '0.50.0';\nexports.PACKAGE_NAME = '@opentelemetry/instrumentation-mysql2';\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1teXNxbDIvYnVpbGQvc3JjL3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0JBQW9CLEdBQUcsdUJBQXVCO0FBQzlDO0FBQ0EsdUJBQXVCO0FBQ3ZCLG9CQUFvQjtBQUNwQiIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tbXlzcWwyL2J1aWxkL3NyYy92ZXJzaW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUEFDS0FHRV9OQU1FID0gZXhwb3J0cy5QQUNLQUdFX1ZFUlNJT04gPSB2b2lkIDA7XG4vLyB0aGlzIGlzIGF1dG9nZW5lcmF0ZWQgZmlsZSwgc2VlIHNjcmlwdHMvdmVyc2lvbi11cGRhdGUuanNcbmV4cG9ydHMuUEFDS0FHRV9WRVJTSU9OID0gJzAuNTAuMCc7XG5leHBvcnRzLlBBQ0tBR0VfTkFNRSA9ICdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tbXlzcWwyJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-mysql2/build/src/version.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-pg/build/src/enums/AttributeNames.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-pg/build/src/enums/AttributeNames.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AttributeNames = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Postgresql specific attributes not covered by semantic conventions\nvar AttributeNames;\n(function (AttributeNames) {\n    AttributeNames[\"PG_VALUES\"] = \"db.postgresql.values\";\n    AttributeNames[\"PG_PLAN\"] = \"db.postgresql.plan\";\n    AttributeNames[\"IDLE_TIMEOUT_MILLIS\"] = \"db.postgresql.idle.timeout.millis\";\n    AttributeNames[\"MAX_CLIENT\"] = \"db.postgresql.max.client\";\n})(AttributeNames = exports.AttributeNames || (exports.AttributeNames = {}));\n//# sourceMappingURL=AttributeNames.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1wZy9idWlsZC9zcmMvZW51bXMvQXR0cmlidXRlTmFtZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw4Q0FBOEMsc0JBQXNCLEtBQUs7QUFDMUUiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLXBnL2J1aWxkL3NyYy9lbnVtcy9BdHRyaWJ1dGVOYW1lcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXR0cmlidXRlTmFtZXMgPSB2b2lkIDA7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLy8gUG9zdGdyZXNxbCBzcGVjaWZpYyBhdHRyaWJ1dGVzIG5vdCBjb3ZlcmVkIGJ5IHNlbWFudGljIGNvbnZlbnRpb25zXG52YXIgQXR0cmlidXRlTmFtZXM7XG4oZnVuY3Rpb24gKEF0dHJpYnV0ZU5hbWVzKSB7XG4gICAgQXR0cmlidXRlTmFtZXNbXCJQR19WQUxVRVNcIl0gPSBcImRiLnBvc3RncmVzcWwudmFsdWVzXCI7XG4gICAgQXR0cmlidXRlTmFtZXNbXCJQR19QTEFOXCJdID0gXCJkYi5wb3N0Z3Jlc3FsLnBsYW5cIjtcbiAgICBBdHRyaWJ1dGVOYW1lc1tcIklETEVfVElNRU9VVF9NSUxMSVNcIl0gPSBcImRiLnBvc3RncmVzcWwuaWRsZS50aW1lb3V0Lm1pbGxpc1wiO1xuICAgIEF0dHJpYnV0ZU5hbWVzW1wiTUFYX0NMSUVOVFwiXSA9IFwiZGIucG9zdGdyZXNxbC5tYXguY2xpZW50XCI7XG59KShBdHRyaWJ1dGVOYW1lcyA9IGV4cG9ydHMuQXR0cmlidXRlTmFtZXMgfHwgKGV4cG9ydHMuQXR0cmlidXRlTmFtZXMgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXR0cmlidXRlTmFtZXMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-pg/build/src/enums/AttributeNames.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-pg/build/src/enums/SpanNames.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-pg/build/src/enums/SpanNames.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SpanNames = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Contains span names produced by instrumentation\nvar SpanNames;\n(function (SpanNames) {\n    SpanNames[\"QUERY_PREFIX\"] = \"pg.query\";\n    SpanNames[\"CONNECT\"] = \"pg.connect\";\n    SpanNames[\"POOL_CONNECT\"] = \"pg-pool.connect\";\n})(SpanNames = exports.SpanNames || (exports.SpanNames = {}));\n//# sourceMappingURL=SpanNames.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1wZy9idWlsZC9zcmMvZW51bXMvU3Bhbk5hbWVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLG9DQUFvQyxpQkFBaUIsS0FBSztBQUMzRCIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tcGcvYnVpbGQvc3JjL2VudW1zL1NwYW5OYW1lcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU3Bhbk5hbWVzID0gdm9pZCAwO1xuLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8vIENvbnRhaW5zIHNwYW4gbmFtZXMgcHJvZHVjZWQgYnkgaW5zdHJ1bWVudGF0aW9uXG52YXIgU3Bhbk5hbWVzO1xuKGZ1bmN0aW9uIChTcGFuTmFtZXMpIHtcbiAgICBTcGFuTmFtZXNbXCJRVUVSWV9QUkVGSVhcIl0gPSBcInBnLnF1ZXJ5XCI7XG4gICAgU3Bhbk5hbWVzW1wiQ09OTkVDVFwiXSA9IFwicGcuY29ubmVjdFwiO1xuICAgIFNwYW5OYW1lc1tcIlBPT0xfQ09OTkVDVFwiXSA9IFwicGctcG9vbC5jb25uZWN0XCI7XG59KShTcGFuTmFtZXMgPSBleHBvcnRzLlNwYW5OYW1lcyB8fCAoZXhwb3J0cy5TcGFuTmFtZXMgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3Bhbk5hbWVzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-pg/build/src/enums/SpanNames.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-pg/build/src/index.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-pg/build/src/index.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AttributeNames = exports.PgInstrumentation = void 0;\nvar instrumentation_1 = __webpack_require__(/*! ./instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-pg/build/src/instrumentation.js\");\nObject.defineProperty(exports, \"PgInstrumentation\", ({ enumerable: true, get: function () { return instrumentation_1.PgInstrumentation; } }));\nvar AttributeNames_1 = __webpack_require__(/*! ./enums/AttributeNames */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-pg/build/src/enums/AttributeNames.js\");\nObject.defineProperty(exports, \"AttributeNames\", ({ enumerable: true, get: function () { return AttributeNames_1.AttributeNames; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1wZy9idWlsZC9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0JBQXNCLEdBQUcseUJBQXlCO0FBQ2xELHdCQUF3QixtQkFBTyxDQUFDLHFIQUFtQjtBQUNuRCxxREFBb0QsRUFBRSxxQ0FBcUMsK0NBQStDLEVBQUM7QUFDM0ksdUJBQXVCLG1CQUFPLENBQUMsK0hBQXdCO0FBQ3ZELGtEQUFpRCxFQUFFLHFDQUFxQywyQ0FBMkMsRUFBQztBQUNwSSIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tcGcvYnVpbGQvc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXR0cmlidXRlTmFtZXMgPSBleHBvcnRzLlBnSW5zdHJ1bWVudGF0aW9uID0gdm9pZCAwO1xudmFyIGluc3RydW1lbnRhdGlvbl8xID0gcmVxdWlyZShcIi4vaW5zdHJ1bWVudGF0aW9uXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUGdJbnN0cnVtZW50YXRpb25cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGluc3RydW1lbnRhdGlvbl8xLlBnSW5zdHJ1bWVudGF0aW9uOyB9IH0pO1xudmFyIEF0dHJpYnV0ZU5hbWVzXzEgPSByZXF1aXJlKFwiLi9lbnVtcy9BdHRyaWJ1dGVOYW1lc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkF0dHJpYnV0ZU5hbWVzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBBdHRyaWJ1dGVOYW1lc18xLkF0dHJpYnV0ZU5hbWVzOyB9IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-pg/build/src/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-pg/build/src/instrumentation.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-pg/build/src/instrumentation.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = \"/monitoring\";globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.2\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PgInstrumentation = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst internal_types_1 = __webpack_require__(/*! ./internal-types */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-pg/build/src/internal-types.js\");\nconst utils = __webpack_require__(/*! ./utils */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-pg/build/src/utils.js\");\nconst sql_common_1 = __webpack_require__(/*! @opentelemetry/sql-common */ \"(instrument)/./node_modules/@opentelemetry/sql-common/build/src/index.js\");\n/** @knipignore */\nconst version_1 = __webpack_require__(/*! ./version */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-pg/build/src/version.js\");\nconst SpanNames_1 = __webpack_require__(/*! ./enums/SpanNames */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-pg/build/src/enums/SpanNames.js\");\nconst core_1 = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/index.js\");\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst semconv_1 = __webpack_require__(/*! ./semconv */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-pg/build/src/semconv.js\");\nfunction extractModuleExports(module) {\n    return module[Symbol.toStringTag] === 'Module'\n        ? module.default // ESM\n        : module; // CommonJS\n}\nclass PgInstrumentation extends instrumentation_1.InstrumentationBase {\n    // Pool events connect, acquire, release and remove can be called\n    // multiple times without changing the values of total, idle and waiting\n    // connections. The _connectionsCounter is used to keep track of latest\n    // values and only update the metrics _connectionsCount and _connectionPendingRequests\n    // when the value change.\n    _connectionsCounter = {\n        used: 0,\n        idle: 0,\n        pending: 0,\n    };\n    constructor(config = {}) {\n        super(version_1.PACKAGE_NAME, version_1.PACKAGE_VERSION, config);\n    }\n    _updateMetricInstruments() {\n        this._operationDuration = this.meter.createHistogram(semconv_1.METRIC_DB_CLIENT_OPERATION_DURATION, {\n            description: 'Duration of database client operations.',\n            unit: 's',\n            valueType: api_1.ValueType.DOUBLE,\n            advice: {\n                explicitBucketBoundaries: [\n                    0.001, 0.005, 0.01, 0.05, 0.1, 0.5, 1, 5, 10,\n                ],\n            },\n        });\n        this._connectionsCounter = {\n            idle: 0,\n            pending: 0,\n            used: 0,\n        };\n        this._connectionsCount = this.meter.createUpDownCounter(semconv_1.METRIC_DB_CLIENT_CONNECTION_COUNT, {\n            description: 'The number of connections that are currently in state described by the state attribute.',\n            unit: '{connection}',\n        });\n        this._connectionPendingRequests = this.meter.createUpDownCounter(semconv_1.METRIC_DB_CLIENT_CONNECTION_PENDING_REQUESTS, {\n            description: 'The number of current pending requests for an open connection.',\n            unit: '{connection}',\n        });\n    }\n    init() {\n        const SUPPORTED_PG_VERSIONS = ['>=8.0.3 <9'];\n        const SUPPORTED_PG_POOL_VERSIONS = ['>=2.0.0 <4'];\n        const modulePgNativeClient = new instrumentation_1.InstrumentationNodeModuleFile('pg/lib/native/client.js', SUPPORTED_PG_VERSIONS, this._patchPgClient.bind(this), this._unpatchPgClient.bind(this));\n        const modulePgClient = new instrumentation_1.InstrumentationNodeModuleFile('pg/lib/client.js', SUPPORTED_PG_VERSIONS, this._patchPgClient.bind(this), this._unpatchPgClient.bind(this));\n        const modulePG = new instrumentation_1.InstrumentationNodeModuleDefinition('pg', SUPPORTED_PG_VERSIONS, (module) => {\n            const moduleExports = extractModuleExports(module);\n            this._patchPgClient(moduleExports.Client);\n            return module;\n        }, (module) => {\n            const moduleExports = extractModuleExports(module);\n            this._unpatchPgClient(moduleExports.Client);\n            return module;\n        }, [modulePgClient, modulePgNativeClient]);\n        const modulePGPool = new instrumentation_1.InstrumentationNodeModuleDefinition('pg-pool', SUPPORTED_PG_POOL_VERSIONS, (module) => {\n            const moduleExports = extractModuleExports(module);\n            if ((0, instrumentation_1.isWrapped)(moduleExports.prototype.connect)) {\n                this._unwrap(moduleExports.prototype, 'connect');\n            }\n            this._wrap(moduleExports.prototype, 'connect', this._getPoolConnectPatch());\n            return moduleExports;\n        }, (module) => {\n            const moduleExports = extractModuleExports(module);\n            if ((0, instrumentation_1.isWrapped)(moduleExports.prototype.connect)) {\n                this._unwrap(moduleExports.prototype, 'connect');\n            }\n        });\n        return [modulePG, modulePGPool];\n    }\n    _patchPgClient(module) {\n        if (!module) {\n            return;\n        }\n        const moduleExports = extractModuleExports(module);\n        if ((0, instrumentation_1.isWrapped)(moduleExports.prototype.query)) {\n            this._unwrap(moduleExports.prototype, 'query');\n        }\n        if ((0, instrumentation_1.isWrapped)(moduleExports.prototype.connect)) {\n            this._unwrap(moduleExports.prototype, 'connect');\n        }\n        this._wrap(moduleExports.prototype, 'query', this._getClientQueryPatch());\n        this._wrap(moduleExports.prototype, 'connect', this._getClientConnectPatch());\n        return module;\n    }\n    _unpatchPgClient(module) {\n        const moduleExports = extractModuleExports(module);\n        if ((0, instrumentation_1.isWrapped)(moduleExports.prototype.query)) {\n            this._unwrap(moduleExports.prototype, 'query');\n        }\n        if ((0, instrumentation_1.isWrapped)(moduleExports.prototype.connect)) {\n            this._unwrap(moduleExports.prototype, 'connect');\n        }\n        return module;\n    }\n    _getClientConnectPatch() {\n        const plugin = this;\n        return (original) => {\n            return function connect(callback) {\n                if (utils.shouldSkipInstrumentation(plugin.getConfig())) {\n                    return original.call(this, callback);\n                }\n                const span = plugin.tracer.startSpan(SpanNames_1.SpanNames.CONNECT, {\n                    kind: api_1.SpanKind.CLIENT,\n                    attributes: utils.getSemanticAttributesFromConnection(this),\n                });\n                if (callback) {\n                    const parentSpan = api_1.trace.getSpan(api_1.context.active());\n                    callback = utils.patchClientConnectCallback(span, callback);\n                    if (parentSpan) {\n                        callback = api_1.context.bind(api_1.context.active(), callback);\n                    }\n                }\n                const connectResult = api_1.context.with(api_1.trace.setSpan(api_1.context.active(), span), () => {\n                    return original.call(this, callback);\n                });\n                return handleConnectResult(span, connectResult);\n            };\n        };\n    }\n    recordOperationDuration(attributes, startTime) {\n        const metricsAttributes = {};\n        const keysToCopy = [\n            semantic_conventions_1.SEMATTRS_DB_SYSTEM,\n            semconv_1.ATTR_DB_NAMESPACE,\n            semantic_conventions_1.ATTR_ERROR_TYPE,\n            semantic_conventions_1.ATTR_SERVER_PORT,\n            semantic_conventions_1.ATTR_SERVER_ADDRESS,\n            semconv_1.ATTR_DB_OPERATION_NAME,\n        ];\n        keysToCopy.forEach(key => {\n            if (key in attributes) {\n                metricsAttributes[key] = attributes[key];\n            }\n        });\n        const durationSeconds = (0, core_1.hrTimeToMilliseconds)((0, core_1.hrTimeDuration)(startTime, (0, core_1.hrTime)())) / 1000;\n        this._operationDuration.record(durationSeconds, metricsAttributes);\n    }\n    _getClientQueryPatch() {\n        const plugin = this;\n        return (original) => {\n            this._diag.debug('Patching pg.Client.prototype.query');\n            return function query(...args) {\n                if (utils.shouldSkipInstrumentation(plugin.getConfig())) {\n                    return original.apply(this, args);\n                }\n                const startTime = (0, core_1.hrTime)();\n                // client.query(text, cb?), client.query(text, values, cb?), and\n                // client.query(configObj, cb?) are all valid signatures. We construct\n                // a queryConfig obj from all (valid) signatures to build the span in a\n                // unified way. We verify that we at least have query text, and code\n                // defensively when dealing with `queryConfig` after that (to handle all\n                // the other invalid cases, like a non-array for values being provided).\n                // The type casts here reflect only what we've actually validated.\n                const arg0 = args[0];\n                const firstArgIsString = typeof arg0 === 'string';\n                const firstArgIsQueryObjectWithText = utils.isObjectWithTextString(arg0);\n                // TODO: remove the `as ...` casts below when the TS version is upgraded.\n                // Newer TS versions will use the result of firstArgIsQueryObjectWithText\n                // to properly narrow arg0, but TS 4.3.5 does not.\n                const queryConfig = firstArgIsString\n                    ? {\n                        text: arg0,\n                        values: Array.isArray(args[1]) ? args[1] : undefined,\n                    }\n                    : firstArgIsQueryObjectWithText\n                        ? arg0\n                        : undefined;\n                const attributes = {\n                    [semantic_conventions_1.SEMATTRS_DB_SYSTEM]: semantic_conventions_1.DBSYSTEMVALUES_POSTGRESQL,\n                    [semconv_1.ATTR_DB_NAMESPACE]: this.database,\n                    [semantic_conventions_1.ATTR_SERVER_PORT]: this.connectionParameters.port,\n                    [semantic_conventions_1.ATTR_SERVER_ADDRESS]: this.connectionParameters.host,\n                };\n                if (queryConfig?.text) {\n                    attributes[semconv_1.ATTR_DB_OPERATION_NAME] =\n                        utils.parseNormalizedOperationName(queryConfig?.text);\n                }\n                const recordDuration = () => {\n                    plugin.recordOperationDuration(attributes, startTime);\n                };\n                const instrumentationConfig = plugin.getConfig();\n                const span = utils.handleConfigQuery.call(this, plugin.tracer, instrumentationConfig, queryConfig);\n                // Modify query text w/ a tracing comment before invoking original for\n                // tracing, but only if args[0] has one of our expected shapes.\n                if (instrumentationConfig.addSqlCommenterCommentToQueries) {\n                    if (firstArgIsString) {\n                        args[0] = (0, sql_common_1.addSqlCommenterComment)(span, arg0);\n                    }\n                    else if (firstArgIsQueryObjectWithText && !('name' in arg0)) {\n                        // In the case of a query object, we need to ensure there's no name field\n                        // as this indicates a prepared query, where the comment would remain the same\n                        // for every invocation and contain an outdated trace context.\n                        args[0] = {\n                            ...arg0,\n                            text: (0, sql_common_1.addSqlCommenterComment)(span, arg0.text),\n                        };\n                    }\n                }\n                // Bind callback (if any) to parent span (if any)\n                if (args.length > 0) {\n                    const parentSpan = api_1.trace.getSpan(api_1.context.active());\n                    if (typeof args[args.length - 1] === 'function') {\n                        // Patch ParameterQuery callback\n                        args[args.length - 1] = utils.patchCallback(instrumentationConfig, span, args[args.length - 1], // nb: not type safe.\n                        attributes, recordDuration);\n                        // If a parent span exists, bind the callback\n                        if (parentSpan) {\n                            args[args.length - 1] = api_1.context.bind(api_1.context.active(), args[args.length - 1]);\n                        }\n                    }\n                    else if (typeof queryConfig?.callback === 'function') {\n                        // Patch ConfigQuery callback\n                        let callback = utils.patchCallback(plugin.getConfig(), span, queryConfig.callback, // nb: not type safe.\n                        attributes, recordDuration);\n                        // If a parent span existed, bind the callback\n                        if (parentSpan) {\n                            callback = api_1.context.bind(api_1.context.active(), callback);\n                        }\n                        args[0].callback = callback;\n                    }\n                }\n                const { requestHook } = instrumentationConfig;\n                if (typeof requestHook === 'function' && queryConfig) {\n                    (0, instrumentation_1.safeExecuteInTheMiddle)(() => {\n                        // pick keys to expose explicitly, so we're not leaking pg package\n                        // internals that are subject to change\n                        const { database, host, port, user } = this.connectionParameters;\n                        const connection = { database, host, port, user };\n                        requestHook(span, {\n                            connection,\n                            query: {\n                                text: queryConfig.text,\n                                // nb: if `client.query` is called with illegal arguments\n                                // (e.g., if `queryConfig.values` is passed explicitly, but a\n                                // non-array is given), then the type casts will be wrong. But\n                                // we leave it up to the queryHook to handle that, and we\n                                // catch and swallow any errors it throws. The other options\n                                // are all worse. E.g., we could leave `queryConfig.values`\n                                // and `queryConfig.name` as `unknown`, but then the hook body\n                                // would be forced to validate (or cast) them before using\n                                // them, which seems incredibly cumbersome given that these\n                                // casts will be correct 99.9% of the time -- and pg.query\n                                // will immediately throw during development in the other .1%\n                                // of cases. Alternatively, we could simply skip calling the\n                                // hook when `values` or `name` don't have the expected type,\n                                // but that would add unnecessary validation overhead to every\n                                // hook invocation and possibly be even more confusing/unexpected.\n                                values: queryConfig.values,\n                                name: queryConfig.name,\n                            },\n                        });\n                    }, err => {\n                        if (err) {\n                            plugin._diag.error('Error running query hook', err);\n                        }\n                    }, true);\n                }\n                let result;\n                try {\n                    result = original.apply(this, args);\n                }\n                catch (e) {\n                    span.setStatus({\n                        code: api_1.SpanStatusCode.ERROR,\n                        message: utils.getErrorMessage(e),\n                    });\n                    span.end();\n                    throw e;\n                }\n                // Bind promise to parent span and end the span\n                if (result instanceof Promise) {\n                    return result\n                        .then((result) => {\n                        // Return a pass-along promise which ends the span and then goes to user's orig resolvers\n                        return new Promise(resolve => {\n                            utils.handleExecutionResult(plugin.getConfig(), span, result);\n                            recordDuration();\n                            span.end();\n                            resolve(result);\n                        });\n                    })\n                        .catch((error) => {\n                        return new Promise((_, reject) => {\n                            span.setStatus({\n                                code: api_1.SpanStatusCode.ERROR,\n                                message: error.message,\n                            });\n                            recordDuration();\n                            span.end();\n                            reject(error);\n                        });\n                    });\n                }\n                // else returns void\n                return result; // void\n            };\n        };\n    }\n    _setPoolConnectEventListeners(pgPool) {\n        if (pgPool[internal_types_1.EVENT_LISTENERS_SET])\n            return;\n        const poolName = utils.getPoolName(pgPool.options);\n        pgPool.on('connect', () => {\n            this._connectionsCounter = utils.updateCounter(poolName, pgPool, this._connectionsCount, this._connectionPendingRequests, this._connectionsCounter);\n        });\n        pgPool.on('acquire', () => {\n            this._connectionsCounter = utils.updateCounter(poolName, pgPool, this._connectionsCount, this._connectionPendingRequests, this._connectionsCounter);\n        });\n        pgPool.on('remove', () => {\n            this._connectionsCounter = utils.updateCounter(poolName, pgPool, this._connectionsCount, this._connectionPendingRequests, this._connectionsCounter);\n        });\n        pgPool.on('release', () => {\n            this._connectionsCounter = utils.updateCounter(poolName, pgPool, this._connectionsCount, this._connectionPendingRequests, this._connectionsCounter);\n        });\n        pgPool[internal_types_1.EVENT_LISTENERS_SET] = true;\n    }\n    _getPoolConnectPatch() {\n        const plugin = this;\n        return (originalConnect) => {\n            return function connect(callback) {\n                if (utils.shouldSkipInstrumentation(plugin.getConfig())) {\n                    return originalConnect.call(this, callback);\n                }\n                // setup span\n                const span = plugin.tracer.startSpan(SpanNames_1.SpanNames.POOL_CONNECT, {\n                    kind: api_1.SpanKind.CLIENT,\n                    attributes: utils.getSemanticAttributesFromPool(this.options),\n                });\n                plugin._setPoolConnectEventListeners(this);\n                if (callback) {\n                    const parentSpan = api_1.trace.getSpan(api_1.context.active());\n                    callback = utils.patchCallbackPGPool(span, callback);\n                    // If a parent span exists, bind the callback\n                    if (parentSpan) {\n                        callback = api_1.context.bind(api_1.context.active(), callback);\n                    }\n                }\n                const connectResult = api_1.context.with(api_1.trace.setSpan(api_1.context.active(), span), () => {\n                    return originalConnect.call(this, callback);\n                });\n                return handleConnectResult(span, connectResult);\n            };\n        };\n    }\n}\nexports.PgInstrumentation = PgInstrumentation;\nfunction handleConnectResult(span, connectResult) {\n    if (!(connectResult instanceof Promise)) {\n        return connectResult;\n    }\n    const connectResultPromise = connectResult;\n    return api_1.context.bind(api_1.context.active(), connectResultPromise\n        .then(result => {\n        span.end();\n        return result;\n    })\n        .catch((error) => {\n        span.setStatus({\n            code: api_1.SpanStatusCode.ERROR,\n            message: utils.getErrorMessage(error),\n        });\n        span.end();\n        return Promise.reject(error);\n    }));\n}\n//# sourceMappingURL=instrumentation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-pg/build/src/instrumentation.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-pg/build/src/internal-types.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-pg/build/src/internal-types.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EVENT_LISTENERS_SET = void 0;\nexports.EVENT_LISTENERS_SET = Symbol('opentelemetry.instrumentation.pg.eventListenersSet');\n//# sourceMappingURL=internal-types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1wZy9idWlsZC9zcmMvaW50ZXJuYWwtdHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMkJBQTJCO0FBQzNCLDJCQUEyQjtBQUMzQiIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tcGcvYnVpbGQvc3JjL2ludGVybmFsLXR5cGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRVZFTlRfTElTVEVORVJTX1NFVCA9IHZvaWQgMDtcbmV4cG9ydHMuRVZFTlRfTElTVEVORVJTX1NFVCA9IFN5bWJvbCgnb3BlbnRlbGVtZXRyeS5pbnN0cnVtZW50YXRpb24ucGcuZXZlbnRMaXN0ZW5lcnNTZXQnKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGVybmFsLXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-pg/build/src/internal-types.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-pg/build/src/semconv.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-pg/build/src/semconv.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.METRIC_DB_CLIENT_OPERATION_DURATION = exports.METRIC_DB_CLIENT_CONNECTION_PENDING_REQUESTS = exports.METRIC_DB_CLIENT_CONNECTION_COUNT = exports.DB_CLIENT_CONNECTION_STATE_VALUE_IDLE = exports.DB_CLIENT_CONNECTION_STATE_VALUE_USED = exports.ATTR_DB_OPERATION_NAME = exports.ATTR_DB_NAMESPACE = exports.ATTR_DB_CLIENT_CONNECTION_STATE = exports.ATTR_DB_CLIENT_CONNECTION_POOL_NAME = void 0;\n/**\n * The name of the connection pool; unique within the instrumented application. In case the connection pool implementation doesn't provide a name, instrumentation **SHOULD** use a combination of parameters that would make the name unique, for example, combining attributes `server.address`, `server.port`, and `db.namespace`, formatted as `server.address:server.port/db.namespace`. Instrumentations that generate connection pool name following different patterns **SHOULD** document it.\n *\n * @example myDataSource\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexports.ATTR_DB_CLIENT_CONNECTION_POOL_NAME = 'db.client.connection.pool.name';\n/**\n * The state of a connection in the pool\n *\n * @example idle\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexports.ATTR_DB_CLIENT_CONNECTION_STATE = 'db.client.connection.state';\n/**\n * The name of the database, fully qualified within the server address and port.\n *\n * @example customers\n * @example test.users\n *\n * @note If a database system has multiple namespace components, they **SHOULD** be concatenated (potentially using database system specific conventions) from most general to most specific namespace component, and more specific namespaces **SHOULD NOT** be captured without the more general namespaces, to ensure that \"startswith\" queries for the more general namespaces will be valid.\n * Semantic conventions for individual database systems **SHOULD** document what `db.namespace` means in the context of that system.\n * It is **RECOMMENDED** to capture the value as provided by the application without attempting to do any case normalization.\n * This attribute has stability level RELEASE CANDIDATE.\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexports.ATTR_DB_NAMESPACE = 'db.namespace';\n/**\n * The name of the operation or command being executed.\n *\n * @example findAndModify\n * @example HMSET\n * @example SELECT\n *\n * @note It is **RECOMMENDED** to capture the value as provided by the application without attempting to do any case normalization.\n * If the operation name is parsed from the query text, it **SHOULD** be the first operation name found in the query.\n * For batch operations, if the individual operations are known to have the same operation name then that operation name **SHOULD** be used prepended by `BATCH `, otherwise `db.operation.name` **SHOULD** be `BATCH` or some other database system specific term if more applicable.\n * This attribute has stability level RELEASE CANDIDATE.\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexports.ATTR_DB_OPERATION_NAME = 'db.operation.name';\n/**\n * Enum value \"used\" for attribute {@link ATTR_DB_CLIENT_CONNECTION_STATE}.\n */\nexports.DB_CLIENT_CONNECTION_STATE_VALUE_USED = 'used';\n/**\n * Enum value \"idle\" for attribute {@link ATTR_DB_CLIENT_CONNECTION_STATE}.\n */\nexports.DB_CLIENT_CONNECTION_STATE_VALUE_IDLE = 'idle';\n/**\n * The number of connections that are currently in state described by the `state` attribute\n *\n * @experimental This metric is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexports.METRIC_DB_CLIENT_CONNECTION_COUNT = 'db.client.connection.count';\n/**\n * The number of current pending requests for an open connection\n *\n * @experimental This metric is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexports.METRIC_DB_CLIENT_CONNECTION_PENDING_REQUESTS = 'db.client.connection.pending_requests';\n/**\n * Duration of database client operations.\n *\n * @note Batch operations **SHOULD** be recorded as a single operation.\n *\n * @experimental This metric is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexports.METRIC_DB_CLIENT_OPERATION_DURATION = 'db.client.operation.duration';\n//# sourceMappingURL=semconv.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-pg/build/src/semconv.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-pg/build/src/utils.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-pg/build/src/utils.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isObjectWithTextString = exports.getErrorMessage = exports.patchClientConnectCallback = exports.patchCallbackPGPool = exports.updateCounter = exports.getPoolName = exports.patchCallback = exports.handleExecutionResult = exports.handleConfigQuery = exports.shouldSkipInstrumentation = exports.getSemanticAttributesFromPool = exports.getSemanticAttributesFromConnection = exports.getConnectionString = exports.parseAndMaskConnectionString = exports.parseNormalizedOperationName = exports.getQuerySpanName = void 0;\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst AttributeNames_1 = __webpack_require__(/*! ./enums/AttributeNames */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-pg/build/src/enums/AttributeNames.js\");\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst semconv_1 = __webpack_require__(/*! ./semconv */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-pg/build/src/semconv.js\");\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst SpanNames_1 = __webpack_require__(/*! ./enums/SpanNames */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-pg/build/src/enums/SpanNames.js\");\n/**\n * Helper function to get a low cardinality span name from whatever info we have\n * about the query.\n *\n * This is tricky, because we don't have most of the information (table name,\n * operation name, etc) the spec recommends using to build a low-cardinality\n * value w/o parsing. So, we use db.name and assume that, if the query's a named\n * prepared statement, those `name` values will be low cardinality. If we don't\n * have a named prepared statement, we try to parse an operation (despite the\n * spec's warnings).\n *\n * @params dbName The name of the db against which this query is being issued,\n *   which could be missing if no db name was given at the time that the\n *   connection was established.\n * @params queryConfig Information we have about the query being issued, typed\n *   to reflect only the validation we've actually done on the args to\n *   `client.query()`. This will be undefined if `client.query()` was called\n *   with invalid arguments.\n */\nfunction getQuerySpanName(dbName, queryConfig) {\n    // NB: when the query config is invalid, we omit the dbName too, so that\n    // someone (or some tool) reading the span name doesn't misinterpret the\n    // dbName as being a prepared statement or sql commit name.\n    if (!queryConfig)\n        return SpanNames_1.SpanNames.QUERY_PREFIX;\n    // Either the name of a prepared statement; or an attempted parse\n    // of the SQL command, normalized to uppercase; or unknown.\n    const command = typeof queryConfig.name === 'string' && queryConfig.name\n        ? queryConfig.name\n        : parseNormalizedOperationName(queryConfig.text);\n    return `${SpanNames_1.SpanNames.QUERY_PREFIX}:${command}${dbName ? ` ${dbName}` : ''}`;\n}\nexports.getQuerySpanName = getQuerySpanName;\nfunction parseNormalizedOperationName(queryText) {\n    const indexOfFirstSpace = queryText.indexOf(' ');\n    let sqlCommand = indexOfFirstSpace === -1\n        ? queryText\n        : queryText.slice(0, indexOfFirstSpace);\n    sqlCommand = sqlCommand.toUpperCase();\n    // Handle query text being \"COMMIT;\", which has an extra semicolon before the space.\n    return sqlCommand.endsWith(';') ? sqlCommand.slice(0, -1) : sqlCommand;\n}\nexports.parseNormalizedOperationName = parseNormalizedOperationName;\nfunction parseAndMaskConnectionString(connectionString) {\n    try {\n        // Parse the connection string\n        const url = new URL(connectionString);\n        // Remove all auth information (username and password)\n        url.username = '';\n        url.password = '';\n        return url.toString();\n    }\n    catch (e) {\n        // If parsing fails, return a generic connection string\n        return 'postgresql://localhost:5432/';\n    }\n}\nexports.parseAndMaskConnectionString = parseAndMaskConnectionString;\nfunction getConnectionString(params) {\n    if ('connectionString' in params && params.connectionString) {\n        return parseAndMaskConnectionString(params.connectionString);\n    }\n    const host = params.host || 'localhost';\n    const port = params.port || 5432;\n    const database = params.database || '';\n    return `postgresql://${host}:${port}/${database}`;\n}\nexports.getConnectionString = getConnectionString;\nfunction getPort(port) {\n    // Port may be NaN as parseInt() is used on the value, passing null will result in NaN being parsed.\n    // https://github.com/brianc/node-postgres/blob/2a8efbee09a284be12748ed3962bc9b816965e36/packages/pg/lib/connection-parameters.js#L66\n    if (Number.isInteger(port)) {\n        return port;\n    }\n    // Unable to find the default used in pg code, so falling back to 'undefined'.\n    return undefined;\n}\nfunction getSemanticAttributesFromConnection(params) {\n    return {\n        [semantic_conventions_1.SEMATTRS_DB_SYSTEM]: semantic_conventions_1.DBSYSTEMVALUES_POSTGRESQL,\n        [semantic_conventions_1.SEMATTRS_DB_NAME]: params.database,\n        [semantic_conventions_1.SEMATTRS_DB_CONNECTION_STRING]: getConnectionString(params),\n        [semantic_conventions_1.SEMATTRS_NET_PEER_NAME]: params.host,\n        [semantic_conventions_1.SEMATTRS_NET_PEER_PORT]: getPort(params.port),\n        [semantic_conventions_1.SEMATTRS_DB_USER]: params.user,\n    };\n}\nexports.getSemanticAttributesFromConnection = getSemanticAttributesFromConnection;\nfunction getSemanticAttributesFromPool(params) {\n    let url;\n    try {\n        url = params.connectionString\n            ? new URL(params.connectionString)\n            : undefined;\n    }\n    catch (e) {\n        url = undefined;\n    }\n    return {\n        [semantic_conventions_1.SEMATTRS_DB_SYSTEM]: semantic_conventions_1.DBSYSTEMVALUES_POSTGRESQL,\n        [semantic_conventions_1.SEMATTRS_DB_NAME]: url?.pathname.slice(1) ?? params.database,\n        [semantic_conventions_1.SEMATTRS_DB_CONNECTION_STRING]: getConnectionString(params),\n        [semantic_conventions_1.SEMATTRS_NET_PEER_NAME]: url?.hostname ?? params.host,\n        [semantic_conventions_1.SEMATTRS_NET_PEER_PORT]: Number(url?.port) || getPort(params.port),\n        [semantic_conventions_1.SEMATTRS_DB_USER]: url?.username ?? params.user,\n        [AttributeNames_1.AttributeNames.IDLE_TIMEOUT_MILLIS]: params.idleTimeoutMillis,\n        [AttributeNames_1.AttributeNames.MAX_CLIENT]: params.maxClient,\n    };\n}\nexports.getSemanticAttributesFromPool = getSemanticAttributesFromPool;\nfunction shouldSkipInstrumentation(instrumentationConfig) {\n    return (instrumentationConfig.requireParentSpan === true &&\n        api_1.trace.getSpan(api_1.context.active()) === undefined);\n}\nexports.shouldSkipInstrumentation = shouldSkipInstrumentation;\n// Create a span from our normalized queryConfig object,\n// or return a basic span if no queryConfig was given/could be created.\nfunction handleConfigQuery(tracer, instrumentationConfig, queryConfig) {\n    // Create child span.\n    const { connectionParameters } = this;\n    const dbName = connectionParameters.database;\n    const spanName = getQuerySpanName(dbName, queryConfig);\n    const span = tracer.startSpan(spanName, {\n        kind: api_1.SpanKind.CLIENT,\n        attributes: getSemanticAttributesFromConnection(connectionParameters),\n    });\n    if (!queryConfig) {\n        return span;\n    }\n    // Set attributes\n    if (queryConfig.text) {\n        span.setAttribute(semantic_conventions_1.SEMATTRS_DB_STATEMENT, queryConfig.text);\n    }\n    if (instrumentationConfig.enhancedDatabaseReporting &&\n        Array.isArray(queryConfig.values)) {\n        try {\n            const convertedValues = queryConfig.values.map(value => {\n                if (value == null) {\n                    return 'null';\n                }\n                else if (value instanceof Buffer) {\n                    return value.toString();\n                }\n                else if (typeof value === 'object') {\n                    if (typeof value.toPostgres === 'function') {\n                        return value.toPostgres();\n                    }\n                    return JSON.stringify(value);\n                }\n                else {\n                    //string, number\n                    return value.toString();\n                }\n            });\n            span.setAttribute(AttributeNames_1.AttributeNames.PG_VALUES, convertedValues);\n        }\n        catch (e) {\n            api_1.diag.error('failed to stringify ', queryConfig.values, e);\n        }\n    }\n    // Set plan name attribute, if present\n    if (typeof queryConfig.name === 'string') {\n        span.setAttribute(AttributeNames_1.AttributeNames.PG_PLAN, queryConfig.name);\n    }\n    return span;\n}\nexports.handleConfigQuery = handleConfigQuery;\nfunction handleExecutionResult(config, span, pgResult) {\n    if (typeof config.responseHook === 'function') {\n        (0, instrumentation_1.safeExecuteInTheMiddle)(() => {\n            config.responseHook(span, {\n                data: pgResult,\n            });\n        }, err => {\n            if (err) {\n                api_1.diag.error('Error running response hook', err);\n            }\n        }, true);\n    }\n}\nexports.handleExecutionResult = handleExecutionResult;\nfunction patchCallback(instrumentationConfig, span, cb, attributes, recordDuration) {\n    return function patchedCallback(err, res) {\n        if (err) {\n            if (Object.prototype.hasOwnProperty.call(err, 'code')) {\n                attributes[semantic_conventions_1.ATTR_ERROR_TYPE] = err['code'];\n            }\n            span.setStatus({\n                code: api_1.SpanStatusCode.ERROR,\n                message: err.message,\n            });\n        }\n        else {\n            handleExecutionResult(instrumentationConfig, span, res);\n        }\n        recordDuration();\n        span.end();\n        cb.call(this, err, res);\n    };\n}\nexports.patchCallback = patchCallback;\nfunction getPoolName(pool) {\n    let poolName = '';\n    poolName += (pool?.host ? `${pool.host}` : 'unknown_host') + ':';\n    poolName += (pool?.port ? `${pool.port}` : 'unknown_port') + '/';\n    poolName += pool?.database ? `${pool.database}` : 'unknown_database';\n    return poolName.trim();\n}\nexports.getPoolName = getPoolName;\nfunction updateCounter(poolName, pool, connectionCount, connectionPendingRequests, latestCounter) {\n    const all = pool.totalCount;\n    const pending = pool.waitingCount;\n    const idle = pool.idleCount;\n    const used = all - idle;\n    connectionCount.add(used - latestCounter.used, {\n        [semconv_1.ATTR_DB_CLIENT_CONNECTION_STATE]: semconv_1.DB_CLIENT_CONNECTION_STATE_VALUE_USED,\n        [semconv_1.ATTR_DB_CLIENT_CONNECTION_POOL_NAME]: poolName,\n    });\n    connectionCount.add(idle - latestCounter.idle, {\n        [semconv_1.ATTR_DB_CLIENT_CONNECTION_STATE]: semconv_1.DB_CLIENT_CONNECTION_STATE_VALUE_IDLE,\n        [semconv_1.ATTR_DB_CLIENT_CONNECTION_POOL_NAME]: poolName,\n    });\n    connectionPendingRequests.add(pending - latestCounter.pending, {\n        [semconv_1.ATTR_DB_CLIENT_CONNECTION_POOL_NAME]: poolName,\n    });\n    return { used: used, idle: idle, pending: pending };\n}\nexports.updateCounter = updateCounter;\nfunction patchCallbackPGPool(span, cb) {\n    return function patchedCallback(err, res, done) {\n        if (err) {\n            span.setStatus({\n                code: api_1.SpanStatusCode.ERROR,\n                message: err.message,\n            });\n        }\n        span.end();\n        cb.call(this, err, res, done);\n    };\n}\nexports.patchCallbackPGPool = patchCallbackPGPool;\nfunction patchClientConnectCallback(span, cb) {\n    return function patchedClientConnectCallback(err) {\n        if (err) {\n            span.setStatus({\n                code: api_1.SpanStatusCode.ERROR,\n                message: err.message,\n            });\n        }\n        span.end();\n        cb.apply(this, arguments);\n    };\n}\nexports.patchClientConnectCallback = patchClientConnectCallback;\n/**\n * Attempt to get a message string from a thrown value, while being quite\n * defensive, to recognize the fact that, in JS, any kind of value (even\n * primitives) can be thrown.\n */\nfunction getErrorMessage(e) {\n    return typeof e === 'object' && e !== null && 'message' in e\n        ? String(e.message)\n        : undefined;\n}\nexports.getErrorMessage = getErrorMessage;\nfunction isObjectWithTextString(it) {\n    return (typeof it === 'object' &&\n        typeof it?.text === 'string');\n}\nexports.isObjectWithTextString = isObjectWithTextString;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-pg/build/src/utils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-pg/build/src/version.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-pg/build/src/version.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PACKAGE_NAME = exports.PACKAGE_VERSION = void 0;\n// this is autogenerated file, see scripts/version-update.js\nexports.PACKAGE_VERSION = '0.55.0';\nexports.PACKAGE_NAME = '@opentelemetry/instrumentation-pg';\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1wZy9idWlsZC9zcmMvdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0IsR0FBRyx1QkFBdUI7QUFDOUM7QUFDQSx1QkFBdUI7QUFDdkIsb0JBQW9CO0FBQ3BCIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1wZy9idWlsZC9zcmMvdmVyc2lvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlBBQ0tBR0VfTkFNRSA9IGV4cG9ydHMuUEFDS0FHRV9WRVJTSU9OID0gdm9pZCAwO1xuLy8gdGhpcyBpcyBhdXRvZ2VuZXJhdGVkIGZpbGUsIHNlZSBzY3JpcHRzL3ZlcnNpb24tdXBkYXRlLmpzXG5leHBvcnRzLlBBQ0tBR0VfVkVSU0lPTiA9ICcwLjU1LjAnO1xuZXhwb3J0cy5QQUNLQUdFX05BTUUgPSAnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLXBnJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-pg/build/src/version.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-redis/build/src/index.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-redis/build/src/index.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RedisInstrumentation = void 0;\nvar redis_1 = __webpack_require__(/*! ./redis */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-redis/build/src/redis.js\");\nObject.defineProperty(exports, \"RedisInstrumentation\", ({ enumerable: true, get: function () { return redis_1.RedisInstrumentation; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1yZWRpcy9idWlsZC9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNEJBQTRCO0FBQzVCLGNBQWMsbUJBQU8sQ0FBQyxvR0FBUztBQUMvQix3REFBdUQsRUFBRSxxQ0FBcUMsd0NBQXdDLEVBQUM7QUFDdkkiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLXJlZGlzL2J1aWxkL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJlZGlzSW5zdHJ1bWVudGF0aW9uID0gdm9pZCAwO1xudmFyIHJlZGlzXzEgPSByZXF1aXJlKFwiLi9yZWRpc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlJlZGlzSW5zdHJ1bWVudGF0aW9uXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiByZWRpc18xLlJlZGlzSW5zdHJ1bWVudGF0aW9uOyB9IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-redis/build/src/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-redis/build/src/redis.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-redis/build/src/redis.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RedisInstrumentation = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\n/** @knipignore */\nconst version_1 = __webpack_require__(/*! ./version */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-redis/build/src/version.js\");\nconst instrumentation_2 = __webpack_require__(/*! ./v2-v3/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-redis/build/src/v2-v3/instrumentation.js\");\nconst instrumentation_3 = __webpack_require__(/*! ./v4/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-redis/build/src/v4/instrumentation.js\");\nconst DEFAULT_CONFIG = {\n    requireParentSpan: false,\n};\n// Wrapper RedisInstrumentation that address all supported versions\nclass RedisInstrumentation extends instrumentation_1.InstrumentationBase {\n    instrumentationV2_V3;\n    instrumentationV4;\n    // this is used to bypass a flaw in the base class constructor, which is calling\n    // member functions before the constructor has a chance to fully initialize the member variables.\n    initialized = false;\n    constructor(config = {}) {\n        const resolvedConfig = { ...DEFAULT_CONFIG, ...config };\n        super(version_1.PACKAGE_NAME, version_1.PACKAGE_VERSION, resolvedConfig);\n        this.instrumentationV2_V3 = new instrumentation_2.RedisInstrumentationV2_V3(this.getConfig());\n        this.instrumentationV4 = new instrumentation_3.RedisInstrumentationV4(this.getConfig());\n        this.initialized = true;\n    }\n    setConfig(config = {}) {\n        const newConfig = { ...DEFAULT_CONFIG, ...config };\n        super.setConfig(newConfig);\n        if (!this.initialized) {\n            return;\n        }\n        this.instrumentationV2_V3.setConfig(newConfig);\n        this.instrumentationV4.setConfig(newConfig);\n    }\n    init() { }\n    setTracerProvider(tracerProvider) {\n        super.setTracerProvider(tracerProvider);\n        if (!this.initialized) {\n            return;\n        }\n        this.instrumentationV2_V3.setTracerProvider(tracerProvider);\n        this.instrumentationV4.setTracerProvider(tracerProvider);\n    }\n    enable() {\n        super.enable();\n        if (!this.initialized) {\n            return;\n        }\n        this.instrumentationV2_V3.enable();\n        this.instrumentationV4.enable();\n    }\n    disable() {\n        super.disable();\n        if (!this.initialized) {\n            return;\n        }\n        this.instrumentationV2_V3.disable();\n        this.instrumentationV4.disable();\n    }\n}\nexports.RedisInstrumentation = RedisInstrumentation;\n//# sourceMappingURL=redis.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1yZWRpcy9idWlsZC9zcmMvcmVkaXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixtQkFBTyxDQUFDLHFIQUFnQztBQUNsRTtBQUNBLGtCQUFrQixtQkFBTyxDQUFDLHdHQUFXO0FBQ3JDLDBCQUEwQixtQkFBTyxDQUFDLG9JQUF5QjtBQUMzRCwwQkFBMEIsbUJBQU8sQ0FBQyw4SEFBc0I7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0IsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekIsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QiIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tcmVkaXMvYnVpbGQvc3JjL3JlZGlzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5SZWRpc0luc3RydW1lbnRhdGlvbiA9IHZvaWQgMDtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5jb25zdCBpbnN0cnVtZW50YXRpb25fMSA9IHJlcXVpcmUoXCJAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb25cIik7XG4vKiogQGtuaXBpZ25vcmUgKi9cbmNvbnN0IHZlcnNpb25fMSA9IHJlcXVpcmUoXCIuL3ZlcnNpb25cIik7XG5jb25zdCBpbnN0cnVtZW50YXRpb25fMiA9IHJlcXVpcmUoXCIuL3YyLXYzL2luc3RydW1lbnRhdGlvblwiKTtcbmNvbnN0IGluc3RydW1lbnRhdGlvbl8zID0gcmVxdWlyZShcIi4vdjQvaW5zdHJ1bWVudGF0aW9uXCIpO1xuY29uc3QgREVGQVVMVF9DT05GSUcgPSB7XG4gICAgcmVxdWlyZVBhcmVudFNwYW46IGZhbHNlLFxufTtcbi8vIFdyYXBwZXIgUmVkaXNJbnN0cnVtZW50YXRpb24gdGhhdCBhZGRyZXNzIGFsbCBzdXBwb3J0ZWQgdmVyc2lvbnNcbmNsYXNzIFJlZGlzSW5zdHJ1bWVudGF0aW9uIGV4dGVuZHMgaW5zdHJ1bWVudGF0aW9uXzEuSW5zdHJ1bWVudGF0aW9uQmFzZSB7XG4gICAgaW5zdHJ1bWVudGF0aW9uVjJfVjM7XG4gICAgaW5zdHJ1bWVudGF0aW9uVjQ7XG4gICAgLy8gdGhpcyBpcyB1c2VkIHRvIGJ5cGFzcyBhIGZsYXcgaW4gdGhlIGJhc2UgY2xhc3MgY29uc3RydWN0b3IsIHdoaWNoIGlzIGNhbGxpbmdcbiAgICAvLyBtZW1iZXIgZnVuY3Rpb25zIGJlZm9yZSB0aGUgY29uc3RydWN0b3IgaGFzIGEgY2hhbmNlIHRvIGZ1bGx5IGluaXRpYWxpemUgdGhlIG1lbWJlciB2YXJpYWJsZXMuXG4gICAgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcgPSB7fSkge1xuICAgICAgICBjb25zdCByZXNvbHZlZENvbmZpZyA9IHsgLi4uREVGQVVMVF9DT05GSUcsIC4uLmNvbmZpZyB9O1xuICAgICAgICBzdXBlcih2ZXJzaW9uXzEuUEFDS0FHRV9OQU1FLCB2ZXJzaW9uXzEuUEFDS0FHRV9WRVJTSU9OLCByZXNvbHZlZENvbmZpZyk7XG4gICAgICAgIHRoaXMuaW5zdHJ1bWVudGF0aW9uVjJfVjMgPSBuZXcgaW5zdHJ1bWVudGF0aW9uXzIuUmVkaXNJbnN0cnVtZW50YXRpb25WMl9WMyh0aGlzLmdldENvbmZpZygpKTtcbiAgICAgICAgdGhpcy5pbnN0cnVtZW50YXRpb25WNCA9IG5ldyBpbnN0cnVtZW50YXRpb25fMy5SZWRpc0luc3RydW1lbnRhdGlvblY0KHRoaXMuZ2V0Q29uZmlnKCkpO1xuICAgICAgICB0aGlzLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICB9XG4gICAgc2V0Q29uZmlnKGNvbmZpZyA9IHt9KSB7XG4gICAgICAgIGNvbnN0IG5ld0NvbmZpZyA9IHsgLi4uREVGQVVMVF9DT05GSUcsIC4uLmNvbmZpZyB9O1xuICAgICAgICBzdXBlci5zZXRDb25maWcobmV3Q29uZmlnKTtcbiAgICAgICAgaWYgKCF0aGlzLmluaXRpYWxpemVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbnN0cnVtZW50YXRpb25WMl9WMy5zZXRDb25maWcobmV3Q29uZmlnKTtcbiAgICAgICAgdGhpcy5pbnN0cnVtZW50YXRpb25WNC5zZXRDb25maWcobmV3Q29uZmlnKTtcbiAgICB9XG4gICAgaW5pdCgpIHsgfVxuICAgIHNldFRyYWNlclByb3ZpZGVyKHRyYWNlclByb3ZpZGVyKSB7XG4gICAgICAgIHN1cGVyLnNldFRyYWNlclByb3ZpZGVyKHRyYWNlclByb3ZpZGVyKTtcbiAgICAgICAgaWYgKCF0aGlzLmluaXRpYWxpemVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbnN0cnVtZW50YXRpb25WMl9WMy5zZXRUcmFjZXJQcm92aWRlcih0cmFjZXJQcm92aWRlcik7XG4gICAgICAgIHRoaXMuaW5zdHJ1bWVudGF0aW9uVjQuc2V0VHJhY2VyUHJvdmlkZXIodHJhY2VyUHJvdmlkZXIpO1xuICAgIH1cbiAgICBlbmFibGUoKSB7XG4gICAgICAgIHN1cGVyLmVuYWJsZSgpO1xuICAgICAgICBpZiAoIXRoaXMuaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmluc3RydW1lbnRhdGlvblYyX1YzLmVuYWJsZSgpO1xuICAgICAgICB0aGlzLmluc3RydW1lbnRhdGlvblY0LmVuYWJsZSgpO1xuICAgIH1cbiAgICBkaXNhYmxlKCkge1xuICAgICAgICBzdXBlci5kaXNhYmxlKCk7XG4gICAgICAgIGlmICghdGhpcy5pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW5zdHJ1bWVudGF0aW9uVjJfVjMuZGlzYWJsZSgpO1xuICAgICAgICB0aGlzLmluc3RydW1lbnRhdGlvblY0LmRpc2FibGUoKTtcbiAgICB9XG59XG5leHBvcnRzLlJlZGlzSW5zdHJ1bWVudGF0aW9uID0gUmVkaXNJbnN0cnVtZW50YXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWRpcy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-redis/build/src/redis.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-redis/build/src/v2-v3/instrumentation.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-redis/build/src/v2-v3/instrumentation.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = \"/monitoring\";globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.2\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RedisInstrumentationV2_V3 = void 0;\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-redis/build/src/v2-v3/utils.js\");\n/** @knipignore */\nconst version_1 = __webpack_require__(/*! ../version */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-redis/build/src/version.js\");\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst redis_common_1 = __webpack_require__(/*! @opentelemetry/redis-common */ \"(instrument)/./node_modules/@opentelemetry/redis-common/build/src/index.js\");\nclass RedisInstrumentationV2_V3 extends instrumentation_1.InstrumentationBase {\n    static COMPONENT = 'redis';\n    constructor(config = {}) {\n        super(version_1.PACKAGE_NAME, version_1.PACKAGE_VERSION, config);\n    }\n    init() {\n        return [\n            new instrumentation_1.InstrumentationNodeModuleDefinition('redis', ['>=2.6.0 <4'], moduleExports => {\n                if ((0, instrumentation_1.isWrapped)(moduleExports.RedisClient.prototype['internal_send_command'])) {\n                    this._unwrap(moduleExports.RedisClient.prototype, 'internal_send_command');\n                }\n                this._wrap(moduleExports.RedisClient.prototype, 'internal_send_command', this._getPatchInternalSendCommand());\n                if ((0, instrumentation_1.isWrapped)(moduleExports.RedisClient.prototype['create_stream'])) {\n                    this._unwrap(moduleExports.RedisClient.prototype, 'create_stream');\n                }\n                this._wrap(moduleExports.RedisClient.prototype, 'create_stream', this._getPatchCreateStream());\n                if ((0, instrumentation_1.isWrapped)(moduleExports.createClient)) {\n                    this._unwrap(moduleExports, 'createClient');\n                }\n                this._wrap(moduleExports, 'createClient', this._getPatchCreateClient());\n                return moduleExports;\n            }, moduleExports => {\n                if (moduleExports === undefined)\n                    return;\n                this._unwrap(moduleExports.RedisClient.prototype, 'internal_send_command');\n                this._unwrap(moduleExports.RedisClient.prototype, 'create_stream');\n                this._unwrap(moduleExports, 'createClient');\n            }),\n        ];\n    }\n    /**\n     * Patch internal_send_command(...) to trace requests\n     */\n    _getPatchInternalSendCommand() {\n        const instrumentation = this;\n        return function internal_send_command(original) {\n            return function internal_send_command_trace(cmd) {\n                // Versions of redis (2.4+) use a single options object\n                // instead of named arguments\n                if (arguments.length !== 1 || typeof cmd !== 'object') {\n                    // We don't know how to trace this call, so don't start/stop a span\n                    return original.apply(this, arguments);\n                }\n                const config = instrumentation.getConfig();\n                const hasNoParentSpan = api_1.trace.getSpan(api_1.context.active()) === undefined;\n                if (config.requireParentSpan === true && hasNoParentSpan) {\n                    return original.apply(this, arguments);\n                }\n                const dbStatementSerializer = config?.dbStatementSerializer || redis_common_1.defaultDbStatementSerializer;\n                const span = instrumentation.tracer.startSpan(`${RedisInstrumentationV2_V3.COMPONENT}-${cmd.command}`, {\n                    kind: api_1.SpanKind.CLIENT,\n                    attributes: {\n                        [semantic_conventions_1.SEMATTRS_DB_SYSTEM]: semantic_conventions_1.DBSYSTEMVALUES_REDIS,\n                        [semantic_conventions_1.SEMATTRS_DB_STATEMENT]: dbStatementSerializer(cmd.command, cmd.args),\n                    },\n                });\n                // Set attributes for not explicitly typed RedisPluginClientTypes\n                if (this.connection_options) {\n                    span.setAttributes({\n                        [semantic_conventions_1.SEMATTRS_NET_PEER_NAME]: this.connection_options.host,\n                        [semantic_conventions_1.SEMATTRS_NET_PEER_PORT]: this.connection_options.port,\n                    });\n                }\n                if (this.address) {\n                    span.setAttribute(semantic_conventions_1.SEMATTRS_DB_CONNECTION_STRING, `redis://${this.address}`);\n                }\n                const originalCallback = arguments[0].callback;\n                if (originalCallback) {\n                    const originalContext = api_1.context.active();\n                    arguments[0].callback = function callback(err, reply) {\n                        if (config?.responseHook) {\n                            const responseHook = config.responseHook;\n                            (0, instrumentation_1.safeExecuteInTheMiddle)(() => {\n                                responseHook(span, cmd.command, cmd.args, reply);\n                            }, err => {\n                                if (err) {\n                                    instrumentation._diag.error('Error executing responseHook', err);\n                                }\n                            }, true);\n                        }\n                        (0, utils_1.endSpan)(span, err);\n                        return api_1.context.with(originalContext, originalCallback, this, ...arguments);\n                    };\n                }\n                try {\n                    // Span will be ended in callback\n                    return original.apply(this, arguments);\n                }\n                catch (rethrow) {\n                    (0, utils_1.endSpan)(span, rethrow);\n                    throw rethrow; // rethrow after ending span\n                }\n            };\n        };\n    }\n    _getPatchCreateClient() {\n        return function createClient(original) {\n            return (0, utils_1.getTracedCreateClient)(original);\n        };\n    }\n    _getPatchCreateStream() {\n        return function createReadStream(original) {\n            return (0, utils_1.getTracedCreateStreamTrace)(original);\n        };\n    }\n}\nexports.RedisInstrumentationV2_V3 = RedisInstrumentationV2_V3;\n//# sourceMappingURL=instrumentation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-redis/build/src/v2-v3/instrumentation.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-redis/build/src/v2-v3/utils.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-redis/build/src/v2-v3/utils.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getTracedCreateStreamTrace = exports.getTracedCreateClient = exports.endSpan = void 0;\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst endSpan = (span, err) => {\n    if (err) {\n        span.setStatus({\n            code: api_1.SpanStatusCode.ERROR,\n            message: err.message,\n        });\n    }\n    span.end();\n};\nexports.endSpan = endSpan;\nconst getTracedCreateClient = (original) => {\n    return function createClientTrace() {\n        const client = original.apply(this, arguments);\n        return api_1.context.bind(api_1.context.active(), client);\n    };\n};\nexports.getTracedCreateClient = getTracedCreateClient;\nconst getTracedCreateStreamTrace = (original) => {\n    return function create_stream_trace() {\n        if (!Object.prototype.hasOwnProperty.call(this, 'stream')) {\n            Object.defineProperty(this, 'stream', {\n                get() {\n                    return this._patched_redis_stream;\n                },\n                set(val) {\n                    api_1.context.bind(api_1.context.active(), val);\n                    this._patched_redis_stream = val;\n                },\n            });\n        }\n        return original.apply(this, arguments);\n    };\n};\nexports.getTracedCreateStreamTrace = getTracedCreateStreamTrace;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1yZWRpcy9idWlsZC9zcmMvdjItdjMvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0NBQWtDLEdBQUcsNkJBQTZCLEdBQUcsZUFBZTtBQUNwRixjQUFjLG1CQUFPLENBQUMsNkZBQW9CO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQyIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tcmVkaXMvYnVpbGQvc3JjL3YyLXYzL3V0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0VHJhY2VkQ3JlYXRlU3RyZWFtVHJhY2UgPSBleHBvcnRzLmdldFRyYWNlZENyZWF0ZUNsaWVudCA9IGV4cG9ydHMuZW5kU3BhbiA9IHZvaWQgMDtcbmNvbnN0IGFwaV8xID0gcmVxdWlyZShcIkBvcGVudGVsZW1ldHJ5L2FwaVwiKTtcbmNvbnN0IGVuZFNwYW4gPSAoc3BhbiwgZXJyKSA9PiB7XG4gICAgaWYgKGVycikge1xuICAgICAgICBzcGFuLnNldFN0YXR1cyh7XG4gICAgICAgICAgICBjb2RlOiBhcGlfMS5TcGFuU3RhdHVzQ29kZS5FUlJPUixcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVyci5tZXNzYWdlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3Bhbi5lbmQoKTtcbn07XG5leHBvcnRzLmVuZFNwYW4gPSBlbmRTcGFuO1xuY29uc3QgZ2V0VHJhY2VkQ3JlYXRlQ2xpZW50ID0gKG9yaWdpbmFsKSA9PiB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZUNsaWVudFRyYWNlKCkge1xuICAgICAgICBjb25zdCBjbGllbnQgPSBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICByZXR1cm4gYXBpXzEuY29udGV4dC5iaW5kKGFwaV8xLmNvbnRleHQuYWN0aXZlKCksIGNsaWVudCk7XG4gICAgfTtcbn07XG5leHBvcnRzLmdldFRyYWNlZENyZWF0ZUNsaWVudCA9IGdldFRyYWNlZENyZWF0ZUNsaWVudDtcbmNvbnN0IGdldFRyYWNlZENyZWF0ZVN0cmVhbVRyYWNlID0gKG9yaWdpbmFsKSA9PiB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZV9zdHJlYW1fdHJhY2UoKSB7XG4gICAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMsICdzdHJlYW0nKSkge1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdzdHJlYW0nLCB7XG4gICAgICAgICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcGF0Y2hlZF9yZWRpc19zdHJlYW07XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQodmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIGFwaV8xLmNvbnRleHQuYmluZChhcGlfMS5jb250ZXh0LmFjdGl2ZSgpLCB2YWwpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wYXRjaGVkX3JlZGlzX3N0cmVhbSA9IHZhbDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbn07XG5leHBvcnRzLmdldFRyYWNlZENyZWF0ZVN0cmVhbVRyYWNlID0gZ2V0VHJhY2VkQ3JlYXRlU3RyZWFtVHJhY2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-redis/build/src/v2-v3/utils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-redis/build/src/v4/instrumentation.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-redis/build/src/v4/instrumentation.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = \"/monitoring\";globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.2\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RedisInstrumentationV4 = void 0;\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-redis/build/src/v4/utils.js\");\nconst redis_common_1 = __webpack_require__(/*! @opentelemetry/redis-common */ \"(instrument)/./node_modules/@opentelemetry/redis-common/build/src/index.js\");\n/** @knipignore */\nconst version_1 = __webpack_require__(/*! ../version */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-redis/build/src/version.js\");\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst OTEL_OPEN_SPANS = Symbol('opentelemetry.instrumentation.redis.open_spans');\nconst MULTI_COMMAND_OPTIONS = Symbol('opentelemetry.instrumentation.redis.multi_command_options');\nclass RedisInstrumentationV4 extends instrumentation_1.InstrumentationBase {\n    static COMPONENT = 'redis';\n    constructor(config = {}) {\n        super(version_1.PACKAGE_NAME, version_1.PACKAGE_VERSION, config);\n    }\n    init() {\n        // @node-redis/client is a new package introduced and consumed by 'redis 4.0.x'\n        // on redis@4.1.0 it was changed to @redis/client.\n        // we will instrument both packages\n        return [\n            this._getInstrumentationNodeModuleDefinition('@redis/client'),\n            this._getInstrumentationNodeModuleDefinition('@node-redis/client'),\n        ];\n    }\n    _getInstrumentationNodeModuleDefinition(basePackageName) {\n        const commanderModuleFile = new instrumentation_1.InstrumentationNodeModuleFile(`${basePackageName}/dist/lib/commander.js`, ['^1.0.0'], (moduleExports, moduleVersion) => {\n            const transformCommandArguments = moduleExports.transformCommandArguments;\n            if (!transformCommandArguments) {\n                this._diag.error('internal instrumentation error, missing transformCommandArguments function');\n                return moduleExports;\n            }\n            // function name and signature changed in redis 4.1.0 from 'extendWithCommands' to 'attachCommands'\n            // the matching internal package names starts with 1.0.x (for redis 4.0.x)\n            const functionToPatch = moduleVersion?.startsWith('1.0.')\n                ? 'extendWithCommands'\n                : 'attachCommands';\n            // this is the function that extend a redis client with a list of commands.\n            // the function patches the commandExecutor to record a span\n            if ((0, instrumentation_1.isWrapped)(moduleExports?.[functionToPatch])) {\n                this._unwrap(moduleExports, functionToPatch);\n            }\n            this._wrap(moduleExports, functionToPatch, this._getPatchExtendWithCommands(transformCommandArguments));\n            return moduleExports;\n        }, (moduleExports) => {\n            if ((0, instrumentation_1.isWrapped)(moduleExports?.extendWithCommands)) {\n                this._unwrap(moduleExports, 'extendWithCommands');\n            }\n            if ((0, instrumentation_1.isWrapped)(moduleExports?.attachCommands)) {\n                this._unwrap(moduleExports, 'attachCommands');\n            }\n        });\n        const multiCommanderModule = new instrumentation_1.InstrumentationNodeModuleFile(`${basePackageName}/dist/lib/client/multi-command.js`, ['^1.0.0'], (moduleExports) => {\n            const redisClientMultiCommandPrototype = moduleExports?.default?.prototype;\n            if ((0, instrumentation_1.isWrapped)(redisClientMultiCommandPrototype?.exec)) {\n                this._unwrap(redisClientMultiCommandPrototype, 'exec');\n            }\n            this._wrap(redisClientMultiCommandPrototype, 'exec', this._getPatchMultiCommandsExec());\n            if ((0, instrumentation_1.isWrapped)(redisClientMultiCommandPrototype?.addCommand)) {\n                this._unwrap(redisClientMultiCommandPrototype, 'addCommand');\n            }\n            this._wrap(redisClientMultiCommandPrototype, 'addCommand', this._getPatchMultiCommandsAddCommand());\n            return moduleExports;\n        }, (moduleExports) => {\n            const redisClientMultiCommandPrototype = moduleExports?.default?.prototype;\n            if ((0, instrumentation_1.isWrapped)(redisClientMultiCommandPrototype?.exec)) {\n                this._unwrap(redisClientMultiCommandPrototype, 'exec');\n            }\n            if ((0, instrumentation_1.isWrapped)(redisClientMultiCommandPrototype?.addCommand)) {\n                this._unwrap(redisClientMultiCommandPrototype, 'addCommand');\n            }\n        });\n        const clientIndexModule = new instrumentation_1.InstrumentationNodeModuleFile(`${basePackageName}/dist/lib/client/index.js`, ['^1.0.0'], (moduleExports) => {\n            const redisClientPrototype = moduleExports?.default?.prototype;\n            // In some @redis/client versions 'multi' is a method. In later\n            // versions, as of https://github.com/redis/node-redis/pull/2324,\n            // 'MULTI' is a method and 'multi' is a property defined in the\n            // constructor that points to 'MULTI', and therefore it will not\n            // be defined on the prototype.\n            if (redisClientPrototype?.multi) {\n                if ((0, instrumentation_1.isWrapped)(redisClientPrototype?.multi)) {\n                    this._unwrap(redisClientPrototype, 'multi');\n                }\n                this._wrap(redisClientPrototype, 'multi', this._getPatchRedisClientMulti());\n            }\n            if (redisClientPrototype?.MULTI) {\n                if ((0, instrumentation_1.isWrapped)(redisClientPrototype?.MULTI)) {\n                    this._unwrap(redisClientPrototype, 'MULTI');\n                }\n                this._wrap(redisClientPrototype, 'MULTI', this._getPatchRedisClientMulti());\n            }\n            if ((0, instrumentation_1.isWrapped)(redisClientPrototype?.sendCommand)) {\n                this._unwrap(redisClientPrototype, 'sendCommand');\n            }\n            this._wrap(redisClientPrototype, 'sendCommand', this._getPatchRedisClientSendCommand());\n            this._wrap(redisClientPrototype, 'connect', this._getPatchedClientConnect());\n            return moduleExports;\n        }, (moduleExports) => {\n            const redisClientPrototype = moduleExports?.default?.prototype;\n            if ((0, instrumentation_1.isWrapped)(redisClientPrototype?.multi)) {\n                this._unwrap(redisClientPrototype, 'multi');\n            }\n            if ((0, instrumentation_1.isWrapped)(redisClientPrototype?.MULTI)) {\n                this._unwrap(redisClientPrototype, 'MULTI');\n            }\n            if ((0, instrumentation_1.isWrapped)(redisClientPrototype?.sendCommand)) {\n                this._unwrap(redisClientPrototype, 'sendCommand');\n            }\n        });\n        return new instrumentation_1.InstrumentationNodeModuleDefinition(basePackageName, ['^1.0.0'], (moduleExports) => {\n            return moduleExports;\n        }, () => { }, [commanderModuleFile, multiCommanderModule, clientIndexModule]);\n    }\n    // serves both for redis 4.0.x where function name is extendWithCommands\n    // and redis ^4.1.0 where function name is attachCommands\n    _getPatchExtendWithCommands(transformCommandArguments) {\n        const plugin = this;\n        return function extendWithCommandsPatchWrapper(original) {\n            return function extendWithCommandsPatch(config) {\n                if (config?.BaseClass?.name !== 'RedisClient') {\n                    return original.apply(this, arguments);\n                }\n                const origExecutor = config.executor;\n                config.executor = function (command, args) {\n                    const redisCommandArguments = transformCommandArguments(command, args).args;\n                    return plugin._traceClientCommand(origExecutor, this, arguments, redisCommandArguments);\n                };\n                return original.apply(this, arguments);\n            };\n        };\n    }\n    _getPatchMultiCommandsExec() {\n        const plugin = this;\n        return function execPatchWrapper(original) {\n            return function execPatch() {\n                const execRes = original.apply(this, arguments);\n                if (typeof execRes?.then !== 'function') {\n                    plugin._diag.error('got non promise result when patching RedisClientMultiCommand.exec');\n                    return execRes;\n                }\n                return execRes\n                    .then((redisRes) => {\n                    const openSpans = this[OTEL_OPEN_SPANS];\n                    plugin._endSpansWithRedisReplies(openSpans, redisRes);\n                    return redisRes;\n                })\n                    .catch((err) => {\n                    const openSpans = this[OTEL_OPEN_SPANS];\n                    if (!openSpans) {\n                        plugin._diag.error('cannot find open spans to end for redis multi command');\n                    }\n                    else {\n                        const replies = err.constructor.name === 'MultiErrorReply'\n                            ? err.replies\n                            : new Array(openSpans.length).fill(err);\n                        plugin._endSpansWithRedisReplies(openSpans, replies);\n                    }\n                    return Promise.reject(err);\n                });\n            };\n        };\n    }\n    _getPatchMultiCommandsAddCommand() {\n        const plugin = this;\n        return function addCommandWrapper(original) {\n            return function addCommandPatch(args) {\n                return plugin._traceClientCommand(original, this, arguments, args);\n            };\n        };\n    }\n    _getPatchRedisClientMulti() {\n        return function multiPatchWrapper(original) {\n            return function multiPatch() {\n                const multiRes = original.apply(this, arguments);\n                multiRes[MULTI_COMMAND_OPTIONS] = this.options;\n                return multiRes;\n            };\n        };\n    }\n    _getPatchRedisClientSendCommand() {\n        const plugin = this;\n        return function sendCommandWrapper(original) {\n            return function sendCommandPatch(args) {\n                return plugin._traceClientCommand(original, this, arguments, args);\n            };\n        };\n    }\n    _getPatchedClientConnect() {\n        const plugin = this;\n        return function connectWrapper(original) {\n            return function patchedConnect() {\n                const options = this.options;\n                const attributes = (0, utils_1.getClientAttributes)(plugin._diag, options);\n                const span = plugin.tracer.startSpan(`${RedisInstrumentationV4.COMPONENT}-connect`, {\n                    kind: api_1.SpanKind.CLIENT,\n                    attributes,\n                });\n                const res = api_1.context.with(api_1.trace.setSpan(api_1.context.active(), span), () => {\n                    return original.apply(this);\n                });\n                return res\n                    .then((result) => {\n                    span.end();\n                    return result;\n                })\n                    .catch((error) => {\n                    span.recordException(error);\n                    span.setStatus({\n                        code: api_1.SpanStatusCode.ERROR,\n                        message: error.message,\n                    });\n                    span.end();\n                    return Promise.reject(error);\n                });\n            };\n        };\n    }\n    _traceClientCommand(origFunction, origThis, origArguments, redisCommandArguments) {\n        const hasNoParentSpan = api_1.trace.getSpan(api_1.context.active()) === undefined;\n        if (hasNoParentSpan && this.getConfig().requireParentSpan) {\n            return origFunction.apply(origThis, origArguments);\n        }\n        const clientOptions = origThis.options || origThis[MULTI_COMMAND_OPTIONS];\n        const commandName = redisCommandArguments[0]; // types also allows it to be a Buffer, but in practice it only string\n        const commandArgs = redisCommandArguments.slice(1);\n        const dbStatementSerializer = this.getConfig().dbStatementSerializer || redis_common_1.defaultDbStatementSerializer;\n        const attributes = (0, utils_1.getClientAttributes)(this._diag, clientOptions);\n        try {\n            const dbStatement = dbStatementSerializer(commandName, commandArgs);\n            if (dbStatement != null) {\n                attributes[semantic_conventions_1.SEMATTRS_DB_STATEMENT] = dbStatement;\n            }\n        }\n        catch (e) {\n            this._diag.error('dbStatementSerializer throw an exception', e, {\n                commandName,\n            });\n        }\n        const span = this.tracer.startSpan(`${RedisInstrumentationV4.COMPONENT}-${commandName}`, {\n            kind: api_1.SpanKind.CLIENT,\n            attributes,\n        });\n        const res = api_1.context.with(api_1.trace.setSpan(api_1.context.active(), span), () => {\n            return origFunction.apply(origThis, origArguments);\n        });\n        if (typeof res?.then === 'function') {\n            res.then((redisRes) => {\n                this._endSpanWithResponse(span, commandName, commandArgs, redisRes, undefined);\n            }, (err) => {\n                this._endSpanWithResponse(span, commandName, commandArgs, null, err);\n            });\n        }\n        else {\n            const redisClientMultiCommand = res;\n            redisClientMultiCommand[OTEL_OPEN_SPANS] =\n                redisClientMultiCommand[OTEL_OPEN_SPANS] || [];\n            redisClientMultiCommand[OTEL_OPEN_SPANS].push({\n                span,\n                commandName,\n                commandArgs,\n            });\n        }\n        return res;\n    }\n    _endSpansWithRedisReplies(openSpans, replies) {\n        if (!openSpans) {\n            return this._diag.error('cannot find open spans to end for redis multi command');\n        }\n        if (replies.length !== openSpans.length) {\n            return this._diag.error('number of multi command spans does not match response from redis');\n        }\n        for (let i = 0; i < openSpans.length; i++) {\n            const { span, commandName, commandArgs } = openSpans[i];\n            const currCommandRes = replies[i];\n            const [res, err] = currCommandRes instanceof Error\n                ? [null, currCommandRes]\n                : [currCommandRes, undefined];\n            this._endSpanWithResponse(span, commandName, commandArgs, res, err);\n        }\n    }\n    _endSpanWithResponse(span, commandName, commandArgs, response, error) {\n        const { responseHook } = this.getConfig();\n        if (!error && responseHook) {\n            try {\n                responseHook(span, commandName, commandArgs, response);\n            }\n            catch (err) {\n                this._diag.error('responseHook throw an exception', err);\n            }\n        }\n        if (error) {\n            span.recordException(error);\n            span.setStatus({ code: api_1.SpanStatusCode.ERROR, message: error?.message });\n        }\n        span.end();\n    }\n}\nexports.RedisInstrumentationV4 = RedisInstrumentationV4;\n//# sourceMappingURL=instrumentation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-redis/build/src/v4/instrumentation.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-redis/build/src/v4/utils.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-redis/build/src/v4/utils.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getClientAttributes = void 0;\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nfunction getClientAttributes(diag, options) {\n    return {\n        [semantic_conventions_1.SEMATTRS_DB_SYSTEM]: semantic_conventions_1.DBSYSTEMVALUES_REDIS,\n        [semantic_conventions_1.SEMATTRS_NET_PEER_NAME]: options?.socket?.host,\n        [semantic_conventions_1.SEMATTRS_NET_PEER_PORT]: options?.socket?.port,\n        [semantic_conventions_1.SEMATTRS_DB_CONNECTION_STRING]: removeCredentialsFromDBConnectionStringAttribute(diag, options?.url),\n    };\n}\nexports.getClientAttributes = getClientAttributes;\n/**\n * removeCredentialsFromDBConnectionStringAttribute removes basic auth from url and user_pwd from query string\n *\n * Examples:\n *   redis://user:pass@localhost:6379/mydb => redis://localhost:6379/mydb\n *   redis://localhost:6379?db=mydb&user_pwd=pass => redis://localhost:6379?db=mydb\n */\nfunction removeCredentialsFromDBConnectionStringAttribute(diag, url) {\n    if (typeof url !== 'string' || !url) {\n        return;\n    }\n    try {\n        const u = new URL(url);\n        u.searchParams.delete('user_pwd');\n        u.username = '';\n        u.password = '';\n        return u.href;\n    }\n    catch (err) {\n        diag.error('failed to sanitize redis connection url', err);\n    }\n    return;\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1yZWRpcy9idWlsZC9zcmMvdjQvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMkJBQTJCO0FBQzNCLCtCQUErQixtQkFBTyxDQUFDLCtIQUFxQztBQUM1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tcmVkaXMvYnVpbGQvc3JjL3Y0L3V0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRDbGllbnRBdHRyaWJ1dGVzID0gdm9pZCAwO1xuY29uc3Qgc2VtYW50aWNfY29udmVudGlvbnNfMSA9IHJlcXVpcmUoXCJAb3BlbnRlbGVtZXRyeS9zZW1hbnRpYy1jb252ZW50aW9uc1wiKTtcbmZ1bmN0aW9uIGdldENsaWVudEF0dHJpYnV0ZXMoZGlhZywgb3B0aW9ucykge1xuICAgIHJldHVybiB7XG4gICAgICAgIFtzZW1hbnRpY19jb252ZW50aW9uc18xLlNFTUFUVFJTX0RCX1NZU1RFTV06IHNlbWFudGljX2NvbnZlbnRpb25zXzEuREJTWVNURU1WQUxVRVNfUkVESVMsXG4gICAgICAgIFtzZW1hbnRpY19jb252ZW50aW9uc18xLlNFTUFUVFJTX05FVF9QRUVSX05BTUVdOiBvcHRpb25zPy5zb2NrZXQ/Lmhvc3QsXG4gICAgICAgIFtzZW1hbnRpY19jb252ZW50aW9uc18xLlNFTUFUVFJTX05FVF9QRUVSX1BPUlRdOiBvcHRpb25zPy5zb2NrZXQ/LnBvcnQsXG4gICAgICAgIFtzZW1hbnRpY19jb252ZW50aW9uc18xLlNFTUFUVFJTX0RCX0NPTk5FQ1RJT05fU1RSSU5HXTogcmVtb3ZlQ3JlZGVudGlhbHNGcm9tREJDb25uZWN0aW9uU3RyaW5nQXR0cmlidXRlKGRpYWcsIG9wdGlvbnM/LnVybCksXG4gICAgfTtcbn1cbmV4cG9ydHMuZ2V0Q2xpZW50QXR0cmlidXRlcyA9IGdldENsaWVudEF0dHJpYnV0ZXM7XG4vKipcbiAqIHJlbW92ZUNyZWRlbnRpYWxzRnJvbURCQ29ubmVjdGlvblN0cmluZ0F0dHJpYnV0ZSByZW1vdmVzIGJhc2ljIGF1dGggZnJvbSB1cmwgYW5kIHVzZXJfcHdkIGZyb20gcXVlcnkgc3RyaW5nXG4gKlxuICogRXhhbXBsZXM6XG4gKiAgIHJlZGlzOi8vdXNlcjpwYXNzQGxvY2FsaG9zdDo2Mzc5L215ZGIgPT4gcmVkaXM6Ly9sb2NhbGhvc3Q6NjM3OS9teWRiXG4gKiAgIHJlZGlzOi8vbG9jYWxob3N0OjYzNzk/ZGI9bXlkYiZ1c2VyX3B3ZD1wYXNzID0+IHJlZGlzOi8vbG9jYWxob3N0OjYzNzk/ZGI9bXlkYlxuICovXG5mdW5jdGlvbiByZW1vdmVDcmVkZW50aWFsc0Zyb21EQkNvbm5lY3Rpb25TdHJpbmdBdHRyaWJ1dGUoZGlhZywgdXJsKSB7XG4gICAgaWYgKHR5cGVvZiB1cmwgIT09ICdzdHJpbmcnIHx8ICF1cmwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBjb25zdCB1ID0gbmV3IFVSTCh1cmwpO1xuICAgICAgICB1LnNlYXJjaFBhcmFtcy5kZWxldGUoJ3VzZXJfcHdkJyk7XG4gICAgICAgIHUudXNlcm5hbWUgPSAnJztcbiAgICAgICAgdS5wYXNzd29yZCA9ICcnO1xuICAgICAgICByZXR1cm4gdS5ocmVmO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGRpYWcuZXJyb3IoJ2ZhaWxlZCB0byBzYW5pdGl6ZSByZWRpcyBjb25uZWN0aW9uIHVybCcsIGVycik7XG4gICAgfVxuICAgIHJldHVybjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-redis/build/src/v4/utils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-redis/build/src/version.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-redis/build/src/version.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PACKAGE_NAME = exports.PACKAGE_VERSION = void 0;\n// this is autogenerated file, see scripts/version-update.js\nexports.PACKAGE_VERSION = '0.51.0';\nexports.PACKAGE_NAME = '@opentelemetry/instrumentation-redis';\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1yZWRpcy9idWlsZC9zcmMvdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0IsR0FBRyx1QkFBdUI7QUFDOUM7QUFDQSx1QkFBdUI7QUFDdkIsb0JBQW9CO0FBQ3BCIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1yZWRpcy9idWlsZC9zcmMvdmVyc2lvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlBBQ0tBR0VfTkFNRSA9IGV4cG9ydHMuUEFDS0FHRV9WRVJTSU9OID0gdm9pZCAwO1xuLy8gdGhpcyBpcyBhdXRvZ2VuZXJhdGVkIGZpbGUsIHNlZSBzY3JpcHRzL3ZlcnNpb24tdXBkYXRlLmpzXG5leHBvcnRzLlBBQ0tBR0VfVkVSU0lPTiA9ICcwLjUxLjAnO1xuZXhwb3J0cy5QQUNLQUdFX05BTUUgPSAnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLXJlZGlzJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-redis/build/src/version.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-tedious/build/src/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-tedious/build/src/index.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TediousInstrumentation = void 0;\nvar instrumentation_1 = __webpack_require__(/*! ./instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-tedious/build/src/instrumentation.js\");\nObject.defineProperty(exports, \"TediousInstrumentation\", ({ enumerable: true, get: function () { return instrumentation_1.TediousInstrumentation; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi10ZWRpb3VzL2J1aWxkL3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw4QkFBOEI7QUFDOUIsd0JBQXdCLG1CQUFPLENBQUMsMEhBQW1CO0FBQ25ELDBEQUF5RCxFQUFFLHFDQUFxQyxvREFBb0QsRUFBQztBQUNySiIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tdGVkaW91cy9idWlsZC9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5UZWRpb3VzSW5zdHJ1bWVudGF0aW9uID0gdm9pZCAwO1xudmFyIGluc3RydW1lbnRhdGlvbl8xID0gcmVxdWlyZShcIi4vaW5zdHJ1bWVudGF0aW9uXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVGVkaW91c0luc3RydW1lbnRhdGlvblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW5zdHJ1bWVudGF0aW9uXzEuVGVkaW91c0luc3RydW1lbnRhdGlvbjsgfSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-tedious/build/src/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-tedious/build/src/instrumentation.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-tedious/build/src/instrumentation.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = \"/monitoring\";globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.2\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TediousInstrumentation = void 0;\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-tedious/build/src/utils.js\");\n/** @knipignore */\nconst version_1 = __webpack_require__(/*! ./version */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-tedious/build/src/version.js\");\nconst CURRENT_DATABASE = Symbol('opentelemetry.instrumentation-tedious.current-database');\nconst PATCHED_METHODS = [\n    'callProcedure',\n    'execSql',\n    'execSqlBatch',\n    'execBulkLoad',\n    'prepare',\n    'execute',\n];\nfunction setDatabase(databaseName) {\n    Object.defineProperty(this, CURRENT_DATABASE, {\n        value: databaseName,\n        writable: true,\n    });\n}\nclass TediousInstrumentation extends instrumentation_1.InstrumentationBase {\n    static COMPONENT = 'tedious';\n    constructor(config = {}) {\n        super(version_1.PACKAGE_NAME, version_1.PACKAGE_VERSION, config);\n    }\n    init() {\n        return [\n            new instrumentation_1.InstrumentationNodeModuleDefinition(TediousInstrumentation.COMPONENT, ['>=1.11.0 <20'], (moduleExports) => {\n                const ConnectionPrototype = moduleExports.Connection.prototype;\n                for (const method of PATCHED_METHODS) {\n                    if ((0, instrumentation_1.isWrapped)(ConnectionPrototype[method])) {\n                        this._unwrap(ConnectionPrototype, method);\n                    }\n                    this._wrap(ConnectionPrototype, method, this._patchQuery(method));\n                }\n                if ((0, instrumentation_1.isWrapped)(ConnectionPrototype.connect)) {\n                    this._unwrap(ConnectionPrototype, 'connect');\n                }\n                this._wrap(ConnectionPrototype, 'connect', this._patchConnect);\n                return moduleExports;\n            }, (moduleExports) => {\n                if (moduleExports === undefined)\n                    return;\n                const ConnectionPrototype = moduleExports.Connection.prototype;\n                for (const method of PATCHED_METHODS) {\n                    this._unwrap(ConnectionPrototype, method);\n                }\n                this._unwrap(ConnectionPrototype, 'connect');\n            }),\n        ];\n    }\n    _patchConnect(original) {\n        return function patchedConnect() {\n            setDatabase.call(this, this.config?.options?.database);\n            // remove the listener first in case it's already added\n            this.removeListener('databaseChange', setDatabase);\n            this.on('databaseChange', setDatabase);\n            this.once('end', () => {\n                this.removeListener('databaseChange', setDatabase);\n            });\n            return original.apply(this, arguments);\n        };\n    }\n    _patchQuery(operation) {\n        return (originalMethod) => {\n            const thisPlugin = this;\n            function patchedMethod(request) {\n                if (!(request instanceof events_1.EventEmitter)) {\n                    thisPlugin._diag.warn(`Unexpected invocation of patched ${operation} method. Span not recorded`);\n                    return originalMethod.apply(this, arguments);\n                }\n                let procCount = 0;\n                let statementCount = 0;\n                const incrementStatementCount = () => statementCount++;\n                const incrementProcCount = () => procCount++;\n                const databaseName = this[CURRENT_DATABASE];\n                const sql = (request => {\n                    // Required for <11.0.9\n                    if (request.sqlTextOrProcedure === 'sp_prepare' &&\n                        request.parametersByName?.stmt?.value) {\n                        return request.parametersByName.stmt.value;\n                    }\n                    return request.sqlTextOrProcedure;\n                })(request);\n                const span = thisPlugin.tracer.startSpan((0, utils_1.getSpanName)(operation, databaseName, sql, request.table), {\n                    kind: api.SpanKind.CLIENT,\n                    attributes: {\n                        [semantic_conventions_1.SEMATTRS_DB_SYSTEM]: semantic_conventions_1.DBSYSTEMVALUES_MSSQL,\n                        [semantic_conventions_1.SEMATTRS_DB_NAME]: databaseName,\n                        [semantic_conventions_1.SEMATTRS_NET_PEER_PORT]: this.config?.options?.port,\n                        [semantic_conventions_1.SEMATTRS_NET_PEER_NAME]: this.config?.server,\n                        // >=4 uses `authentication` object, older versions just userName and password pair\n                        [semantic_conventions_1.SEMATTRS_DB_USER]: this.config?.userName ??\n                            this.config?.authentication?.options?.userName,\n                        [semantic_conventions_1.SEMATTRS_DB_STATEMENT]: sql,\n                        [semantic_conventions_1.SEMATTRS_DB_SQL_TABLE]: request.table,\n                    },\n                });\n                const endSpan = (0, utils_1.once)((err) => {\n                    request.removeListener('done', incrementStatementCount);\n                    request.removeListener('doneInProc', incrementStatementCount);\n                    request.removeListener('doneProc', incrementProcCount);\n                    request.removeListener('error', endSpan);\n                    this.removeListener('end', endSpan);\n                    span.setAttribute('tedious.procedure_count', procCount);\n                    span.setAttribute('tedious.statement_count', statementCount);\n                    if (err) {\n                        span.setStatus({\n                            code: api.SpanStatusCode.ERROR,\n                            message: err.message,\n                        });\n                    }\n                    span.end();\n                });\n                request.on('done', incrementStatementCount);\n                request.on('doneInProc', incrementStatementCount);\n                request.on('doneProc', incrementProcCount);\n                request.once('error', endSpan);\n                this.on('end', endSpan);\n                if (typeof request.callback === 'function') {\n                    thisPlugin._wrap(request, 'callback', thisPlugin._patchCallbackQuery(endSpan));\n                }\n                else {\n                    thisPlugin._diag.error('Expected request.callback to be a function');\n                }\n                return api.context.with(api.trace.setSpan(api.context.active(), span), originalMethod, this, ...arguments);\n            }\n            Object.defineProperty(patchedMethod, 'length', {\n                value: originalMethod.length,\n                writable: false,\n            });\n            return patchedMethod;\n        };\n    }\n    _patchCallbackQuery(endSpan) {\n        return (originalCallback) => {\n            return function (err, rowCount, rows) {\n                endSpan(err);\n                return originalCallback.apply(this, arguments);\n            };\n        };\n    }\n}\nexports.TediousInstrumentation = TediousInstrumentation;\n//# sourceMappingURL=instrumentation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-tedious/build/src/instrumentation.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-tedious/build/src/utils.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-tedious/build/src/utils.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.once = exports.getSpanName = void 0;\n/**\n * The span name SHOULD be set to a low cardinality value\n * representing the statement executed on the database.\n *\n * @returns Operation executed on Tedious Connection. Does not map to SQL statement in any way.\n */\nfunction getSpanName(operation, db, sql, bulkLoadTable) {\n    if (operation === 'execBulkLoad' && bulkLoadTable && db) {\n        return `${operation} ${bulkLoadTable} ${db}`;\n    }\n    if (operation === 'callProcedure') {\n        // `sql` refers to procedure name with `callProcedure`\n        if (db) {\n            return `${operation} ${sql} ${db}`;\n        }\n        return `${operation} ${sql}`;\n    }\n    // do not use `sql` in general case because of high-cardinality\n    if (db) {\n        return `${operation} ${db}`;\n    }\n    return `${operation}`;\n}\nexports.getSpanName = getSpanName;\nconst once = (fn) => {\n    let called = false;\n    return (...args) => {\n        if (called)\n            return;\n        called = true;\n        return fn(...args);\n    };\n};\nexports.once = once;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi10ZWRpb3VzL2J1aWxkL3NyYy91dGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxZQUFZLEdBQUcsbUJBQW1CO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsV0FBVyxFQUFFLGVBQWUsRUFBRSxHQUFHO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLFdBQVcsRUFBRSxLQUFLLEVBQUUsR0FBRztBQUM3QztBQUNBLGtCQUFrQixXQUFXLEVBQUUsSUFBSTtBQUNuQztBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsV0FBVyxFQUFFLEdBQUc7QUFDbEM7QUFDQSxjQUFjLFVBQVU7QUFDeEI7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi10ZWRpb3VzL2J1aWxkL3NyYy91dGlscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm9uY2UgPSBleHBvcnRzLmdldFNwYW5OYW1lID0gdm9pZCAwO1xuLyoqXG4gKiBUaGUgc3BhbiBuYW1lIFNIT1VMRCBiZSBzZXQgdG8gYSBsb3cgY2FyZGluYWxpdHkgdmFsdWVcbiAqIHJlcHJlc2VudGluZyB0aGUgc3RhdGVtZW50IGV4ZWN1dGVkIG9uIHRoZSBkYXRhYmFzZS5cbiAqXG4gKiBAcmV0dXJucyBPcGVyYXRpb24gZXhlY3V0ZWQgb24gVGVkaW91cyBDb25uZWN0aW9uLiBEb2VzIG5vdCBtYXAgdG8gU1FMIHN0YXRlbWVudCBpbiBhbnkgd2F5LlxuICovXG5mdW5jdGlvbiBnZXRTcGFuTmFtZShvcGVyYXRpb24sIGRiLCBzcWwsIGJ1bGtMb2FkVGFibGUpIHtcbiAgICBpZiAob3BlcmF0aW9uID09PSAnZXhlY0J1bGtMb2FkJyAmJiBidWxrTG9hZFRhYmxlICYmIGRiKSB7XG4gICAgICAgIHJldHVybiBgJHtvcGVyYXRpb259ICR7YnVsa0xvYWRUYWJsZX0gJHtkYn1gO1xuICAgIH1cbiAgICBpZiAob3BlcmF0aW9uID09PSAnY2FsbFByb2NlZHVyZScpIHtcbiAgICAgICAgLy8gYHNxbGAgcmVmZXJzIHRvIHByb2NlZHVyZSBuYW1lIHdpdGggYGNhbGxQcm9jZWR1cmVgXG4gICAgICAgIGlmIChkYikge1xuICAgICAgICAgICAgcmV0dXJuIGAke29wZXJhdGlvbn0gJHtzcWx9ICR7ZGJ9YDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYCR7b3BlcmF0aW9ufSAke3NxbH1gO1xuICAgIH1cbiAgICAvLyBkbyBub3QgdXNlIGBzcWxgIGluIGdlbmVyYWwgY2FzZSBiZWNhdXNlIG9mIGhpZ2gtY2FyZGluYWxpdHlcbiAgICBpZiAoZGIpIHtcbiAgICAgICAgcmV0dXJuIGAke29wZXJhdGlvbn0gJHtkYn1gO1xuICAgIH1cbiAgICByZXR1cm4gYCR7b3BlcmF0aW9ufWA7XG59XG5leHBvcnRzLmdldFNwYW5OYW1lID0gZ2V0U3Bhbk5hbWU7XG5jb25zdCBvbmNlID0gKGZuKSA9PiB7XG4gICAgbGV0IGNhbGxlZCA9IGZhbHNlO1xuICAgIHJldHVybiAoLi4uYXJncykgPT4ge1xuICAgICAgICBpZiAoY2FsbGVkKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gZm4oLi4uYXJncyk7XG4gICAgfTtcbn07XG5leHBvcnRzLm9uY2UgPSBvbmNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-tedious/build/src/utils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-tedious/build/src/version.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-tedious/build/src/version.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PACKAGE_NAME = exports.PACKAGE_VERSION = void 0;\n// this is autogenerated file, see scripts/version-update.js\nexports.PACKAGE_VERSION = '0.22.0';\nexports.PACKAGE_NAME = '@opentelemetry/instrumentation-tedious';\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi10ZWRpb3VzL2J1aWxkL3NyYy92ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQixHQUFHLHVCQUF1QjtBQUM5QztBQUNBLHVCQUF1QjtBQUN2QixvQkFBb0I7QUFDcEIiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLXRlZGlvdXMvYnVpbGQvc3JjL3ZlcnNpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5QQUNLQUdFX05BTUUgPSBleHBvcnRzLlBBQ0tBR0VfVkVSU0lPTiA9IHZvaWQgMDtcbi8vIHRoaXMgaXMgYXV0b2dlbmVyYXRlZCBmaWxlLCBzZWUgc2NyaXB0cy92ZXJzaW9uLXVwZGF0ZS5qc1xuZXhwb3J0cy5QQUNLQUdFX1ZFUlNJT04gPSAnMC4yMi4wJztcbmV4cG9ydHMuUEFDS0FHRV9OQU1FID0gJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi10ZWRpb3VzJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-tedious/build/src/version.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-undici/build/src/enums/SemanticAttributes.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-undici/build/src/enums/SemanticAttributes.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SemanticAttributes = void 0;\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\nexports.SemanticAttributes = {\n    /**\n     * State of the HTTP connection in the HTTP connection pool.\n     */\n    HTTP_CONNECTION_STATE: 'http.connection.state',\n    /**\n    * Describes a class of error the operation ended with.\n    *\n    * Note: The `error.type` SHOULD be predictable and SHOULD have low cardinality.\n  Instrumentations SHOULD document the list of errors they report.\n  \n  The cardinality of `error.type` within one instrumentation library SHOULD be low.\n  Telemetry consumers that aggregate data from multiple instrumentation libraries and applications\n  should be prepared for `error.type` to have high cardinality at query time when no\n  additional filters are applied.\n  \n  If the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n  \n  If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\n  it&#39;s RECOMMENDED to:\n  \n  * Use a domain-specific attribute\n  * Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n    */\n    ERROR_TYPE: 'error.type',\n    /**\n     * The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length) header. For requests using transport encoding, this should be the compressed size.\n     */\n    HTTP_REQUEST_BODY_SIZE: 'http.request.body.size',\n    /**\n    * HTTP request method.\n    *\n    * Note: HTTP request method value SHOULD be &#34;known&#34; to the instrumentation.\n  By default, this convention defines &#34;known&#34; methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\n  and the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n  \n  If the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n  \n  If the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\n  the list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\n  OTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n  (this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n  \n  HTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\n  Instrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\n  Tracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n    */\n    HTTP_REQUEST_METHOD: 'http.request.method',\n    /**\n     * Original HTTP method sent by the client in the request line.\n     */\n    HTTP_REQUEST_METHOD_ORIGINAL: 'http.request.method_original',\n    /**\n     * The ordinal number of request resending attempt (for any reason, including redirects).\n     *\n     * Note: The resend count SHOULD be updated each time an HTTP request gets resent by the client, regardless of what was the cause of the resending (e.g. redirection, authorization failure, 503 Server Unavailable, network issues, or any other).\n     */\n    HTTP_REQUEST_RESEND_COUNT: 'http.request.resend_count',\n    /**\n     * The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length) header. For requests using transport encoding, this should be the compressed size.\n     */\n    HTTP_RESPONSE_BODY_SIZE: 'http.response.body.size',\n    /**\n     * [HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).\n     */\n    HTTP_RESPONSE_STATUS_CODE: 'http.response.status_code',\n    /**\n    * The matched route, that is, the path template in the format used by the respective server framework.\n    *\n    * Note: MUST NOT be populated when this is not supported by the HTTP server framework as the route attribute should have low-cardinality and the URI path can NOT substitute it.\n  SHOULD include the [application root](/docs/http/http-spans.md#http-server-definitions) if there is one.\n    */\n    HTTP_ROUTE: 'http.route',\n    /**\n     * Peer address of the network connection - IP address or Unix domain socket name.\n     */\n    NETWORK_PEER_ADDRESS: 'network.peer.address',\n    /**\n     * Peer port number of the network connection.\n     */\n    NETWORK_PEER_PORT: 'network.peer.port',\n    /**\n     * [OSI application layer](https://osi-model.com/application-layer/) or non-OSI equivalent.\n     *\n     * Note: The value SHOULD be normalized to lowercase.\n     */\n    NETWORK_PROTOCOL_NAME: 'network.protocol.name',\n    /**\n     * Version of the protocol specified in `network.protocol.name`.\n     *\n     * Note: `network.protocol.version` refers to the version of the protocol used and might be different from the protocol client&#39;s version. If the HTTP client has a version of `0.27.2`, but sends HTTP version `1.1`, this attribute should be set to `1.1`.\n     */\n    NETWORK_PROTOCOL_VERSION: 'network.protocol.version',\n    /**\n     * Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n     *\n     * Note: When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it&#39;s available.\n     */\n    SERVER_ADDRESS: 'server.address',\n    /**\n     * Server port number.\n     *\n     * Note: When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it&#39;s available.\n     */\n    SERVER_PORT: 'server.port',\n    /**\n    * Absolute URL describing a network resource according to [RFC3986](https://www.rfc-editor.org/rfc/rfc3986).\n    *\n    * Note: For network calls, URL usually has `scheme://host[:port][path][?query][#fragment]` format, where the fragment is not transmitted over HTTP, but if it is known, it SHOULD be included nevertheless.\n  `url.full` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`. In such case username and password SHOULD be redacted and attribute&#39;s value SHOULD be `https://REDACTED:REDACTED@www.example.com/`.\n  `url.full` SHOULD capture the absolute URL when it is available (or can be reconstructed) and SHOULD NOT be validated or modified except for sanitizing purposes.\n    */\n    URL_FULL: 'url.full',\n    /**\n     * The [URI path](https://www.rfc-editor.org/rfc/rfc3986#section-3.3) component.\n     */\n    URL_PATH: 'url.path',\n    /**\n     * The [URI query](https://www.rfc-editor.org/rfc/rfc3986#section-3.4) component.\n     *\n     * Note: Sensitive content provided in query string SHOULD be scrubbed when instrumentations can identify it.\n     */\n    URL_QUERY: 'url.query',\n    /**\n     * The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n     */\n    URL_SCHEME: 'url.scheme',\n    /**\n     * Value of the [HTTP User-Agent](https://www.rfc-editor.org/rfc/rfc9110.html#field.user-agent) header sent by the client.\n     */\n    USER_AGENT_ORIGINAL: 'user_agent.original',\n};\n//# sourceMappingURL=SemanticAttributes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-undici/build/src/enums/SemanticAttributes.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-undici/build/src/index.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-undici/build/src/index.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.UndiciInstrumentation = void 0;\nvar undici_1 = __webpack_require__(/*! ./undici */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-undici/build/src/undici.js\");\nObject.defineProperty(exports, \"UndiciInstrumentation\", ({ enumerable: true, get: function () { return undici_1.UndiciInstrumentation; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi11bmRpY2kvYnVpbGQvc3JjL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDZCQUE2QjtBQUM3QixlQUFlLG1CQUFPLENBQUMsdUdBQVU7QUFDakMseURBQXdELEVBQUUscUNBQXFDLDBDQUEwQyxFQUFDO0FBQzFJIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi11bmRpY2kvYnVpbGQvc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVW5kaWNpSW5zdHJ1bWVudGF0aW9uID0gdm9pZCAwO1xudmFyIHVuZGljaV8xID0gcmVxdWlyZShcIi4vdW5kaWNpXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVW5kaWNpSW5zdHJ1bWVudGF0aW9uXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRpY2lfMS5VbmRpY2lJbnN0cnVtZW50YXRpb247IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-undici/build/src/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-undici/build/src/undici.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-undici/build/src/undici.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.UndiciInstrumentation = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst diagch = __webpack_require__(/*! diagnostics_channel */ \"diagnostics_channel\");\nconst url_1 = __webpack_require__(/*! url */ \"url\");\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\n/** @knipignore */\nconst version_1 = __webpack_require__(/*! ./version */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-undici/build/src/version.js\");\nconst SemanticAttributes_1 = __webpack_require__(/*! ./enums/SemanticAttributes */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-undici/build/src/enums/SemanticAttributes.js\");\nconst core_1 = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/index.js\");\n// A combination of https://github.com/elastic/apm-agent-nodejs and\n// https://github.com/gadget-inc/opentelemetry-instrumentations/blob/main/packages/opentelemetry-instrumentation-undici/src/index.ts\nclass UndiciInstrumentation extends instrumentation_1.InstrumentationBase {\n    _recordFromReq = new WeakMap();\n    constructor(config = {}) {\n        super(version_1.PACKAGE_NAME, version_1.PACKAGE_VERSION, config);\n    }\n    // No need to instrument files/modules\n    init() {\n        return undefined;\n    }\n    disable() {\n        super.disable();\n        this._channelSubs.forEach(sub => sub.unsubscribe());\n        this._channelSubs.length = 0;\n    }\n    enable() {\n        // \"enabled\" handling is currently a bit messy with InstrumentationBase.\n        // If constructed with `{enabled: false}`, this `.enable()` is still called,\n        // and `this.getConfig().enabled !== this.isEnabled()`, creating confusion.\n        //\n        // For now, this class will setup for instrumenting if `.enable()` is\n        // called, but use `this.getConfig().enabled` to determine if\n        // instrumentation should be generated. This covers the more likely common\n        // case of config being given a construction time, rather than later via\n        // `instance.enable()`, `.disable()`, or `.setConfig()` calls.\n        super.enable();\n        // This method is called by the super-class constructor before ours is\n        // called. So we need to ensure the property is initalized.\n        this._channelSubs = this._channelSubs || [];\n        // Avoid to duplicate subscriptions\n        if (this._channelSubs.length > 0) {\n            return;\n        }\n        this.subscribeToChannel('undici:request:create', this.onRequestCreated.bind(this));\n        this.subscribeToChannel('undici:client:sendHeaders', this.onRequestHeaders.bind(this));\n        this.subscribeToChannel('undici:request:headers', this.onResponseHeaders.bind(this));\n        this.subscribeToChannel('undici:request:trailers', this.onDone.bind(this));\n        this.subscribeToChannel('undici:request:error', this.onError.bind(this));\n    }\n    _updateMetricInstruments() {\n        this._httpClientDurationHistogram = this.meter.createHistogram('http.client.request.duration', {\n            description: 'Measures the duration of outbound HTTP requests.',\n            unit: 's',\n            valueType: api_1.ValueType.DOUBLE,\n            advice: {\n                explicitBucketBoundaries: [\n                    0.005, 0.01, 0.025, 0.05, 0.075, 0.1, 0.25, 0.5, 0.75, 1, 2.5, 5,\n                    7.5, 10,\n                ],\n            },\n        });\n    }\n    subscribeToChannel(diagnosticChannel, onMessage) {\n        // `diagnostics_channel` had a ref counting bug until v18.19.0.\n        // https://github.com/nodejs/node/pull/47520\n        const [major, minor] = process.version\n            .replace('v', '')\n            .split('.')\n            .map(n => Number(n));\n        const useNewSubscribe = major > 18 || (major === 18 && minor >= 19);\n        let unsubscribe;\n        if (useNewSubscribe) {\n            diagch.subscribe?.(diagnosticChannel, onMessage);\n            unsubscribe = () => diagch.unsubscribe?.(diagnosticChannel, onMessage);\n        }\n        else {\n            const channel = diagch.channel(diagnosticChannel);\n            channel.subscribe(onMessage);\n            unsubscribe = () => channel.unsubscribe(onMessage);\n        }\n        this._channelSubs.push({\n            name: diagnosticChannel,\n            unsubscribe,\n        });\n    }\n    parseRequestHeaders(request) {\n        const result = new Map();\n        if (Array.isArray(request.headers)) {\n            // headers are an array [k1, v2, k2, v2] (undici v6+)\n            // values could be string or a string[] for multiple values\n            for (let i = 0; i < request.headers.length; i += 2) {\n                const key = request.headers[i];\n                const value = request.headers[i + 1];\n                // Key should always be a string, but the types don't know that, and let's be safe\n                if (typeof key === 'string') {\n                    result.set(key.toLowerCase(), value);\n                }\n            }\n        }\n        else if (typeof request.headers === 'string') {\n            // headers are a raw string (undici v5)\n            // headers could be repeated in several lines for multiple values\n            const headers = request.headers.split('\\r\\n');\n            for (const line of headers) {\n                if (!line) {\n                    continue;\n                }\n                const colonIndex = line.indexOf(':');\n                if (colonIndex === -1) {\n                    // Invalid header? Probably this can't happen, but again let's be safe.\n                    continue;\n                }\n                const key = line.substring(0, colonIndex).toLowerCase();\n                const value = line.substring(colonIndex + 1).trim();\n                const allValues = result.get(key);\n                if (allValues && Array.isArray(allValues)) {\n                    allValues.push(value);\n                }\n                else if (allValues) {\n                    result.set(key, [allValues, value]);\n                }\n                else {\n                    result.set(key, value);\n                }\n            }\n        }\n        return result;\n    }\n    // This is the 1st message we receive for each request (fired after request creation). Here we will\n    // create the span and populate some atttributes, then link the span to the request for further\n    // span processing\n    onRequestCreated({ request }) {\n        // Ignore if:\n        // - instrumentation is disabled\n        // - ignored by config\n        // - method is 'CONNECT'\n        const config = this.getConfig();\n        const enabled = config.enabled !== false;\n        const shouldIgnoreReq = (0, instrumentation_1.safeExecuteInTheMiddle)(() => !enabled ||\n            request.method === 'CONNECT' ||\n            config.ignoreRequestHook?.(request), e => e && this._diag.error('caught ignoreRequestHook error: ', e), true);\n        if (shouldIgnoreReq) {\n            return;\n        }\n        const startTime = (0, core_1.hrTime)();\n        let requestUrl;\n        try {\n            requestUrl = new url_1.URL(request.path, request.origin);\n        }\n        catch (err) {\n            this._diag.warn('could not determine url.full:', err);\n            // Skip instrumenting this request.\n            return;\n        }\n        const urlScheme = requestUrl.protocol.replace(':', '');\n        const requestMethod = this.getRequestMethod(request.method);\n        const attributes = {\n            [SemanticAttributes_1.SemanticAttributes.HTTP_REQUEST_METHOD]: requestMethod,\n            [SemanticAttributes_1.SemanticAttributes.HTTP_REQUEST_METHOD_ORIGINAL]: request.method,\n            [SemanticAttributes_1.SemanticAttributes.URL_FULL]: requestUrl.toString(),\n            [SemanticAttributes_1.SemanticAttributes.URL_PATH]: requestUrl.pathname,\n            [SemanticAttributes_1.SemanticAttributes.URL_QUERY]: requestUrl.search,\n            [SemanticAttributes_1.SemanticAttributes.URL_SCHEME]: urlScheme,\n        };\n        const schemePorts = { https: '443', http: '80' };\n        const serverAddress = requestUrl.hostname;\n        const serverPort = requestUrl.port || schemePorts[urlScheme];\n        attributes[SemanticAttributes_1.SemanticAttributes.SERVER_ADDRESS] = serverAddress;\n        if (serverPort && !isNaN(Number(serverPort))) {\n            attributes[SemanticAttributes_1.SemanticAttributes.SERVER_PORT] = Number(serverPort);\n        }\n        // Get user agent from headers\n        const headersMap = this.parseRequestHeaders(request);\n        const userAgentValues = headersMap.get('user-agent');\n        if (userAgentValues) {\n            // NOTE: having multiple user agents is not expected so\n            // we're going to take last one like `curl` does\n            // ref: https://curl.se/docs/manpage.html#-A\n            const userAgent = Array.isArray(userAgentValues)\n                ? userAgentValues[userAgentValues.length - 1]\n                : userAgentValues;\n            attributes[SemanticAttributes_1.SemanticAttributes.USER_AGENT_ORIGINAL] = userAgent;\n        }\n        // Get attributes from the hook if present\n        const hookAttributes = (0, instrumentation_1.safeExecuteInTheMiddle)(() => config.startSpanHook?.(request), e => e && this._diag.error('caught startSpanHook error: ', e), true);\n        if (hookAttributes) {\n            Object.entries(hookAttributes).forEach(([key, val]) => {\n                attributes[key] = val;\n            });\n        }\n        // Check if parent span is required via config and:\n        // - if a parent is required but not present, we use a `NoopSpan` to still\n        //   propagate context without recording it.\n        // - create a span otherwise\n        const activeCtx = api_1.context.active();\n        const currentSpan = api_1.trace.getSpan(activeCtx);\n        let span;\n        if (config.requireParentforSpans &&\n            (!currentSpan || !api_1.trace.isSpanContextValid(currentSpan.spanContext()))) {\n            span = api_1.trace.wrapSpanContext(api_1.INVALID_SPAN_CONTEXT);\n        }\n        else {\n            span = this.tracer.startSpan(requestMethod === '_OTHER' ? 'HTTP' : requestMethod, {\n                kind: api_1.SpanKind.CLIENT,\n                attributes: attributes,\n            }, activeCtx);\n        }\n        // Execute the request hook if defined\n        (0, instrumentation_1.safeExecuteInTheMiddle)(() => config.requestHook?.(span, request), e => e && this._diag.error('caught requestHook error: ', e), true);\n        // Context propagation goes last so no hook can tamper\n        // the propagation headers\n        const requestContext = api_1.trace.setSpan(api_1.context.active(), span);\n        const addedHeaders = {};\n        api_1.propagation.inject(requestContext, addedHeaders);\n        const headerEntries = Object.entries(addedHeaders);\n        for (let i = 0; i < headerEntries.length; i++) {\n            const [k, v] = headerEntries[i];\n            if (typeof request.addHeader === 'function') {\n                request.addHeader(k, v);\n            }\n            else if (typeof request.headers === 'string') {\n                request.headers += `${k}: ${v}\\r\\n`;\n            }\n            else if (Array.isArray(request.headers)) {\n                // undici@6.11.0 accidentally, briefly removed `request.addHeader()`.\n                request.headers.push(k, v);\n            }\n        }\n        this._recordFromReq.set(request, { span, attributes, startTime });\n    }\n    // This is the 2nd message we receive for each request. It is fired when connection with\n    // the remote is established and about to send the first byte. Here we do have info about the\n    // remote address and port so we can populate some `network.*` attributes into the span\n    onRequestHeaders({ request, socket }) {\n        const record = this._recordFromReq.get(request);\n        if (!record) {\n            return;\n        }\n        const config = this.getConfig();\n        const { span } = record;\n        const { remoteAddress, remotePort } = socket;\n        const spanAttributes = {\n            [SemanticAttributes_1.SemanticAttributes.NETWORK_PEER_ADDRESS]: remoteAddress,\n            [SemanticAttributes_1.SemanticAttributes.NETWORK_PEER_PORT]: remotePort,\n        };\n        // After hooks have been processed (which may modify request headers)\n        // we can collect the headers based on the configuration\n        if (config.headersToSpanAttributes?.requestHeaders) {\n            const headersToAttribs = new Set(config.headersToSpanAttributes.requestHeaders.map(n => n.toLowerCase()));\n            const headersMap = this.parseRequestHeaders(request);\n            for (const [name, value] of headersMap.entries()) {\n                if (headersToAttribs.has(name)) {\n                    const attrValue = Array.isArray(value) ? value.join(', ') : value;\n                    spanAttributes[`http.request.header.${name}`] = attrValue;\n                }\n            }\n        }\n        span.setAttributes(spanAttributes);\n    }\n    // This is the 3rd message we get for each request and it's fired when the server\n    // headers are received, body may not be accessible yet.\n    // From the response headers we can set the status and content length\n    onResponseHeaders({ request, response, }) {\n        const record = this._recordFromReq.get(request);\n        if (!record) {\n            return;\n        }\n        const { span, attributes } = record;\n        const spanAttributes = {\n            [SemanticAttributes_1.SemanticAttributes.HTTP_RESPONSE_STATUS_CODE]: response.statusCode,\n        };\n        const config = this.getConfig();\n        // Execute the response hook if defined\n        (0, instrumentation_1.safeExecuteInTheMiddle)(() => config.responseHook?.(span, { request, response }), e => e && this._diag.error('caught responseHook error: ', e), true);\n        const headersToAttribs = new Set();\n        if (config.headersToSpanAttributes?.responseHeaders) {\n            config.headersToSpanAttributes?.responseHeaders.forEach(name => headersToAttribs.add(name.toLowerCase()));\n        }\n        for (let idx = 0; idx < response.headers.length; idx = idx + 2) {\n            const name = response.headers[idx].toString().toLowerCase();\n            const value = response.headers[idx + 1];\n            if (headersToAttribs.has(name)) {\n                spanAttributes[`http.response.header.${name}`] = value.toString();\n            }\n            if (name === 'content-length') {\n                const contentLength = Number(value.toString());\n                if (!isNaN(contentLength)) {\n                    spanAttributes['http.response.header.content-length'] = contentLength;\n                }\n            }\n        }\n        span.setAttributes(spanAttributes);\n        span.setStatus({\n            code: response.statusCode >= 400\n                ? api_1.SpanStatusCode.ERROR\n                : api_1.SpanStatusCode.UNSET,\n        });\n        record.attributes = Object.assign(attributes, spanAttributes);\n    }\n    // This is the last event we receive if the request went without any errors\n    onDone({ request }) {\n        const record = this._recordFromReq.get(request);\n        if (!record) {\n            return;\n        }\n        const { span, attributes, startTime } = record;\n        // End the span\n        span.end();\n        this._recordFromReq.delete(request);\n        // Record metrics\n        this.recordRequestDuration(attributes, startTime);\n    }\n    // This is the event we get when something is wrong in the request like\n    // - invalid options when calling `fetch` global API or any undici method for request\n    // - connectivity errors such as unreachable host\n    // - requests aborted through an `AbortController.signal`\n    // NOTE: server errors are considered valid responses and it's the lib consumer\n    // who should deal with that.\n    onError({ request, error }) {\n        const record = this._recordFromReq.get(request);\n        if (!record) {\n            return;\n        }\n        const { span, attributes, startTime } = record;\n        // NOTE: in `undici@6.3.0` when request aborted the error type changes from\n        // a custom error (`RequestAbortedError`) to a built-in `DOMException` carrying\n        // some differences:\n        // - `code` is from DOMEXception (ABORT_ERR: 20)\n        // - `message` changes\n        // - stacktrace is smaller and contains node internal frames\n        span.recordException(error);\n        span.setStatus({\n            code: api_1.SpanStatusCode.ERROR,\n            message: error.message,\n        });\n        span.end();\n        this._recordFromReq.delete(request);\n        // Record metrics (with the error)\n        attributes[SemanticAttributes_1.SemanticAttributes.ERROR_TYPE] = error.message;\n        this.recordRequestDuration(attributes, startTime);\n    }\n    recordRequestDuration(attributes, startTime) {\n        // Time to record metrics\n        const metricsAttributes = {};\n        // Get the attribs already in span attributes\n        const keysToCopy = [\n            SemanticAttributes_1.SemanticAttributes.HTTP_RESPONSE_STATUS_CODE,\n            SemanticAttributes_1.SemanticAttributes.HTTP_REQUEST_METHOD,\n            SemanticAttributes_1.SemanticAttributes.SERVER_ADDRESS,\n            SemanticAttributes_1.SemanticAttributes.SERVER_PORT,\n            SemanticAttributes_1.SemanticAttributes.URL_SCHEME,\n            SemanticAttributes_1.SemanticAttributes.ERROR_TYPE,\n        ];\n        keysToCopy.forEach(key => {\n            if (key in attributes) {\n                metricsAttributes[key] = attributes[key];\n            }\n        });\n        // Take the duration and record it\n        const durationSeconds = (0, core_1.hrTimeToMilliseconds)((0, core_1.hrTimeDuration)(startTime, (0, core_1.hrTime)())) / 1000;\n        this._httpClientDurationHistogram.record(durationSeconds, metricsAttributes);\n    }\n    getRequestMethod(original) {\n        const knownMethods = {\n            CONNECT: true,\n            OPTIONS: true,\n            HEAD: true,\n            GET: true,\n            POST: true,\n            PUT: true,\n            PATCH: true,\n            DELETE: true,\n            TRACE: true,\n        };\n        if (original.toUpperCase() in knownMethods) {\n            return original.toUpperCase();\n        }\n        return '_OTHER';\n    }\n}\nexports.UndiciInstrumentation = UndiciInstrumentation;\n//# sourceMappingURL=undici.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-undici/build/src/undici.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation-undici/build/src/version.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-undici/build/src/version.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PACKAGE_NAME = exports.PACKAGE_VERSION = void 0;\n// this is autogenerated file, see scripts/version-update.js\nexports.PACKAGE_VERSION = '0.14.0';\nexports.PACKAGE_NAME = '@opentelemetry/instrumentation-undici';\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi11bmRpY2kvYnVpbGQvc3JjL3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0JBQW9CLEdBQUcsdUJBQXVCO0FBQzlDO0FBQ0EsdUJBQXVCO0FBQ3ZCLG9CQUFvQjtBQUNwQiIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tdW5kaWNpL2J1aWxkL3NyYy92ZXJzaW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUEFDS0FHRV9OQU1FID0gZXhwb3J0cy5QQUNLQUdFX1ZFUlNJT04gPSB2b2lkIDA7XG4vLyB0aGlzIGlzIGF1dG9nZW5lcmF0ZWQgZmlsZSwgc2VlIHNjcmlwdHMvdmVyc2lvbi11cGRhdGUuanNcbmV4cG9ydHMuUEFDS0FHRV9WRVJTSU9OID0gJzAuMTQuMCc7XG5leHBvcnRzLlBBQ0tBR0VfTkFNRSA9ICdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tdW5kaWNpJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation-undici/build/src/version.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/autoLoader.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation/build/esm/autoLoader.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   registerInstrumentations: () => (/* binding */ registerInstrumentations)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace-api.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/metrics-api.js\");\n/* harmony import */ var _opentelemetry_api_logs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/api-logs */ \"(instrument)/./node_modules/@opentelemetry/api-logs/build/esm/index.js\");\n/* harmony import */ var _autoLoaderUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./autoLoaderUtils */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/autoLoaderUtils.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * It will register instrumentations and plugins\n * @param options\n * @return returns function to unload instrumentation and plugins that were\n *   registered\n */\nfunction registerInstrumentations(options) {\n    const tracerProvider = options.tracerProvider || _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.trace.getTracerProvider();\n    const meterProvider = options.meterProvider || _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__.metrics.getMeterProvider();\n    const loggerProvider = options.loggerProvider || _opentelemetry_api_logs__WEBPACK_IMPORTED_MODULE_2__.logs.getLoggerProvider();\n    const instrumentations = options.instrumentations?.flat() ?? [];\n    (0,_autoLoaderUtils__WEBPACK_IMPORTED_MODULE_3__.enableInstrumentations)(instrumentations, tracerProvider, meterProvider, loggerProvider);\n    return () => {\n        (0,_autoLoaderUtils__WEBPACK_IMPORTED_MODULE_3__.disableInstrumentations)(instrumentations);\n    };\n}\n//# sourceMappingURL=autoLoader.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi9idWlsZC9lc20vYXV0b0xvYWRlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNvRDtBQUNMO0FBQ3NDO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AscURBQXFELHFEQUFLO0FBQzFELG1EQUFtRCx1REFBTztBQUMxRCxxREFBcUQseURBQUk7QUFDekQ7QUFDQSxJQUFJLHdFQUFzQjtBQUMxQjtBQUNBLFFBQVEseUVBQXVCO0FBQy9CO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24vYnVpbGQvZXNtL2F1dG9Mb2FkZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IHRyYWNlLCBtZXRyaWNzIH0gZnJvbSAnQG9wZW50ZWxlbWV0cnkvYXBpJztcbmltcG9ydCB7IGxvZ3MgfSBmcm9tICdAb3BlbnRlbGVtZXRyeS9hcGktbG9ncyc7XG5pbXBvcnQgeyBkaXNhYmxlSW5zdHJ1bWVudGF0aW9ucywgZW5hYmxlSW5zdHJ1bWVudGF0aW9ucywgfSBmcm9tICcuL2F1dG9Mb2FkZXJVdGlscyc7XG4vKipcbiAqIEl0IHdpbGwgcmVnaXN0ZXIgaW5zdHJ1bWVudGF0aW9ucyBhbmQgcGx1Z2luc1xuICogQHBhcmFtIG9wdGlvbnNcbiAqIEByZXR1cm4gcmV0dXJucyBmdW5jdGlvbiB0byB1bmxvYWQgaW5zdHJ1bWVudGF0aW9uIGFuZCBwbHVnaW5zIHRoYXQgd2VyZVxuICogICByZWdpc3RlcmVkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3Rlckluc3RydW1lbnRhdGlvbnMob3B0aW9ucykge1xuICAgIGNvbnN0IHRyYWNlclByb3ZpZGVyID0gb3B0aW9ucy50cmFjZXJQcm92aWRlciB8fCB0cmFjZS5nZXRUcmFjZXJQcm92aWRlcigpO1xuICAgIGNvbnN0IG1ldGVyUHJvdmlkZXIgPSBvcHRpb25zLm1ldGVyUHJvdmlkZXIgfHwgbWV0cmljcy5nZXRNZXRlclByb3ZpZGVyKCk7XG4gICAgY29uc3QgbG9nZ2VyUHJvdmlkZXIgPSBvcHRpb25zLmxvZ2dlclByb3ZpZGVyIHx8IGxvZ3MuZ2V0TG9nZ2VyUHJvdmlkZXIoKTtcbiAgICBjb25zdCBpbnN0cnVtZW50YXRpb25zID0gb3B0aW9ucy5pbnN0cnVtZW50YXRpb25zPy5mbGF0KCkgPz8gW107XG4gICAgZW5hYmxlSW5zdHJ1bWVudGF0aW9ucyhpbnN0cnVtZW50YXRpb25zLCB0cmFjZXJQcm92aWRlciwgbWV0ZXJQcm92aWRlciwgbG9nZ2VyUHJvdmlkZXIpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGRpc2FibGVJbnN0cnVtZW50YXRpb25zKGluc3RydW1lbnRhdGlvbnMpO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hdXRvTG9hZGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/autoLoader.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/autoLoaderUtils.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation/build/esm/autoLoaderUtils.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   disableInstrumentations: () => (/* binding */ disableInstrumentations),\n/* harmony export */   enableInstrumentations: () => (/* binding */ enableInstrumentations)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Enable instrumentations\n * @param instrumentations\n * @param tracerProvider\n * @param meterProvider\n */\nfunction enableInstrumentations(instrumentations, tracerProvider, meterProvider, loggerProvider) {\n    for (let i = 0, j = instrumentations.length; i < j; i++) {\n        const instrumentation = instrumentations[i];\n        if (tracerProvider) {\n            instrumentation.setTracerProvider(tracerProvider);\n        }\n        if (meterProvider) {\n            instrumentation.setMeterProvider(meterProvider);\n        }\n        if (loggerProvider && instrumentation.setLoggerProvider) {\n            instrumentation.setLoggerProvider(loggerProvider);\n        }\n        // instrumentations have been already enabled during creation\n        // so enable only if user prevented that by setting enabled to false\n        // this is to prevent double enabling but when calling register all\n        // instrumentations should be now enabled\n        if (!instrumentation.getConfig().enabled) {\n            instrumentation.enable();\n        }\n    }\n}\n/**\n * Disable instrumentations\n * @param instrumentations\n */\nfunction disableInstrumentations(instrumentations) {\n    instrumentations.forEach(instrumentation => instrumentation.disable());\n}\n//# sourceMappingURL=autoLoaderUtils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi9idWlsZC9lc20vYXV0b0xvYWRlclV0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxpREFBaUQsT0FBTztBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uL2J1aWxkL2VzbS9hdXRvTG9hZGVyVXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogRW5hYmxlIGluc3RydW1lbnRhdGlvbnNcbiAqIEBwYXJhbSBpbnN0cnVtZW50YXRpb25zXG4gKiBAcGFyYW0gdHJhY2VyUHJvdmlkZXJcbiAqIEBwYXJhbSBtZXRlclByb3ZpZGVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbmFibGVJbnN0cnVtZW50YXRpb25zKGluc3RydW1lbnRhdGlvbnMsIHRyYWNlclByb3ZpZGVyLCBtZXRlclByb3ZpZGVyLCBsb2dnZXJQcm92aWRlcikge1xuICAgIGZvciAobGV0IGkgPSAwLCBqID0gaW5zdHJ1bWVudGF0aW9ucy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgY29uc3QgaW5zdHJ1bWVudGF0aW9uID0gaW5zdHJ1bWVudGF0aW9uc1tpXTtcbiAgICAgICAgaWYgKHRyYWNlclByb3ZpZGVyKSB7XG4gICAgICAgICAgICBpbnN0cnVtZW50YXRpb24uc2V0VHJhY2VyUHJvdmlkZXIodHJhY2VyUHJvdmlkZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXRlclByb3ZpZGVyKSB7XG4gICAgICAgICAgICBpbnN0cnVtZW50YXRpb24uc2V0TWV0ZXJQcm92aWRlcihtZXRlclByb3ZpZGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobG9nZ2VyUHJvdmlkZXIgJiYgaW5zdHJ1bWVudGF0aW9uLnNldExvZ2dlclByb3ZpZGVyKSB7XG4gICAgICAgICAgICBpbnN0cnVtZW50YXRpb24uc2V0TG9nZ2VyUHJvdmlkZXIobG9nZ2VyUHJvdmlkZXIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGluc3RydW1lbnRhdGlvbnMgaGF2ZSBiZWVuIGFscmVhZHkgZW5hYmxlZCBkdXJpbmcgY3JlYXRpb25cbiAgICAgICAgLy8gc28gZW5hYmxlIG9ubHkgaWYgdXNlciBwcmV2ZW50ZWQgdGhhdCBieSBzZXR0aW5nIGVuYWJsZWQgdG8gZmFsc2VcbiAgICAgICAgLy8gdGhpcyBpcyB0byBwcmV2ZW50IGRvdWJsZSBlbmFibGluZyBidXQgd2hlbiBjYWxsaW5nIHJlZ2lzdGVyIGFsbFxuICAgICAgICAvLyBpbnN0cnVtZW50YXRpb25zIHNob3VsZCBiZSBub3cgZW5hYmxlZFxuICAgICAgICBpZiAoIWluc3RydW1lbnRhdGlvbi5nZXRDb25maWcoKS5lbmFibGVkKSB7XG4gICAgICAgICAgICBpbnN0cnVtZW50YXRpb24uZW5hYmxlKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIERpc2FibGUgaW5zdHJ1bWVudGF0aW9uc1xuICogQHBhcmFtIGluc3RydW1lbnRhdGlvbnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRpc2FibGVJbnN0cnVtZW50YXRpb25zKGluc3RydW1lbnRhdGlvbnMpIHtcbiAgICBpbnN0cnVtZW50YXRpb25zLmZvckVhY2goaW5zdHJ1bWVudGF0aW9uID0+IGluc3RydW1lbnRhdGlvbi5kaXNhYmxlKCkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXV0b0xvYWRlclV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/autoLoaderUtils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation/build/esm/index.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InstrumentationBase: () => (/* reexport safe */ _platform_index__WEBPACK_IMPORTED_MODULE_1__.InstrumentationBase),\n/* harmony export */   InstrumentationNodeModuleDefinition: () => (/* reexport safe */ _instrumentationNodeModuleDefinition__WEBPACK_IMPORTED_MODULE_2__.InstrumentationNodeModuleDefinition),\n/* harmony export */   InstrumentationNodeModuleFile: () => (/* reexport safe */ _instrumentationNodeModuleFile__WEBPACK_IMPORTED_MODULE_3__.InstrumentationNodeModuleFile),\n/* harmony export */   SemconvStability: () => (/* reexport safe */ _semconvStability__WEBPACK_IMPORTED_MODULE_5__.SemconvStability),\n/* harmony export */   isWrapped: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isWrapped),\n/* harmony export */   registerInstrumentations: () => (/* reexport safe */ _autoLoader__WEBPACK_IMPORTED_MODULE_0__.registerInstrumentations),\n/* harmony export */   safeExecuteInTheMiddle: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.safeExecuteInTheMiddle),\n/* harmony export */   safeExecuteInTheMiddleAsync: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.safeExecuteInTheMiddleAsync),\n/* harmony export */   semconvStabilityFromStr: () => (/* reexport safe */ _semconvStability__WEBPACK_IMPORTED_MODULE_5__.semconvStabilityFromStr)\n/* harmony export */ });\n/* harmony import */ var _autoLoader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./autoLoader */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/autoLoader.js\");\n/* harmony import */ var _platform_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./platform/index */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/platform/node/instrumentation.js\");\n/* harmony import */ var _instrumentationNodeModuleDefinition__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./instrumentationNodeModuleDefinition */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/instrumentationNodeModuleDefinition.js\");\n/* harmony import */ var _instrumentationNodeModuleFile__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./instrumentationNodeModuleFile */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/instrumentationNodeModuleFile.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/utils.js\");\n/* harmony import */ var _semconvStability__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./semconvStability */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/semconvStability.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi9idWlsZC9lc20vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3dEO0FBQ0Q7QUFDcUM7QUFDWjtBQUNVO0FBQ1g7QUFDL0UiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uL2J1aWxkL2VzbS9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuZXhwb3J0IHsgcmVnaXN0ZXJJbnN0cnVtZW50YXRpb25zIH0gZnJvbSAnLi9hdXRvTG9hZGVyJztcbmV4cG9ydCB7IEluc3RydW1lbnRhdGlvbkJhc2UgfSBmcm9tICcuL3BsYXRmb3JtL2luZGV4JztcbmV4cG9ydCB7IEluc3RydW1lbnRhdGlvbk5vZGVNb2R1bGVEZWZpbml0aW9uIH0gZnJvbSAnLi9pbnN0cnVtZW50YXRpb25Ob2RlTW9kdWxlRGVmaW5pdGlvbic7XG5leHBvcnQgeyBJbnN0cnVtZW50YXRpb25Ob2RlTW9kdWxlRmlsZSB9IGZyb20gJy4vaW5zdHJ1bWVudGF0aW9uTm9kZU1vZHVsZUZpbGUnO1xuZXhwb3J0IHsgaXNXcmFwcGVkLCBzYWZlRXhlY3V0ZUluVGhlTWlkZGxlLCBzYWZlRXhlY3V0ZUluVGhlTWlkZGxlQXN5bmMsIH0gZnJvbSAnLi91dGlscyc7XG5leHBvcnQgeyBTZW1jb252U3RhYmlsaXR5LCBzZW1jb252U3RhYmlsaXR5RnJvbVN0ciB9IGZyb20gJy4vc2VtY29udlN0YWJpbGl0eSc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/instrumentation.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation/build/esm/instrumentation.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InstrumentationAbstract: () => (/* binding */ InstrumentationAbstract)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/diag-api.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace-api.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/metrics-api.js\");\n/* harmony import */ var _opentelemetry_api_logs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/api-logs */ \"(instrument)/./node_modules/@opentelemetry/api-logs/build/esm/index.js\");\n/* harmony import */ var _shimmer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./shimmer */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/shimmer.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n;globalThis[\"_sentryRewritesTunnelPath\"] = \"/monitoring\";globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.2\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";\n\n\n/**\n * Base abstract internal class for instrumenting node and web plugins\n */\nclass InstrumentationAbstract {\n    instrumentationName;\n    instrumentationVersion;\n    _config = {};\n    _tracer;\n    _meter;\n    _logger;\n    _diag;\n    constructor(instrumentationName, instrumentationVersion, config) {\n        this.instrumentationName = instrumentationName;\n        this.instrumentationVersion = instrumentationVersion;\n        this.setConfig(config);\n        this._diag = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.createComponentLogger({\n            namespace: instrumentationName,\n        });\n        this._tracer = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__.trace.getTracer(instrumentationName, instrumentationVersion);\n        this._meter = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.metrics.getMeter(instrumentationName, instrumentationVersion);\n        this._logger = _opentelemetry_api_logs__WEBPACK_IMPORTED_MODULE_3__.logs.getLogger(instrumentationName, instrumentationVersion);\n        this._updateMetricInstruments();\n    }\n    /* Api to wrap instrumented method */\n    _wrap = _shimmer__WEBPACK_IMPORTED_MODULE_4__.wrap;\n    /* Api to unwrap instrumented methods */\n    _unwrap = _shimmer__WEBPACK_IMPORTED_MODULE_4__.unwrap;\n    /* Api to mass wrap instrumented method */\n    _massWrap = _shimmer__WEBPACK_IMPORTED_MODULE_4__.massWrap;\n    /* Api to mass unwrap instrumented methods */\n    _massUnwrap = _shimmer__WEBPACK_IMPORTED_MODULE_4__.massUnwrap;\n    /* Returns meter */\n    get meter() {\n        return this._meter;\n    }\n    /**\n     * Sets MeterProvider to this plugin\n     * @param meterProvider\n     */\n    setMeterProvider(meterProvider) {\n        this._meter = meterProvider.getMeter(this.instrumentationName, this.instrumentationVersion);\n        this._updateMetricInstruments();\n    }\n    /* Returns logger */\n    get logger() {\n        return this._logger;\n    }\n    /**\n     * Sets LoggerProvider to this plugin\n     * @param loggerProvider\n     */\n    setLoggerProvider(loggerProvider) {\n        this._logger = loggerProvider.getLogger(this.instrumentationName, this.instrumentationVersion);\n    }\n    /**\n     * @experimental\n     *\n     * Get module definitions defined by {@link init}.\n     * This can be used for experimental compile-time instrumentation.\n     *\n     * @returns an array of {@link InstrumentationModuleDefinition}\n     */\n    getModuleDefinitions() {\n        const initResult = this.init() ?? [];\n        if (!Array.isArray(initResult)) {\n            return [initResult];\n        }\n        return initResult;\n    }\n    /**\n     * Sets the new metric instruments with the current Meter.\n     */\n    _updateMetricInstruments() {\n        return;\n    }\n    /* Returns InstrumentationConfig */\n    getConfig() {\n        return this._config;\n    }\n    /**\n     * Sets InstrumentationConfig to this plugin\n     * @param config\n     */\n    setConfig(config) {\n        // copy config first level properties to ensure they are immutable.\n        // nested properties are not copied, thus are mutable from the outside.\n        this._config = {\n            enabled: true,\n            ...config,\n        };\n    }\n    /**\n     * Sets TraceProvider to this plugin\n     * @param tracerProvider\n     */\n    setTracerProvider(tracerProvider) {\n        this._tracer = tracerProvider.getTracer(this.instrumentationName, this.instrumentationVersion);\n    }\n    /* Returns tracer */\n    get tracer() {\n        return this._tracer;\n    }\n    /**\n     * Execute span customization hook, if configured, and log any errors.\n     * Any semantics of the trigger and info are defined by the specific instrumentation.\n     * @param hookHandler The optional hook handler which the user has configured via instrumentation config\n     * @param triggerName The name of the trigger for executing the hook for logging purposes\n     * @param span The span to which the hook should be applied\n     * @param info The info object to be passed to the hook, with useful data the hook may use\n     */\n    _runSpanCustomizationHook(hookHandler, triggerName, span, info) {\n        if (!hookHandler) {\n            return;\n        }\n        try {\n            hookHandler(span, info);\n        }\n        catch (e) {\n            this._diag.error(`Error running span customization hook due to exception in handler`, { triggerName }, e);\n        }\n    }\n}\n//# sourceMappingURL=instrumentation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi9idWlsZC9lc20vaW5zdHJ1bWVudGF0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsd0RBQXdELHlDQUF5QywwQ0FBMEMsOENBQThDLG9EQUErRztBQUMxUDtBQUNWO0FBQ3JDO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixvREFBSTtBQUN6QjtBQUNBLFNBQVM7QUFDVCx1QkFBdUIscURBQUs7QUFDNUIsc0JBQXNCLHVEQUFPO0FBQzdCLHVCQUF1Qix5REFBSTtBQUMzQjtBQUNBO0FBQ0E7QUFDQSxZQUFZLDBDQUFZO0FBQ3hCO0FBQ0EsY0FBYyw0Q0FBYztBQUM1QjtBQUNBLGdCQUFnQiw4Q0FBZ0I7QUFDaEM7QUFDQSxrQkFBa0IsZ0RBQWtCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsV0FBVztBQUNyRDtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9HQUFvRyxhQUFhO0FBQ2pIO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi9idWlsZC9lc20vaW5zdHJ1bWVudGF0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG47Z2xvYmFsVGhpc1tcIl9zZW50cnlSZXdyaXRlc1R1bm5lbFBhdGhcIl0gPSBcIi9tb25pdG9yaW5nXCI7Z2xvYmFsVGhpc1tcIlNFTlRSWV9SRUxFQVNFXCJdID0gdW5kZWZpbmVkO2dsb2JhbFRoaXNbXCJfc2VudHJ5QmFzZVBhdGhcIl0gPSB1bmRlZmluZWQ7Z2xvYmFsVGhpc1tcIl9zZW50cnlOZXh0SnNWZXJzaW9uXCJdID0gXCIxNS41LjJcIjtnbG9iYWxUaGlzW1wiX3NlbnRyeVJld3JpdGVGcmFtZXNEaXN0RGlyXCJdID0gXCIubmV4dFwiO2ltcG9ydCB7IGRpYWcsIG1ldHJpY3MsIHRyYWNlLCB9IGZyb20gJ0BvcGVudGVsZW1ldHJ5L2FwaSc7XG5pbXBvcnQgeyBsb2dzIH0gZnJvbSAnQG9wZW50ZWxlbWV0cnkvYXBpLWxvZ3MnO1xuaW1wb3J0ICogYXMgc2hpbW1lciBmcm9tICcuL3NoaW1tZXInO1xuLyoqXG4gKiBCYXNlIGFic3RyYWN0IGludGVybmFsIGNsYXNzIGZvciBpbnN0cnVtZW50aW5nIG5vZGUgYW5kIHdlYiBwbHVnaW5zXG4gKi9cbmV4cG9ydCBjbGFzcyBJbnN0cnVtZW50YXRpb25BYnN0cmFjdCB7XG4gICAgaW5zdHJ1bWVudGF0aW9uTmFtZTtcbiAgICBpbnN0cnVtZW50YXRpb25WZXJzaW9uO1xuICAgIF9jb25maWcgPSB7fTtcbiAgICBfdHJhY2VyO1xuICAgIF9tZXRlcjtcbiAgICBfbG9nZ2VyO1xuICAgIF9kaWFnO1xuICAgIGNvbnN0cnVjdG9yKGluc3RydW1lbnRhdGlvbk5hbWUsIGluc3RydW1lbnRhdGlvblZlcnNpb24sIGNvbmZpZykge1xuICAgICAgICB0aGlzLmluc3RydW1lbnRhdGlvbk5hbWUgPSBpbnN0cnVtZW50YXRpb25OYW1lO1xuICAgICAgICB0aGlzLmluc3RydW1lbnRhdGlvblZlcnNpb24gPSBpbnN0cnVtZW50YXRpb25WZXJzaW9uO1xuICAgICAgICB0aGlzLnNldENvbmZpZyhjb25maWcpO1xuICAgICAgICB0aGlzLl9kaWFnID0gZGlhZy5jcmVhdGVDb21wb25lbnRMb2dnZXIoe1xuICAgICAgICAgICAgbmFtZXNwYWNlOiBpbnN0cnVtZW50YXRpb25OYW1lLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fdHJhY2VyID0gdHJhY2UuZ2V0VHJhY2VyKGluc3RydW1lbnRhdGlvbk5hbWUsIGluc3RydW1lbnRhdGlvblZlcnNpb24pO1xuICAgICAgICB0aGlzLl9tZXRlciA9IG1ldHJpY3MuZ2V0TWV0ZXIoaW5zdHJ1bWVudGF0aW9uTmFtZSwgaW5zdHJ1bWVudGF0aW9uVmVyc2lvbik7XG4gICAgICAgIHRoaXMuX2xvZ2dlciA9IGxvZ3MuZ2V0TG9nZ2VyKGluc3RydW1lbnRhdGlvbk5hbWUsIGluc3RydW1lbnRhdGlvblZlcnNpb24pO1xuICAgICAgICB0aGlzLl91cGRhdGVNZXRyaWNJbnN0cnVtZW50cygpO1xuICAgIH1cbiAgICAvKiBBcGkgdG8gd3JhcCBpbnN0cnVtZW50ZWQgbWV0aG9kICovXG4gICAgX3dyYXAgPSBzaGltbWVyLndyYXA7XG4gICAgLyogQXBpIHRvIHVud3JhcCBpbnN0cnVtZW50ZWQgbWV0aG9kcyAqL1xuICAgIF91bndyYXAgPSBzaGltbWVyLnVud3JhcDtcbiAgICAvKiBBcGkgdG8gbWFzcyB3cmFwIGluc3RydW1lbnRlZCBtZXRob2QgKi9cbiAgICBfbWFzc1dyYXAgPSBzaGltbWVyLm1hc3NXcmFwO1xuICAgIC8qIEFwaSB0byBtYXNzIHVud3JhcCBpbnN0cnVtZW50ZWQgbWV0aG9kcyAqL1xuICAgIF9tYXNzVW53cmFwID0gc2hpbW1lci5tYXNzVW53cmFwO1xuICAgIC8qIFJldHVybnMgbWV0ZXIgKi9cbiAgICBnZXQgbWV0ZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tZXRlcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyBNZXRlclByb3ZpZGVyIHRvIHRoaXMgcGx1Z2luXG4gICAgICogQHBhcmFtIG1ldGVyUHJvdmlkZXJcbiAgICAgKi9cbiAgICBzZXRNZXRlclByb3ZpZGVyKG1ldGVyUHJvdmlkZXIpIHtcbiAgICAgICAgdGhpcy5fbWV0ZXIgPSBtZXRlclByb3ZpZGVyLmdldE1ldGVyKHRoaXMuaW5zdHJ1bWVudGF0aW9uTmFtZSwgdGhpcy5pbnN0cnVtZW50YXRpb25WZXJzaW9uKTtcbiAgICAgICAgdGhpcy5fdXBkYXRlTWV0cmljSW5zdHJ1bWVudHMoKTtcbiAgICB9XG4gICAgLyogUmV0dXJucyBsb2dnZXIgKi9cbiAgICBnZXQgbG9nZ2VyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbG9nZ2VyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIExvZ2dlclByb3ZpZGVyIHRvIHRoaXMgcGx1Z2luXG4gICAgICogQHBhcmFtIGxvZ2dlclByb3ZpZGVyXG4gICAgICovXG4gICAgc2V0TG9nZ2VyUHJvdmlkZXIobG9nZ2VyUHJvdmlkZXIpIHtcbiAgICAgICAgdGhpcy5fbG9nZ2VyID0gbG9nZ2VyUHJvdmlkZXIuZ2V0TG9nZ2VyKHRoaXMuaW5zdHJ1bWVudGF0aW9uTmFtZSwgdGhpcy5pbnN0cnVtZW50YXRpb25WZXJzaW9uKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGV4cGVyaW1lbnRhbFxuICAgICAqXG4gICAgICogR2V0IG1vZHVsZSBkZWZpbml0aW9ucyBkZWZpbmVkIGJ5IHtAbGluayBpbml0fS5cbiAgICAgKiBUaGlzIGNhbiBiZSB1c2VkIGZvciBleHBlcmltZW50YWwgY29tcGlsZS10aW1lIGluc3RydW1lbnRhdGlvbi5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIGFuIGFycmF5IG9mIHtAbGluayBJbnN0cnVtZW50YXRpb25Nb2R1bGVEZWZpbml0aW9ufVxuICAgICAqL1xuICAgIGdldE1vZHVsZURlZmluaXRpb25zKCkge1xuICAgICAgICBjb25zdCBpbml0UmVzdWx0ID0gdGhpcy5pbml0KCkgPz8gW107XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShpbml0UmVzdWx0KSkge1xuICAgICAgICAgICAgcmV0dXJuIFtpbml0UmVzdWx0XTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5pdFJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbmV3IG1ldHJpYyBpbnN0cnVtZW50cyB3aXRoIHRoZSBjdXJyZW50IE1ldGVyLlxuICAgICAqL1xuICAgIF91cGRhdGVNZXRyaWNJbnN0cnVtZW50cygpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvKiBSZXR1cm5zIEluc3RydW1lbnRhdGlvbkNvbmZpZyAqL1xuICAgIGdldENvbmZpZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbmZpZztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyBJbnN0cnVtZW50YXRpb25Db25maWcgdG8gdGhpcyBwbHVnaW5cbiAgICAgKiBAcGFyYW0gY29uZmlnXG4gICAgICovXG4gICAgc2V0Q29uZmlnKGNvbmZpZykge1xuICAgICAgICAvLyBjb3B5IGNvbmZpZyBmaXJzdCBsZXZlbCBwcm9wZXJ0aWVzIHRvIGVuc3VyZSB0aGV5IGFyZSBpbW11dGFibGUuXG4gICAgICAgIC8vIG5lc3RlZCBwcm9wZXJ0aWVzIGFyZSBub3QgY29waWVkLCB0aHVzIGFyZSBtdXRhYmxlIGZyb20gdGhlIG91dHNpZGUuXG4gICAgICAgIHRoaXMuX2NvbmZpZyA9IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAuLi5jb25maWcsXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgVHJhY2VQcm92aWRlciB0byB0aGlzIHBsdWdpblxuICAgICAqIEBwYXJhbSB0cmFjZXJQcm92aWRlclxuICAgICAqL1xuICAgIHNldFRyYWNlclByb3ZpZGVyKHRyYWNlclByb3ZpZGVyKSB7XG4gICAgICAgIHRoaXMuX3RyYWNlciA9IHRyYWNlclByb3ZpZGVyLmdldFRyYWNlcih0aGlzLmluc3RydW1lbnRhdGlvbk5hbWUsIHRoaXMuaW5zdHJ1bWVudGF0aW9uVmVyc2lvbik7XG4gICAgfVxuICAgIC8qIFJldHVybnMgdHJhY2VyICovXG4gICAgZ2V0IHRyYWNlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RyYWNlcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRXhlY3V0ZSBzcGFuIGN1c3RvbWl6YXRpb24gaG9vaywgaWYgY29uZmlndXJlZCwgYW5kIGxvZyBhbnkgZXJyb3JzLlxuICAgICAqIEFueSBzZW1hbnRpY3Mgb2YgdGhlIHRyaWdnZXIgYW5kIGluZm8gYXJlIGRlZmluZWQgYnkgdGhlIHNwZWNpZmljIGluc3RydW1lbnRhdGlvbi5cbiAgICAgKiBAcGFyYW0gaG9va0hhbmRsZXIgVGhlIG9wdGlvbmFsIGhvb2sgaGFuZGxlciB3aGljaCB0aGUgdXNlciBoYXMgY29uZmlndXJlZCB2aWEgaW5zdHJ1bWVudGF0aW9uIGNvbmZpZ1xuICAgICAqIEBwYXJhbSB0cmlnZ2VyTmFtZSBUaGUgbmFtZSBvZiB0aGUgdHJpZ2dlciBmb3IgZXhlY3V0aW5nIHRoZSBob29rIGZvciBsb2dnaW5nIHB1cnBvc2VzXG4gICAgICogQHBhcmFtIHNwYW4gVGhlIHNwYW4gdG8gd2hpY2ggdGhlIGhvb2sgc2hvdWxkIGJlIGFwcGxpZWRcbiAgICAgKiBAcGFyYW0gaW5mbyBUaGUgaW5mbyBvYmplY3QgdG8gYmUgcGFzc2VkIHRvIHRoZSBob29rLCB3aXRoIHVzZWZ1bCBkYXRhIHRoZSBob29rIG1heSB1c2VcbiAgICAgKi9cbiAgICBfcnVuU3BhbkN1c3RvbWl6YXRpb25Ib29rKGhvb2tIYW5kbGVyLCB0cmlnZ2VyTmFtZSwgc3BhbiwgaW5mbykge1xuICAgICAgICBpZiAoIWhvb2tIYW5kbGVyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGhvb2tIYW5kbGVyKHNwYW4sIGluZm8pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aGlzLl9kaWFnLmVycm9yKGBFcnJvciBydW5uaW5nIHNwYW4gY3VzdG9taXphdGlvbiBob29rIGR1ZSB0byBleGNlcHRpb24gaW4gaGFuZGxlcmAsIHsgdHJpZ2dlck5hbWUgfSwgZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnN0cnVtZW50YXRpb24uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/instrumentation.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/instrumentationNodeModuleDefinition.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation/build/esm/instrumentationNodeModuleDefinition.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InstrumentationNodeModuleDefinition: () => (/* binding */ InstrumentationNodeModuleDefinition)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass InstrumentationNodeModuleDefinition {\n    name;\n    supportedVersions;\n    patch;\n    unpatch;\n    files;\n    constructor(name, supportedVersions, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    patch, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    unpatch, files) {\n        this.name = name;\n        this.supportedVersions = supportedVersions;\n        this.patch = patch;\n        this.unpatch = unpatch;\n        this.files = files || [];\n    }\n}\n//# sourceMappingURL=instrumentationNodeModuleDefinition.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi9idWlsZC9lc20vaW5zdHJ1bWVudGF0aW9uTm9kZU1vZHVsZURlZmluaXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi9idWlsZC9lc20vaW5zdHJ1bWVudGF0aW9uTm9kZU1vZHVsZURlZmluaXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmV4cG9ydCBjbGFzcyBJbnN0cnVtZW50YXRpb25Ob2RlTW9kdWxlRGVmaW5pdGlvbiB7XG4gICAgbmFtZTtcbiAgICBzdXBwb3J0ZWRWZXJzaW9ucztcbiAgICBwYXRjaDtcbiAgICB1bnBhdGNoO1xuICAgIGZpbGVzO1xuICAgIGNvbnN0cnVjdG9yKG5hbWUsIHN1cHBvcnRlZFZlcnNpb25zLCBcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIHBhdGNoLCBcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIHVucGF0Y2gsIGZpbGVzKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuc3VwcG9ydGVkVmVyc2lvbnMgPSBzdXBwb3J0ZWRWZXJzaW9ucztcbiAgICAgICAgdGhpcy5wYXRjaCA9IHBhdGNoO1xuICAgICAgICB0aGlzLnVucGF0Y2ggPSB1bnBhdGNoO1xuICAgICAgICB0aGlzLmZpbGVzID0gZmlsZXMgfHwgW107XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5zdHJ1bWVudGF0aW9uTm9kZU1vZHVsZURlZmluaXRpb24uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/instrumentationNodeModuleDefinition.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/instrumentationNodeModuleFile.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation/build/esm/instrumentationNodeModuleFile.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InstrumentationNodeModuleFile: () => (/* binding */ InstrumentationNodeModuleFile)\n/* harmony export */ });\n/* harmony import */ var _platform_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./platform/index */ \"path\");\n/* harmony import */ var _platform_index__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_platform_index__WEBPACK_IMPORTED_MODULE_0__);\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nclass InstrumentationNodeModuleFile {\n    supportedVersions;\n    patch;\n    unpatch;\n    name;\n    constructor(name, supportedVersions, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    patch, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    unpatch) {\n        this.supportedVersions = supportedVersions;\n        this.patch = patch;\n        this.unpatch = unpatch;\n        this.name = (0,_platform_index__WEBPACK_IMPORTED_MODULE_0__.normalize)(name);\n    }\n}\n//# sourceMappingURL=instrumentationNodeModuleFile.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi9idWlsZC9lc20vaW5zdHJ1bWVudGF0aW9uTm9kZU1vZHVsZUZpbGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQzZDO0FBQ3RDO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLDBEQUFTO0FBQzdCO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24vYnVpbGQvZXNtL2luc3RydW1lbnRhdGlvbk5vZGVNb2R1bGVGaWxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBub3JtYWxpemUgfSBmcm9tICcuL3BsYXRmb3JtL2luZGV4JztcbmV4cG9ydCBjbGFzcyBJbnN0cnVtZW50YXRpb25Ob2RlTW9kdWxlRmlsZSB7XG4gICAgc3VwcG9ydGVkVmVyc2lvbnM7XG4gICAgcGF0Y2g7XG4gICAgdW5wYXRjaDtcbiAgICBuYW1lO1xuICAgIGNvbnN0cnVjdG9yKG5hbWUsIHN1cHBvcnRlZFZlcnNpb25zLCBcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIHBhdGNoLCBcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIHVucGF0Y2gpIHtcbiAgICAgICAgdGhpcy5zdXBwb3J0ZWRWZXJzaW9ucyA9IHN1cHBvcnRlZFZlcnNpb25zO1xuICAgICAgICB0aGlzLnBhdGNoID0gcGF0Y2g7XG4gICAgICAgIHRoaXMudW5wYXRjaCA9IHVucGF0Y2g7XG4gICAgICAgIHRoaXMubmFtZSA9IG5vcm1hbGl6ZShuYW1lKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnN0cnVtZW50YXRpb25Ob2RlTW9kdWxlRmlsZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/instrumentationNodeModuleFile.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/platform/node/ModuleNameTrie.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation/build/esm/platform/node/ModuleNameTrie.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ModuleNameSeparator: () => (/* binding */ ModuleNameSeparator),\n/* harmony export */   ModuleNameTrie: () => (/* binding */ ModuleNameTrie)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst ModuleNameSeparator = '/';\n/**\n * Node in a `ModuleNameTrie`\n */\nclass ModuleNameTrieNode {\n    hooks = [];\n    children = new Map();\n}\n/**\n * Trie containing nodes that represent a part of a module name (i.e. the parts separated by forward slash)\n */\nclass ModuleNameTrie {\n    _trie = new ModuleNameTrieNode();\n    _counter = 0;\n    /**\n     * Insert a module hook into the trie\n     *\n     * @param {Hooked} hook Hook\n     */\n    insert(hook) {\n        let trieNode = this._trie;\n        for (const moduleNamePart of hook.moduleName.split(ModuleNameSeparator)) {\n            let nextNode = trieNode.children.get(moduleNamePart);\n            if (!nextNode) {\n                nextNode = new ModuleNameTrieNode();\n                trieNode.children.set(moduleNamePart, nextNode);\n            }\n            trieNode = nextNode;\n        }\n        trieNode.hooks.push({ hook, insertedId: this._counter++ });\n    }\n    /**\n     * Search for matching hooks in the trie\n     *\n     * @param {string} moduleName Module name\n     * @param {boolean} maintainInsertionOrder Whether to return the results in insertion order\n     * @param {boolean} fullOnly Whether to return only full matches\n     * @returns {Hooked[]} Matching hooks\n     */\n    search(moduleName, { maintainInsertionOrder, fullOnly } = {}) {\n        let trieNode = this._trie;\n        const results = [];\n        let foundFull = true;\n        for (const moduleNamePart of moduleName.split(ModuleNameSeparator)) {\n            const nextNode = trieNode.children.get(moduleNamePart);\n            if (!nextNode) {\n                foundFull = false;\n                break;\n            }\n            if (!fullOnly) {\n                results.push(...nextNode.hooks);\n            }\n            trieNode = nextNode;\n        }\n        if (fullOnly && foundFull) {\n            results.push(...trieNode.hooks);\n        }\n        if (results.length === 0) {\n            return [];\n        }\n        if (results.length === 1) {\n            return [results[0].hook];\n        }\n        if (maintainInsertionOrder) {\n            results.sort((a, b) => a.insertedId - b.insertedId);\n        }\n        return results.map(({ hook }) => hook);\n    }\n}\n//# sourceMappingURL=ModuleNameTrie.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi9idWlsZC9lc20vcGxhdGZvcm0vbm9kZS9Nb2R1bGVOYW1lVHJpZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixtQ0FBbUM7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxTQUFTO0FBQ3hCLGVBQWUsU0FBUztBQUN4QixpQkFBaUIsVUFBVTtBQUMzQjtBQUNBLHlCQUF5QixtQ0FBbUMsSUFBSTtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLE1BQU07QUFDcEM7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi9idWlsZC9lc20vcGxhdGZvcm0vbm9kZS9Nb2R1bGVOYW1lVHJpZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuZXhwb3J0IGNvbnN0IE1vZHVsZU5hbWVTZXBhcmF0b3IgPSAnLyc7XG4vKipcbiAqIE5vZGUgaW4gYSBgTW9kdWxlTmFtZVRyaWVgXG4gKi9cbmNsYXNzIE1vZHVsZU5hbWVUcmllTm9kZSB7XG4gICAgaG9va3MgPSBbXTtcbiAgICBjaGlsZHJlbiA9IG5ldyBNYXAoKTtcbn1cbi8qKlxuICogVHJpZSBjb250YWluaW5nIG5vZGVzIHRoYXQgcmVwcmVzZW50IGEgcGFydCBvZiBhIG1vZHVsZSBuYW1lIChpLmUuIHRoZSBwYXJ0cyBzZXBhcmF0ZWQgYnkgZm9yd2FyZCBzbGFzaClcbiAqL1xuZXhwb3J0IGNsYXNzIE1vZHVsZU5hbWVUcmllIHtcbiAgICBfdHJpZSA9IG5ldyBNb2R1bGVOYW1lVHJpZU5vZGUoKTtcbiAgICBfY291bnRlciA9IDA7XG4gICAgLyoqXG4gICAgICogSW5zZXJ0IGEgbW9kdWxlIGhvb2sgaW50byB0aGUgdHJpZVxuICAgICAqXG4gICAgICogQHBhcmFtIHtIb29rZWR9IGhvb2sgSG9va1xuICAgICAqL1xuICAgIGluc2VydChob29rKSB7XG4gICAgICAgIGxldCB0cmllTm9kZSA9IHRoaXMuX3RyaWU7XG4gICAgICAgIGZvciAoY29uc3QgbW9kdWxlTmFtZVBhcnQgb2YgaG9vay5tb2R1bGVOYW1lLnNwbGl0KE1vZHVsZU5hbWVTZXBhcmF0b3IpKSB7XG4gICAgICAgICAgICBsZXQgbmV4dE5vZGUgPSB0cmllTm9kZS5jaGlsZHJlbi5nZXQobW9kdWxlTmFtZVBhcnQpO1xuICAgICAgICAgICAgaWYgKCFuZXh0Tm9kZSkge1xuICAgICAgICAgICAgICAgIG5leHROb2RlID0gbmV3IE1vZHVsZU5hbWVUcmllTm9kZSgpO1xuICAgICAgICAgICAgICAgIHRyaWVOb2RlLmNoaWxkcmVuLnNldChtb2R1bGVOYW1lUGFydCwgbmV4dE5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJpZU5vZGUgPSBuZXh0Tm9kZTtcbiAgICAgICAgfVxuICAgICAgICB0cmllTm9kZS5ob29rcy5wdXNoKHsgaG9vaywgaW5zZXJ0ZWRJZDogdGhpcy5fY291bnRlcisrIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZWFyY2ggZm9yIG1hdGNoaW5nIGhvb2tzIGluIHRoZSB0cmllXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbW9kdWxlTmFtZSBNb2R1bGUgbmFtZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gbWFpbnRhaW5JbnNlcnRpb25PcmRlciBXaGV0aGVyIHRvIHJldHVybiB0aGUgcmVzdWx0cyBpbiBpbnNlcnRpb24gb3JkZXJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGZ1bGxPbmx5IFdoZXRoZXIgdG8gcmV0dXJuIG9ubHkgZnVsbCBtYXRjaGVzXG4gICAgICogQHJldHVybnMge0hvb2tlZFtdfSBNYXRjaGluZyBob29rc1xuICAgICAqL1xuICAgIHNlYXJjaChtb2R1bGVOYW1lLCB7IG1haW50YWluSW5zZXJ0aW9uT3JkZXIsIGZ1bGxPbmx5IH0gPSB7fSkge1xuICAgICAgICBsZXQgdHJpZU5vZGUgPSB0aGlzLl90cmllO1xuICAgICAgICBjb25zdCByZXN1bHRzID0gW107XG4gICAgICAgIGxldCBmb3VuZEZ1bGwgPSB0cnVlO1xuICAgICAgICBmb3IgKGNvbnN0IG1vZHVsZU5hbWVQYXJ0IG9mIG1vZHVsZU5hbWUuc3BsaXQoTW9kdWxlTmFtZVNlcGFyYXRvcikpIHtcbiAgICAgICAgICAgIGNvbnN0IG5leHROb2RlID0gdHJpZU5vZGUuY2hpbGRyZW4uZ2V0KG1vZHVsZU5hbWVQYXJ0KTtcbiAgICAgICAgICAgIGlmICghbmV4dE5vZGUpIHtcbiAgICAgICAgICAgICAgICBmb3VuZEZ1bGwgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghZnVsbE9ubHkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2goLi4ubmV4dE5vZGUuaG9va3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJpZU5vZGUgPSBuZXh0Tm9kZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZnVsbE9ubHkgJiYgZm91bmRGdWxsKSB7XG4gICAgICAgICAgICByZXN1bHRzLnB1c2goLi4udHJpZU5vZGUuaG9va3MpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXN1bHRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXN1bHRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIFtyZXN1bHRzWzBdLmhvb2tdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYWludGFpbkluc2VydGlvbk9yZGVyKSB7XG4gICAgICAgICAgICByZXN1bHRzLnNvcnQoKGEsIGIpID0+IGEuaW5zZXJ0ZWRJZCAtIGIuaW5zZXJ0ZWRJZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdHMubWFwKCh7IGhvb2sgfSkgPT4gaG9vayk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TW9kdWxlTmFtZVRyaWUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/platform/node/ModuleNameTrie.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/platform/node/RequireInTheMiddleSingleton.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation/build/esm/platform/node/RequireInTheMiddleSingleton.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RequireInTheMiddleSingleton: () => (/* binding */ RequireInTheMiddleSingleton)\n/* harmony export */ });\n/* harmony import */ var require_in_the_middle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! require-in-the-middle */ \"require-in-the-middle\");\n/* harmony import */ var require_in_the_middle__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(require_in_the_middle__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _ModuleNameTrie__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ModuleNameTrie */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/platform/node/ModuleNameTrie.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * Whether Mocha is running in this process\n * Inspired by https://github.com/AndreasPizsa/detect-mocha\n *\n * @type {boolean}\n */\nconst isMocha = [\n    'afterEach',\n    'after',\n    'beforeEach',\n    'before',\n    'describe',\n    'it',\n].every(fn => {\n    // @ts-expect-error TS7053: Element implicitly has an 'any' type\n    return typeof global[fn] === 'function';\n});\n/**\n * Singleton class for `require-in-the-middle`\n * Allows instrumentation plugins to patch modules with only a single `require` patch\n * WARNING: Because this class will create its own `require-in-the-middle` (RITM) instance,\n * we should minimize the number of new instances of this class.\n * Multiple instances of `@opentelemetry/instrumentation` (e.g. multiple versions) in a single process\n * will result in multiple instances of RITM, which will have an impact\n * on the performance of instrumentation hooks being applied.\n */\nclass RequireInTheMiddleSingleton {\n    _moduleNameTrie = new _ModuleNameTrie__WEBPACK_IMPORTED_MODULE_2__.ModuleNameTrie();\n    static _instance;\n    constructor() {\n        this._initialize();\n    }\n    _initialize() {\n        new require_in_the_middle__WEBPACK_IMPORTED_MODULE_0__.Hook(\n        // Intercept all `require` calls; we will filter the matching ones below\n        null, { internals: true }, (exports, name, basedir) => {\n            // For internal files on Windows, `name` will use backslash as the path separator\n            const normalizedModuleName = normalizePathSeparators(name);\n            const matches = this._moduleNameTrie.search(normalizedModuleName, {\n                maintainInsertionOrder: true,\n                // For core modules (e.g. `fs`), do not match on sub-paths (e.g. `fs/promises').\n                // This matches the behavior of `require-in-the-middle`.\n                // `basedir` is always `undefined` for core modules.\n                fullOnly: basedir === undefined,\n            });\n            for (const { onRequire } of matches) {\n                exports = onRequire(exports, name, basedir);\n            }\n            return exports;\n        });\n    }\n    /**\n     * Register a hook with `require-in-the-middle`\n     *\n     * @param {string} moduleName Module name\n     * @param {OnRequireFn} onRequire Hook function\n     * @returns {Hooked} Registered hook\n     */\n    register(moduleName, onRequire) {\n        const hooked = { moduleName, onRequire };\n        this._moduleNameTrie.insert(hooked);\n        return hooked;\n    }\n    /**\n     * Get the `RequireInTheMiddleSingleton` singleton\n     *\n     * @returns {RequireInTheMiddleSingleton} Singleton of `RequireInTheMiddleSingleton`\n     */\n    static getInstance() {\n        // Mocha runs all test suites in the same process\n        // This prevents test suites from sharing a singleton\n        if (isMocha)\n            return new RequireInTheMiddleSingleton();\n        return (this._instance =\n            this._instance ?? new RequireInTheMiddleSingleton());\n    }\n}\n/**\n * Normalize the path separators to forward slash in a module name or path\n *\n * @param {string} moduleNameOrPath Module name or path\n * @returns {string} Normalized module name or path\n */\nfunction normalizePathSeparators(moduleNameOrPath) {\n    return path__WEBPACK_IMPORTED_MODULE_1__.sep !== _ModuleNameTrie__WEBPACK_IMPORTED_MODULE_2__.ModuleNameSeparator\n        ? moduleNameOrPath.split(path__WEBPACK_IMPORTED_MODULE_1__.sep).join(_ModuleNameTrie__WEBPACK_IMPORTED_MODULE_2__.ModuleNameSeparator)\n        : moduleNameOrPath;\n}\n//# sourceMappingURL=RequireInTheMiddleSingleton.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi9idWlsZC9lc20vcGxhdGZvcm0vbm9kZS9SZXF1aXJlSW5UaGVNaWRkbGVTaW5nbGV0b24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQzZDO0FBQ2hCO0FBQzBDO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCwwQkFBMEIsMkRBQWM7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksdURBQUk7QUFDaEIsMENBQTBDO0FBQzFDLGdCQUFnQixpQkFBaUI7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYix5QkFBeUIsWUFBWTtBQUNyQztBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxhQUFhO0FBQzVCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLDZCQUE2QjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBLFdBQVcscUNBQVEsS0FBSyxnRUFBbUI7QUFDM0MsaUNBQWlDLHFDQUFRLE9BQU8sZ0VBQW1CO0FBQ25FO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24vYnVpbGQvZXNtL3BsYXRmb3JtL25vZGUvUmVxdWlyZUluVGhlTWlkZGxlU2luZ2xldG9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBIb29rIH0gZnJvbSAncmVxdWlyZS1pbi10aGUtbWlkZGxlJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBNb2R1bGVOYW1lVHJpZSwgTW9kdWxlTmFtZVNlcGFyYXRvciB9IGZyb20gJy4vTW9kdWxlTmFtZVRyaWUnO1xuLyoqXG4gKiBXaGV0aGVyIE1vY2hhIGlzIHJ1bm5pbmcgaW4gdGhpcyBwcm9jZXNzXG4gKiBJbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vQW5kcmVhc1BpenNhL2RldGVjdC1tb2NoYVxuICpcbiAqIEB0eXBlIHtib29sZWFufVxuICovXG5jb25zdCBpc01vY2hhID0gW1xuICAgICdhZnRlckVhY2gnLFxuICAgICdhZnRlcicsXG4gICAgJ2JlZm9yZUVhY2gnLFxuICAgICdiZWZvcmUnLFxuICAgICdkZXNjcmliZScsXG4gICAgJ2l0Jyxcbl0uZXZlcnkoZm4gPT4ge1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgVFM3MDUzOiBFbGVtZW50IGltcGxpY2l0bHkgaGFzIGFuICdhbnknIHR5cGVcbiAgICByZXR1cm4gdHlwZW9mIGdsb2JhbFtmbl0gPT09ICdmdW5jdGlvbic7XG59KTtcbi8qKlxuICogU2luZ2xldG9uIGNsYXNzIGZvciBgcmVxdWlyZS1pbi10aGUtbWlkZGxlYFxuICogQWxsb3dzIGluc3RydW1lbnRhdGlvbiBwbHVnaW5zIHRvIHBhdGNoIG1vZHVsZXMgd2l0aCBvbmx5IGEgc2luZ2xlIGByZXF1aXJlYCBwYXRjaFxuICogV0FSTklORzogQmVjYXVzZSB0aGlzIGNsYXNzIHdpbGwgY3JlYXRlIGl0cyBvd24gYHJlcXVpcmUtaW4tdGhlLW1pZGRsZWAgKFJJVE0pIGluc3RhbmNlLFxuICogd2Ugc2hvdWxkIG1pbmltaXplIHRoZSBudW1iZXIgb2YgbmV3IGluc3RhbmNlcyBvZiB0aGlzIGNsYXNzLlxuICogTXVsdGlwbGUgaW5zdGFuY2VzIG9mIGBAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb25gIChlLmcuIG11bHRpcGxlIHZlcnNpb25zKSBpbiBhIHNpbmdsZSBwcm9jZXNzXG4gKiB3aWxsIHJlc3VsdCBpbiBtdWx0aXBsZSBpbnN0YW5jZXMgb2YgUklUTSwgd2hpY2ggd2lsbCBoYXZlIGFuIGltcGFjdFxuICogb24gdGhlIHBlcmZvcm1hbmNlIG9mIGluc3RydW1lbnRhdGlvbiBob29rcyBiZWluZyBhcHBsaWVkLlxuICovXG5leHBvcnQgY2xhc3MgUmVxdWlyZUluVGhlTWlkZGxlU2luZ2xldG9uIHtcbiAgICBfbW9kdWxlTmFtZVRyaWUgPSBuZXcgTW9kdWxlTmFtZVRyaWUoKTtcbiAgICBzdGF0aWMgX2luc3RhbmNlO1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLl9pbml0aWFsaXplKCk7XG4gICAgfVxuICAgIF9pbml0aWFsaXplKCkge1xuICAgICAgICBuZXcgSG9vayhcbiAgICAgICAgLy8gSW50ZXJjZXB0IGFsbCBgcmVxdWlyZWAgY2FsbHM7IHdlIHdpbGwgZmlsdGVyIHRoZSBtYXRjaGluZyBvbmVzIGJlbG93XG4gICAgICAgIG51bGwsIHsgaW50ZXJuYWxzOiB0cnVlIH0sIChleHBvcnRzLCBuYW1lLCBiYXNlZGlyKSA9PiB7XG4gICAgICAgICAgICAvLyBGb3IgaW50ZXJuYWwgZmlsZXMgb24gV2luZG93cywgYG5hbWVgIHdpbGwgdXNlIGJhY2tzbGFzaCBhcyB0aGUgcGF0aCBzZXBhcmF0b3JcbiAgICAgICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRNb2R1bGVOYW1lID0gbm9ybWFsaXplUGF0aFNlcGFyYXRvcnMobmFtZSk7XG4gICAgICAgICAgICBjb25zdCBtYXRjaGVzID0gdGhpcy5fbW9kdWxlTmFtZVRyaWUuc2VhcmNoKG5vcm1hbGl6ZWRNb2R1bGVOYW1lLCB7XG4gICAgICAgICAgICAgICAgbWFpbnRhaW5JbnNlcnRpb25PcmRlcjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAvLyBGb3IgY29yZSBtb2R1bGVzIChlLmcuIGBmc2ApLCBkbyBub3QgbWF0Y2ggb24gc3ViLXBhdGhzIChlLmcuIGBmcy9wcm9taXNlcycpLlxuICAgICAgICAgICAgICAgIC8vIFRoaXMgbWF0Y2hlcyB0aGUgYmVoYXZpb3Igb2YgYHJlcXVpcmUtaW4tdGhlLW1pZGRsZWAuXG4gICAgICAgICAgICAgICAgLy8gYGJhc2VkaXJgIGlzIGFsd2F5cyBgdW5kZWZpbmVkYCBmb3IgY29yZSBtb2R1bGVzLlxuICAgICAgICAgICAgICAgIGZ1bGxPbmx5OiBiYXNlZGlyID09PSB1bmRlZmluZWQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgeyBvblJlcXVpcmUgfSBvZiBtYXRjaGVzKSB7XG4gICAgICAgICAgICAgICAgZXhwb3J0cyA9IG9uUmVxdWlyZShleHBvcnRzLCBuYW1lLCBiYXNlZGlyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBleHBvcnRzO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgYSBob29rIHdpdGggYHJlcXVpcmUtaW4tdGhlLW1pZGRsZWBcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb2R1bGVOYW1lIE1vZHVsZSBuYW1lXG4gICAgICogQHBhcmFtIHtPblJlcXVpcmVGbn0gb25SZXF1aXJlIEhvb2sgZnVuY3Rpb25cbiAgICAgKiBAcmV0dXJucyB7SG9va2VkfSBSZWdpc3RlcmVkIGhvb2tcbiAgICAgKi9cbiAgICByZWdpc3Rlcihtb2R1bGVOYW1lLCBvblJlcXVpcmUpIHtcbiAgICAgICAgY29uc3QgaG9va2VkID0geyBtb2R1bGVOYW1lLCBvblJlcXVpcmUgfTtcbiAgICAgICAgdGhpcy5fbW9kdWxlTmFtZVRyaWUuaW5zZXJ0KGhvb2tlZCk7XG4gICAgICAgIHJldHVybiBob29rZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgYFJlcXVpcmVJblRoZU1pZGRsZVNpbmdsZXRvbmAgc2luZ2xldG9uXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7UmVxdWlyZUluVGhlTWlkZGxlU2luZ2xldG9ufSBTaW5nbGV0b24gb2YgYFJlcXVpcmVJblRoZU1pZGRsZVNpbmdsZXRvbmBcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0SW5zdGFuY2UoKSB7XG4gICAgICAgIC8vIE1vY2hhIHJ1bnMgYWxsIHRlc3Qgc3VpdGVzIGluIHRoZSBzYW1lIHByb2Nlc3NcbiAgICAgICAgLy8gVGhpcyBwcmV2ZW50cyB0ZXN0IHN1aXRlcyBmcm9tIHNoYXJpbmcgYSBzaW5nbGV0b25cbiAgICAgICAgaWYgKGlzTW9jaGEpXG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlcXVpcmVJblRoZU1pZGRsZVNpbmdsZXRvbigpO1xuICAgICAgICByZXR1cm4gKHRoaXMuX2luc3RhbmNlID1cbiAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlID8/IG5ldyBSZXF1aXJlSW5UaGVNaWRkbGVTaW5nbGV0b24oKSk7XG4gICAgfVxufVxuLyoqXG4gKiBOb3JtYWxpemUgdGhlIHBhdGggc2VwYXJhdG9ycyB0byBmb3J3YXJkIHNsYXNoIGluIGEgbW9kdWxlIG5hbWUgb3IgcGF0aFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtb2R1bGVOYW1lT3JQYXRoIE1vZHVsZSBuYW1lIG9yIHBhdGhcbiAqIEByZXR1cm5zIHtzdHJpbmd9IE5vcm1hbGl6ZWQgbW9kdWxlIG5hbWUgb3IgcGF0aFxuICovXG5mdW5jdGlvbiBub3JtYWxpemVQYXRoU2VwYXJhdG9ycyhtb2R1bGVOYW1lT3JQYXRoKSB7XG4gICAgcmV0dXJuIHBhdGguc2VwICE9PSBNb2R1bGVOYW1lU2VwYXJhdG9yXG4gICAgICAgID8gbW9kdWxlTmFtZU9yUGF0aC5zcGxpdChwYXRoLnNlcCkuam9pbihNb2R1bGVOYW1lU2VwYXJhdG9yKVxuICAgICAgICA6IG1vZHVsZU5hbWVPclBhdGg7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1SZXF1aXJlSW5UaGVNaWRkbGVTaW5nbGV0b24uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/platform/node/RequireInTheMiddleSingleton.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/platform/node/instrumentation.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation/build/esm/platform/node/instrumentation.js ***!
  \************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InstrumentationBase: () => (/* binding */ InstrumentationBase)\n/* harmony export */ });\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! util */ \"util\");\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(util__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _semver__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../semver */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/semver.js\");\n/* harmony import */ var _shimmer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../shimmer */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/shimmer.js\");\n/* harmony import */ var _instrumentation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/instrumentation.js\");\n/* harmony import */ var _RequireInTheMiddleSingleton__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./RequireInTheMiddleSingleton */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/platform/node/RequireInTheMiddleSingleton.js\");\n/* harmony import */ var import_in_the_middle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! import-in-the-middle */ \"import-in-the-middle\");\n/* harmony import */ var import_in_the_middle__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(import_in_the_middle__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/diag-api.js\");\n/* harmony import */ var require_in_the_middle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! require-in-the-middle */ \"require-in-the-middle\");\n/* harmony import */ var require_in_the_middle__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(require_in_the_middle__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utils */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/utils.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n;globalThis[\"_sentryRewritesTunnelPath\"] = \"/monitoring\";globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.2\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";\n\n\n\n\n\n\n\n\n\n\n/**\n * Base abstract class for instrumenting node plugins\n */\nclass InstrumentationBase extends _instrumentation__WEBPACK_IMPORTED_MODULE_5__.InstrumentationAbstract {\n    _modules;\n    _hooks = [];\n    _requireInTheMiddleSingleton = _RequireInTheMiddleSingleton__WEBPACK_IMPORTED_MODULE_6__.RequireInTheMiddleSingleton.getInstance();\n    _enabled = false;\n    constructor(instrumentationName, instrumentationVersion, config) {\n        super(instrumentationName, instrumentationVersion, config);\n        let modules = this.init();\n        if (modules && !Array.isArray(modules)) {\n            modules = [modules];\n        }\n        this._modules = modules || [];\n        if (this._config.enabled) {\n            this.enable();\n        }\n    }\n    _wrap = (moduleExports, name, wrapper) => {\n        if ((0,_utils__WEBPACK_IMPORTED_MODULE_7__.isWrapped)(moduleExports[name])) {\n            this._unwrap(moduleExports, name);\n        }\n        if (!util__WEBPACK_IMPORTED_MODULE_1__.types.isProxy(moduleExports)) {\n            return (0,_shimmer__WEBPACK_IMPORTED_MODULE_8__.wrap)(moduleExports, name, wrapper);\n        }\n        else {\n            const wrapped = (0,_shimmer__WEBPACK_IMPORTED_MODULE_8__.wrap)(Object.assign({}, moduleExports), name, wrapper);\n            Object.defineProperty(moduleExports, name, {\n                value: wrapped,\n            });\n            return wrapped;\n        }\n    };\n    _unwrap = (moduleExports, name) => {\n        if (!util__WEBPACK_IMPORTED_MODULE_1__.types.isProxy(moduleExports)) {\n            return (0,_shimmer__WEBPACK_IMPORTED_MODULE_8__.unwrap)(moduleExports, name);\n        }\n        else {\n            return Object.defineProperty(moduleExports, name, {\n                value: moduleExports[name],\n            });\n        }\n    };\n    _massWrap = (moduleExportsArray, names, wrapper) => {\n        if (!moduleExportsArray) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_9__.diag.error('must provide one or more modules to patch');\n            return;\n        }\n        else if (!Array.isArray(moduleExportsArray)) {\n            moduleExportsArray = [moduleExportsArray];\n        }\n        if (!(names && Array.isArray(names))) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_9__.diag.error('must provide one or more functions to wrap on modules');\n            return;\n        }\n        moduleExportsArray.forEach(moduleExports => {\n            names.forEach(name => {\n                this._wrap(moduleExports, name, wrapper);\n            });\n        });\n    };\n    _massUnwrap = (moduleExportsArray, names) => {\n        if (!moduleExportsArray) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_9__.diag.error('must provide one or more modules to patch');\n            return;\n        }\n        else if (!Array.isArray(moduleExportsArray)) {\n            moduleExportsArray = [moduleExportsArray];\n        }\n        if (!(names && Array.isArray(names))) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_9__.diag.error('must provide one or more functions to wrap on modules');\n            return;\n        }\n        moduleExportsArray.forEach(moduleExports => {\n            names.forEach(name => {\n                this._unwrap(moduleExports, name);\n            });\n        });\n    };\n    _warnOnPreloadedModules() {\n        this._modules.forEach((module) => {\n            const { name } = module;\n            try {\n                const resolvedModule = /*require.resolve*/(__webpack_require__(\"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/platform/node sync recursive\").resolve(name));\n                if (__webpack_require__.c[resolvedModule]) {\n                    // Module is already cached, which means the instrumentation hook might not work\n                    this._diag.warn(`Module ${name} has been loaded before ${this.instrumentationName} so it might not work, please initialize it before requiring ${name}`);\n                }\n            }\n            catch {\n                // Module isn't available, we can simply skip\n            }\n        });\n    }\n    _extractPackageVersion(baseDir) {\n        try {\n            const json = (0,fs__WEBPACK_IMPORTED_MODULE_4__.readFileSync)(path__WEBPACK_IMPORTED_MODULE_0__.join(baseDir, 'package.json'), {\n                encoding: 'utf8',\n            });\n            const version = JSON.parse(json).version;\n            return typeof version === 'string' ? version : undefined;\n        }\n        catch {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_9__.diag.warn('Failed extracting version', baseDir);\n        }\n        return undefined;\n    }\n    _onRequire(module, exports, name, baseDir) {\n        if (!baseDir) {\n            if (typeof module.patch === 'function') {\n                module.moduleExports = exports;\n                if (this._enabled) {\n                    this._diag.debug('Applying instrumentation patch for nodejs core module on require hook', {\n                        module: module.name,\n                    });\n                    return module.patch(exports);\n                }\n            }\n            return exports;\n        }\n        const version = this._extractPackageVersion(baseDir);\n        module.moduleVersion = version;\n        if (module.name === name) {\n            // main module\n            if (isSupported(module.supportedVersions, version, module.includePrerelease)) {\n                if (typeof module.patch === 'function') {\n                    module.moduleExports = exports;\n                    if (this._enabled) {\n                        this._diag.debug('Applying instrumentation patch for module on require hook', {\n                            module: module.name,\n                            version: module.moduleVersion,\n                            baseDir,\n                        });\n                        return module.patch(exports, module.moduleVersion);\n                    }\n                }\n            }\n            return exports;\n        }\n        // internal file\n        const files = module.files ?? [];\n        const normalizedName = path__WEBPACK_IMPORTED_MODULE_0__.normalize(name);\n        const supportedFileInstrumentations = files\n            .filter(f => f.name === normalizedName)\n            .filter(f => isSupported(f.supportedVersions, version, module.includePrerelease));\n        return supportedFileInstrumentations.reduce((patchedExports, file) => {\n            file.moduleExports = patchedExports;\n            if (this._enabled) {\n                this._diag.debug('Applying instrumentation patch for nodejs module file on require hook', {\n                    module: module.name,\n                    version: module.moduleVersion,\n                    fileName: file.name,\n                    baseDir,\n                });\n                // patch signature is not typed, so we cast it assuming it's correct\n                return file.patch(patchedExports, module.moduleVersion);\n            }\n            return patchedExports;\n        }, exports);\n    }\n    enable() {\n        if (this._enabled) {\n            return;\n        }\n        this._enabled = true;\n        // already hooked, just call patch again\n        if (this._hooks.length > 0) {\n            for (const module of this._modules) {\n                if (typeof module.patch === 'function' && module.moduleExports) {\n                    this._diag.debug('Applying instrumentation patch for nodejs module on instrumentation enabled', {\n                        module: module.name,\n                        version: module.moduleVersion,\n                    });\n                    module.patch(module.moduleExports, module.moduleVersion);\n                }\n                for (const file of module.files) {\n                    if (file.moduleExports) {\n                        this._diag.debug('Applying instrumentation patch for nodejs module file on instrumentation enabled', {\n                            module: module.name,\n                            version: module.moduleVersion,\n                            fileName: file.name,\n                        });\n                        file.patch(file.moduleExports, module.moduleVersion);\n                    }\n                }\n            }\n            return;\n        }\n        this._warnOnPreloadedModules();\n        for (const module of this._modules) {\n            const hookFn = (exports, name, baseDir) => {\n                if (!baseDir && path__WEBPACK_IMPORTED_MODULE_0__.isAbsolute(name)) {\n                    const parsedPath = path__WEBPACK_IMPORTED_MODULE_0__.parse(name);\n                    name = parsedPath.name;\n                    baseDir = parsedPath.dir;\n                }\n                return this._onRequire(module, exports, name, baseDir);\n            };\n            const onRequire = (exports, name, baseDir) => {\n                return this._onRequire(module, exports, name, baseDir);\n            };\n            // `RequireInTheMiddleSingleton` does not support absolute paths.\n            // For an absolute paths, we must create a separate instance of the\n            // require-in-the-middle `Hook`.\n            const hook = path__WEBPACK_IMPORTED_MODULE_0__.isAbsolute(module.name)\n                ? new require_in_the_middle__WEBPACK_IMPORTED_MODULE_3__.Hook([module.name], { internals: true }, onRequire)\n                : this._requireInTheMiddleSingleton.register(module.name, onRequire);\n            this._hooks.push(hook);\n            const esmHook = new import_in_the_middle__WEBPACK_IMPORTED_MODULE_2__.Hook([module.name], { internals: false }, hookFn);\n            this._hooks.push(esmHook);\n        }\n    }\n    disable() {\n        if (!this._enabled) {\n            return;\n        }\n        this._enabled = false;\n        for (const module of this._modules) {\n            if (typeof module.unpatch === 'function' && module.moduleExports) {\n                this._diag.debug('Removing instrumentation patch for nodejs module on instrumentation disabled', {\n                    module: module.name,\n                    version: module.moduleVersion,\n                });\n                module.unpatch(module.moduleExports, module.moduleVersion);\n            }\n            for (const file of module.files) {\n                if (file.moduleExports) {\n                    this._diag.debug('Removing instrumentation patch for nodejs module file on instrumentation disabled', {\n                        module: module.name,\n                        version: module.moduleVersion,\n                        fileName: file.name,\n                    });\n                    file.unpatch(file.moduleExports, module.moduleVersion);\n                }\n            }\n        }\n    }\n    isEnabled() {\n        return this._enabled;\n    }\n}\nfunction isSupported(supportedVersions, version, includePrerelease) {\n    if (typeof version === 'undefined') {\n        // If we don't have the version, accept the wildcard case only\n        return supportedVersions.includes('*');\n    }\n    return supportedVersions.some(supportedVersion => {\n        return (0,_semver__WEBPACK_IMPORTED_MODULE_10__.satisfies)(version, supportedVersion, { includePrerelease });\n    });\n}\n//# sourceMappingURL=instrumentation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/platform/node/instrumentation.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/semconvStability.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation/build/esm/semconvStability.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SemconvStability: () => (/* binding */ SemconvStability),\n/* harmony export */   semconvStabilityFromStr: () => (/* binding */ semconvStabilityFromStr)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar SemconvStability;\n(function (SemconvStability) {\n    /** Emit only stable semantic conventions. */\n    SemconvStability[SemconvStability[\"STABLE\"] = 1] = \"STABLE\";\n    /** Emit only old semantic conventions. */\n    SemconvStability[SemconvStability[\"OLD\"] = 2] = \"OLD\";\n    /** Emit both stable and old semantic conventions. */\n    SemconvStability[SemconvStability[\"DUPLICATE\"] = 3] = \"DUPLICATE\";\n})(SemconvStability || (SemconvStability = {}));\n/**\n * Determine the appropriate semconv stability for the given namespace.\n *\n * This will parse the given string of comma-separated values (often\n * `process.env.OTEL_SEMCONV_STABILITY_OPT_IN`) looking for the `${namespace}`\n * or `${namespace}/dup` tokens. This is a pattern defined by a number of\n * non-normative semconv documents.\n *\n * For example:\n * - namespace 'http': https://opentelemetry.io/docs/specs/semconv/non-normative/http-migration/\n * - namespace 'database': https://opentelemetry.io/docs/specs/semconv/non-normative/database-migration/\n * - namespace 'k8s': https://opentelemetry.io/docs/specs/semconv/non-normative/k8s-migration/\n *\n * Usage:\n *\n *  import {SemconvStability, semconvStabilityFromStr} from '@opentelemetry/instrumentation';\n *\n *  export class FooInstrumentation extends InstrumentationBase<FooInstrumentationConfig> {\n *    private _semconvStability: SemconvStability;\n *    constructor(config: FooInstrumentationConfig = {}) {\n *      super('@opentelemetry/instrumentation-foo', VERSION, config);\n *\n *      // When supporting the OTEL_SEMCONV_STABILITY_OPT_IN envvar\n *      this._semconvStability = semconvStabilityFromStr(\n *        'http',\n *        process.env.OTEL_SEMCONV_STABILITY_OPT_IN\n *      );\n *\n *      // or when supporting a `semconvStabilityOptIn` config option (e.g. for\n *      // the web where there are no envvars).\n *      this._semconvStability = semconvStabilityFromStr(\n *        'http',\n *        config?.semconvStabilityOptIn\n *      );\n *    }\n *  }\n *\n *  // Then, to apply semconv, use the following or similar:\n *  if (this._semconvStability & SemconvStability.OLD) {\n *    // ...\n *  }\n *  if (this._semconvStability & SemconvStability.STABLE) {\n *    // ...\n *  }\n *\n */\nfunction semconvStabilityFromStr(namespace, str) {\n    let semconvStability = SemconvStability.OLD;\n    // The same parsing of `str` as `getStringListFromEnv` from the core pkg.\n    const entries = str\n        ?.split(',')\n        .map(v => v.trim())\n        .filter(s => s !== '');\n    for (const entry of entries ?? []) {\n        if (entry.toLowerCase() === namespace + '/dup') {\n            // DUPLICATE takes highest precedence.\n            semconvStability = SemconvStability.DUPLICATE;\n            break;\n        }\n        else if (entry.toLowerCase() === namespace) {\n            semconvStability = SemconvStability.STABLE;\n        }\n    }\n    return semconvStability;\n}\n//# sourceMappingURL=semconvStability.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi9idWlsZC9lc20vc2VtY29udlN0YWJpbGl0eS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDRDQUE0QztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBLG1FQUFtRSxVQUFVO0FBQzdFLFNBQVMsVUFBVTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDJDQUEyQztBQUN2RDtBQUNBO0FBQ0E7QUFDQSx1REFBdUQ7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uL2J1aWxkL2VzbS9zZW1jb252U3RhYmlsaXR5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5leHBvcnQgdmFyIFNlbWNvbnZTdGFiaWxpdHk7XG4oZnVuY3Rpb24gKFNlbWNvbnZTdGFiaWxpdHkpIHtcbiAgICAvKiogRW1pdCBvbmx5IHN0YWJsZSBzZW1hbnRpYyBjb252ZW50aW9ucy4gKi9cbiAgICBTZW1jb252U3RhYmlsaXR5W1NlbWNvbnZTdGFiaWxpdHlbXCJTVEFCTEVcIl0gPSAxXSA9IFwiU1RBQkxFXCI7XG4gICAgLyoqIEVtaXQgb25seSBvbGQgc2VtYW50aWMgY29udmVudGlvbnMuICovXG4gICAgU2VtY29udlN0YWJpbGl0eVtTZW1jb252U3RhYmlsaXR5W1wiT0xEXCJdID0gMl0gPSBcIk9MRFwiO1xuICAgIC8qKiBFbWl0IGJvdGggc3RhYmxlIGFuZCBvbGQgc2VtYW50aWMgY29udmVudGlvbnMuICovXG4gICAgU2VtY29udlN0YWJpbGl0eVtTZW1jb252U3RhYmlsaXR5W1wiRFVQTElDQVRFXCJdID0gM10gPSBcIkRVUExJQ0FURVwiO1xufSkoU2VtY29udlN0YWJpbGl0eSB8fCAoU2VtY29udlN0YWJpbGl0eSA9IHt9KSk7XG4vKipcbiAqIERldGVybWluZSB0aGUgYXBwcm9wcmlhdGUgc2VtY29udiBzdGFiaWxpdHkgZm9yIHRoZSBnaXZlbiBuYW1lc3BhY2UuXG4gKlxuICogVGhpcyB3aWxsIHBhcnNlIHRoZSBnaXZlbiBzdHJpbmcgb2YgY29tbWEtc2VwYXJhdGVkIHZhbHVlcyAob2Z0ZW5cbiAqIGBwcm9jZXNzLmVudi5PVEVMX1NFTUNPTlZfU1RBQklMSVRZX09QVF9JTmApIGxvb2tpbmcgZm9yIHRoZSBgJHtuYW1lc3BhY2V9YFxuICogb3IgYCR7bmFtZXNwYWNlfS9kdXBgIHRva2Vucy4gVGhpcyBpcyBhIHBhdHRlcm4gZGVmaW5lZCBieSBhIG51bWJlciBvZlxuICogbm9uLW5vcm1hdGl2ZSBzZW1jb252IGRvY3VtZW50cy5cbiAqXG4gKiBGb3IgZXhhbXBsZTpcbiAqIC0gbmFtZXNwYWNlICdodHRwJzogaHR0cHM6Ly9vcGVudGVsZW1ldHJ5LmlvL2RvY3Mvc3BlY3Mvc2VtY29udi9ub24tbm9ybWF0aXZlL2h0dHAtbWlncmF0aW9uL1xuICogLSBuYW1lc3BhY2UgJ2RhdGFiYXNlJzogaHR0cHM6Ly9vcGVudGVsZW1ldHJ5LmlvL2RvY3Mvc3BlY3Mvc2VtY29udi9ub24tbm9ybWF0aXZlL2RhdGFiYXNlLW1pZ3JhdGlvbi9cbiAqIC0gbmFtZXNwYWNlICdrOHMnOiBodHRwczovL29wZW50ZWxlbWV0cnkuaW8vZG9jcy9zcGVjcy9zZW1jb252L25vbi1ub3JtYXRpdmUvazhzLW1pZ3JhdGlvbi9cbiAqXG4gKiBVc2FnZTpcbiAqXG4gKiAgaW1wb3J0IHtTZW1jb252U3RhYmlsaXR5LCBzZW1jb252U3RhYmlsaXR5RnJvbVN0cn0gZnJvbSAnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uJztcbiAqXG4gKiAgZXhwb3J0IGNsYXNzIEZvb0luc3RydW1lbnRhdGlvbiBleHRlbmRzIEluc3RydW1lbnRhdGlvbkJhc2U8Rm9vSW5zdHJ1bWVudGF0aW9uQ29uZmlnPiB7XG4gKiAgICBwcml2YXRlIF9zZW1jb252U3RhYmlsaXR5OiBTZW1jb252U3RhYmlsaXR5O1xuICogICAgY29uc3RydWN0b3IoY29uZmlnOiBGb29JbnN0cnVtZW50YXRpb25Db25maWcgPSB7fSkge1xuICogICAgICBzdXBlcignQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWZvbycsIFZFUlNJT04sIGNvbmZpZyk7XG4gKlxuICogICAgICAvLyBXaGVuIHN1cHBvcnRpbmcgdGhlIE9URUxfU0VNQ09OVl9TVEFCSUxJVFlfT1BUX0lOIGVudnZhclxuICogICAgICB0aGlzLl9zZW1jb252U3RhYmlsaXR5ID0gc2VtY29udlN0YWJpbGl0eUZyb21TdHIoXG4gKiAgICAgICAgJ2h0dHAnLFxuICogICAgICAgIHByb2Nlc3MuZW52Lk9URUxfU0VNQ09OVl9TVEFCSUxJVFlfT1BUX0lOXG4gKiAgICAgICk7XG4gKlxuICogICAgICAvLyBvciB3aGVuIHN1cHBvcnRpbmcgYSBgc2VtY29udlN0YWJpbGl0eU9wdEluYCBjb25maWcgb3B0aW9uIChlLmcuIGZvclxuICogICAgICAvLyB0aGUgd2ViIHdoZXJlIHRoZXJlIGFyZSBubyBlbnZ2YXJzKS5cbiAqICAgICAgdGhpcy5fc2VtY29udlN0YWJpbGl0eSA9IHNlbWNvbnZTdGFiaWxpdHlGcm9tU3RyKFxuICogICAgICAgICdodHRwJyxcbiAqICAgICAgICBjb25maWc/LnNlbWNvbnZTdGFiaWxpdHlPcHRJblxuICogICAgICApO1xuICogICAgfVxuICogIH1cbiAqXG4gKiAgLy8gVGhlbiwgdG8gYXBwbHkgc2VtY29udiwgdXNlIHRoZSBmb2xsb3dpbmcgb3Igc2ltaWxhcjpcbiAqICBpZiAodGhpcy5fc2VtY29udlN0YWJpbGl0eSAmIFNlbWNvbnZTdGFiaWxpdHkuT0xEKSB7XG4gKiAgICAvLyAuLi5cbiAqICB9XG4gKiAgaWYgKHRoaXMuX3NlbWNvbnZTdGFiaWxpdHkgJiBTZW1jb252U3RhYmlsaXR5LlNUQUJMRSkge1xuICogICAgLy8gLi4uXG4gKiAgfVxuICpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNlbWNvbnZTdGFiaWxpdHlGcm9tU3RyKG5hbWVzcGFjZSwgc3RyKSB7XG4gICAgbGV0IHNlbWNvbnZTdGFiaWxpdHkgPSBTZW1jb252U3RhYmlsaXR5Lk9MRDtcbiAgICAvLyBUaGUgc2FtZSBwYXJzaW5nIG9mIGBzdHJgIGFzIGBnZXRTdHJpbmdMaXN0RnJvbUVudmAgZnJvbSB0aGUgY29yZSBwa2cuXG4gICAgY29uc3QgZW50cmllcyA9IHN0clxuICAgICAgICA/LnNwbGl0KCcsJylcbiAgICAgICAgLm1hcCh2ID0+IHYudHJpbSgpKVxuICAgICAgICAuZmlsdGVyKHMgPT4gcyAhPT0gJycpO1xuICAgIGZvciAoY29uc3QgZW50cnkgb2YgZW50cmllcyA/PyBbXSkge1xuICAgICAgICBpZiAoZW50cnkudG9Mb3dlckNhc2UoKSA9PT0gbmFtZXNwYWNlICsgJy9kdXAnKSB7XG4gICAgICAgICAgICAvLyBEVVBMSUNBVEUgdGFrZXMgaGlnaGVzdCBwcmVjZWRlbmNlLlxuICAgICAgICAgICAgc2VtY29udlN0YWJpbGl0eSA9IFNlbWNvbnZTdGFiaWxpdHkuRFVQTElDQVRFO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZW50cnkudG9Mb3dlckNhc2UoKSA9PT0gbmFtZXNwYWNlKSB7XG4gICAgICAgICAgICBzZW1jb252U3RhYmlsaXR5ID0gU2VtY29udlN0YWJpbGl0eS5TVEFCTEU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNlbWNvbnZTdGFiaWxpdHk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZW1jb252U3RhYmlsaXR5LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/semconvStability.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/semver.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation/build/esm/semver.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   satisfies: () => (/* binding */ satisfies)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/diag-api.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// This is a custom semantic versioning implementation compatible with the\n// `satisfies(version, range, options?)` function from the `semver` npm package;\n// with the exception that the `loose` option is not supported.\n//\n// The motivation for the custom semver implementation is that\n// `semver` package has some initialization delay (lots of RegExp init and compile)\n// and this leads to coldstart overhead for the OTEL Lambda Node.js layer.\n// Hence, we have implemented lightweight version of it internally with required functionalities.\n\nconst VERSION_REGEXP = /^(?:v)?(?<version>(?<major>0|[1-9]\\d*)\\.(?<minor>0|[1-9]\\d*)\\.(?<patch>0|[1-9]\\d*))(?:-(?<prerelease>(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+(?<build>[0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/;\nconst RANGE_REGEXP = /^(?<op><|>|=|==|<=|>=|~|\\^|~>)?\\s*(?:v)?(?<version>(?<major>x|X|\\*|0|[1-9]\\d*)(?:\\.(?<minor>x|X|\\*|0|[1-9]\\d*))?(?:\\.(?<patch>x|X|\\*|0|[1-9]\\d*))?)(?:-(?<prerelease>(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+(?<build>[0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/;\nconst operatorResMap = {\n    '>': [1],\n    '>=': [0, 1],\n    '=': [0],\n    '<=': [-1, 0],\n    '<': [-1],\n    '!=': [-1, 1],\n};\n/**\n * Checks given version whether it satisfies given range expression.\n * @param version the [version](https://github.com/npm/node-semver#versions) to be checked\n * @param range   the [range](https://github.com/npm/node-semver#ranges) expression for version check\n * @param options options to configure semver satisfy check\n */\nfunction satisfies(version, range, options) {\n    // Strict semver format check\n    if (!_validateVersion(version)) {\n        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.error(`Invalid version: ${version}`);\n        return false;\n    }\n    // If range is empty, satisfy check succeeds regardless what version is\n    if (!range) {\n        return true;\n    }\n    // Cleanup range\n    range = range.replace(/([<>=~^]+)\\s+/g, '$1');\n    // Parse version\n    const parsedVersion = _parseVersion(version);\n    if (!parsedVersion) {\n        return false;\n    }\n    const allParsedRanges = [];\n    // Check given version whether it satisfies given range expression\n    const checkResult = _doSatisfies(parsedVersion, range, allParsedRanges, options);\n    // If check result is OK,\n    // do another final check for pre-release, if pre-release check is included by option\n    if (checkResult && !options?.includePrerelease) {\n        return _doPreleaseCheck(parsedVersion, allParsedRanges);\n    }\n    return checkResult;\n}\nfunction _validateVersion(version) {\n    return typeof version === 'string' && VERSION_REGEXP.test(version);\n}\nfunction _doSatisfies(parsedVersion, range, allParsedRanges, options) {\n    if (range.includes('||')) {\n        // A version matches a range if and only if\n        // every comparator in at least one of the ||-separated comparator sets is satisfied by the version\n        const ranges = range.trim().split('||');\n        for (const r of ranges) {\n            if (_checkRange(parsedVersion, r, allParsedRanges, options)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    else if (range.includes(' - ')) {\n        // Hyphen ranges: https://github.com/npm/node-semver#hyphen-ranges-xyz---abc\n        range = replaceHyphen(range, options);\n    }\n    else if (range.includes(' ')) {\n        // Multiple separated ranges and all needs to be satisfied for success\n        const ranges = range\n            .trim()\n            .replace(/\\s{2,}/g, ' ')\n            .split(' ');\n        for (const r of ranges) {\n            if (!_checkRange(parsedVersion, r, allParsedRanges, options)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    // Check given parsed version with given range\n    return _checkRange(parsedVersion, range, allParsedRanges, options);\n}\nfunction _checkRange(parsedVersion, range, allParsedRanges, options) {\n    range = _normalizeRange(range, options);\n    if (range.includes(' ')) {\n        // If there are multiple ranges separated, satisfy each of them\n        return _doSatisfies(parsedVersion, range, allParsedRanges, options);\n    }\n    else {\n        // Validate and parse range\n        const parsedRange = _parseRange(range);\n        allParsedRanges.push(parsedRange);\n        // Check parsed version by parsed range\n        return _satisfies(parsedVersion, parsedRange);\n    }\n}\nfunction _satisfies(parsedVersion, parsedRange) {\n    // If range is invalid, satisfy check fails (no error throw)\n    if (parsedRange.invalid) {\n        return false;\n    }\n    // If range is empty or wildcard, satisfy check succeeds regardless what version is\n    if (!parsedRange.version || _isWildcard(parsedRange.version)) {\n        return true;\n    }\n    // Compare version segment first\n    let comparisonResult = _compareVersionSegments(parsedVersion.versionSegments || [], parsedRange.versionSegments || []);\n    // If versions segments are equal, compare by pre-release segments\n    if (comparisonResult === 0) {\n        const versionPrereleaseSegments = parsedVersion.prereleaseSegments || [];\n        const rangePrereleaseSegments = parsedRange.prereleaseSegments || [];\n        if (!versionPrereleaseSegments.length && !rangePrereleaseSegments.length) {\n            comparisonResult = 0;\n        }\n        else if (!versionPrereleaseSegments.length &&\n            rangePrereleaseSegments.length) {\n            comparisonResult = 1;\n        }\n        else if (versionPrereleaseSegments.length &&\n            !rangePrereleaseSegments.length) {\n            comparisonResult = -1;\n        }\n        else {\n            comparisonResult = _compareVersionSegments(versionPrereleaseSegments, rangePrereleaseSegments);\n        }\n    }\n    // Resolve check result according to comparison operator\n    return operatorResMap[parsedRange.op]?.includes(comparisonResult);\n}\nfunction _doPreleaseCheck(parsedVersion, allParsedRanges) {\n    if (parsedVersion.prerelease) {\n        return allParsedRanges.some(r => r.prerelease && r.version === parsedVersion.version);\n    }\n    return true;\n}\nfunction _normalizeRange(range, options) {\n    range = range.trim();\n    range = replaceCaret(range, options);\n    range = replaceTilde(range);\n    range = replaceXRange(range, options);\n    range = range.trim();\n    return range;\n}\nfunction isX(id) {\n    return !id || id.toLowerCase() === 'x' || id === '*';\n}\nfunction _parseVersion(versionString) {\n    const match = versionString.match(VERSION_REGEXP);\n    if (!match) {\n        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.error(`Invalid version: ${versionString}`);\n        return undefined;\n    }\n    const version = match.groups.version;\n    const prerelease = match.groups.prerelease;\n    const build = match.groups.build;\n    const versionSegments = version.split('.');\n    const prereleaseSegments = prerelease?.split('.');\n    return {\n        op: undefined,\n        version,\n        versionSegments,\n        versionSegmentCount: versionSegments.length,\n        prerelease,\n        prereleaseSegments,\n        prereleaseSegmentCount: prereleaseSegments ? prereleaseSegments.length : 0,\n        build,\n    };\n}\nfunction _parseRange(rangeString) {\n    if (!rangeString) {\n        return {};\n    }\n    const match = rangeString.match(RANGE_REGEXP);\n    if (!match) {\n        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.error(`Invalid range: ${rangeString}`);\n        return {\n            invalid: true,\n        };\n    }\n    let op = match.groups.op;\n    const version = match.groups.version;\n    const prerelease = match.groups.prerelease;\n    const build = match.groups.build;\n    const versionSegments = version.split('.');\n    const prereleaseSegments = prerelease?.split('.');\n    if (op === '==') {\n        op = '=';\n    }\n    return {\n        op: op || '=',\n        version,\n        versionSegments,\n        versionSegmentCount: versionSegments.length,\n        prerelease,\n        prereleaseSegments,\n        prereleaseSegmentCount: prereleaseSegments ? prereleaseSegments.length : 0,\n        build,\n    };\n}\nfunction _isWildcard(s) {\n    return s === '*' || s === 'x' || s === 'X';\n}\nfunction _parseVersionString(v) {\n    const n = parseInt(v, 10);\n    return isNaN(n) ? v : n;\n}\nfunction _normalizeVersionType(a, b) {\n    if (typeof a === typeof b) {\n        if (typeof a === 'number') {\n            return [a, b];\n        }\n        else if (typeof a === 'string') {\n            return [a, b];\n        }\n        else {\n            throw new Error('Version segments can only be strings or numbers');\n        }\n    }\n    else {\n        return [String(a), String(b)];\n    }\n}\nfunction _compareVersionStrings(v1, v2) {\n    if (_isWildcard(v1) || _isWildcard(v2)) {\n        return 0;\n    }\n    const [parsedV1, parsedV2] = _normalizeVersionType(_parseVersionString(v1), _parseVersionString(v2));\n    if (parsedV1 > parsedV2) {\n        return 1;\n    }\n    else if (parsedV1 < parsedV2) {\n        return -1;\n    }\n    return 0;\n}\nfunction _compareVersionSegments(v1, v2) {\n    for (let i = 0; i < Math.max(v1.length, v2.length); i++) {\n        const res = _compareVersionStrings(v1[i] || '0', v2[i] || '0');\n        if (res !== 0) {\n            return res;\n        }\n    }\n    return 0;\n}\n////////////////////////////////////////////////////////////////////////////////\n// The rest of this file is adapted from portions of https://github.com/npm/node-semver/tree/868d4bb\n// License:\n/*\n * The ISC License\n *\n * Copyright (c) Isaac Z. Schlueter and Contributors\n *\n * Permission to use, copy, modify, and/or distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR\n * IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n */\nconst LETTERDASHNUMBER = '[a-zA-Z0-9-]';\nconst NUMERICIDENTIFIER = '0|[1-9]\\\\d*';\nconst NONNUMERICIDENTIFIER = `\\\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`;\nconst GTLT = '((?:<|>)?=?)';\nconst PRERELEASEIDENTIFIER = `(?:${NUMERICIDENTIFIER}|${NONNUMERICIDENTIFIER})`;\nconst PRERELEASE = `(?:-(${PRERELEASEIDENTIFIER}(?:\\\\.${PRERELEASEIDENTIFIER})*))`;\nconst BUILDIDENTIFIER = `${LETTERDASHNUMBER}+`;\nconst BUILD = `(?:\\\\+(${BUILDIDENTIFIER}(?:\\\\.${BUILDIDENTIFIER})*))`;\nconst XRANGEIDENTIFIER = `${NUMERICIDENTIFIER}|x|X|\\\\*`;\nconst XRANGEPLAIN = `[v=\\\\s]*(${XRANGEIDENTIFIER})` +\n    `(?:\\\\.(${XRANGEIDENTIFIER})` +\n    `(?:\\\\.(${XRANGEIDENTIFIER})` +\n    `(?:${PRERELEASE})?${BUILD}?` +\n    `)?)?`;\nconst XRANGE = `^${GTLT}\\\\s*${XRANGEPLAIN}$`;\nconst XRANGE_REGEXP = new RegExp(XRANGE);\nconst HYPHENRANGE = `^\\\\s*(${XRANGEPLAIN})` + `\\\\s+-\\\\s+` + `(${XRANGEPLAIN})` + `\\\\s*$`;\nconst HYPHENRANGE_REGEXP = new RegExp(HYPHENRANGE);\nconst LONETILDE = '(?:~>?)';\nconst TILDE = `^${LONETILDE}${XRANGEPLAIN}$`;\nconst TILDE_REGEXP = new RegExp(TILDE);\nconst LONECARET = '(?:\\\\^)';\nconst CARET = `^${LONECARET}${XRANGEPLAIN}$`;\nconst CARET_REGEXP = new RegExp(CARET);\n// Borrowed from https://github.com/npm/node-semver/blob/868d4bbe3d318c52544f38d5f9977a1103e924c2/classes/range.js#L285\n//\n// ~, ~> --> * (any, kinda silly)\n// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0\n// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0\n// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0\n// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0\n// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0\n// ~0.0.1 --> >=0.0.1 <0.1.0-0\nfunction replaceTilde(comp) {\n    const r = TILDE_REGEXP;\n    return comp.replace(r, (_, M, m, p, pr) => {\n        let ret;\n        if (isX(M)) {\n            ret = '';\n        }\n        else if (isX(m)) {\n            ret = `>=${M}.0.0 <${+M + 1}.0.0-0`;\n        }\n        else if (isX(p)) {\n            // ~1.2 == >=1.2.0 <1.3.0-0\n            ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`;\n        }\n        else if (pr) {\n            ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;\n        }\n        else {\n            // ~1.2.3 == >=1.2.3 <1.3.0-0\n            ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0-0`;\n        }\n        return ret;\n    });\n}\n// Borrowed from https://github.com/npm/node-semver/blob/868d4bbe3d318c52544f38d5f9977a1103e924c2/classes/range.js#L329\n//\n// ^ --> * (any, kinda silly)\n// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0\n// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0\n// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0\n// ^1.2.3 --> >=1.2.3 <2.0.0-0\n// ^1.2.0 --> >=1.2.0 <2.0.0-0\n// ^0.0.1 --> >=0.0.1 <0.0.2-0\n// ^0.1.0 --> >=0.1.0 <0.2.0-0\nfunction replaceCaret(comp, options) {\n    const r = CARET_REGEXP;\n    const z = options?.includePrerelease ? '-0' : '';\n    return comp.replace(r, (_, M, m, p, pr) => {\n        let ret;\n        if (isX(M)) {\n            ret = '';\n        }\n        else if (isX(m)) {\n            ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`;\n        }\n        else if (isX(p)) {\n            if (M === '0') {\n                ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`;\n            }\n            else {\n                ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`;\n            }\n        }\n        else if (pr) {\n            if (M === '0') {\n                if (m === '0') {\n                    ret = `>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p + 1}-0`;\n                }\n                else {\n                    ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;\n                }\n            }\n            else {\n                ret = `>=${M}.${m}.${p}-${pr} <${+M + 1}.0.0-0`;\n            }\n        }\n        else {\n            if (M === '0') {\n                if (m === '0') {\n                    ret = `>=${M}.${m}.${p}${z} <${M}.${m}.${+p + 1}-0`;\n                }\n                else {\n                    ret = `>=${M}.${m}.${p}${z} <${M}.${+m + 1}.0-0`;\n                }\n            }\n            else {\n                ret = `>=${M}.${m}.${p} <${+M + 1}.0.0-0`;\n            }\n        }\n        return ret;\n    });\n}\n// Borrowed from https://github.com/npm/node-semver/blob/868d4bbe3d318c52544f38d5f9977a1103e924c2/classes/range.js#L390\nfunction replaceXRange(comp, options) {\n    const r = XRANGE_REGEXP;\n    return comp.replace(r, (ret, gtlt, M, m, p, pr) => {\n        const xM = isX(M);\n        const xm = xM || isX(m);\n        const xp = xm || isX(p);\n        const anyX = xp;\n        if (gtlt === '=' && anyX) {\n            gtlt = '';\n        }\n        // if we're including prereleases in the match, then we need\n        // to fix this to -0, the lowest possible prerelease value\n        pr = options?.includePrerelease ? '-0' : '';\n        if (xM) {\n            if (gtlt === '>' || gtlt === '<') {\n                // nothing is allowed\n                ret = '<0.0.0-0';\n            }\n            else {\n                // nothing is forbidden\n                ret = '*';\n            }\n        }\n        else if (gtlt && anyX) {\n            // we know patch is an x, because we have any x at all.\n            // replace X with 0\n            if (xm) {\n                m = 0;\n            }\n            p = 0;\n            if (gtlt === '>') {\n                // >1 => >=2.0.0\n                // >1.2 => >=1.3.0\n                gtlt = '>=';\n                if (xm) {\n                    M = +M + 1;\n                    m = 0;\n                    p = 0;\n                }\n                else {\n                    m = +m + 1;\n                    p = 0;\n                }\n            }\n            else if (gtlt === '<=') {\n                // <=0.7.x is actually <0.8.0, since any 0.7.x should\n                // pass.  Similarly, <=7.x is actually <8.0.0, etc.\n                gtlt = '<';\n                if (xm) {\n                    M = +M + 1;\n                }\n                else {\n                    m = +m + 1;\n                }\n            }\n            if (gtlt === '<') {\n                pr = '-0';\n            }\n            ret = `${gtlt + M}.${m}.${p}${pr}`;\n        }\n        else if (xm) {\n            ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`;\n        }\n        else if (xp) {\n            ret = `>=${M}.${m}.0${pr} <${M}.${+m + 1}.0-0`;\n        }\n        return ret;\n    });\n}\n// Borrowed from https://github.com/npm/node-semver/blob/868d4bbe3d318c52544f38d5f9977a1103e924c2/classes/range.js#L488\n//\n// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5\n// 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do\n// 1.2 - 3.4 => >=1.2.0 <3.5.0-0\nfunction replaceHyphen(comp, options) {\n    const r = HYPHENRANGE_REGEXP;\n    return comp.replace(r, (_, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr) => {\n        if (isX(fM)) {\n            from = '';\n        }\n        else if (isX(fm)) {\n            from = `>=${fM}.0.0${options?.includePrerelease ? '-0' : ''}`;\n        }\n        else if (isX(fp)) {\n            from = `>=${fM}.${fm}.0${options?.includePrerelease ? '-0' : ''}`;\n        }\n        else if (fpr) {\n            from = `>=${from}`;\n        }\n        else {\n            from = `>=${from}${options?.includePrerelease ? '-0' : ''}`;\n        }\n        if (isX(tM)) {\n            to = '';\n        }\n        else if (isX(tm)) {\n            to = `<${+tM + 1}.0.0-0`;\n        }\n        else if (isX(tp)) {\n            to = `<${tM}.${+tm + 1}.0-0`;\n        }\n        else if (tpr) {\n            to = `<=${tM}.${tm}.${tp}-${tpr}`;\n        }\n        else if (options?.includePrerelease) {\n            to = `<${tM}.${tm}.${+tp + 1}-0`;\n        }\n        else {\n            to = `<=${to}`;\n        }\n        return `${from} ${to}`.trim();\n    });\n}\n//# sourceMappingURL=semver.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/semver.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/shimmer.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation/build/esm/shimmer.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ shimmer),\n/* harmony export */   massUnwrap: () => (/* binding */ massUnwrap),\n/* harmony export */   massWrap: () => (/* binding */ massWrap),\n/* harmony export */   unwrap: () => (/* binding */ unwrap),\n/* harmony export */   wrap: () => (/* binding */ wrap)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Default to complaining loudly when things don't go according to plan.\n// eslint-disable-next-line no-console\nlet logger = console.error.bind(console);\n// Sets a property on an object, preserving its enumerability.\n// This function assumes that the property is already writable.\nfunction defineProperty(obj, name, value) {\n    const enumerable = !!obj[name] &&\n        Object.prototype.propertyIsEnumerable.call(obj, name);\n    Object.defineProperty(obj, name, {\n        configurable: true,\n        enumerable,\n        writable: true,\n        value,\n    });\n}\nconst wrap = (nodule, name, wrapper) => {\n    if (!nodule || !nodule[name]) {\n        logger('no original function ' + String(name) + ' to wrap');\n        return;\n    }\n    if (!wrapper) {\n        logger('no wrapper function');\n        logger(new Error().stack);\n        return;\n    }\n    const original = nodule[name];\n    if (typeof original !== 'function' || typeof wrapper !== 'function') {\n        logger('original object and wrapper must be functions');\n        return;\n    }\n    const wrapped = wrapper(original, name);\n    defineProperty(wrapped, '__original', original);\n    defineProperty(wrapped, '__unwrap', () => {\n        if (nodule[name] === wrapped) {\n            defineProperty(nodule, name, original);\n        }\n    });\n    defineProperty(wrapped, '__wrapped', true);\n    defineProperty(nodule, name, wrapped);\n    return wrapped;\n};\nconst massWrap = (nodules, names, wrapper) => {\n    if (!nodules) {\n        logger('must provide one or more modules to patch');\n        logger(new Error().stack);\n        return;\n    }\n    else if (!Array.isArray(nodules)) {\n        nodules = [nodules];\n    }\n    if (!(names && Array.isArray(names))) {\n        logger('must provide one or more functions to wrap on modules');\n        return;\n    }\n    nodules.forEach(nodule => {\n        names.forEach(name => {\n            wrap(nodule, name, wrapper);\n        });\n    });\n};\nconst unwrap = (nodule, name) => {\n    if (!nodule || !nodule[name]) {\n        logger('no function to unwrap.');\n        logger(new Error().stack);\n        return;\n    }\n    const wrapped = nodule[name];\n    if (!wrapped.__unwrap) {\n        logger('no original to unwrap to -- has ' +\n            String(name) +\n            ' already been unwrapped?');\n    }\n    else {\n        wrapped.__unwrap();\n        return;\n    }\n};\nconst massUnwrap = (nodules, names) => {\n    if (!nodules) {\n        logger('must provide one or more modules to patch');\n        logger(new Error().stack);\n        return;\n    }\n    else if (!Array.isArray(nodules)) {\n        nodules = [nodules];\n    }\n    if (!(names && Array.isArray(names))) {\n        logger('must provide one or more functions to unwrap on modules');\n        return;\n    }\n    nodules.forEach(nodule => {\n        names.forEach(name => {\n            unwrap(nodule, name);\n        });\n    });\n};\nfunction shimmer(options) {\n    if (options && options.logger) {\n        if (typeof options.logger !== 'function') {\n            logger(\"new logger isn't a function, not replacing\");\n        }\n        else {\n            logger = options.logger;\n        }\n    }\n}\nshimmer.wrap = wrap;\nshimmer.massWrap = massWrap;\nshimmer.unwrap = unwrap;\nshimmer.massUnwrap = massUnwrap;\n//# sourceMappingURL=shimmer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi9idWlsZC9lc20vc2hpbW1lci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24vYnVpbGQvZXNtL3NoaW1tZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8vIERlZmF1bHQgdG8gY29tcGxhaW5pbmcgbG91ZGx5IHdoZW4gdGhpbmdzIGRvbid0IGdvIGFjY29yZGluZyB0byBwbGFuLlxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbmxldCBsb2dnZXIgPSBjb25zb2xlLmVycm9yLmJpbmQoY29uc29sZSk7XG4vLyBTZXRzIGEgcHJvcGVydHkgb24gYW4gb2JqZWN0LCBwcmVzZXJ2aW5nIGl0cyBlbnVtZXJhYmlsaXR5LlxuLy8gVGhpcyBmdW5jdGlvbiBhc3N1bWVzIHRoYXQgdGhlIHByb3BlcnR5IGlzIGFscmVhZHkgd3JpdGFibGUuXG5mdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShvYmosIG5hbWUsIHZhbHVlKSB7XG4gICAgY29uc3QgZW51bWVyYWJsZSA9ICEhb2JqW25hbWVdICYmXG4gICAgICAgIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmosIG5hbWUpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIG5hbWUsIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWUsXG4gICAgfSk7XG59XG5leHBvcnQgY29uc3Qgd3JhcCA9IChub2R1bGUsIG5hbWUsIHdyYXBwZXIpID0+IHtcbiAgICBpZiAoIW5vZHVsZSB8fCAhbm9kdWxlW25hbWVdKSB7XG4gICAgICAgIGxvZ2dlcignbm8gb3JpZ2luYWwgZnVuY3Rpb24gJyArIFN0cmluZyhuYW1lKSArICcgdG8gd3JhcCcpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghd3JhcHBlcikge1xuICAgICAgICBsb2dnZXIoJ25vIHdyYXBwZXIgZnVuY3Rpb24nKTtcbiAgICAgICAgbG9nZ2VyKG5ldyBFcnJvcigpLnN0YWNrKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBvcmlnaW5hbCA9IG5vZHVsZVtuYW1lXTtcbiAgICBpZiAodHlwZW9mIG9yaWdpbmFsICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiB3cmFwcGVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGxvZ2dlcignb3JpZ2luYWwgb2JqZWN0IGFuZCB3cmFwcGVyIG11c3QgYmUgZnVuY3Rpb25zJyk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgd3JhcHBlZCA9IHdyYXBwZXIob3JpZ2luYWwsIG5hbWUpO1xuICAgIGRlZmluZVByb3BlcnR5KHdyYXBwZWQsICdfX29yaWdpbmFsJywgb3JpZ2luYWwpO1xuICAgIGRlZmluZVByb3BlcnR5KHdyYXBwZWQsICdfX3Vud3JhcCcsICgpID0+IHtcbiAgICAgICAgaWYgKG5vZHVsZVtuYW1lXSA9PT0gd3JhcHBlZCkge1xuICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkobm9kdWxlLCBuYW1lLCBvcmlnaW5hbCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBkZWZpbmVQcm9wZXJ0eSh3cmFwcGVkLCAnX193cmFwcGVkJywgdHJ1ZSk7XG4gICAgZGVmaW5lUHJvcGVydHkobm9kdWxlLCBuYW1lLCB3cmFwcGVkKTtcbiAgICByZXR1cm4gd3JhcHBlZDtcbn07XG5leHBvcnQgY29uc3QgbWFzc1dyYXAgPSAobm9kdWxlcywgbmFtZXMsIHdyYXBwZXIpID0+IHtcbiAgICBpZiAoIW5vZHVsZXMpIHtcbiAgICAgICAgbG9nZ2VyKCdtdXN0IHByb3ZpZGUgb25lIG9yIG1vcmUgbW9kdWxlcyB0byBwYXRjaCcpO1xuICAgICAgICBsb2dnZXIobmV3IEVycm9yKCkuc3RhY2spO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGVsc2UgaWYgKCFBcnJheS5pc0FycmF5KG5vZHVsZXMpKSB7XG4gICAgICAgIG5vZHVsZXMgPSBbbm9kdWxlc107XG4gICAgfVxuICAgIGlmICghKG5hbWVzICYmIEFycmF5LmlzQXJyYXkobmFtZXMpKSkge1xuICAgICAgICBsb2dnZXIoJ211c3QgcHJvdmlkZSBvbmUgb3IgbW9yZSBmdW5jdGlvbnMgdG8gd3JhcCBvbiBtb2R1bGVzJyk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbm9kdWxlcy5mb3JFYWNoKG5vZHVsZSA9PiB7XG4gICAgICAgIG5hbWVzLmZvckVhY2gobmFtZSA9PiB7XG4gICAgICAgICAgICB3cmFwKG5vZHVsZSwgbmFtZSwgd3JhcHBlcik7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufTtcbmV4cG9ydCBjb25zdCB1bndyYXAgPSAobm9kdWxlLCBuYW1lKSA9PiB7XG4gICAgaWYgKCFub2R1bGUgfHwgIW5vZHVsZVtuYW1lXSkge1xuICAgICAgICBsb2dnZXIoJ25vIGZ1bmN0aW9uIHRvIHVud3JhcC4nKTtcbiAgICAgICAgbG9nZ2VyKG5ldyBFcnJvcigpLnN0YWNrKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB3cmFwcGVkID0gbm9kdWxlW25hbWVdO1xuICAgIGlmICghd3JhcHBlZC5fX3Vud3JhcCkge1xuICAgICAgICBsb2dnZXIoJ25vIG9yaWdpbmFsIHRvIHVud3JhcCB0byAtLSBoYXMgJyArXG4gICAgICAgICAgICBTdHJpbmcobmFtZSkgK1xuICAgICAgICAgICAgJyBhbHJlYWR5IGJlZW4gdW53cmFwcGVkPycpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgd3JhcHBlZC5fX3Vud3JhcCgpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxufTtcbmV4cG9ydCBjb25zdCBtYXNzVW53cmFwID0gKG5vZHVsZXMsIG5hbWVzKSA9PiB7XG4gICAgaWYgKCFub2R1bGVzKSB7XG4gICAgICAgIGxvZ2dlcignbXVzdCBwcm92aWRlIG9uZSBvciBtb3JlIG1vZHVsZXMgdG8gcGF0Y2gnKTtcbiAgICAgICAgbG9nZ2VyKG5ldyBFcnJvcigpLnN0YWNrKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlbHNlIGlmICghQXJyYXkuaXNBcnJheShub2R1bGVzKSkge1xuICAgICAgICBub2R1bGVzID0gW25vZHVsZXNdO1xuICAgIH1cbiAgICBpZiAoIShuYW1lcyAmJiBBcnJheS5pc0FycmF5KG5hbWVzKSkpIHtcbiAgICAgICAgbG9nZ2VyKCdtdXN0IHByb3ZpZGUgb25lIG9yIG1vcmUgZnVuY3Rpb25zIHRvIHVud3JhcCBvbiBtb2R1bGVzJyk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbm9kdWxlcy5mb3JFYWNoKG5vZHVsZSA9PiB7XG4gICAgICAgIG5hbWVzLmZvckVhY2gobmFtZSA9PiB7XG4gICAgICAgICAgICB1bndyYXAobm9kdWxlLCBuYW1lKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2hpbW1lcihvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5sb2dnZXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmxvZ2dlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgbG9nZ2VyKFwibmV3IGxvZ2dlciBpc24ndCBhIGZ1bmN0aW9uLCBub3QgcmVwbGFjaW5nXCIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbG9nZ2VyID0gb3B0aW9ucy5sb2dnZXI7XG4gICAgICAgIH1cbiAgICB9XG59XG5zaGltbWVyLndyYXAgPSB3cmFwO1xuc2hpbW1lci5tYXNzV3JhcCA9IG1hc3NXcmFwO1xuc2hpbW1lci51bndyYXAgPSB1bndyYXA7XG5zaGltbWVyLm1hc3NVbndyYXAgPSBtYXNzVW53cmFwO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2hpbW1lci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/shimmer.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/utils.js":
/*!************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation/build/esm/utils.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isWrapped: () => (/* binding */ isWrapped),\n/* harmony export */   safeExecuteInTheMiddle: () => (/* binding */ safeExecuteInTheMiddle),\n/* harmony export */   safeExecuteInTheMiddleAsync: () => (/* binding */ safeExecuteInTheMiddleAsync)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * function to execute patched function and being able to catch errors\n * @param execute - function to be executed\n * @param onFinish - callback to run when execute finishes\n */\nfunction safeExecuteInTheMiddle(execute, onFinish, preventThrowingError) {\n    let error;\n    let result;\n    try {\n        result = execute();\n    }\n    catch (e) {\n        error = e;\n    }\n    finally {\n        onFinish(error, result);\n        if (error && !preventThrowingError) {\n            // eslint-disable-next-line no-unsafe-finally\n            throw error;\n        }\n        // eslint-disable-next-line no-unsafe-finally\n        return result;\n    }\n}\n/**\n * Async function to execute patched function and being able to catch errors\n * @param execute - function to be executed\n * @param onFinish - callback to run when execute finishes\n */\nasync function safeExecuteInTheMiddleAsync(execute, onFinish, preventThrowingError) {\n    let error;\n    let result;\n    try {\n        result = await execute();\n    }\n    catch (e) {\n        error = e;\n    }\n    finally {\n        onFinish(error, result);\n        if (error && !preventThrowingError) {\n            // eslint-disable-next-line no-unsafe-finally\n            throw error;\n        }\n        // eslint-disable-next-line no-unsafe-finally\n        return result;\n    }\n}\n/**\n * Checks if certain function has been already wrapped\n * @param func\n */\nfunction isWrapped(func) {\n    return (typeof func === 'function' &&\n        typeof func.__original === 'function' &&\n        typeof func.__unwrap === 'function' &&\n        func.__wrapped === true);\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi9idWlsZC9lc20vdXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24vYnVpbGQvZXNtL3V0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgcGF0Y2hlZCBmdW5jdGlvbiBhbmQgYmVpbmcgYWJsZSB0byBjYXRjaCBlcnJvcnNcbiAqIEBwYXJhbSBleGVjdXRlIC0gZnVuY3Rpb24gdG8gYmUgZXhlY3V0ZWRcbiAqIEBwYXJhbSBvbkZpbmlzaCAtIGNhbGxiYWNrIHRvIHJ1biB3aGVuIGV4ZWN1dGUgZmluaXNoZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNhZmVFeGVjdXRlSW5UaGVNaWRkbGUoZXhlY3V0ZSwgb25GaW5pc2gsIHByZXZlbnRUaHJvd2luZ0Vycm9yKSB7XG4gICAgbGV0IGVycm9yO1xuICAgIGxldCByZXN1bHQ7XG4gICAgdHJ5IHtcbiAgICAgICAgcmVzdWx0ID0gZXhlY3V0ZSgpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICBlcnJvciA9IGU7XG4gICAgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICBvbkZpbmlzaChlcnJvciwgcmVzdWx0KTtcbiAgICAgICAgaWYgKGVycm9yICYmICFwcmV2ZW50VGhyb3dpbmdFcnJvcikge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuc2FmZS1maW5hbGx5XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5zYWZlLWZpbmFsbHlcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG4vKipcbiAqIEFzeW5jIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgcGF0Y2hlZCBmdW5jdGlvbiBhbmQgYmVpbmcgYWJsZSB0byBjYXRjaCBlcnJvcnNcbiAqIEBwYXJhbSBleGVjdXRlIC0gZnVuY3Rpb24gdG8gYmUgZXhlY3V0ZWRcbiAqIEBwYXJhbSBvbkZpbmlzaCAtIGNhbGxiYWNrIHRvIHJ1biB3aGVuIGV4ZWN1dGUgZmluaXNoZXNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNhZmVFeGVjdXRlSW5UaGVNaWRkbGVBc3luYyhleGVjdXRlLCBvbkZpbmlzaCwgcHJldmVudFRocm93aW5nRXJyb3IpIHtcbiAgICBsZXQgZXJyb3I7XG4gICAgbGV0IHJlc3VsdDtcbiAgICB0cnkge1xuICAgICAgICByZXN1bHQgPSBhd2FpdCBleGVjdXRlKCk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGVycm9yID0gZTtcbiAgICB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIG9uRmluaXNoKGVycm9yLCByZXN1bHQpO1xuICAgICAgICBpZiAoZXJyb3IgJiYgIXByZXZlbnRUaHJvd2luZ0Vycm9yKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5zYWZlLWZpbmFsbHlcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnNhZmUtZmluYWxseVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cbi8qKlxuICogQ2hlY2tzIGlmIGNlcnRhaW4gZnVuY3Rpb24gaGFzIGJlZW4gYWxyZWFkeSB3cmFwcGVkXG4gKiBAcGFyYW0gZnVuY1xuICovXG5leHBvcnQgZnVuY3Rpb24gaXNXcmFwcGVkKGZ1bmMpIHtcbiAgICByZXR1cm4gKHR5cGVvZiBmdW5jID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAgIHR5cGVvZiBmdW5jLl9fb3JpZ2luYWwgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgdHlwZW9mIGZ1bmMuX191bndyYXAgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgZnVuYy5fX3dyYXBwZWQgPT09IHRydWUpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/utils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/redis-common/build/src/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@opentelemetry/redis-common/build/src/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.defaultDbStatementSerializer = void 0;\n/**\n * List of regexes and the number of arguments that should be serialized for matching commands.\n * For example, HSET should serialize which key and field it's operating on, but not its value.\n * Setting the subset to -1 will serialize all arguments.\n * Commands without a match will have their first argument serialized.\n *\n * Refer to https://redis.io/commands/ for the full list.\n */\nconst serializationSubsets = [\n    {\n        regex: /^ECHO/i,\n        args: 0,\n    },\n    {\n        regex: /^(LPUSH|MSET|PFA|PUBLISH|RPUSH|SADD|SET|SPUBLISH|XADD|ZADD)/i,\n        args: 1,\n    },\n    {\n        regex: /^(HSET|HMSET|LSET|LINSERT)/i,\n        args: 2,\n    },\n    {\n        regex: /^(ACL|BIT|B[LRZ]|CLIENT|CLUSTER|CONFIG|COMMAND|DECR|DEL|EVAL|EX|FUNCTION|GEO|GET|HINCR|HMGET|HSCAN|INCR|L[TRLM]|MEMORY|P[EFISTU]|RPOP|S[CDIMORSU]|XACK|X[CDGILPRT]|Z[CDILMPRS])/i,\n        args: -1,\n    },\n];\n/**\n * Given the redis command name and arguments, return a combination of the\n * command name + the allowed arguments according to `serializationSubsets`.\n * @param cmdName The redis command name\n * @param cmdArgs The redis command arguments\n * @returns a combination of the command name + args according to `serializationSubsets`.\n */\nconst defaultDbStatementSerializer = (cmdName, cmdArgs) => {\n    if (Array.isArray(cmdArgs) && cmdArgs.length) {\n        const nArgsToSerialize = serializationSubsets.find(({ regex }) => {\n            return regex.test(cmdName);\n        })?.args ?? 0;\n        const argsToSerialize = nArgsToSerialize >= 0 ? cmdArgs.slice(0, nArgsToSerialize) : cmdArgs;\n        if (cmdArgs.length > argsToSerialize.length) {\n            argsToSerialize.push(`[${cmdArgs.length - nArgsToSerialize} other arguments]`);\n        }\n        return `${cmdName} ${argsToSerialize.join(' ')}`;\n    }\n    return cmdName;\n};\nexports.defaultDbStatementSerializer = defaultDbStatementSerializer;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3JlZGlzLWNvbW1vbi9idWlsZC9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhEQUE4RCxPQUFPO0FBQ3JFO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxxQ0FBcUMsbUNBQW1DO0FBQ3hFO0FBQ0Esa0JBQWtCLFNBQVMsRUFBRSwwQkFBMEI7QUFDdkQ7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3JlZGlzLWNvbW1vbi9idWlsZC9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWZhdWx0RGJTdGF0ZW1lbnRTZXJpYWxpemVyID0gdm9pZCAwO1xuLyoqXG4gKiBMaXN0IG9mIHJlZ2V4ZXMgYW5kIHRoZSBudW1iZXIgb2YgYXJndW1lbnRzIHRoYXQgc2hvdWxkIGJlIHNlcmlhbGl6ZWQgZm9yIG1hdGNoaW5nIGNvbW1hbmRzLlxuICogRm9yIGV4YW1wbGUsIEhTRVQgc2hvdWxkIHNlcmlhbGl6ZSB3aGljaCBrZXkgYW5kIGZpZWxkIGl0J3Mgb3BlcmF0aW5nIG9uLCBidXQgbm90IGl0cyB2YWx1ZS5cbiAqIFNldHRpbmcgdGhlIHN1YnNldCB0byAtMSB3aWxsIHNlcmlhbGl6ZSBhbGwgYXJndW1lbnRzLlxuICogQ29tbWFuZHMgd2l0aG91dCBhIG1hdGNoIHdpbGwgaGF2ZSB0aGVpciBmaXJzdCBhcmd1bWVudCBzZXJpYWxpemVkLlxuICpcbiAqIFJlZmVyIHRvIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvIGZvciB0aGUgZnVsbCBsaXN0LlxuICovXG5jb25zdCBzZXJpYWxpemF0aW9uU3Vic2V0cyA9IFtcbiAgICB7XG4gICAgICAgIHJlZ2V4OiAvXkVDSE8vaSxcbiAgICAgICAgYXJnczogMCxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgcmVnZXg6IC9eKExQVVNIfE1TRVR8UEZBfFBVQkxJU0h8UlBVU0h8U0FERHxTRVR8U1BVQkxJU0h8WEFERHxaQUREKS9pLFxuICAgICAgICBhcmdzOiAxLFxuICAgIH0sXG4gICAge1xuICAgICAgICByZWdleDogL14oSFNFVHxITVNFVHxMU0VUfExJTlNFUlQpL2ksXG4gICAgICAgIGFyZ3M6IDIsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHJlZ2V4OiAvXihBQ0x8QklUfEJbTFJaXXxDTElFTlR8Q0xVU1RFUnxDT05GSUd8Q09NTUFORHxERUNSfERFTHxFVkFMfEVYfEZVTkNUSU9OfEdFT3xHRVR8SElOQ1J8SE1HRVR8SFNDQU58SU5DUnxMW1RSTE1dfE1FTU9SWXxQW0VGSVNUVV18UlBPUHxTW0NESU1PUlNVXXxYQUNLfFhbQ0RHSUxQUlRdfFpbQ0RJTE1QUlNdKS9pLFxuICAgICAgICBhcmdzOiAtMSxcbiAgICB9LFxuXTtcbi8qKlxuICogR2l2ZW4gdGhlIHJlZGlzIGNvbW1hbmQgbmFtZSBhbmQgYXJndW1lbnRzLCByZXR1cm4gYSBjb21iaW5hdGlvbiBvZiB0aGVcbiAqIGNvbW1hbmQgbmFtZSArIHRoZSBhbGxvd2VkIGFyZ3VtZW50cyBhY2NvcmRpbmcgdG8gYHNlcmlhbGl6YXRpb25TdWJzZXRzYC5cbiAqIEBwYXJhbSBjbWROYW1lIFRoZSByZWRpcyBjb21tYW5kIG5hbWVcbiAqIEBwYXJhbSBjbWRBcmdzIFRoZSByZWRpcyBjb21tYW5kIGFyZ3VtZW50c1xuICogQHJldHVybnMgYSBjb21iaW5hdGlvbiBvZiB0aGUgY29tbWFuZCBuYW1lICsgYXJncyBhY2NvcmRpbmcgdG8gYHNlcmlhbGl6YXRpb25TdWJzZXRzYC5cbiAqL1xuY29uc3QgZGVmYXVsdERiU3RhdGVtZW50U2VyaWFsaXplciA9IChjbWROYW1lLCBjbWRBcmdzKSA9PiB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY21kQXJncykgJiYgY21kQXJncy5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgbkFyZ3NUb1NlcmlhbGl6ZSA9IHNlcmlhbGl6YXRpb25TdWJzZXRzLmZpbmQoKHsgcmVnZXggfSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHJlZ2V4LnRlc3QoY21kTmFtZSk7XG4gICAgICAgIH0pPy5hcmdzID8/IDA7XG4gICAgICAgIGNvbnN0IGFyZ3NUb1NlcmlhbGl6ZSA9IG5BcmdzVG9TZXJpYWxpemUgPj0gMCA/IGNtZEFyZ3Muc2xpY2UoMCwgbkFyZ3NUb1NlcmlhbGl6ZSkgOiBjbWRBcmdzO1xuICAgICAgICBpZiAoY21kQXJncy5sZW5ndGggPiBhcmdzVG9TZXJpYWxpemUubGVuZ3RoKSB7XG4gICAgICAgICAgICBhcmdzVG9TZXJpYWxpemUucHVzaChgWyR7Y21kQXJncy5sZW5ndGggLSBuQXJnc1RvU2VyaWFsaXplfSBvdGhlciBhcmd1bWVudHNdYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGAke2NtZE5hbWV9ICR7YXJnc1RvU2VyaWFsaXplLmpvaW4oJyAnKX1gO1xuICAgIH1cbiAgICByZXR1cm4gY21kTmFtZTtcbn07XG5leHBvcnRzLmRlZmF1bHREYlN0YXRlbWVudFNlcmlhbGl6ZXIgPSBkZWZhdWx0RGJTdGF0ZW1lbnRTZXJpYWxpemVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/redis-common/build/src/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/resources/build/esm/ResourceImpl.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@opentelemetry/resources/build/esm/ResourceImpl.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultResource: () => (/* binding */ defaultResource),\n/* harmony export */   emptyResource: () => (/* binding */ emptyResource),\n/* harmony export */   resourceFromAttributes: () => (/* binding */ resourceFromAttributes),\n/* harmony export */   resourceFromDetectedResource: () => (/* binding */ resourceFromDetectedResource)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/diag-api.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/platform/node/sdk-info.js\");\n/* harmony import */ var _opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/stable_attributes.js\");\n/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./platform */ \"(instrument)/./node_modules/@opentelemetry/resources/build/esm/platform/node/default-service-name.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ \"(instrument)/./node_modules/@opentelemetry/resources/build/esm/utils.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\nclass ResourceImpl {\n    _rawAttributes;\n    _asyncAttributesPending = false;\n    _memoizedAttributes;\n    static FromAttributeList(attributes) {\n        const res = new ResourceImpl({});\n        res._rawAttributes = guardedRawAttributes(attributes);\n        res._asyncAttributesPending =\n            attributes.filter(([_, val]) => (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isPromiseLike)(val)).length > 0;\n        return res;\n    }\n    constructor(\n    /**\n     * A dictionary of attributes with string keys and values that provide\n     * information about the entity as numbers, strings or booleans\n     * TODO: Consider to add check/validation on attributes.\n     */\n    resource) {\n        const attributes = resource.attributes ?? {};\n        this._rawAttributes = Object.entries(attributes).map(([k, v]) => {\n            if ((0,_utils__WEBPACK_IMPORTED_MODULE_0__.isPromiseLike)(v)) {\n                // side-effect\n                this._asyncAttributesPending = true;\n            }\n            return [k, v];\n        });\n        this._rawAttributes = guardedRawAttributes(this._rawAttributes);\n    }\n    get asyncAttributesPending() {\n        return this._asyncAttributesPending;\n    }\n    async waitForAsyncAttributes() {\n        if (!this.asyncAttributesPending) {\n            return;\n        }\n        for (let i = 0; i < this._rawAttributes.length; i++) {\n            const [k, v] = this._rawAttributes[i];\n            this._rawAttributes[i] = [k, (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isPromiseLike)(v) ? await v : v];\n        }\n        this._asyncAttributesPending = false;\n    }\n    get attributes() {\n        if (this.asyncAttributesPending) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__.diag.error('Accessing resource attributes before async attributes settled');\n        }\n        if (this._memoizedAttributes) {\n            return this._memoizedAttributes;\n        }\n        const attrs = {};\n        for (const [k, v] of this._rawAttributes) {\n            if ((0,_utils__WEBPACK_IMPORTED_MODULE_0__.isPromiseLike)(v)) {\n                _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__.diag.debug(`Unsettled resource attribute ${k} skipped`);\n                continue;\n            }\n            if (v != null) {\n                attrs[k] ??= v;\n            }\n        }\n        // only memoize output if all attributes are settled\n        if (!this._asyncAttributesPending) {\n            this._memoizedAttributes = attrs;\n        }\n        return attrs;\n    }\n    getRawAttributes() {\n        return this._rawAttributes;\n    }\n    merge(resource) {\n        if (resource == null)\n            return this;\n        // Order is important\n        // Spec states incoming attributes override existing attributes\n        return ResourceImpl.FromAttributeList([\n            ...resource.getRawAttributes(),\n            ...this.getRawAttributes(),\n        ]);\n    }\n}\nfunction resourceFromAttributes(attributes) {\n    return ResourceImpl.FromAttributeList(Object.entries(attributes));\n}\nfunction resourceFromDetectedResource(detectedResource) {\n    return new ResourceImpl(detectedResource);\n}\nfunction emptyResource() {\n    return resourceFromAttributes({});\n}\nfunction defaultResource() {\n    return resourceFromAttributes({\n        [_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_2__.ATTR_SERVICE_NAME]: (0,_platform__WEBPACK_IMPORTED_MODULE_3__.defaultServiceName)(),\n        [_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_2__.ATTR_TELEMETRY_SDK_LANGUAGE]: _opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__.SDK_INFO[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_2__.ATTR_TELEMETRY_SDK_LANGUAGE],\n        [_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_2__.ATTR_TELEMETRY_SDK_NAME]: _opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__.SDK_INFO[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_2__.ATTR_TELEMETRY_SDK_NAME],\n        [_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_2__.ATTR_TELEMETRY_SDK_VERSION]: _opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__.SDK_INFO[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_2__.ATTR_TELEMETRY_SDK_VERSION],\n    });\n}\nfunction guardedRawAttributes(attributes) {\n    return attributes.map(([k, v]) => {\n        if ((0,_utils__WEBPACK_IMPORTED_MODULE_0__.isPromiseLike)(v)) {\n            return [\n                k,\n                v.catch(err => {\n                    _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__.diag.debug('promise rejection for resource attribute: %s - %s', k, err);\n                    return undefined;\n                }),\n            ];\n        }\n        return [k, v];\n    });\n}\n//# sourceMappingURL=ResourceImpl.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Jlc291cmNlcy9idWlsZC9lc20vUmVzb3VyY2VJbXBsLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUMwQztBQUNLO0FBQzRHO0FBQzNHO0FBQ1I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QztBQUN2QztBQUNBO0FBQ0EsNENBQTRDLHFEQUFhO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IscURBQWE7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdDQUFnQztBQUN4RDtBQUNBLHlDQUF5QyxxREFBYTtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxvREFBSTtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IscURBQWE7QUFDN0IsZ0JBQWdCLG9EQUFJLHVDQUF1QyxHQUFHO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDTztBQUNQLG9DQUFvQztBQUNwQztBQUNPO0FBQ1A7QUFDQSxTQUFTLGtGQUFpQixHQUFHLDZEQUFrQjtBQUMvQyxTQUFTLDRGQUEyQixHQUFHLHlEQUFRLENBQUMsNEZBQTJCO0FBQzNFLFNBQVMsd0ZBQXVCLEdBQUcseURBQVEsQ0FBQyx3RkFBdUI7QUFDbkUsU0FBUywyRkFBMEIsR0FBRyx5REFBUSxDQUFDLDJGQUEwQjtBQUN6RSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsWUFBWSxxREFBYTtBQUN6QjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isb0RBQUk7QUFDeEI7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvcmVzb3VyY2VzL2J1aWxkL2VzbS9SZXNvdXJjZUltcGwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IGRpYWcgfSBmcm9tICdAb3BlbnRlbGVtZXRyeS9hcGknO1xuaW1wb3J0IHsgU0RLX0lORk8gfSBmcm9tICdAb3BlbnRlbGVtZXRyeS9jb3JlJztcbmltcG9ydCB7IEFUVFJfU0VSVklDRV9OQU1FLCBBVFRSX1RFTEVNRVRSWV9TREtfTEFOR1VBR0UsIEFUVFJfVEVMRU1FVFJZX1NES19OQU1FLCBBVFRSX1RFTEVNRVRSWV9TREtfVkVSU0lPTiwgfSBmcm9tICdAb3BlbnRlbGVtZXRyeS9zZW1hbnRpYy1jb252ZW50aW9ucyc7XG5pbXBvcnQgeyBkZWZhdWx0U2VydmljZU5hbWUgfSBmcm9tICcuL3BsYXRmb3JtJztcbmltcG9ydCB7IGlzUHJvbWlzZUxpa2UgfSBmcm9tICcuL3V0aWxzJztcbmNsYXNzIFJlc291cmNlSW1wbCB7XG4gICAgX3Jhd0F0dHJpYnV0ZXM7XG4gICAgX2FzeW5jQXR0cmlidXRlc1BlbmRpbmcgPSBmYWxzZTtcbiAgICBfbWVtb2l6ZWRBdHRyaWJ1dGVzO1xuICAgIHN0YXRpYyBGcm9tQXR0cmlidXRlTGlzdChhdHRyaWJ1dGVzKSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IG5ldyBSZXNvdXJjZUltcGwoe30pO1xuICAgICAgICByZXMuX3Jhd0F0dHJpYnV0ZXMgPSBndWFyZGVkUmF3QXR0cmlidXRlcyhhdHRyaWJ1dGVzKTtcbiAgICAgICAgcmVzLl9hc3luY0F0dHJpYnV0ZXNQZW5kaW5nID1cbiAgICAgICAgICAgIGF0dHJpYnV0ZXMuZmlsdGVyKChbXywgdmFsXSkgPT4gaXNQcm9taXNlTGlrZSh2YWwpKS5sZW5ndGggPiAwO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICAgKiBBIGRpY3Rpb25hcnkgb2YgYXR0cmlidXRlcyB3aXRoIHN0cmluZyBrZXlzIGFuZCB2YWx1ZXMgdGhhdCBwcm92aWRlXG4gICAgICogaW5mb3JtYXRpb24gYWJvdXQgdGhlIGVudGl0eSBhcyBudW1iZXJzLCBzdHJpbmdzIG9yIGJvb2xlYW5zXG4gICAgICogVE9ETzogQ29uc2lkZXIgdG8gYWRkIGNoZWNrL3ZhbGlkYXRpb24gb24gYXR0cmlidXRlcy5cbiAgICAgKi9cbiAgICByZXNvdXJjZSkge1xuICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gcmVzb3VyY2UuYXR0cmlidXRlcyA/PyB7fTtcbiAgICAgICAgdGhpcy5fcmF3QXR0cmlidXRlcyA9IE9iamVjdC5lbnRyaWVzKGF0dHJpYnV0ZXMpLm1hcCgoW2ssIHZdKSA9PiB7XG4gICAgICAgICAgICBpZiAoaXNQcm9taXNlTGlrZSh2KSkge1xuICAgICAgICAgICAgICAgIC8vIHNpZGUtZWZmZWN0XG4gICAgICAgICAgICAgICAgdGhpcy5fYXN5bmNBdHRyaWJ1dGVzUGVuZGluZyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gW2ssIHZdO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fcmF3QXR0cmlidXRlcyA9IGd1YXJkZWRSYXdBdHRyaWJ1dGVzKHRoaXMuX3Jhd0F0dHJpYnV0ZXMpO1xuICAgIH1cbiAgICBnZXQgYXN5bmNBdHRyaWJ1dGVzUGVuZGluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FzeW5jQXR0cmlidXRlc1BlbmRpbmc7XG4gICAgfVxuICAgIGFzeW5jIHdhaXRGb3JBc3luY0F0dHJpYnV0ZXMoKSB7XG4gICAgICAgIGlmICghdGhpcy5hc3luY0F0dHJpYnV0ZXNQZW5kaW5nKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9yYXdBdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBbaywgdl0gPSB0aGlzLl9yYXdBdHRyaWJ1dGVzW2ldO1xuICAgICAgICAgICAgdGhpcy5fcmF3QXR0cmlidXRlc1tpXSA9IFtrLCBpc1Byb21pc2VMaWtlKHYpID8gYXdhaXQgdiA6IHZdO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2FzeW5jQXR0cmlidXRlc1BlbmRpbmcgPSBmYWxzZTtcbiAgICB9XG4gICAgZ2V0IGF0dHJpYnV0ZXMoKSB7XG4gICAgICAgIGlmICh0aGlzLmFzeW5jQXR0cmlidXRlc1BlbmRpbmcpIHtcbiAgICAgICAgICAgIGRpYWcuZXJyb3IoJ0FjY2Vzc2luZyByZXNvdXJjZSBhdHRyaWJ1dGVzIGJlZm9yZSBhc3luYyBhdHRyaWJ1dGVzIHNldHRsZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fbWVtb2l6ZWRBdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbWVtb2l6ZWRBdHRyaWJ1dGVzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGF0dHJzID0ge307XG4gICAgICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIHRoaXMuX3Jhd0F0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgIGlmIChpc1Byb21pc2VMaWtlKHYpKSB7XG4gICAgICAgICAgICAgICAgZGlhZy5kZWJ1ZyhgVW5zZXR0bGVkIHJlc291cmNlIGF0dHJpYnV0ZSAke2t9IHNraXBwZWRgKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh2ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBhdHRyc1trXSA/Pz0gdjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBvbmx5IG1lbW9pemUgb3V0cHV0IGlmIGFsbCBhdHRyaWJ1dGVzIGFyZSBzZXR0bGVkXG4gICAgICAgIGlmICghdGhpcy5fYXN5bmNBdHRyaWJ1dGVzUGVuZGluZykge1xuICAgICAgICAgICAgdGhpcy5fbWVtb2l6ZWRBdHRyaWJ1dGVzID0gYXR0cnM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGF0dHJzO1xuICAgIH1cbiAgICBnZXRSYXdBdHRyaWJ1dGVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmF3QXR0cmlidXRlcztcbiAgICB9XG4gICAgbWVyZ2UocmVzb3VyY2UpIHtcbiAgICAgICAgaWYgKHJlc291cmNlID09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgLy8gT3JkZXIgaXMgaW1wb3J0YW50XG4gICAgICAgIC8vIFNwZWMgc3RhdGVzIGluY29taW5nIGF0dHJpYnV0ZXMgb3ZlcnJpZGUgZXhpc3RpbmcgYXR0cmlidXRlc1xuICAgICAgICByZXR1cm4gUmVzb3VyY2VJbXBsLkZyb21BdHRyaWJ1dGVMaXN0KFtcbiAgICAgICAgICAgIC4uLnJlc291cmNlLmdldFJhd0F0dHJpYnV0ZXMoKSxcbiAgICAgICAgICAgIC4uLnRoaXMuZ2V0UmF3QXR0cmlidXRlcygpLFxuICAgICAgICBdKTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gcmVzb3VyY2VGcm9tQXR0cmlidXRlcyhhdHRyaWJ1dGVzKSB7XG4gICAgcmV0dXJuIFJlc291cmNlSW1wbC5Gcm9tQXR0cmlidXRlTGlzdChPYmplY3QuZW50cmllcyhhdHRyaWJ1dGVzKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gcmVzb3VyY2VGcm9tRGV0ZWN0ZWRSZXNvdXJjZShkZXRlY3RlZFJlc291cmNlKSB7XG4gICAgcmV0dXJuIG5ldyBSZXNvdXJjZUltcGwoZGV0ZWN0ZWRSZXNvdXJjZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZW1wdHlSZXNvdXJjZSgpIHtcbiAgICByZXR1cm4gcmVzb3VyY2VGcm9tQXR0cmlidXRlcyh7fSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdFJlc291cmNlKCkge1xuICAgIHJldHVybiByZXNvdXJjZUZyb21BdHRyaWJ1dGVzKHtcbiAgICAgICAgW0FUVFJfU0VSVklDRV9OQU1FXTogZGVmYXVsdFNlcnZpY2VOYW1lKCksXG4gICAgICAgIFtBVFRSX1RFTEVNRVRSWV9TREtfTEFOR1VBR0VdOiBTREtfSU5GT1tBVFRSX1RFTEVNRVRSWV9TREtfTEFOR1VBR0VdLFxuICAgICAgICBbQVRUUl9URUxFTUVUUllfU0RLX05BTUVdOiBTREtfSU5GT1tBVFRSX1RFTEVNRVRSWV9TREtfTkFNRV0sXG4gICAgICAgIFtBVFRSX1RFTEVNRVRSWV9TREtfVkVSU0lPTl06IFNES19JTkZPW0FUVFJfVEVMRU1FVFJZX1NES19WRVJTSU9OXSxcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGd1YXJkZWRSYXdBdHRyaWJ1dGVzKGF0dHJpYnV0ZXMpIHtcbiAgICByZXR1cm4gYXR0cmlidXRlcy5tYXAoKFtrLCB2XSkgPT4ge1xuICAgICAgICBpZiAoaXNQcm9taXNlTGlrZSh2KSkge1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICBrLFxuICAgICAgICAgICAgICAgIHYuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZGlhZy5kZWJ1ZygncHJvbWlzZSByZWplY3Rpb24gZm9yIHJlc291cmNlIGF0dHJpYnV0ZTogJXMgLSAlcycsIGssIGVycik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbaywgdl07XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1SZXNvdXJjZUltcGwuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/resources/build/esm/ResourceImpl.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/resources/build/esm/detect-resources.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@opentelemetry/resources/build/esm/detect-resources.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   detectResources: () => (/* binding */ detectResources)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/diag-api.js\");\n/* harmony import */ var _ResourceImpl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ResourceImpl */ \"(instrument)/./node_modules/@opentelemetry/resources/build/esm/ResourceImpl.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Runs all resource detectors and returns the results merged into a single Resource.\n *\n * @param config Configuration for resource detection\n */\nconst detectResources = (config = {}) => {\n    const resources = (config.detectors || []).map(d => {\n        try {\n            const resource = (0,_ResourceImpl__WEBPACK_IMPORTED_MODULE_0__.resourceFromDetectedResource)(d.detect(config));\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__.diag.debug(`${d.constructor.name} found resource.`, resource);\n            return resource;\n        }\n        catch (e) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__.diag.debug(`${d.constructor.name} failed: ${e.message}`);\n            return (0,_ResourceImpl__WEBPACK_IMPORTED_MODULE_0__.emptyResource)();\n        }\n    });\n    return resources.reduce((acc, resource) => acc.merge(resource), (0,_ResourceImpl__WEBPACK_IMPORTED_MODULE_0__.emptyResource)());\n};\n//# sourceMappingURL=detect-resources.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Jlc291cmNlcy9idWlsZC9lc20vZGV0ZWN0LXJlc291cmNlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDMEM7QUFDbUM7QUFDN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLG9DQUFvQztBQUMzQztBQUNBO0FBQ0EsNkJBQTZCLDJFQUE0QjtBQUN6RCxZQUFZLG9EQUFJLFVBQVUsb0JBQW9CO0FBQzlDO0FBQ0E7QUFDQTtBQUNBLFlBQVksb0RBQUksVUFBVSxvQkFBb0IsVUFBVSxVQUFVO0FBQ2xFLG1CQUFtQiw0REFBYTtBQUNoQztBQUNBLEtBQUs7QUFDTCxvRUFBb0UsNERBQWE7QUFDakY7QUFDQSIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9yZXNvdXJjZXMvYnVpbGQvZXNtL2RldGVjdC1yZXNvdXJjZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IGRpYWcgfSBmcm9tICdAb3BlbnRlbGVtZXRyeS9hcGknO1xuaW1wb3J0IHsgZW1wdHlSZXNvdXJjZSwgcmVzb3VyY2VGcm9tRGV0ZWN0ZWRSZXNvdXJjZSB9IGZyb20gJy4vUmVzb3VyY2VJbXBsJztcbi8qKlxuICogUnVucyBhbGwgcmVzb3VyY2UgZGV0ZWN0b3JzIGFuZCByZXR1cm5zIHRoZSByZXN1bHRzIG1lcmdlZCBpbnRvIGEgc2luZ2xlIFJlc291cmNlLlxuICpcbiAqIEBwYXJhbSBjb25maWcgQ29uZmlndXJhdGlvbiBmb3IgcmVzb3VyY2UgZGV0ZWN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBkZXRlY3RSZXNvdXJjZXMgPSAoY29uZmlnID0ge30pID0+IHtcbiAgICBjb25zdCByZXNvdXJjZXMgPSAoY29uZmlnLmRldGVjdG9ycyB8fCBbXSkubWFwKGQgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzb3VyY2UgPSByZXNvdXJjZUZyb21EZXRlY3RlZFJlc291cmNlKGQuZGV0ZWN0KGNvbmZpZykpO1xuICAgICAgICAgICAgZGlhZy5kZWJ1ZyhgJHtkLmNvbnN0cnVjdG9yLm5hbWV9IGZvdW5kIHJlc291cmNlLmAsIHJlc291cmNlKTtcbiAgICAgICAgICAgIHJldHVybiByZXNvdXJjZTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgZGlhZy5kZWJ1ZyhgJHtkLmNvbnN0cnVjdG9yLm5hbWV9IGZhaWxlZDogJHtlLm1lc3NhZ2V9YCk7XG4gICAgICAgICAgICByZXR1cm4gZW1wdHlSZXNvdXJjZSgpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc291cmNlcy5yZWR1Y2UoKGFjYywgcmVzb3VyY2UpID0+IGFjYy5tZXJnZShyZXNvdXJjZSksIGVtcHR5UmVzb3VyY2UoKSk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGV0ZWN0LXJlc291cmNlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/resources/build/esm/detect-resources.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/resources/build/esm/detectors/EnvDetector.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/resources/build/esm/detectors/EnvDetector.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   envDetector: () => (/* binding */ envDetector)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/diag-api.js\");\n/* harmony import */ var _opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/stable_attributes.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/platform/node/environment.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * EnvDetector can be used to detect the presence of and create a Resource\n * from the OTEL_RESOURCE_ATTRIBUTES environment variable.\n */\nclass EnvDetector {\n    // Type, attribute keys, and attribute values should not exceed 256 characters.\n    _MAX_LENGTH = 255;\n    // OTEL_RESOURCE_ATTRIBUTES is a comma-separated list of attributes.\n    _COMMA_SEPARATOR = ',';\n    // OTEL_RESOURCE_ATTRIBUTES contains key value pair separated by '='.\n    _LABEL_KEY_VALUE_SPLITTER = '=';\n    _ERROR_MESSAGE_INVALID_CHARS = 'should be a ASCII string with a length greater than 0 and not exceed ' +\n        this._MAX_LENGTH +\n        ' characters.';\n    _ERROR_MESSAGE_INVALID_VALUE = 'should be a ASCII string with a length not exceed ' +\n        this._MAX_LENGTH +\n        ' characters.';\n    /**\n     * Returns a {@link Resource} populated with attributes from the\n     * OTEL_RESOURCE_ATTRIBUTES environment variable. Note this is an async\n     * function to conform to the Detector interface.\n     *\n     * @param config The resource detection config\n     */\n    detect(_config) {\n        const attributes = {};\n        const rawAttributes = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.getStringFromEnv)('OTEL_RESOURCE_ATTRIBUTES');\n        const serviceName = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.getStringFromEnv)('OTEL_SERVICE_NAME');\n        if (rawAttributes) {\n            try {\n                const parsedAttributes = this._parseResourceAttributes(rawAttributes);\n                Object.assign(attributes, parsedAttributes);\n            }\n            catch (e) {\n                _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__.diag.debug(`EnvDetector failed: ${e.message}`);\n            }\n        }\n        if (serviceName) {\n            attributes[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_2__.ATTR_SERVICE_NAME] = serviceName;\n        }\n        return { attributes };\n    }\n    /**\n     * Creates an attribute map from the OTEL_RESOURCE_ATTRIBUTES environment\n     * variable.\n     *\n     * OTEL_RESOURCE_ATTRIBUTES: A comma-separated list of attributes describing\n     * the source in more detail, e.g. “key1=val1,key2=val2”. Domain names and\n     * paths are accepted as attribute keys. Values may be quoted or unquoted in\n     * general. If a value contains whitespace, =, or \" characters, it must\n     * always be quoted.\n     *\n     * @param rawEnvAttributes The resource attributes as a comma-separated list\n     * of key/value pairs.\n     * @returns The sanitized resource attributes.\n     */\n    _parseResourceAttributes(rawEnvAttributes) {\n        if (!rawEnvAttributes)\n            return {};\n        const attributes = {};\n        const rawAttributes = rawEnvAttributes.split(this._COMMA_SEPARATOR, -1);\n        for (const rawAttribute of rawAttributes) {\n            const keyValuePair = rawAttribute.split(this._LABEL_KEY_VALUE_SPLITTER, -1);\n            if (keyValuePair.length !== 2) {\n                continue;\n            }\n            let [key, value] = keyValuePair;\n            // Leading and trailing whitespaces are trimmed.\n            key = key.trim();\n            value = value.trim().split(/^\"|\"$/).join('');\n            if (!this._isValidAndNotEmpty(key)) {\n                throw new Error(`Attribute key ${this._ERROR_MESSAGE_INVALID_CHARS}`);\n            }\n            if (!this._isValid(value)) {\n                throw new Error(`Attribute value ${this._ERROR_MESSAGE_INVALID_VALUE}`);\n            }\n            attributes[key] = decodeURIComponent(value);\n        }\n        return attributes;\n    }\n    /**\n     * Determines whether the given String is a valid printable ASCII string with\n     * a length not exceed _MAX_LENGTH characters.\n     *\n     * @param str The String to be validated.\n     * @returns Whether the String is valid.\n     */\n    _isValid(name) {\n        return name.length <= this._MAX_LENGTH && this._isBaggageOctetString(name);\n    }\n    // https://www.w3.org/TR/baggage/#definition\n    _isBaggageOctetString(str) {\n        for (let i = 0; i < str.length; i++) {\n            const ch = str.charCodeAt(i);\n            if (ch < 0x21 || ch === 0x2c || ch === 0x3b || ch === 0x5c || ch > 0x7e) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Determines whether the given String is a valid printable ASCII string with\n     * a length greater than 0 and not exceed _MAX_LENGTH characters.\n     *\n     * @param str The String to be validated.\n     * @returns Whether the String is valid and not empty.\n     */\n    _isValidAndNotEmpty(str) {\n        return str.length > 0 && this._isValid(str);\n    }\n}\nconst envDetector = new EnvDetector();\n//# sourceMappingURL=EnvDetector.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/resources/build/esm/detectors/EnvDetector.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/HostDetector.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/HostDetector.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hostDetector: () => (/* binding */ hostDetector)\n/* harmony export */ });\n/* harmony import */ var _semconv__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../semconv */ \"(instrument)/./node_modules/@opentelemetry/resources/build/esm/semconv.js\");\n/* harmony import */ var os__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! os */ \"os\");\n/* harmony import */ var os__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(os__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _machine_id_getMachineId__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./machine-id/getMachineId */ \"(instrument)/./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/machine-id/getMachineId.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ \"(instrument)/./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/utils.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n/**\n * HostDetector detects the resources related to the host current process is\n * running on. Currently only non-cloud-based attributes are included.\n */\nclass HostDetector {\n    detect(_config) {\n        const attributes = {\n            [_semconv__WEBPACK_IMPORTED_MODULE_1__.ATTR_HOST_NAME]: (0,os__WEBPACK_IMPORTED_MODULE_0__.hostname)(),\n            [_semconv__WEBPACK_IMPORTED_MODULE_1__.ATTR_HOST_ARCH]: (0,_utils__WEBPACK_IMPORTED_MODULE_2__.normalizeArch)((0,os__WEBPACK_IMPORTED_MODULE_0__.arch)()),\n            [_semconv__WEBPACK_IMPORTED_MODULE_1__.ATTR_HOST_ID]: (0,_machine_id_getMachineId__WEBPACK_IMPORTED_MODULE_3__.getMachineId)(),\n        };\n        return { attributes };\n    }\n}\nconst hostDetector = new HostDetector();\n//# sourceMappingURL=HostDetector.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Jlc291cmNlcy9idWlsZC9lc20vZGV0ZWN0b3JzL3BsYXRmb3JtL25vZGUvSG9zdERldGVjdG9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNnRjtBQUM1QztBQUNxQjtBQUNqQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsb0RBQWMsR0FBRyw0Q0FBUTtBQUN0QyxhQUFhLG9EQUFjLEdBQUcscURBQWEsQ0FBQyx3Q0FBSTtBQUNoRCxhQUFhLGtEQUFZLEdBQUcsc0VBQVk7QUFDeEM7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNPO0FBQ1AiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvcmVzb3VyY2VzL2J1aWxkL2VzbS9kZXRlY3RvcnMvcGxhdGZvcm0vbm9kZS9Ib3N0RGV0ZWN0b3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IEFUVFJfSE9TVF9BUkNILCBBVFRSX0hPU1RfSUQsIEFUVFJfSE9TVF9OQU1FIH0gZnJvbSAnLi4vLi4vLi4vc2VtY29udic7XG5pbXBvcnQgeyBhcmNoLCBob3N0bmFtZSB9IGZyb20gJ29zJztcbmltcG9ydCB7IGdldE1hY2hpbmVJZCB9IGZyb20gJy4vbWFjaGluZS1pZC9nZXRNYWNoaW5lSWQnO1xuaW1wb3J0IHsgbm9ybWFsaXplQXJjaCB9IGZyb20gJy4vdXRpbHMnO1xuLyoqXG4gKiBIb3N0RGV0ZWN0b3IgZGV0ZWN0cyB0aGUgcmVzb3VyY2VzIHJlbGF0ZWQgdG8gdGhlIGhvc3QgY3VycmVudCBwcm9jZXNzIGlzXG4gKiBydW5uaW5nIG9uLiBDdXJyZW50bHkgb25seSBub24tY2xvdWQtYmFzZWQgYXR0cmlidXRlcyBhcmUgaW5jbHVkZWQuXG4gKi9cbmNsYXNzIEhvc3REZXRlY3RvciB7XG4gICAgZGV0ZWN0KF9jb25maWcpIHtcbiAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IHtcbiAgICAgICAgICAgIFtBVFRSX0hPU1RfTkFNRV06IGhvc3RuYW1lKCksXG4gICAgICAgICAgICBbQVRUUl9IT1NUX0FSQ0hdOiBub3JtYWxpemVBcmNoKGFyY2goKSksXG4gICAgICAgICAgICBbQVRUUl9IT1NUX0lEXTogZ2V0TWFjaGluZUlkKCksXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB7IGF0dHJpYnV0ZXMgfTtcbiAgICB9XG59XG5leHBvcnQgY29uc3QgaG9zdERldGVjdG9yID0gbmV3IEhvc3REZXRlY3RvcigpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SG9zdERldGVjdG9yLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/HostDetector.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/OSDetector.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/OSDetector.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   osDetector: () => (/* binding */ osDetector)\n/* harmony export */ });\n/* harmony import */ var _semconv__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../semconv */ \"(instrument)/./node_modules/@opentelemetry/resources/build/esm/semconv.js\");\n/* harmony import */ var os__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! os */ \"os\");\n/* harmony import */ var os__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(os__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ \"(instrument)/./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/utils.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * OSDetector detects the resources related to the operating system (OS) on\n * which the process represented by this resource is running.\n */\nclass OSDetector {\n    detect(_config) {\n        const attributes = {\n            [_semconv__WEBPACK_IMPORTED_MODULE_1__.ATTR_OS_TYPE]: (0,_utils__WEBPACK_IMPORTED_MODULE_2__.normalizeType)((0,os__WEBPACK_IMPORTED_MODULE_0__.platform)()),\n            [_semconv__WEBPACK_IMPORTED_MODULE_1__.ATTR_OS_VERSION]: (0,os__WEBPACK_IMPORTED_MODULE_0__.release)(),\n        };\n        return { attributes };\n    }\n}\nconst osDetector = new OSDetector();\n//# sourceMappingURL=OSDetector.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Jlc291cmNlcy9idWlsZC9lc20vZGV0ZWN0b3JzL3BsYXRmb3JtL25vZGUvT1NEZXRlY3Rvci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNpRTtBQUMxQjtBQUNDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxrREFBWSxHQUFHLHFEQUFhLENBQUMsNENBQVE7QUFDbEQsYUFBYSxxREFBZSxHQUFHLDJDQUFPO0FBQ3RDO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDTztBQUNQIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Jlc291cmNlcy9idWlsZC9lc20vZGV0ZWN0b3JzL3BsYXRmb3JtL25vZGUvT1NEZXRlY3Rvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgQVRUUl9PU19UWVBFLCBBVFRSX09TX1ZFUlNJT04gfSBmcm9tICcuLi8uLi8uLi9zZW1jb252JztcbmltcG9ydCB7IHBsYXRmb3JtLCByZWxlYXNlIH0gZnJvbSAnb3MnO1xuaW1wb3J0IHsgbm9ybWFsaXplVHlwZSB9IGZyb20gJy4vdXRpbHMnO1xuLyoqXG4gKiBPU0RldGVjdG9yIGRldGVjdHMgdGhlIHJlc291cmNlcyByZWxhdGVkIHRvIHRoZSBvcGVyYXRpbmcgc3lzdGVtIChPUykgb25cbiAqIHdoaWNoIHRoZSBwcm9jZXNzIHJlcHJlc2VudGVkIGJ5IHRoaXMgcmVzb3VyY2UgaXMgcnVubmluZy5cbiAqL1xuY2xhc3MgT1NEZXRlY3RvciB7XG4gICAgZGV0ZWN0KF9jb25maWcpIHtcbiAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IHtcbiAgICAgICAgICAgIFtBVFRSX09TX1RZUEVdOiBub3JtYWxpemVUeXBlKHBsYXRmb3JtKCkpLFxuICAgICAgICAgICAgW0FUVFJfT1NfVkVSU0lPTl06IHJlbGVhc2UoKSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHsgYXR0cmlidXRlcyB9O1xuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBvc0RldGVjdG9yID0gbmV3IE9TRGV0ZWN0b3IoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9TRGV0ZWN0b3IuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/OSDetector.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/ProcessDetector.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/ProcessDetector.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   processDetector: () => (/* binding */ processDetector)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/diag-api.js\");\n/* harmony import */ var _semconv__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../semconv */ \"(instrument)/./node_modules/@opentelemetry/resources/build/esm/semconv.js\");\n/* harmony import */ var os__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! os */ \"os\");\n/* harmony import */ var os__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(os__WEBPACK_IMPORTED_MODULE_0__);\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * ProcessDetector will be used to detect the resources related current process running\n * and being instrumented from the NodeJS Process module.\n */\nclass ProcessDetector {\n    detect(_config) {\n        const attributes = {\n            [_semconv__WEBPACK_IMPORTED_MODULE_1__.ATTR_PROCESS_PID]: process.pid,\n            [_semconv__WEBPACK_IMPORTED_MODULE_1__.ATTR_PROCESS_EXECUTABLE_NAME]: process.title,\n            [_semconv__WEBPACK_IMPORTED_MODULE_1__.ATTR_PROCESS_EXECUTABLE_PATH]: process.execPath,\n            [_semconv__WEBPACK_IMPORTED_MODULE_1__.ATTR_PROCESS_COMMAND_ARGS]: [\n                process.argv[0],\n                ...process.execArgv,\n                ...process.argv.slice(1),\n            ],\n            [_semconv__WEBPACK_IMPORTED_MODULE_1__.ATTR_PROCESS_RUNTIME_VERSION]: process.versions.node,\n            [_semconv__WEBPACK_IMPORTED_MODULE_1__.ATTR_PROCESS_RUNTIME_NAME]: 'nodejs',\n            [_semconv__WEBPACK_IMPORTED_MODULE_1__.ATTR_PROCESS_RUNTIME_DESCRIPTION]: 'Node.js',\n        };\n        if (process.argv.length > 1) {\n            attributes[_semconv__WEBPACK_IMPORTED_MODULE_1__.ATTR_PROCESS_COMMAND] = process.argv[1];\n        }\n        try {\n            const userInfo = os__WEBPACK_IMPORTED_MODULE_0__.userInfo();\n            attributes[_semconv__WEBPACK_IMPORTED_MODULE_1__.ATTR_PROCESS_OWNER] = userInfo.username;\n        }\n        catch (e) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.diag.debug(`error obtaining process owner: ${e}`);\n        }\n        return { attributes };\n    }\n}\nconst processDetector = new ProcessDetector();\n//# sourceMappingURL=ProcessDetector.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Jlc291cmNlcy9idWlsZC9lc20vZGV0ZWN0b3JzL3BsYXRmb3JtL25vZGUvUHJvY2Vzc0RldGVjdG9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQzBDO0FBQ3VPO0FBQ3hQO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxzREFBZ0I7QUFDN0IsYUFBYSxrRUFBNEI7QUFDekMsYUFBYSxrRUFBNEI7QUFDekMsYUFBYSwrREFBeUI7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLGtFQUE0QjtBQUN6QyxhQUFhLCtEQUF5QjtBQUN0QyxhQUFhLHNFQUFnQztBQUM3QztBQUNBO0FBQ0EsdUJBQXVCLDBEQUFvQjtBQUMzQztBQUNBO0FBQ0EsNkJBQTZCLHdDQUFXO0FBQ3hDLHVCQUF1Qix3REFBa0I7QUFDekM7QUFDQTtBQUNBLFlBQVksb0RBQUkseUNBQXlDLEVBQUU7QUFDM0Q7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNPO0FBQ1AiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvcmVzb3VyY2VzL2J1aWxkL2VzbS9kZXRlY3RvcnMvcGxhdGZvcm0vbm9kZS9Qcm9jZXNzRGV0ZWN0b3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IGRpYWcgfSBmcm9tICdAb3BlbnRlbGVtZXRyeS9hcGknO1xuaW1wb3J0IHsgQVRUUl9QUk9DRVNTX0NPTU1BTkQsIEFUVFJfUFJPQ0VTU19DT01NQU5EX0FSR1MsIEFUVFJfUFJPQ0VTU19FWEVDVVRBQkxFX05BTUUsIEFUVFJfUFJPQ0VTU19FWEVDVVRBQkxFX1BBVEgsIEFUVFJfUFJPQ0VTU19PV05FUiwgQVRUUl9QUk9DRVNTX1BJRCwgQVRUUl9QUk9DRVNTX1JVTlRJTUVfREVTQ1JJUFRJT04sIEFUVFJfUFJPQ0VTU19SVU5USU1FX05BTUUsIEFUVFJfUFJPQ0VTU19SVU5USU1FX1ZFUlNJT04sIH0gZnJvbSAnLi4vLi4vLi4vc2VtY29udic7XG5pbXBvcnQgKiBhcyBvcyBmcm9tICdvcyc7XG4vKipcbiAqIFByb2Nlc3NEZXRlY3RvciB3aWxsIGJlIHVzZWQgdG8gZGV0ZWN0IHRoZSByZXNvdXJjZXMgcmVsYXRlZCBjdXJyZW50IHByb2Nlc3MgcnVubmluZ1xuICogYW5kIGJlaW5nIGluc3RydW1lbnRlZCBmcm9tIHRoZSBOb2RlSlMgUHJvY2VzcyBtb2R1bGUuXG4gKi9cbmNsYXNzIFByb2Nlc3NEZXRlY3RvciB7XG4gICAgZGV0ZWN0KF9jb25maWcpIHtcbiAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IHtcbiAgICAgICAgICAgIFtBVFRSX1BST0NFU1NfUElEXTogcHJvY2Vzcy5waWQsXG4gICAgICAgICAgICBbQVRUUl9QUk9DRVNTX0VYRUNVVEFCTEVfTkFNRV06IHByb2Nlc3MudGl0bGUsXG4gICAgICAgICAgICBbQVRUUl9QUk9DRVNTX0VYRUNVVEFCTEVfUEFUSF06IHByb2Nlc3MuZXhlY1BhdGgsXG4gICAgICAgICAgICBbQVRUUl9QUk9DRVNTX0NPTU1BTkRfQVJHU106IFtcbiAgICAgICAgICAgICAgICBwcm9jZXNzLmFyZ3ZbMF0sXG4gICAgICAgICAgICAgICAgLi4ucHJvY2Vzcy5leGVjQXJndixcbiAgICAgICAgICAgICAgICAuLi5wcm9jZXNzLmFyZ3Yuc2xpY2UoMSksXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgW0FUVFJfUFJPQ0VTU19SVU5USU1FX1ZFUlNJT05dOiBwcm9jZXNzLnZlcnNpb25zLm5vZGUsXG4gICAgICAgICAgICBbQVRUUl9QUk9DRVNTX1JVTlRJTUVfTkFNRV06ICdub2RlanMnLFxuICAgICAgICAgICAgW0FUVFJfUFJPQ0VTU19SVU5USU1FX0RFU0NSSVBUSU9OXTogJ05vZGUuanMnLFxuICAgICAgICB9O1xuICAgICAgICBpZiAocHJvY2Vzcy5hcmd2Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZXNbQVRUUl9QUk9DRVNTX0NPTU1BTkRdID0gcHJvY2Vzcy5hcmd2WzFdO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB1c2VySW5mbyA9IG9zLnVzZXJJbmZvKCk7XG4gICAgICAgICAgICBhdHRyaWJ1dGVzW0FUVFJfUFJPQ0VTU19PV05FUl0gPSB1c2VySW5mby51c2VybmFtZTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgZGlhZy5kZWJ1ZyhgZXJyb3Igb2J0YWluaW5nIHByb2Nlc3Mgb3duZXI6ICR7ZX1gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBhdHRyaWJ1dGVzIH07XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IHByb2Nlc3NEZXRlY3RvciA9IG5ldyBQcm9jZXNzRGV0ZWN0b3IoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVByb2Nlc3NEZXRlY3Rvci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/ProcessDetector.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/ServiceInstanceIdDetector.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/ServiceInstanceIdDetector.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   serviceInstanceIdDetector: () => (/* binding */ serviceInstanceIdDetector)\n/* harmony export */ });\n/* harmony import */ var _semconv__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../semconv */ \"(instrument)/./node_modules/@opentelemetry/resources/build/esm/semconv.js\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * ServiceInstanceIdDetector detects the resources related to the service instance ID.\n */\nclass ServiceInstanceIdDetector {\n    detect(_config) {\n        return {\n            attributes: {\n                [_semconv__WEBPACK_IMPORTED_MODULE_1__.ATTR_SERVICE_INSTANCE_ID]: (0,crypto__WEBPACK_IMPORTED_MODULE_0__.randomUUID)(),\n            },\n        };\n    }\n}\n/**\n * @experimental\n */\nconst serviceInstanceIdDetector = new ServiceInstanceIdDetector();\n//# sourceMappingURL=ServiceInstanceIdDetector.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Jlc291cmNlcy9idWlsZC9lc20vZGV0ZWN0b3JzL3BsYXRmb3JtL25vZGUvU2VydmljZUluc3RhbmNlSWREZXRlY3Rvci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQzREO0FBQ3hCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLDhEQUF3QixHQUFHLGtEQUFVO0FBQ3RELGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Jlc291cmNlcy9idWlsZC9lc20vZGV0ZWN0b3JzL3BsYXRmb3JtL25vZGUvU2VydmljZUluc3RhbmNlSWREZXRlY3Rvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgQVRUUl9TRVJWSUNFX0lOU1RBTkNFX0lEIH0gZnJvbSAnLi4vLi4vLi4vc2VtY29udic7XG5pbXBvcnQgeyByYW5kb21VVUlEIH0gZnJvbSAnY3J5cHRvJztcbi8qKlxuICogU2VydmljZUluc3RhbmNlSWREZXRlY3RvciBkZXRlY3RzIHRoZSByZXNvdXJjZXMgcmVsYXRlZCB0byB0aGUgc2VydmljZSBpbnN0YW5jZSBJRC5cbiAqL1xuY2xhc3MgU2VydmljZUluc3RhbmNlSWREZXRlY3RvciB7XG4gICAgZGV0ZWN0KF9jb25maWcpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgICAgICBbQVRUUl9TRVJWSUNFX0lOU1RBTkNFX0lEXTogcmFuZG9tVVVJRCgpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG59XG4vKipcbiAqIEBleHBlcmltZW50YWxcbiAqL1xuZXhwb3J0IGNvbnN0IHNlcnZpY2VJbnN0YW5jZUlkRGV0ZWN0b3IgPSBuZXcgU2VydmljZUluc3RhbmNlSWREZXRlY3RvcigpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U2VydmljZUluc3RhbmNlSWREZXRlY3Rvci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/ServiceInstanceIdDetector.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/machine-id/execAsync.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/machine-id/execAsync.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   execAsync: () => (/* binding */ execAsync)\n/* harmony export */ });\n/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! child_process */ \"child_process\");\n/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(child_process__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! util */ \"util\");\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(util__WEBPACK_IMPORTED_MODULE_1__);\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nconst execAsync = util__WEBPACK_IMPORTED_MODULE_1__.promisify(child_process__WEBPACK_IMPORTED_MODULE_0__.exec);\n//# sourceMappingURL=execAsync.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Jlc291cmNlcy9idWlsZC9lc20vZGV0ZWN0b3JzL3BsYXRmb3JtL25vZGUvbWFjaGluZS1pZC9leGVjQXN5bmMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDK0M7QUFDbEI7QUFDdEIsa0JBQWtCLDJDQUFjLENBQUMsK0NBQWtCO0FBQzFEIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Jlc291cmNlcy9idWlsZC9lc20vZGV0ZWN0b3JzL3BsYXRmb3JtL25vZGUvbWFjaGluZS1pZC9leGVjQXN5bmMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCAqIGFzIGNoaWxkX3Byb2Nlc3MgZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5pbXBvcnQgKiBhcyB1dGlsIGZyb20gJ3V0aWwnO1xuZXhwb3J0IGNvbnN0IGV4ZWNBc3luYyA9IHV0aWwucHJvbWlzaWZ5KGNoaWxkX3Byb2Nlc3MuZXhlYyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leGVjQXN5bmMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/machine-id/execAsync.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/machine-id/getMachineId-bsd.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/machine-id/getMachineId-bsd.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getMachineId: () => (/* binding */ getMachineId)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _execAsync__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./execAsync */ \"(instrument)/./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/machine-id/execAsync.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/diag-api.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nasync function getMachineId() {\n    try {\n        const result = await fs__WEBPACK_IMPORTED_MODULE_0__.promises.readFile('/etc/hostid', { encoding: 'utf8' });\n        return result.trim();\n    }\n    catch (e) {\n        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__.diag.debug(`error reading machine id: ${e}`);\n    }\n    try {\n        const result = await (0,_execAsync__WEBPACK_IMPORTED_MODULE_2__.execAsync)('kenv -q smbios.system.uuid');\n        return result.stdout.trim();\n    }\n    catch (e) {\n        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__.diag.debug(`error reading machine id: ${e}`);\n    }\n    return undefined;\n}\n//# sourceMappingURL=getMachineId-bsd.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Jlc291cmNlcy9idWlsZC9lc20vZGV0ZWN0b3JzL3BsYXRmb3JtL25vZGUvbWFjaGluZS1pZC9nZXRNYWNoaW5lSWQtYnNkLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ29DO0FBQ0k7QUFDRTtBQUNuQztBQUNQO0FBQ0EsNkJBQTZCLHdDQUFFLDJCQUEyQixrQkFBa0I7QUFDNUU7QUFDQTtBQUNBO0FBQ0EsUUFBUSxvREFBSSxvQ0FBb0MsRUFBRTtBQUNsRDtBQUNBO0FBQ0EsNkJBQTZCLHFEQUFTO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBLFFBQVEsb0RBQUksb0NBQW9DLEVBQUU7QUFDbEQ7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvcmVzb3VyY2VzL2J1aWxkL2VzbS9kZXRlY3RvcnMvcGxhdGZvcm0vbm9kZS9tYWNoaW5lLWlkL2dldE1hY2hpbmVJZC1ic2QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IHByb21pc2VzIGFzIGZzIH0gZnJvbSAnZnMnO1xuaW1wb3J0IHsgZXhlY0FzeW5jIH0gZnJvbSAnLi9leGVjQXN5bmMnO1xuaW1wb3J0IHsgZGlhZyB9IGZyb20gJ0BvcGVudGVsZW1ldHJ5L2FwaSc7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0TWFjaGluZUlkKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGZzLnJlYWRGaWxlKCcvZXRjL2hvc3RpZCcsIHsgZW5jb2Rpbmc6ICd1dGY4JyB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdC50cmltKCk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGRpYWcuZGVidWcoYGVycm9yIHJlYWRpbmcgbWFjaGluZSBpZDogJHtlfWApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBleGVjQXN5bmMoJ2tlbnYgLXEgc21iaW9zLnN5c3RlbS51dWlkJyk7XG4gICAgICAgIHJldHVybiByZXN1bHQuc3Rkb3V0LnRyaW0oKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgZGlhZy5kZWJ1ZyhgZXJyb3IgcmVhZGluZyBtYWNoaW5lIGlkOiAke2V9YCk7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRNYWNoaW5lSWQtYnNkLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/machine-id/getMachineId-bsd.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/machine-id/getMachineId-darwin.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/machine-id/getMachineId-darwin.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getMachineId: () => (/* binding */ getMachineId)\n/* harmony export */ });\n/* harmony import */ var _execAsync__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./execAsync */ \"(instrument)/./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/machine-id/execAsync.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/diag-api.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nasync function getMachineId() {\n    try {\n        const result = await (0,_execAsync__WEBPACK_IMPORTED_MODULE_0__.execAsync)('ioreg -rd1 -c \"IOPlatformExpertDevice\"');\n        const idLine = result.stdout\n            .split('\\n')\n            .find(line => line.includes('IOPlatformUUID'));\n        if (!idLine) {\n            return undefined;\n        }\n        const parts = idLine.split('\" = \"');\n        if (parts.length === 2) {\n            return parts[1].slice(0, -1);\n        }\n    }\n    catch (e) {\n        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__.diag.debug(`error reading machine id: ${e}`);\n    }\n    return undefined;\n}\n//# sourceMappingURL=getMachineId-darwin.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Jlc291cmNlcy9idWlsZC9lc20vZGV0ZWN0b3JzL3BsYXRmb3JtL25vZGUvbWFjaGluZS1pZC9nZXRNYWNoaW5lSWQtZGFyd2luLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN3QztBQUNFO0FBQ25DO0FBQ1A7QUFDQSw2QkFBNkIscURBQVM7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxvREFBSSxvQ0FBb0MsRUFBRTtBQUNsRDtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9yZXNvdXJjZXMvYnVpbGQvZXNtL2RldGVjdG9ycy9wbGF0Zm9ybS9ub2RlL21hY2hpbmUtaWQvZ2V0TWFjaGluZUlkLWRhcndpbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgZXhlY0FzeW5jIH0gZnJvbSAnLi9leGVjQXN5bmMnO1xuaW1wb3J0IHsgZGlhZyB9IGZyb20gJ0BvcGVudGVsZW1ldHJ5L2FwaSc7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0TWFjaGluZUlkKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGV4ZWNBc3luYygnaW9yZWcgLXJkMSAtYyBcIklPUGxhdGZvcm1FeHBlcnREZXZpY2VcIicpO1xuICAgICAgICBjb25zdCBpZExpbmUgPSByZXN1bHQuc3Rkb3V0XG4gICAgICAgICAgICAuc3BsaXQoJ1xcbicpXG4gICAgICAgICAgICAuZmluZChsaW5lID0+IGxpbmUuaW5jbHVkZXMoJ0lPUGxhdGZvcm1VVUlEJykpO1xuICAgICAgICBpZiAoIWlkTGluZSkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXJ0cyA9IGlkTGluZS5zcGxpdCgnXCIgPSBcIicpO1xuICAgICAgICBpZiAocGFydHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFydHNbMV0uc2xpY2UoMCwgLTEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGRpYWcuZGVidWcoYGVycm9yIHJlYWRpbmcgbWFjaGluZSBpZDogJHtlfWApO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0TWFjaGluZUlkLWRhcndpbi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/machine-id/getMachineId-darwin.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/machine-id/getMachineId-linux.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/machine-id/getMachineId-linux.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getMachineId: () => (/* binding */ getMachineId)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/diag-api.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nasync function getMachineId() {\n    const paths = ['/etc/machine-id', '/var/lib/dbus/machine-id'];\n    for (const path of paths) {\n        try {\n            const result = await fs__WEBPACK_IMPORTED_MODULE_0__.promises.readFile(path, { encoding: 'utf8' });\n            return result.trim();\n        }\n        catch (e) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__.diag.debug(`error reading machine id: ${e}`);\n        }\n    }\n    return undefined;\n}\n//# sourceMappingURL=getMachineId-linux.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Jlc291cmNlcy9idWlsZC9lc20vZGV0ZWN0b3JzL3BsYXRmb3JtL25vZGUvbWFjaGluZS1pZC9nZXRNYWNoaW5lSWQtbGludXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNvQztBQUNNO0FBQ25DO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLHdDQUFFLGtCQUFrQixrQkFBa0I7QUFDdkU7QUFDQTtBQUNBO0FBQ0EsWUFBWSxvREFBSSxvQ0FBb0MsRUFBRTtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Jlc291cmNlcy9idWlsZC9lc20vZGV0ZWN0b3JzL3BsYXRmb3JtL25vZGUvbWFjaGluZS1pZC9nZXRNYWNoaW5lSWQtbGludXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IHByb21pc2VzIGFzIGZzIH0gZnJvbSAnZnMnO1xuaW1wb3J0IHsgZGlhZyB9IGZyb20gJ0BvcGVudGVsZW1ldHJ5L2FwaSc7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0TWFjaGluZUlkKCkge1xuICAgIGNvbnN0IHBhdGhzID0gWycvZXRjL21hY2hpbmUtaWQnLCAnL3Zhci9saWIvZGJ1cy9tYWNoaW5lLWlkJ107XG4gICAgZm9yIChjb25zdCBwYXRoIG9mIHBhdGhzKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBmcy5yZWFkRmlsZShwYXRoLCB7IGVuY29kaW5nOiAndXRmOCcgfSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0LnRyaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgZGlhZy5kZWJ1ZyhgZXJyb3IgcmVhZGluZyBtYWNoaW5lIGlkOiAke2V9YCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldE1hY2hpbmVJZC1saW51eC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/machine-id/getMachineId-linux.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/machine-id/getMachineId-unsupported.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/machine-id/getMachineId-unsupported.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getMachineId: () => (/* binding */ getMachineId)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/diag-api.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nasync function getMachineId() {\n    _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.debug('could not read machine-id: unsupported platform');\n    return undefined;\n}\n//# sourceMappingURL=getMachineId-unsupported.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Jlc291cmNlcy9idWlsZC9lc20vZGV0ZWN0b3JzL3BsYXRmb3JtL25vZGUvbWFjaGluZS1pZC9nZXRNYWNoaW5lSWQtdW5zdXBwb3J0ZWQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDMEM7QUFDbkM7QUFDUCxJQUFJLG9EQUFJO0FBQ1I7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Jlc291cmNlcy9idWlsZC9lc20vZGV0ZWN0b3JzL3BsYXRmb3JtL25vZGUvbWFjaGluZS1pZC9nZXRNYWNoaW5lSWQtdW5zdXBwb3J0ZWQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IGRpYWcgfSBmcm9tICdAb3BlbnRlbGVtZXRyeS9hcGknO1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldE1hY2hpbmVJZCgpIHtcbiAgICBkaWFnLmRlYnVnKCdjb3VsZCBub3QgcmVhZCBtYWNoaW5lLWlkOiB1bnN1cHBvcnRlZCBwbGF0Zm9ybScpO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRNYWNoaW5lSWQtdW5zdXBwb3J0ZWQuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/machine-id/getMachineId-unsupported.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/machine-id/getMachineId-win.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/machine-id/getMachineId-win.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getMachineId: () => (/* binding */ getMachineId)\n/* harmony export */ });\n/* harmony import */ var process__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! process */ \"process\");\n/* harmony import */ var process__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(process__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _execAsync__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./execAsync */ \"(instrument)/./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/machine-id/execAsync.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/diag-api.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nasync function getMachineId() {\n    const args = 'QUERY HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Cryptography /v MachineGuid';\n    let command = '%windir%\\\\System32\\\\REG.exe';\n    if (process__WEBPACK_IMPORTED_MODULE_0__.arch === 'ia32' && \"PROCESSOR_ARCHITEW6432\" in process__WEBPACK_IMPORTED_MODULE_0__.env) {\n        command = '%windir%\\\\sysnative\\\\cmd.exe /c ' + command;\n    }\n    try {\n        const result = await (0,_execAsync__WEBPACK_IMPORTED_MODULE_1__.execAsync)(`${command} ${args}`);\n        const parts = result.stdout.split('REG_SZ');\n        if (parts.length === 2) {\n            return parts[1].trim();\n        }\n    }\n    catch (e) {\n        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.diag.debug(`error reading machine id: ${e}`);\n    }\n    return undefined;\n}\n//# sourceMappingURL=getMachineId-win.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Jlc291cmNlcy9idWlsZC9lc20vZGV0ZWN0b3JzL3BsYXRmb3JtL25vZGUvbWFjaGluZS1pZC9nZXRNYWNoaW5lSWQtd2luLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ21DO0FBQ0s7QUFDRTtBQUNuQztBQUNQO0FBQ0E7QUFDQSxRQUFRLHlDQUFZLGVBQWUsb0VBQXVDO0FBQzFFO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixxREFBUyxJQUFJLFNBQVMsRUFBRSxLQUFLO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsb0RBQUksb0NBQW9DLEVBQUU7QUFDbEQ7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvcmVzb3VyY2VzL2J1aWxkL2VzbS9kZXRlY3RvcnMvcGxhdGZvcm0vbm9kZS9tYWNoaW5lLWlkL2dldE1hY2hpbmVJZC13aW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCAqIGFzIHByb2Nlc3MgZnJvbSAncHJvY2Vzcyc7XG5pbXBvcnQgeyBleGVjQXN5bmMgfSBmcm9tICcuL2V4ZWNBc3luYyc7XG5pbXBvcnQgeyBkaWFnIH0gZnJvbSAnQG9wZW50ZWxlbWV0cnkvYXBpJztcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRNYWNoaW5lSWQoKSB7XG4gICAgY29uc3QgYXJncyA9ICdRVUVSWSBIS0VZX0xPQ0FMX01BQ0hJTkVcXFxcU09GVFdBUkVcXFxcTWljcm9zb2Z0XFxcXENyeXB0b2dyYXBoeSAvdiBNYWNoaW5lR3VpZCc7XG4gICAgbGV0IGNvbW1hbmQgPSAnJXdpbmRpciVcXFxcU3lzdGVtMzJcXFxcUkVHLmV4ZSc7XG4gICAgaWYgKHByb2Nlc3MuYXJjaCA9PT0gJ2lhMzInICYmICdQUk9DRVNTT1JfQVJDSElURVc2NDMyJyBpbiBwcm9jZXNzLmVudikge1xuICAgICAgICBjb21tYW5kID0gJyV3aW5kaXIlXFxcXHN5c25hdGl2ZVxcXFxjbWQuZXhlIC9jICcgKyBjb21tYW5kO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBleGVjQXN5bmMoYCR7Y29tbWFuZH0gJHthcmdzfWApO1xuICAgICAgICBjb25zdCBwYXJ0cyA9IHJlc3VsdC5zdGRvdXQuc3BsaXQoJ1JFR19TWicpO1xuICAgICAgICBpZiAocGFydHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFydHNbMV0udHJpbSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGRpYWcuZGVidWcoYGVycm9yIHJlYWRpbmcgbWFjaGluZSBpZDogJHtlfWApO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0TWFjaGluZUlkLXdpbi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/machine-id/getMachineId-win.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/machine-id/getMachineId.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/machine-id/getMachineId.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getMachineId: () => (/* binding */ getMachineId)\n/* harmony export */ });\n/* harmony import */ var process__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! process */ \"process\");\n/* harmony import */ var process__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(process__WEBPACK_IMPORTED_MODULE_0__);\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nlet getMachineIdImpl;\nasync function getMachineId() {\n    if (!getMachineIdImpl) {\n        switch (process__WEBPACK_IMPORTED_MODULE_0__.platform) {\n            case 'darwin':\n                getMachineIdImpl = (await __webpack_require__.e(/*! import() */ \"vendor-chunks/@opentelemetry\").then(__webpack_require__.bind(__webpack_require__, /*! ./getMachineId-darwin.js */ \"(instrument)/./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/machine-id/getMachineId-darwin.js\")))\n                    .getMachineId;\n                break;\n            case 'linux':\n                getMachineIdImpl = (await __webpack_require__.e(/*! import() */ \"vendor-chunks/@opentelemetry\").then(__webpack_require__.bind(__webpack_require__, /*! ./getMachineId-linux.js */ \"(instrument)/./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/machine-id/getMachineId-linux.js\")))\n                    .getMachineId;\n                break;\n            case 'freebsd':\n                getMachineIdImpl = (await __webpack_require__.e(/*! import() */ \"vendor-chunks/@opentelemetry\").then(__webpack_require__.bind(__webpack_require__, /*! ./getMachineId-bsd.js */ \"(instrument)/./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/machine-id/getMachineId-bsd.js\"))).getMachineId;\n                break;\n            case 'win32':\n                getMachineIdImpl = (await __webpack_require__.e(/*! import() */ \"vendor-chunks/@opentelemetry\").then(__webpack_require__.bind(__webpack_require__, /*! ./getMachineId-win.js */ \"(instrument)/./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/machine-id/getMachineId-win.js\"))).getMachineId;\n                break;\n            default:\n                getMachineIdImpl = (await __webpack_require__.e(/*! import() */ \"vendor-chunks/@opentelemetry\").then(__webpack_require__.bind(__webpack_require__, /*! ./getMachineId-unsupported.js */ \"(instrument)/./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/machine-id/getMachineId-unsupported.js\")))\n                    .getMachineId;\n                break;\n        }\n    }\n    return getMachineIdImpl();\n}\n//# sourceMappingURL=getMachineId.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Jlc291cmNlcy9idWlsZC9lc20vZGV0ZWN0b3JzL3BsYXRmb3JtL25vZGUvbWFjaGluZS1pZC9nZXRNYWNoaW5lSWQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ21DO0FBQ25DO0FBQ087QUFDUDtBQUNBLGdCQUFnQiw2Q0FBZ0I7QUFDaEM7QUFDQSwwQ0FBMEMscVJBQWtDO0FBQzVFO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxtUkFBaUM7QUFDM0U7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLCtRQUErQjtBQUN6RTtBQUNBO0FBQ0EsMENBQTBDLCtRQUErQjtBQUN6RTtBQUNBO0FBQ0EsMENBQTBDLCtSQUF1QztBQUNqRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9yZXNvdXJjZXMvYnVpbGQvZXNtL2RldGVjdG9ycy9wbGF0Zm9ybS9ub2RlL21hY2hpbmUtaWQvZ2V0TWFjaGluZUlkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgKiBhcyBwcm9jZXNzIGZyb20gJ3Byb2Nlc3MnO1xubGV0IGdldE1hY2hpbmVJZEltcGw7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0TWFjaGluZUlkKCkge1xuICAgIGlmICghZ2V0TWFjaGluZUlkSW1wbCkge1xuICAgICAgICBzd2l0Y2ggKHByb2Nlc3MucGxhdGZvcm0pIHtcbiAgICAgICAgICAgIGNhc2UgJ2Rhcndpbic6XG4gICAgICAgICAgICAgICAgZ2V0TWFjaGluZUlkSW1wbCA9IChhd2FpdCBpbXBvcnQoJy4vZ2V0TWFjaGluZUlkLWRhcndpbi5qcycpKVxuICAgICAgICAgICAgICAgICAgICAuZ2V0TWFjaGluZUlkO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbGludXgnOlxuICAgICAgICAgICAgICAgIGdldE1hY2hpbmVJZEltcGwgPSAoYXdhaXQgaW1wb3J0KCcuL2dldE1hY2hpbmVJZC1saW51eC5qcycpKVxuICAgICAgICAgICAgICAgICAgICAuZ2V0TWFjaGluZUlkO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZnJlZWJzZCc6XG4gICAgICAgICAgICAgICAgZ2V0TWFjaGluZUlkSW1wbCA9IChhd2FpdCBpbXBvcnQoJy4vZ2V0TWFjaGluZUlkLWJzZC5qcycpKS5nZXRNYWNoaW5lSWQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd3aW4zMic6XG4gICAgICAgICAgICAgICAgZ2V0TWFjaGluZUlkSW1wbCA9IChhd2FpdCBpbXBvcnQoJy4vZ2V0TWFjaGluZUlkLXdpbi5qcycpKS5nZXRNYWNoaW5lSWQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGdldE1hY2hpbmVJZEltcGwgPSAoYXdhaXQgaW1wb3J0KCcuL2dldE1hY2hpbmVJZC11bnN1cHBvcnRlZC5qcycpKVxuICAgICAgICAgICAgICAgICAgICAuZ2V0TWFjaGluZUlkO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBnZXRNYWNoaW5lSWRJbXBsKCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRNYWNoaW5lSWQuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/machine-id/getMachineId.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/utils.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/utils.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   normalizeArch: () => (/* binding */ normalizeArch),\n/* harmony export */   normalizeType: () => (/* binding */ normalizeType)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst normalizeArch = (nodeArchString) => {\n    // Maps from https://nodejs.org/api/os.html#osarch to arch values in spec:\n    // https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/resource/semantic_conventions/host.md\n    switch (nodeArchString) {\n        case 'arm':\n            return 'arm32';\n        case 'ppc':\n            return 'ppc32';\n        case 'x64':\n            return 'amd64';\n        default:\n            return nodeArchString;\n    }\n};\nconst normalizeType = (nodePlatform) => {\n    // Maps from https://nodejs.org/api/os.html#osplatform to arch values in spec:\n    // https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/resource/semantic_conventions/os.md\n    switch (nodePlatform) {\n        case 'sunos':\n            return 'solaris';\n        case 'win32':\n            return 'windows';\n        default:\n            return nodePlatform;\n    }\n};\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Jlc291cmNlcy9idWlsZC9lc20vZGV0ZWN0b3JzL3BsYXRmb3JtL25vZGUvdXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvcmVzb3VyY2VzL2J1aWxkL2VzbS9kZXRlY3RvcnMvcGxhdGZvcm0vbm9kZS91dGlscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuZXhwb3J0IGNvbnN0IG5vcm1hbGl6ZUFyY2ggPSAobm9kZUFyY2hTdHJpbmcpID0+IHtcbiAgICAvLyBNYXBzIGZyb20gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9vcy5odG1sI29zYXJjaCB0byBhcmNoIHZhbHVlcyBpbiBzcGVjOlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9vcGVuLXRlbGVtZXRyeS9vcGVudGVsZW1ldHJ5LXNwZWNpZmljYXRpb24vYmxvYi9tYWluL3NwZWNpZmljYXRpb24vcmVzb3VyY2Uvc2VtYW50aWNfY29udmVudGlvbnMvaG9zdC5tZFxuICAgIHN3aXRjaCAobm9kZUFyY2hTdHJpbmcpIHtcbiAgICAgICAgY2FzZSAnYXJtJzpcbiAgICAgICAgICAgIHJldHVybiAnYXJtMzInO1xuICAgICAgICBjYXNlICdwcGMnOlxuICAgICAgICAgICAgcmV0dXJuICdwcGMzMic7XG4gICAgICAgIGNhc2UgJ3g2NCc6XG4gICAgICAgICAgICByZXR1cm4gJ2FtZDY0JztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBub2RlQXJjaFN0cmluZztcbiAgICB9XG59O1xuZXhwb3J0IGNvbnN0IG5vcm1hbGl6ZVR5cGUgPSAobm9kZVBsYXRmb3JtKSA9PiB7XG4gICAgLy8gTWFwcyBmcm9tIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvb3MuaHRtbCNvc3BsYXRmb3JtIHRvIGFyY2ggdmFsdWVzIGluIHNwZWM6XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL29wZW4tdGVsZW1ldHJ5L29wZW50ZWxlbWV0cnktc3BlY2lmaWNhdGlvbi9ibG9iL21haW4vc3BlY2lmaWNhdGlvbi9yZXNvdXJjZS9zZW1hbnRpY19jb252ZW50aW9ucy9vcy5tZFxuICAgIHN3aXRjaCAobm9kZVBsYXRmb3JtKSB7XG4gICAgICAgIGNhc2UgJ3N1bm9zJzpcbiAgICAgICAgICAgIHJldHVybiAnc29sYXJpcyc7XG4gICAgICAgIGNhc2UgJ3dpbjMyJzpcbiAgICAgICAgICAgIHJldHVybiAnd2luZG93cyc7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gbm9kZVBsYXRmb3JtO1xuICAgIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/utils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/resources/build/esm/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@opentelemetry/resources/build/esm/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultResource: () => (/* reexport safe */ _ResourceImpl__WEBPACK_IMPORTED_MODULE_6__.defaultResource),\n/* harmony export */   defaultServiceName: () => (/* reexport safe */ _platform__WEBPACK_IMPORTED_MODULE_7__.defaultServiceName),\n/* harmony export */   detectResources: () => (/* reexport safe */ _detect_resources__WEBPACK_IMPORTED_MODULE_0__.detectResources),\n/* harmony export */   emptyResource: () => (/* reexport safe */ _ResourceImpl__WEBPACK_IMPORTED_MODULE_6__.emptyResource),\n/* harmony export */   envDetector: () => (/* reexport safe */ _detectors__WEBPACK_IMPORTED_MODULE_1__.envDetector),\n/* harmony export */   hostDetector: () => (/* reexport safe */ _detectors__WEBPACK_IMPORTED_MODULE_2__.hostDetector),\n/* harmony export */   osDetector: () => (/* reexport safe */ _detectors__WEBPACK_IMPORTED_MODULE_3__.osDetector),\n/* harmony export */   processDetector: () => (/* reexport safe */ _detectors__WEBPACK_IMPORTED_MODULE_4__.processDetector),\n/* harmony export */   resourceFromAttributes: () => (/* reexport safe */ _ResourceImpl__WEBPACK_IMPORTED_MODULE_6__.resourceFromAttributes),\n/* harmony export */   serviceInstanceIdDetector: () => (/* reexport safe */ _detectors__WEBPACK_IMPORTED_MODULE_5__.serviceInstanceIdDetector)\n/* harmony export */ });\n/* harmony import */ var _detect_resources__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./detect-resources */ \"(instrument)/./node_modules/@opentelemetry/resources/build/esm/detect-resources.js\");\n/* harmony import */ var _detectors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./detectors */ \"(instrument)/./node_modules/@opentelemetry/resources/build/esm/detectors/EnvDetector.js\");\n/* harmony import */ var _detectors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./detectors */ \"(instrument)/./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/HostDetector.js\");\n/* harmony import */ var _detectors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./detectors */ \"(instrument)/./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/OSDetector.js\");\n/* harmony import */ var _detectors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./detectors */ \"(instrument)/./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/ProcessDetector.js\");\n/* harmony import */ var _detectors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./detectors */ \"(instrument)/./node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/ServiceInstanceIdDetector.js\");\n/* harmony import */ var _ResourceImpl__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ResourceImpl */ \"(instrument)/./node_modules/@opentelemetry/resources/build/esm/ResourceImpl.js\");\n/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./platform */ \"(instrument)/./node_modules/@opentelemetry/resources/build/esm/platform/node/default-service-name.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Jlc291cmNlcy9idWlsZC9lc20vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3FEO0FBQzREO0FBQ3hCO0FBQ3pDO0FBQ2hEIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Jlc291cmNlcy9idWlsZC9lc20vaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmV4cG9ydCB7IGRldGVjdFJlc291cmNlcyB9IGZyb20gJy4vZGV0ZWN0LXJlc291cmNlcyc7XG5leHBvcnQgeyBlbnZEZXRlY3RvciwgaG9zdERldGVjdG9yLCBvc0RldGVjdG9yLCBwcm9jZXNzRGV0ZWN0b3IsIHNlcnZpY2VJbnN0YW5jZUlkRGV0ZWN0b3IsIH0gZnJvbSAnLi9kZXRlY3RvcnMnO1xuZXhwb3J0IHsgcmVzb3VyY2VGcm9tQXR0cmlidXRlcywgZGVmYXVsdFJlc291cmNlLCBlbXB0eVJlc291cmNlLCB9IGZyb20gJy4vUmVzb3VyY2VJbXBsJztcbmV4cG9ydCB7IGRlZmF1bHRTZXJ2aWNlTmFtZSB9IGZyb20gJy4vcGxhdGZvcm0nO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/resources/build/esm/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/resources/build/esm/platform/node/default-service-name.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/resources/build/esm/platform/node/default-service-name.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultServiceName: () => (/* binding */ defaultServiceName)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction defaultServiceName() {\n    return `unknown_service:${process.argv0}`;\n}\n//# sourceMappingURL=default-service-name.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Jlc291cmNlcy9idWlsZC9lc20vcGxhdGZvcm0vbm9kZS9kZWZhdWx0LXNlcnZpY2UtbmFtZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCw4QkFBOEIsY0FBYztBQUM1QztBQUNBIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Jlc291cmNlcy9idWlsZC9lc20vcGxhdGZvcm0vbm9kZS9kZWZhdWx0LXNlcnZpY2UtbmFtZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRTZXJ2aWNlTmFtZSgpIHtcbiAgICByZXR1cm4gYHVua25vd25fc2VydmljZToke3Byb2Nlc3MuYXJndjB9YDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlZmF1bHQtc2VydmljZS1uYW1lLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/resources/build/esm/platform/node/default-service-name.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/resources/build/esm/semconv.js":
/*!********************************************************************!*\
  !*** ./node_modules/@opentelemetry/resources/build/esm/semconv.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ATTR_CLOUD_ACCOUNT_ID: () => (/* binding */ ATTR_CLOUD_ACCOUNT_ID),\n/* harmony export */   ATTR_CLOUD_AVAILABILITY_ZONE: () => (/* binding */ ATTR_CLOUD_AVAILABILITY_ZONE),\n/* harmony export */   ATTR_CLOUD_PROVIDER: () => (/* binding */ ATTR_CLOUD_PROVIDER),\n/* harmony export */   ATTR_CLOUD_REGION: () => (/* binding */ ATTR_CLOUD_REGION),\n/* harmony export */   ATTR_CONTAINER_ID: () => (/* binding */ ATTR_CONTAINER_ID),\n/* harmony export */   ATTR_CONTAINER_IMAGE_NAME: () => (/* binding */ ATTR_CONTAINER_IMAGE_NAME),\n/* harmony export */   ATTR_CONTAINER_IMAGE_TAGS: () => (/* binding */ ATTR_CONTAINER_IMAGE_TAGS),\n/* harmony export */   ATTR_CONTAINER_NAME: () => (/* binding */ ATTR_CONTAINER_NAME),\n/* harmony export */   ATTR_HOST_ARCH: () => (/* binding */ ATTR_HOST_ARCH),\n/* harmony export */   ATTR_HOST_ID: () => (/* binding */ ATTR_HOST_ID),\n/* harmony export */   ATTR_HOST_IMAGE_ID: () => (/* binding */ ATTR_HOST_IMAGE_ID),\n/* harmony export */   ATTR_HOST_IMAGE_NAME: () => (/* binding */ ATTR_HOST_IMAGE_NAME),\n/* harmony export */   ATTR_HOST_IMAGE_VERSION: () => (/* binding */ ATTR_HOST_IMAGE_VERSION),\n/* harmony export */   ATTR_HOST_NAME: () => (/* binding */ ATTR_HOST_NAME),\n/* harmony export */   ATTR_HOST_TYPE: () => (/* binding */ ATTR_HOST_TYPE),\n/* harmony export */   ATTR_K8S_CLUSTER_NAME: () => (/* binding */ ATTR_K8S_CLUSTER_NAME),\n/* harmony export */   ATTR_K8S_DEPLOYMENT_NAME: () => (/* binding */ ATTR_K8S_DEPLOYMENT_NAME),\n/* harmony export */   ATTR_K8S_NAMESPACE_NAME: () => (/* binding */ ATTR_K8S_NAMESPACE_NAME),\n/* harmony export */   ATTR_K8S_POD_NAME: () => (/* binding */ ATTR_K8S_POD_NAME),\n/* harmony export */   ATTR_OS_TYPE: () => (/* binding */ ATTR_OS_TYPE),\n/* harmony export */   ATTR_OS_VERSION: () => (/* binding */ ATTR_OS_VERSION),\n/* harmony export */   ATTR_PROCESS_COMMAND: () => (/* binding */ ATTR_PROCESS_COMMAND),\n/* harmony export */   ATTR_PROCESS_COMMAND_ARGS: () => (/* binding */ ATTR_PROCESS_COMMAND_ARGS),\n/* harmony export */   ATTR_PROCESS_EXECUTABLE_NAME: () => (/* binding */ ATTR_PROCESS_EXECUTABLE_NAME),\n/* harmony export */   ATTR_PROCESS_EXECUTABLE_PATH: () => (/* binding */ ATTR_PROCESS_EXECUTABLE_PATH),\n/* harmony export */   ATTR_PROCESS_OWNER: () => (/* binding */ ATTR_PROCESS_OWNER),\n/* harmony export */   ATTR_PROCESS_PID: () => (/* binding */ ATTR_PROCESS_PID),\n/* harmony export */   ATTR_PROCESS_RUNTIME_DESCRIPTION: () => (/* binding */ ATTR_PROCESS_RUNTIME_DESCRIPTION),\n/* harmony export */   ATTR_PROCESS_RUNTIME_NAME: () => (/* binding */ ATTR_PROCESS_RUNTIME_NAME),\n/* harmony export */   ATTR_PROCESS_RUNTIME_VERSION: () => (/* binding */ ATTR_PROCESS_RUNTIME_VERSION),\n/* harmony export */   ATTR_SERVICE_INSTANCE_ID: () => (/* binding */ ATTR_SERVICE_INSTANCE_ID),\n/* harmony export */   ATTR_SERVICE_NAMESPACE: () => (/* binding */ ATTR_SERVICE_NAMESPACE),\n/* harmony export */   ATTR_WEBENGINE_DESCRIPTION: () => (/* binding */ ATTR_WEBENGINE_DESCRIPTION),\n/* harmony export */   ATTR_WEBENGINE_NAME: () => (/* binding */ ATTR_WEBENGINE_NAME),\n/* harmony export */   ATTR_WEBENGINE_VERSION: () => (/* binding */ ATTR_WEBENGINE_VERSION)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*\n * This file contains a copy of unstable semantic convention definitions\n * used by this package.\n * @see https://github.com/open-telemetry/opentelemetry-js/tree/main/semantic-conventions#unstable-semconv\n */\n/**\n * The cloud account ID the resource is assigned to.\n *\n * @example 111111111111\n * @example opentelemetry\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nconst ATTR_CLOUD_ACCOUNT_ID = 'cloud.account.id';\n/**\n * Cloud regions often have multiple, isolated locations known as zones to increase availability. Availability zone represents the zone where the resource is running.\n *\n * @example us-east-1c\n *\n * @note Availability zones are called \"zones\" on Alibaba Cloud and Google Cloud.\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nconst ATTR_CLOUD_AVAILABILITY_ZONE = 'cloud.availability_zone';\n/**\n * Name of the cloud provider.\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nconst ATTR_CLOUD_PROVIDER = 'cloud.provider';\n/**\n * The geographical region the resource is running.\n *\n * @example us-central1\n * @example us-east-1\n *\n * @note Refer to your provider's docs to see the available regions, for example [Alibaba Cloud regions](https://www.alibabacloud.com/help/doc-detail/40654.htm), [AWS regions](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/), [Azure regions](https://azure.microsoft.com/global-infrastructure/geographies/), [Google Cloud regions](https://cloud.google.com/about/locations), or [Tencent Cloud regions](https://www.tencentcloud.com/document/product/213/6091).\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nconst ATTR_CLOUD_REGION = 'cloud.region';\n/**\n * Container ID. Usually a UUID, as for example used to [identify Docker containers](https://docs.docker.com/engine/containers/run/#container-identification). The UUID might be abbreviated.\n *\n * @example a3bf90e006b2\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nconst ATTR_CONTAINER_ID = 'container.id';\n/**\n * Name of the image the container was built on.\n *\n * @example gcr.io/opentelemetry/operator\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nconst ATTR_CONTAINER_IMAGE_NAME = 'container.image.name';\n/**\n * Container image tags. An example can be found in [Docker Image Inspect](https://docs.docker.com/engine/api/v1.43/#tag/Image/operation/ImageInspect). Should be only the `<tag>` section of the full name for example from `registry.example.com/my-org/my-image:<tag>`.\n *\n * @example [\"v1.27.1\", \"3.5.7-0\"]\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nconst ATTR_CONTAINER_IMAGE_TAGS = 'container.image.tags';\n/**\n * Container name used by container runtime.\n *\n * @example opentelemetry-autoconf\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nconst ATTR_CONTAINER_NAME = 'container.name';\n/**\n * The CPU architecture the host system is running on.\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nconst ATTR_HOST_ARCH = 'host.arch';\n/**\n * Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider. For non-containerized systems, this should be the `machine-id`. See the table below for the sources to use to determine the `machine-id` based on operating system.\n *\n * @example fdbf79e8af94cb7f9e8df36789187052\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nconst ATTR_HOST_ID = 'host.id';\n/**\n * VM image ID or host OS image ID. For Cloud, this value is from the provider.\n *\n * @example ami-07b06b442921831e5\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nconst ATTR_HOST_IMAGE_ID = 'host.image.id';\n/**\n * Name of the VM image or OS install the host was instantiated from.\n *\n * @example infra-ami-eks-worker-node-7d4ec78312\n * @example CentOS-8-x86_64-1905\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nconst ATTR_HOST_IMAGE_NAME = 'host.image.name';\n/**\n * The version string of the VM image or host OS as defined in [Version Attributes](/docs/resource/README.md#version-attributes).\n *\n * @example 0.1\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nconst ATTR_HOST_IMAGE_VERSION = 'host.image.version';\n/**\n * Name of the host. On Unix systems, it may contain what the hostname command returns, or the fully qualified hostname, or another name specified by the user.\n *\n * @example opentelemetry-test\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nconst ATTR_HOST_NAME = 'host.name';\n/**\n * Type of host. For Cloud, this must be the machine type.\n *\n * @example n1-standard-1\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nconst ATTR_HOST_TYPE = 'host.type';\n/**\n * The name of the cluster.\n *\n * @example opentelemetry-cluster\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nconst ATTR_K8S_CLUSTER_NAME = 'k8s.cluster.name';\n/**\n * The name of the Deployment.\n *\n * @example opentelemetry\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nconst ATTR_K8S_DEPLOYMENT_NAME = 'k8s.deployment.name';\n/**\n * The name of the namespace that the pod is running in.\n *\n * @example default\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nconst ATTR_K8S_NAMESPACE_NAME = 'k8s.namespace.name';\n/**\n * The name of the Pod.\n *\n * @example opentelemetry-pod-autoconf\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nconst ATTR_K8S_POD_NAME = 'k8s.pod.name';\n/**\n * The operating system type.\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nconst ATTR_OS_TYPE = 'os.type';\n/**\n * The version string of the operating system as defined in [Version Attributes](/docs/resource/README.md#version-attributes).\n *\n * @example 14.2.1\n * @example 18.04.1\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nconst ATTR_OS_VERSION = 'os.version';\n/**\n * The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in `proc/[pid]/cmdline`. On Windows, can be set to the first parameter extracted from `GetCommandLineW`.\n *\n * @example cmd/otelcol\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nconst ATTR_PROCESS_COMMAND = 'process.command';\n/**\n * All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`.\n *\n * @example [\"cmd/otecol\", \"--config=config.yaml\"]\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nconst ATTR_PROCESS_COMMAND_ARGS = 'process.command_args';\n/**\n * The name of the process executable. On Linux based systems, this **SHOULD** be set to the base name of the target of `/proc/[pid]/exe`. On Windows, this **SHOULD** be set to the base name of `GetProcessImageFileNameW`.\n *\n * @example otelcol\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nconst ATTR_PROCESS_EXECUTABLE_NAME = 'process.executable.name';\n/**\n * The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.\n *\n * @example /usr/bin/cmd/otelcol\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nconst ATTR_PROCESS_EXECUTABLE_PATH = 'process.executable.path';\n/**\n * The username of the user that owns the process.\n *\n * @example root\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nconst ATTR_PROCESS_OWNER = 'process.owner';\n/**\n * Process identifier (PID).\n *\n * @example 1234\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nconst ATTR_PROCESS_PID = 'process.pid';\n/**\n * An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.\n *\n * @example \"Eclipse OpenJ9 Eclipse OpenJ9 VM openj9-0.21.0\"\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nconst ATTR_PROCESS_RUNTIME_DESCRIPTION = 'process.runtime.description';\n/**\n * The name of the runtime of this process.\n *\n * @example OpenJDK Runtime Environment\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nconst ATTR_PROCESS_RUNTIME_NAME = 'process.runtime.name';\n/**\n * The version of the runtime of this process, as returned by the runtime without modification.\n *\n * @example \"14.0.2\"\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nconst ATTR_PROCESS_RUNTIME_VERSION = 'process.runtime.version';\n/**\n * The string ID of the service instance.\n *\n * @example 627cc493-f310-47de-96bd-71410b7dec09\n *\n * @note **MUST** be unique for each instance of the same `service.namespace,service.name` pair (in other words\n * `service.namespace,service.name,service.instance.id` triplet **MUST** be globally unique). The ID helps to\n * distinguish instances of the same service that exist at the same time (e.g. instances of a horizontally scaled\n * service).\n *\n * Implementations, such as SDKs, are recommended to generate a random Version 1 or Version 4 [RFC\n * 4122](https://www.ietf.org/rfc/rfc4122.txt) UUID, but are free to use an inherent unique ID as the source of\n * this value if stability is desirable. In that case, the ID **SHOULD** be used as source of a UUID Version 5 and\n * **SHOULD** use the following UUID as the namespace: `4d63009a-8d0f-11ee-aad7-4c796ed8e320`.\n *\n * UUIDs are typically recommended, as only an opaque value for the purposes of identifying a service instance is\n * needed. Similar to what can be seen in the man page for the\n * [`/etc/machine-id`](https://www.freedesktop.org/software/systemd/man/latest/machine-id.html) file, the underlying\n * data, such as pod name and namespace should be treated as confidential, being the user's choice to expose it\n * or not via another resource attribute.\n *\n * For applications running behind an application server (like unicorn), we do not recommend using one identifier\n * for all processes participating in the application. Instead, it's recommended each division (e.g. a worker\n * thread in unicorn) to have its own instance.id.\n *\n * It's not recommended for a Collector to set `service.instance.id` if it can't unambiguously determine the\n * service instance that is generating that telemetry. For instance, creating an UUID based on `pod.name` will\n * likely be wrong, as the Collector might not know from which container within that pod the telemetry originated.\n * However, Collectors can set the `service.instance.id` if they can unambiguously determine the service instance\n * for that telemetry. This is typically the case for scraping receivers, as they know the target address and\n * port.\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nconst ATTR_SERVICE_INSTANCE_ID = 'service.instance.id';\n/**\n * A namespace for `service.name`.\n *\n * @example Shop\n *\n * @note A string value having a meaning that helps to distinguish a group of services, for example the team name that owns a group of services. `service.name` is expected to be unique within the same namespace. If `service.namespace` is not specified in the Resource then `service.name` is expected to be unique for all services that have no explicit namespace defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length namespace string is assumed equal to unspecified namespace.\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nconst ATTR_SERVICE_NAMESPACE = 'service.namespace';\n/**\n * Additional description of the web engine (e.g. detailed version and edition information).\n *\n * @example WildFly Full 21.0.0.Final (WildFly Core 13.0.1.Final) - 2.2.2.Final\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nconst ATTR_WEBENGINE_DESCRIPTION = 'webengine.description';\n/**\n * The name of the web engine.\n *\n * @example WildFly\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nconst ATTR_WEBENGINE_NAME = 'webengine.name';\n/**\n * The version of the web engine.\n *\n * @example 21.0.0\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nconst ATTR_WEBENGINE_VERSION = 'webengine.version';\n//# sourceMappingURL=semconv.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/resources/build/esm/semconv.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/resources/build/esm/utils.js":
/*!******************************************************************!*\
  !*** ./node_modules/@opentelemetry/resources/build/esm/utils.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   identity: () => (/* binding */ identity),\n/* harmony export */   isPromiseLike: () => (/* binding */ isPromiseLike)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst isPromiseLike = (val) => {\n    return (val !== null &&\n        typeof val === 'object' &&\n        typeof val.then === 'function');\n};\nfunction identity(_) {\n    return _;\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Jlc291cmNlcy9idWlsZC9lc20vdXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvcmVzb3VyY2VzL2J1aWxkL2VzbS91dGlscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuZXhwb3J0IGNvbnN0IGlzUHJvbWlzZUxpa2UgPSAodmFsKSA9PiB7XG4gICAgcmV0dXJuICh2YWwgIT09IG51bGwgJiZcbiAgICAgICAgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgdHlwZW9mIHZhbC50aGVuID09PSAnZnVuY3Rpb24nKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gaWRlbnRpdHkoXykge1xuICAgIHJldHVybiBfO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/resources/build/esm/utils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/BasicTracerProvider.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/BasicTracerProvider.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BasicTracerProvider: () => (/* binding */ BasicTracerProvider),\n/* harmony export */   ForceFlushState: () => (/* binding */ ForceFlushState)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/utils/merge.js\");\n/* harmony import */ var _opentelemetry_resources__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/resources */ \"(instrument)/./node_modules/@opentelemetry/resources/build/esm/ResourceImpl.js\");\n/* harmony import */ var _Tracer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Tracer */ \"(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/Tracer.js\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config */ \"(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/config.js\");\n/* harmony import */ var _MultiSpanProcessor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./MultiSpanProcessor */ \"(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/MultiSpanProcessor.js\");\n/* harmony import */ var _utility__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utility */ \"(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/utility.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\nvar ForceFlushState;\n(function (ForceFlushState) {\n    ForceFlushState[ForceFlushState[\"resolved\"] = 0] = \"resolved\";\n    ForceFlushState[ForceFlushState[\"timeout\"] = 1] = \"timeout\";\n    ForceFlushState[ForceFlushState[\"error\"] = 2] = \"error\";\n    ForceFlushState[ForceFlushState[\"unresolved\"] = 3] = \"unresolved\";\n})(ForceFlushState || (ForceFlushState = {}));\n/**\n * This class represents a basic tracer provider which platform libraries can extend\n */\nclass BasicTracerProvider {\n    _config;\n    _tracers = new Map();\n    _resource;\n    _activeSpanProcessor;\n    constructor(config = {}) {\n        const mergedConfig = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.merge)({}, (0,_config__WEBPACK_IMPORTED_MODULE_1__.loadDefaultConfig)(), (0,_utility__WEBPACK_IMPORTED_MODULE_2__.reconfigureLimits)(config));\n        this._resource = mergedConfig.resource ?? (0,_opentelemetry_resources__WEBPACK_IMPORTED_MODULE_3__.defaultResource)();\n        this._config = Object.assign({}, mergedConfig, {\n            resource: this._resource,\n        });\n        const spanProcessors = [];\n        if (config.spanProcessors?.length) {\n            spanProcessors.push(...config.spanProcessors);\n        }\n        this._activeSpanProcessor = new _MultiSpanProcessor__WEBPACK_IMPORTED_MODULE_4__.MultiSpanProcessor(spanProcessors);\n    }\n    getTracer(name, version, options) {\n        const key = `${name}@${version || ''}:${options?.schemaUrl || ''}`;\n        if (!this._tracers.has(key)) {\n            this._tracers.set(key, new _Tracer__WEBPACK_IMPORTED_MODULE_5__.Tracer({ name, version, schemaUrl: options?.schemaUrl }, this._config, this._resource, this._activeSpanProcessor));\n        }\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return this._tracers.get(key);\n    }\n    forceFlush() {\n        const timeout = this._config.forceFlushTimeoutMillis;\n        const promises = this._activeSpanProcessor['_spanProcessors'].map((spanProcessor) => {\n            return new Promise(resolve => {\n                let state;\n                const timeoutInterval = setTimeout(() => {\n                    resolve(new Error(`Span processor did not completed within timeout period of ${timeout} ms`));\n                    state = ForceFlushState.timeout;\n                }, timeout);\n                spanProcessor\n                    .forceFlush()\n                    .then(() => {\n                    clearTimeout(timeoutInterval);\n                    if (state !== ForceFlushState.timeout) {\n                        state = ForceFlushState.resolved;\n                        resolve(state);\n                    }\n                })\n                    .catch(error => {\n                    clearTimeout(timeoutInterval);\n                    state = ForceFlushState.error;\n                    resolve(error);\n                });\n            });\n        });\n        return new Promise((resolve, reject) => {\n            Promise.all(promises)\n                .then(results => {\n                const errors = results.filter(result => result !== ForceFlushState.resolved);\n                if (errors.length > 0) {\n                    reject(errors);\n                }\n                else {\n                    resolve();\n                }\n            })\n                .catch(error => reject([error]));\n        });\n    }\n    shutdown() {\n        return this._activeSpanProcessor.shutdown();\n    }\n}\n//# sourceMappingURL=BasicTracerProvider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Nkay10cmFjZS1iYXNlL2J1aWxkL2VzbS9CYXNpY1RyYWNlclByb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQzRDO0FBQ2U7QUFDekI7QUFDVztBQUNhO0FBQ1o7QUFDdkM7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQywwQ0FBMEM7QUFDM0M7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQiw2QkFBNkIsMERBQUssR0FBRyxFQUFFLDBEQUFpQixJQUFJLDJEQUFpQjtBQUM3RSxrREFBa0QseUVBQWU7QUFDakUsdUNBQXVDO0FBQ3ZDO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLG1FQUFrQjtBQUMxRDtBQUNBO0FBQ0EsdUJBQXVCLEtBQUssR0FBRyxjQUFjLEdBQUcseUJBQXlCO0FBQ3pFO0FBQ0EsdUNBQXVDLDJDQUFNLEdBQUcsOENBQThDO0FBQzlGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUdBQW1HLFNBQVM7QUFDNUc7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9zZGstdHJhY2UtYmFzZS9idWlsZC9lc20vQmFzaWNUcmFjZXJQcm92aWRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgbWVyZ2UgfSBmcm9tICdAb3BlbnRlbGVtZXRyeS9jb3JlJztcbmltcG9ydCB7IGRlZmF1bHRSZXNvdXJjZSB9IGZyb20gJ0BvcGVudGVsZW1ldHJ5L3Jlc291cmNlcyc7XG5pbXBvcnQgeyBUcmFjZXIgfSBmcm9tICcuL1RyYWNlcic7XG5pbXBvcnQgeyBsb2FkRGVmYXVsdENvbmZpZyB9IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IE11bHRpU3BhblByb2Nlc3NvciB9IGZyb20gJy4vTXVsdGlTcGFuUHJvY2Vzc29yJztcbmltcG9ydCB7IHJlY29uZmlndXJlTGltaXRzIH0gZnJvbSAnLi91dGlsaXR5JztcbmV4cG9ydCB2YXIgRm9yY2VGbHVzaFN0YXRlO1xuKGZ1bmN0aW9uIChGb3JjZUZsdXNoU3RhdGUpIHtcbiAgICBGb3JjZUZsdXNoU3RhdGVbRm9yY2VGbHVzaFN0YXRlW1wicmVzb2x2ZWRcIl0gPSAwXSA9IFwicmVzb2x2ZWRcIjtcbiAgICBGb3JjZUZsdXNoU3RhdGVbRm9yY2VGbHVzaFN0YXRlW1widGltZW91dFwiXSA9IDFdID0gXCJ0aW1lb3V0XCI7XG4gICAgRm9yY2VGbHVzaFN0YXRlW0ZvcmNlRmx1c2hTdGF0ZVtcImVycm9yXCJdID0gMl0gPSBcImVycm9yXCI7XG4gICAgRm9yY2VGbHVzaFN0YXRlW0ZvcmNlRmx1c2hTdGF0ZVtcInVucmVzb2x2ZWRcIl0gPSAzXSA9IFwidW5yZXNvbHZlZFwiO1xufSkoRm9yY2VGbHVzaFN0YXRlIHx8IChGb3JjZUZsdXNoU3RhdGUgPSB7fSkpO1xuLyoqXG4gKiBUaGlzIGNsYXNzIHJlcHJlc2VudHMgYSBiYXNpYyB0cmFjZXIgcHJvdmlkZXIgd2hpY2ggcGxhdGZvcm0gbGlicmFyaWVzIGNhbiBleHRlbmRcbiAqL1xuZXhwb3J0IGNsYXNzIEJhc2ljVHJhY2VyUHJvdmlkZXIge1xuICAgIF9jb25maWc7XG4gICAgX3RyYWNlcnMgPSBuZXcgTWFwKCk7XG4gICAgX3Jlc291cmNlO1xuICAgIF9hY3RpdmVTcGFuUHJvY2Vzc29yO1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZyA9IHt9KSB7XG4gICAgICAgIGNvbnN0IG1lcmdlZENvbmZpZyA9IG1lcmdlKHt9LCBsb2FkRGVmYXVsdENvbmZpZygpLCByZWNvbmZpZ3VyZUxpbWl0cyhjb25maWcpKTtcbiAgICAgICAgdGhpcy5fcmVzb3VyY2UgPSBtZXJnZWRDb25maWcucmVzb3VyY2UgPz8gZGVmYXVsdFJlc291cmNlKCk7XG4gICAgICAgIHRoaXMuX2NvbmZpZyA9IE9iamVjdC5hc3NpZ24oe30sIG1lcmdlZENvbmZpZywge1xuICAgICAgICAgICAgcmVzb3VyY2U6IHRoaXMuX3Jlc291cmNlLFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3Qgc3BhblByb2Nlc3NvcnMgPSBbXTtcbiAgICAgICAgaWYgKGNvbmZpZy5zcGFuUHJvY2Vzc29ycz8ubGVuZ3RoKSB7XG4gICAgICAgICAgICBzcGFuUHJvY2Vzc29ycy5wdXNoKC4uLmNvbmZpZy5zcGFuUHJvY2Vzc29ycyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fYWN0aXZlU3BhblByb2Nlc3NvciA9IG5ldyBNdWx0aVNwYW5Qcm9jZXNzb3Ioc3BhblByb2Nlc3NvcnMpO1xuICAgIH1cbiAgICBnZXRUcmFjZXIobmFtZSwgdmVyc2lvbiwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBrZXkgPSBgJHtuYW1lfUAke3ZlcnNpb24gfHwgJyd9OiR7b3B0aW9ucz8uc2NoZW1hVXJsIHx8ICcnfWA7XG4gICAgICAgIGlmICghdGhpcy5fdHJhY2Vycy5oYXMoa2V5KSkge1xuICAgICAgICAgICAgdGhpcy5fdHJhY2Vycy5zZXQoa2V5LCBuZXcgVHJhY2VyKHsgbmFtZSwgdmVyc2lvbiwgc2NoZW1hVXJsOiBvcHRpb25zPy5zY2hlbWFVcmwgfSwgdGhpcy5fY29uZmlnLCB0aGlzLl9yZXNvdXJjZSwgdGhpcy5fYWN0aXZlU3BhblByb2Nlc3NvcikpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgIHJldHVybiB0aGlzLl90cmFjZXJzLmdldChrZXkpO1xuICAgIH1cbiAgICBmb3JjZUZsdXNoKCkge1xuICAgICAgICBjb25zdCB0aW1lb3V0ID0gdGhpcy5fY29uZmlnLmZvcmNlRmx1c2hUaW1lb3V0TWlsbGlzO1xuICAgICAgICBjb25zdCBwcm9taXNlcyA9IHRoaXMuX2FjdGl2ZVNwYW5Qcm9jZXNzb3JbJ19zcGFuUHJvY2Vzc29ycyddLm1hcCgoc3BhblByb2Nlc3NvcikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBzdGF0ZTtcbiAgICAgICAgICAgICAgICBjb25zdCB0aW1lb3V0SW50ZXJ2YWwgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShuZXcgRXJyb3IoYFNwYW4gcHJvY2Vzc29yIGRpZCBub3QgY29tcGxldGVkIHdpdGhpbiB0aW1lb3V0IHBlcmlvZCBvZiAke3RpbWVvdXR9IG1zYCkpO1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IEZvcmNlRmx1c2hTdGF0ZS50aW1lb3V0O1xuICAgICAgICAgICAgICAgIH0sIHRpbWVvdXQpO1xuICAgICAgICAgICAgICAgIHNwYW5Qcm9jZXNzb3JcbiAgICAgICAgICAgICAgICAgICAgLmZvcmNlRmx1c2goKVxuICAgICAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SW50ZXJ2YWwpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUgIT09IEZvcmNlRmx1c2hTdGF0ZS50aW1lb3V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IEZvcmNlRmx1c2hTdGF0ZS5yZXNvbHZlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoc3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJbnRlcnZhbCk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gRm9yY2VGbHVzaFN0YXRlLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIFByb21pc2UuYWxsKHByb21pc2VzKVxuICAgICAgICAgICAgICAgIC50aGVuKHJlc3VsdHMgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9ycyA9IHJlc3VsdHMuZmlsdGVyKHJlc3VsdCA9PiByZXN1bHQgIT09IEZvcmNlRmx1c2hTdGF0ZS5yZXNvbHZlZCk7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IHJlamVjdChbZXJyb3JdKSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzaHV0ZG93bigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGl2ZVNwYW5Qcm9jZXNzb3Iuc2h1dGRvd24oKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1CYXNpY1RyYWNlclByb3ZpZGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/BasicTracerProvider.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/MultiSpanProcessor.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/MultiSpanProcessor.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MultiSpanProcessor: () => (/* binding */ MultiSpanProcessor)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Implementation of the {@link SpanProcessor} that simply forwards all\n * received events to a list of {@link SpanProcessor}s.\n */\nclass MultiSpanProcessor {\n    _spanProcessors;\n    constructor(_spanProcessors) {\n        this._spanProcessors = _spanProcessors;\n    }\n    forceFlush() {\n        const promises = [];\n        for (const spanProcessor of this._spanProcessors) {\n            promises.push(spanProcessor.forceFlush());\n        }\n        return new Promise(resolve => {\n            Promise.all(promises)\n                .then(() => {\n                resolve();\n            })\n                .catch(error => {\n                (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.globalErrorHandler)(error || new Error('MultiSpanProcessor: forceFlush failed'));\n                resolve();\n            });\n        });\n    }\n    onStart(span, context) {\n        for (const spanProcessor of this._spanProcessors) {\n            spanProcessor.onStart(span, context);\n        }\n    }\n    onEnd(span) {\n        for (const spanProcessor of this._spanProcessors) {\n            spanProcessor.onEnd(span);\n        }\n    }\n    shutdown() {\n        const promises = [];\n        for (const spanProcessor of this._spanProcessors) {\n            promises.push(spanProcessor.shutdown());\n        }\n        return new Promise((resolve, reject) => {\n            Promise.all(promises).then(() => {\n                resolve();\n            }, reject);\n        });\n    }\n}\n//# sourceMappingURL=MultiSpanProcessor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Nkay10cmFjZS1iYXNlL2J1aWxkL2VzbS9NdWx0aVNwYW5Qcm9jZXNzb3IuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDeUQ7QUFDekQ7QUFDQSwwQkFBMEIscUJBQXFCO0FBQy9DLGlDQUFpQyxvQkFBb0I7QUFDckQ7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsZ0JBQWdCLHVFQUFrQjtBQUNsQztBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9zZGstdHJhY2UtYmFzZS9idWlsZC9lc20vTXVsdGlTcGFuUHJvY2Vzc29yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBnbG9iYWxFcnJvckhhbmRsZXIgfSBmcm9tICdAb3BlbnRlbGVtZXRyeS9jb3JlJztcbi8qKlxuICogSW1wbGVtZW50YXRpb24gb2YgdGhlIHtAbGluayBTcGFuUHJvY2Vzc29yfSB0aGF0IHNpbXBseSBmb3J3YXJkcyBhbGxcbiAqIHJlY2VpdmVkIGV2ZW50cyB0byBhIGxpc3Qgb2Yge0BsaW5rIFNwYW5Qcm9jZXNzb3J9cy5cbiAqL1xuZXhwb3J0IGNsYXNzIE11bHRpU3BhblByb2Nlc3NvciB7XG4gICAgX3NwYW5Qcm9jZXNzb3JzO1xuICAgIGNvbnN0cnVjdG9yKF9zcGFuUHJvY2Vzc29ycykge1xuICAgICAgICB0aGlzLl9zcGFuUHJvY2Vzc29ycyA9IF9zcGFuUHJvY2Vzc29ycztcbiAgICB9XG4gICAgZm9yY2VGbHVzaCgpIHtcbiAgICAgICAgY29uc3QgcHJvbWlzZXMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBzcGFuUHJvY2Vzc29yIG9mIHRoaXMuX3NwYW5Qcm9jZXNzb3JzKSB7XG4gICAgICAgICAgICBwcm9taXNlcy5wdXNoKHNwYW5Qcm9jZXNzb3IuZm9yY2VGbHVzaCgpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICBQcm9taXNlLmFsbChwcm9taXNlcylcbiAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgIGdsb2JhbEVycm9ySGFuZGxlcihlcnJvciB8fCBuZXcgRXJyb3IoJ011bHRpU3BhblByb2Nlc3NvcjogZm9yY2VGbHVzaCBmYWlsZWQnKSk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBvblN0YXJ0KHNwYW4sIGNvbnRleHQpIHtcbiAgICAgICAgZm9yIChjb25zdCBzcGFuUHJvY2Vzc29yIG9mIHRoaXMuX3NwYW5Qcm9jZXNzb3JzKSB7XG4gICAgICAgICAgICBzcGFuUHJvY2Vzc29yLm9uU3RhcnQoc3BhbiwgY29udGV4dCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgb25FbmQoc3Bhbikge1xuICAgICAgICBmb3IgKGNvbnN0IHNwYW5Qcm9jZXNzb3Igb2YgdGhpcy5fc3BhblByb2Nlc3NvcnMpIHtcbiAgICAgICAgICAgIHNwYW5Qcm9jZXNzb3Iub25FbmQoc3Bhbik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2h1dGRvd24oKSB7XG4gICAgICAgIGNvbnN0IHByb21pc2VzID0gW107XG4gICAgICAgIGZvciAoY29uc3Qgc3BhblByb2Nlc3NvciBvZiB0aGlzLl9zcGFuUHJvY2Vzc29ycykge1xuICAgICAgICAgICAgcHJvbWlzZXMucHVzaChzcGFuUHJvY2Vzc29yLnNodXRkb3duKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TXVsdGlTcGFuUHJvY2Vzc29yLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/MultiSpanProcessor.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/Sampler.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/Sampler.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SamplingDecision: () => (/* binding */ SamplingDecision)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A sampling decision that determines how a {@link Span} will be recorded\n * and collected.\n */\nvar SamplingDecision;\n(function (SamplingDecision) {\n    /**\n     * `Span.isRecording() === false`, span will not be recorded and all events\n     * and attributes will be dropped.\n     */\n    SamplingDecision[SamplingDecision[\"NOT_RECORD\"] = 0] = \"NOT_RECORD\";\n    /**\n     * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}\n     * MUST NOT be set.\n     */\n    SamplingDecision[SamplingDecision[\"RECORD\"] = 1] = \"RECORD\";\n    /**\n     * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}\n     * MUST be set.\n     */\n    SamplingDecision[SamplingDecision[\"RECORD_AND_SAMPLED\"] = 2] = \"RECORD_AND_SAMPLED\";\n})(SamplingDecision || (SamplingDecision = {}));\n//# sourceMappingURL=Sampler.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Nkay10cmFjZS1iYXNlL2J1aWxkL2VzbS9TYW1wbGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxZQUFZO0FBQzFEO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZEO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNERBQTREO0FBQzVEO0FBQ0E7QUFDQTtBQUNBLENBQUMsNENBQTRDO0FBQzdDIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Nkay10cmFjZS1iYXNlL2J1aWxkL2VzbS9TYW1wbGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEEgc2FtcGxpbmcgZGVjaXNpb24gdGhhdCBkZXRlcm1pbmVzIGhvdyBhIHtAbGluayBTcGFufSB3aWxsIGJlIHJlY29yZGVkXG4gKiBhbmQgY29sbGVjdGVkLlxuICovXG5leHBvcnQgdmFyIFNhbXBsaW5nRGVjaXNpb247XG4oZnVuY3Rpb24gKFNhbXBsaW5nRGVjaXNpb24pIHtcbiAgICAvKipcbiAgICAgKiBgU3Bhbi5pc1JlY29yZGluZygpID09PSBmYWxzZWAsIHNwYW4gd2lsbCBub3QgYmUgcmVjb3JkZWQgYW5kIGFsbCBldmVudHNcbiAgICAgKiBhbmQgYXR0cmlidXRlcyB3aWxsIGJlIGRyb3BwZWQuXG4gICAgICovXG4gICAgU2FtcGxpbmdEZWNpc2lvbltTYW1wbGluZ0RlY2lzaW9uW1wiTk9UX1JFQ09SRFwiXSA9IDBdID0gXCJOT1RfUkVDT1JEXCI7XG4gICAgLyoqXG4gICAgICogYFNwYW4uaXNSZWNvcmRpbmcoKSA9PT0gdHJ1ZWAsIGJ1dCBgU2FtcGxlZGAgZmxhZyBpbiB7QGxpbmsgVHJhY2VGbGFnc31cbiAgICAgKiBNVVNUIE5PVCBiZSBzZXQuXG4gICAgICovXG4gICAgU2FtcGxpbmdEZWNpc2lvbltTYW1wbGluZ0RlY2lzaW9uW1wiUkVDT1JEXCJdID0gMV0gPSBcIlJFQ09SRFwiO1xuICAgIC8qKlxuICAgICAqIGBTcGFuLmlzUmVjb3JkaW5nKCkgPT09IHRydWVgIEFORCBgU2FtcGxlZGAgZmxhZyBpbiB7QGxpbmsgVHJhY2VGbGFnc31cbiAgICAgKiBNVVNUIGJlIHNldC5cbiAgICAgKi9cbiAgICBTYW1wbGluZ0RlY2lzaW9uW1NhbXBsaW5nRGVjaXNpb25bXCJSRUNPUkRfQU5EX1NBTVBMRURcIl0gPSAyXSA9IFwiUkVDT1JEX0FORF9TQU1QTEVEXCI7XG59KShTYW1wbGluZ0RlY2lzaW9uIHx8IChTYW1wbGluZ0RlY2lzaW9uID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNhbXBsZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/Sampler.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/Span.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/Span.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SpanImpl: () => (/* binding */ SpanImpl)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/status.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/diag-api.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/platform/node/performance.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/common/time.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/common/attributes.js\");\n/* harmony import */ var _opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/stable_attributes.js\");\n/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./enums */ \"(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/enums.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n/**\n * This class represents a span.\n */\nclass SpanImpl {\n    // Below properties are included to implement ReadableSpan for export\n    // purposes but are not intended to be written-to directly.\n    _spanContext;\n    kind;\n    parentSpanContext;\n    attributes = {};\n    links = [];\n    events = [];\n    startTime;\n    resource;\n    instrumentationScope;\n    _droppedAttributesCount = 0;\n    _droppedEventsCount = 0;\n    _droppedLinksCount = 0;\n    name;\n    status = {\n        code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.SpanStatusCode.UNSET,\n    };\n    endTime = [0, 0];\n    _ended = false;\n    _duration = [-1, -1];\n    _spanProcessor;\n    _spanLimits;\n    _attributeValueLengthLimit;\n    _performanceStartTime;\n    _performanceOffset;\n    _startTimeProvided;\n    /**\n     * Constructs a new SpanImpl instance.\n     */\n    constructor(opts) {\n        const now = Date.now();\n        this._spanContext = opts.spanContext;\n        this._performanceStartTime = _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.otperformance.now();\n        this._performanceOffset =\n            now - (this._performanceStartTime + (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.getTimeOrigin)());\n        this._startTimeProvided = opts.startTime != null;\n        this._spanLimits = opts.spanLimits;\n        this._attributeValueLengthLimit =\n            this._spanLimits.attributeValueLengthLimit || 0;\n        this._spanProcessor = opts.spanProcessor;\n        this.name = opts.name;\n        this.parentSpanContext = opts.parentSpanContext;\n        this.kind = opts.kind;\n        this.links = opts.links || [];\n        this.startTime = this._getTime(opts.startTime ?? now);\n        this.resource = opts.resource;\n        this.instrumentationScope = opts.scope;\n        if (opts.attributes != null) {\n            this.setAttributes(opts.attributes);\n        }\n        this._spanProcessor.onStart(this, opts.context);\n    }\n    spanContext() {\n        return this._spanContext;\n    }\n    setAttribute(key, value) {\n        if (value == null || this._isSpanEnded())\n            return this;\n        if (key.length === 0) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.warn(`Invalid attribute key: ${key}`);\n            return this;\n        }\n        if (!(0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__.isAttributeValue)(value)) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.warn(`Invalid attribute value set for key: ${key}`);\n            return this;\n        }\n        const { attributeCountLimit } = this._spanLimits;\n        if (attributeCountLimit !== undefined &&\n            Object.keys(this.attributes).length >= attributeCountLimit &&\n            !Object.prototype.hasOwnProperty.call(this.attributes, key)) {\n            this._droppedAttributesCount++;\n            return this;\n        }\n        this.attributes[key] = this._truncateToSize(value);\n        return this;\n    }\n    setAttributes(attributes) {\n        for (const [k, v] of Object.entries(attributes)) {\n            this.setAttribute(k, v);\n        }\n        return this;\n    }\n    /**\n     *\n     * @param name Span Name\n     * @param [attributesOrStartTime] Span attributes or start time\n     *     if type is {@type TimeInput} and 3rd param is undefined\n     * @param [timeStamp] Specified time stamp for the event\n     */\n    addEvent(name, attributesOrStartTime, timeStamp) {\n        if (this._isSpanEnded())\n            return this;\n        const { eventCountLimit } = this._spanLimits;\n        if (eventCountLimit === 0) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.warn('No events allowed.');\n            this._droppedEventsCount++;\n            return this;\n        }\n        if (eventCountLimit !== undefined &&\n            this.events.length >= eventCountLimit) {\n            if (this._droppedEventsCount === 0) {\n                _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.debug('Dropping extra events.');\n            }\n            this.events.shift();\n            this._droppedEventsCount++;\n        }\n        if ((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.isTimeInput)(attributesOrStartTime)) {\n            if (!(0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.isTimeInput)(timeStamp)) {\n                timeStamp = attributesOrStartTime;\n            }\n            attributesOrStartTime = undefined;\n        }\n        const attributes = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__.sanitizeAttributes)(attributesOrStartTime);\n        this.events.push({\n            name,\n            attributes,\n            time: this._getTime(timeStamp),\n            droppedAttributesCount: 0,\n        });\n        return this;\n    }\n    addLink(link) {\n        this.links.push(link);\n        return this;\n    }\n    addLinks(links) {\n        this.links.push(...links);\n        return this;\n    }\n    setStatus(status) {\n        if (this._isSpanEnded())\n            return this;\n        this.status = { ...status };\n        // When using try-catch, the caught \"error\" is of type `any`. When then assigning `any` to `status.message`,\n        // TypeScript will not error. While this can happen during use of any API, it is more common on Span#setStatus()\n        // as it's likely used in a catch-block. Therefore, we validate if `status.message` is actually a string, null, or\n        // undefined to avoid an incorrect type causing issues downstream.\n        if (this.status.message != null && typeof status.message !== 'string') {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.warn(`Dropping invalid status.message of type '${typeof status.message}', expected 'string'`);\n            delete this.status.message;\n        }\n        return this;\n    }\n    updateName(name) {\n        if (this._isSpanEnded())\n            return this;\n        this.name = name;\n        return this;\n    }\n    end(endTime) {\n        if (this._isSpanEnded()) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.error(`${this.name} ${this._spanContext.traceId}-${this._spanContext.spanId} - You can only call end() on a span once.`);\n            return;\n        }\n        this._ended = true;\n        this.endTime = this._getTime(endTime);\n        this._duration = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTimeDuration)(this.startTime, this.endTime);\n        if (this._duration[0] < 0) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.warn('Inconsistent start and end time, startTime > endTime. Setting span duration to 0ms.', this.startTime, this.endTime);\n            this.endTime = this.startTime.slice();\n            this._duration = [0, 0];\n        }\n        if (this._droppedEventsCount > 0) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.warn(`Dropped ${this._droppedEventsCount} events because eventCountLimit reached`);\n        }\n        this._spanProcessor.onEnd(this);\n    }\n    _getTime(inp) {\n        if (typeof inp === 'number' && inp <= _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.otperformance.now()) {\n            // must be a performance timestamp\n            // apply correction and convert to hrtime\n            return (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTime)(inp + this._performanceOffset);\n        }\n        if (typeof inp === 'number') {\n            return (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.millisToHrTime)(inp);\n        }\n        if (inp instanceof Date) {\n            return (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.millisToHrTime)(inp.getTime());\n        }\n        if ((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.isTimeInputHrTime)(inp)) {\n            return inp;\n        }\n        if (this._startTimeProvided) {\n            // if user provided a time for the start manually\n            // we can't use duration to calculate event/end times\n            return (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.millisToHrTime)(Date.now());\n        }\n        const msDuration = _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.otperformance.now() - this._performanceStartTime;\n        return (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.addHrTimes)(this.startTime, (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.millisToHrTime)(msDuration));\n    }\n    isRecording() {\n        return this._ended === false;\n    }\n    recordException(exception, time) {\n        const attributes = {};\n        if (typeof exception === 'string') {\n            attributes[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__.ATTR_EXCEPTION_MESSAGE] = exception;\n        }\n        else if (exception) {\n            if (exception.code) {\n                attributes[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__.ATTR_EXCEPTION_TYPE] = exception.code.toString();\n            }\n            else if (exception.name) {\n                attributes[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__.ATTR_EXCEPTION_TYPE] = exception.name;\n            }\n            if (exception.message) {\n                attributes[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__.ATTR_EXCEPTION_MESSAGE] = exception.message;\n            }\n            if (exception.stack) {\n                attributes[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__.ATTR_EXCEPTION_STACKTRACE] = exception.stack;\n            }\n        }\n        // these are minimum requirements from spec\n        if (attributes[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__.ATTR_EXCEPTION_TYPE] || attributes[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__.ATTR_EXCEPTION_MESSAGE]) {\n            this.addEvent(_enums__WEBPACK_IMPORTED_MODULE_6__.ExceptionEventName, attributes, time);\n        }\n        else {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.warn(`Failed to record an exception ${exception}`);\n        }\n    }\n    get duration() {\n        return this._duration;\n    }\n    get ended() {\n        return this._ended;\n    }\n    get droppedAttributesCount() {\n        return this._droppedAttributesCount;\n    }\n    get droppedEventsCount() {\n        return this._droppedEventsCount;\n    }\n    get droppedLinksCount() {\n        return this._droppedLinksCount;\n    }\n    _isSpanEnded() {\n        if (this._ended) {\n            const error = new Error(`Operation attempted on ended Span {traceId: ${this._spanContext.traceId}, spanId: ${this._spanContext.spanId}}`);\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.warn(`Cannot execute the operation on ended Span {traceId: ${this._spanContext.traceId}, spanId: ${this._spanContext.spanId}}`, error);\n        }\n        return this._ended;\n    }\n    // Utility function to truncate given value within size\n    // for value type of string, will truncate to given limit\n    // for type of non-string, will return same value\n    _truncateToLimitUtil(value, limit) {\n        if (value.length <= limit) {\n            return value;\n        }\n        return value.substring(0, limit);\n    }\n    /**\n     * If the given attribute value is of type string and has more characters than given {@code attributeValueLengthLimit} then\n     * return string with truncated to {@code attributeValueLengthLimit} characters\n     *\n     * If the given attribute value is array of strings then\n     * return new array of strings with each element truncated to {@code attributeValueLengthLimit} characters\n     *\n     * Otherwise return same Attribute {@code value}\n     *\n     * @param value Attribute value\n     * @returns truncated attribute value if required, otherwise same value\n     */\n    _truncateToSize(value) {\n        const limit = this._attributeValueLengthLimit;\n        // Check limit\n        if (limit <= 0) {\n            // Negative values are invalid, so do not truncate\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.warn(`Attribute value limit must be positive, got ${limit}`);\n            return value;\n        }\n        // String\n        if (typeof value === 'string') {\n            return this._truncateToLimitUtil(value, limit);\n        }\n        // Array of strings\n        if (Array.isArray(value)) {\n            return value.map(val => typeof val === 'string' ? this._truncateToLimitUtil(val, limit) : val);\n        }\n        // Other types, no need to apply value length limit\n        return value;\n    }\n}\n//# sourceMappingURL=Span.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/Span.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/Tracer.js":
/*!************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/Tracer.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Tracer: () => (/* binding */ Tracer)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/context-api.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace-api.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/diag-api.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/span_kind.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/SamplingResult.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/common/attributes.js\");\n/* harmony import */ var _Span__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Span */ \"(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/Span.js\");\n/* harmony import */ var _utility__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utility */ \"(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/utility.js\");\n/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./platform */ \"(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/node/RandomIdGenerator.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n/**\n * This class represents a basic tracer.\n */\nclass Tracer {\n    _sampler;\n    _generalLimits;\n    _spanLimits;\n    _idGenerator;\n    instrumentationScope;\n    _resource;\n    _spanProcessor;\n    /**\n     * Constructs a new Tracer instance.\n     */\n    constructor(instrumentationScope, config, resource, spanProcessor) {\n        const localConfig = (0,_utility__WEBPACK_IMPORTED_MODULE_0__.mergeConfig)(config);\n        this._sampler = localConfig.sampler;\n        this._generalLimits = localConfig.generalLimits;\n        this._spanLimits = localConfig.spanLimits;\n        this._idGenerator = config.idGenerator || new _platform__WEBPACK_IMPORTED_MODULE_1__.RandomIdGenerator();\n        this._resource = resource;\n        this._spanProcessor = spanProcessor;\n        this.instrumentationScope = instrumentationScope;\n    }\n    /**\n     * Starts a new Span or returns the default NoopSpan based on the sampling\n     * decision.\n     */\n    startSpan(name, options = {}, context = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.context.active()) {\n        // remove span from context in case a root span is requested via options\n        if (options.root) {\n            context = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.trace.deleteSpan(context);\n        }\n        const parentSpan = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.trace.getSpan(context);\n        if ((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__.isTracingSuppressed)(context)) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__.diag.debug('Instrumentation suppressed, returning Noop Span');\n            const nonRecordingSpan = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.trace.wrapSpanContext(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_6__.INVALID_SPAN_CONTEXT);\n            return nonRecordingSpan;\n        }\n        const parentSpanContext = parentSpan?.spanContext();\n        const spanId = this._idGenerator.generateSpanId();\n        let validParentSpanContext;\n        let traceId;\n        let traceState;\n        if (!parentSpanContext ||\n            !_opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.trace.isSpanContextValid(parentSpanContext)) {\n            // New root span.\n            traceId = this._idGenerator.generateTraceId();\n        }\n        else {\n            // New child span.\n            traceId = parentSpanContext.traceId;\n            traceState = parentSpanContext.traceState;\n            validParentSpanContext = parentSpanContext;\n        }\n        const spanKind = options.kind ?? _opentelemetry_api__WEBPACK_IMPORTED_MODULE_7__.SpanKind.INTERNAL;\n        const links = (options.links ?? []).map(link => {\n            return {\n                context: link.context,\n                attributes: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_8__.sanitizeAttributes)(link.attributes),\n            };\n        });\n        const attributes = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_8__.sanitizeAttributes)(options.attributes);\n        // make sampling decision\n        const samplingResult = this._sampler.shouldSample(context, traceId, name, spanKind, attributes, links);\n        traceState = samplingResult.traceState ?? traceState;\n        const traceFlags = samplingResult.decision === _opentelemetry_api__WEBPACK_IMPORTED_MODULE_9__.SamplingDecision.RECORD_AND_SAMPLED\n            ? _opentelemetry_api__WEBPACK_IMPORTED_MODULE_10__.TraceFlags.SAMPLED\n            : _opentelemetry_api__WEBPACK_IMPORTED_MODULE_10__.TraceFlags.NONE;\n        const spanContext = { traceId, spanId, traceFlags, traceState };\n        if (samplingResult.decision === _opentelemetry_api__WEBPACK_IMPORTED_MODULE_9__.SamplingDecision.NOT_RECORD) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__.diag.debug('Recording is off, propagating context in a non-recording span');\n            const nonRecordingSpan = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.trace.wrapSpanContext(spanContext);\n            return nonRecordingSpan;\n        }\n        // Set initial span attributes. The attributes object may have been mutated\n        // by the sampler, so we sanitize the merged attributes before setting them.\n        const initAttributes = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_8__.sanitizeAttributes)(Object.assign(attributes, samplingResult.attributes));\n        const span = new _Span__WEBPACK_IMPORTED_MODULE_11__.SpanImpl({\n            resource: this._resource,\n            scope: this.instrumentationScope,\n            context,\n            spanContext,\n            name,\n            kind: spanKind,\n            links,\n            parentSpanContext: validParentSpanContext,\n            attributes: initAttributes,\n            startTime: options.startTime,\n            spanProcessor: this._spanProcessor,\n            spanLimits: this._spanLimits,\n        });\n        return span;\n    }\n    startActiveSpan(name, arg2, arg3, arg4) {\n        let opts;\n        let ctx;\n        let fn;\n        if (arguments.length < 2) {\n            return;\n        }\n        else if (arguments.length === 2) {\n            fn = arg2;\n        }\n        else if (arguments.length === 3) {\n            opts = arg2;\n            fn = arg3;\n        }\n        else {\n            opts = arg2;\n            ctx = arg3;\n            fn = arg4;\n        }\n        const parentContext = ctx ?? _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.context.active();\n        const span = this.startSpan(name, opts, parentContext);\n        const contextWithSpanSet = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.trace.setSpan(parentContext, span);\n        return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.context.with(contextWithSpanSet, fn, undefined, span);\n    }\n    /** Returns the active {@link GeneralLimits}. */\n    getGeneralLimits() {\n        return this._generalLimits;\n    }\n    /** Returns the active {@link SpanLimits}. */\n    getSpanLimits() {\n        return this._spanLimits;\n    }\n}\n//# sourceMappingURL=Tracer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/Tracer.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/config.js":
/*!************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/config.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildSamplerFromEnv: () => (/* binding */ buildSamplerFromEnv),\n/* harmony export */   loadDefaultConfig: () => (/* binding */ loadDefaultConfig)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/diag-api.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/platform/node/environment.js\");\n/* harmony import */ var _sampler_AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sampler/AlwaysOffSampler */ \"(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOffSampler.js\");\n/* harmony import */ var _sampler_AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sampler/AlwaysOnSampler */ \"(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOnSampler.js\");\n/* harmony import */ var _sampler_ParentBasedSampler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sampler/ParentBasedSampler */ \"(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/ParentBasedSampler.js\");\n/* harmony import */ var _sampler_TraceIdRatioBasedSampler__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sampler/TraceIdRatioBasedSampler */ \"(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/TraceIdRatioBasedSampler.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\nconst DEFAULT_RATIO = 1;\n/**\n * Load default configuration. For fields with primitive values, any user-provided\n * value will override the corresponding default value. For fields with\n * non-primitive values (like `spanLimits`), the user-provided value will be\n * used to extend the default value.\n */\n// object needs to be wrapped in this function and called when needed otherwise\n// envs are parsed before tests are ran - causes tests using these envs to fail\nfunction loadDefaultConfig() {\n    return {\n        sampler: buildSamplerFromEnv(),\n        forceFlushTimeoutMillis: 30000,\n        generalLimits: {\n            attributeValueLengthLimit: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.getNumberFromEnv)('OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT') ?? Infinity,\n            attributeCountLimit: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.getNumberFromEnv)('OTEL_ATTRIBUTE_COUNT_LIMIT') ?? 128,\n        },\n        spanLimits: {\n            attributeValueLengthLimit: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.getNumberFromEnv)('OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT') ?? Infinity,\n            attributeCountLimit: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.getNumberFromEnv)('OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT') ?? 128,\n            linkCountLimit: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.getNumberFromEnv)('OTEL_SPAN_LINK_COUNT_LIMIT') ?? 128,\n            eventCountLimit: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.getNumberFromEnv)('OTEL_SPAN_EVENT_COUNT_LIMIT') ?? 128,\n            attributePerEventCountLimit: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.getNumberFromEnv)('OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT') ?? 128,\n            attributePerLinkCountLimit: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.getNumberFromEnv)('OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT') ?? 128,\n        },\n    };\n}\n/**\n * Based on environment, builds a sampler, complies with specification.\n */\nfunction buildSamplerFromEnv() {\n    const sampler = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.getStringFromEnv)('OTEL_TRACES_SAMPLER') ??\n        \"parentbased_always_on\" /* TracesSamplerValues.ParentBasedAlwaysOn */;\n    switch (sampler) {\n        case \"always_on\" /* TracesSamplerValues.AlwaysOn */:\n            return new _sampler_AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_1__.AlwaysOnSampler();\n        case \"always_off\" /* TracesSamplerValues.AlwaysOff */:\n            return new _sampler_AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_2__.AlwaysOffSampler();\n        case \"parentbased_always_on\" /* TracesSamplerValues.ParentBasedAlwaysOn */:\n            return new _sampler_ParentBasedSampler__WEBPACK_IMPORTED_MODULE_3__.ParentBasedSampler({\n                root: new _sampler_AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_1__.AlwaysOnSampler(),\n            });\n        case \"parentbased_always_off\" /* TracesSamplerValues.ParentBasedAlwaysOff */:\n            return new _sampler_ParentBasedSampler__WEBPACK_IMPORTED_MODULE_3__.ParentBasedSampler({\n                root: new _sampler_AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_2__.AlwaysOffSampler(),\n            });\n        case \"traceidratio\" /* TracesSamplerValues.TraceIdRatio */:\n            return new _sampler_TraceIdRatioBasedSampler__WEBPACK_IMPORTED_MODULE_4__.TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv());\n        case \"parentbased_traceidratio\" /* TracesSamplerValues.ParentBasedTraceIdRatio */:\n            return new _sampler_ParentBasedSampler__WEBPACK_IMPORTED_MODULE_3__.ParentBasedSampler({\n                root: new _sampler_TraceIdRatioBasedSampler__WEBPACK_IMPORTED_MODULE_4__.TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv()),\n            });\n        default:\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__.diag.error(`OTEL_TRACES_SAMPLER value \"${sampler}\" invalid, defaulting to \"${\"parentbased_always_on\" /* TracesSamplerValues.ParentBasedAlwaysOn */}\".`);\n            return new _sampler_ParentBasedSampler__WEBPACK_IMPORTED_MODULE_3__.ParentBasedSampler({\n                root: new _sampler_AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_1__.AlwaysOnSampler(),\n            });\n    }\n}\nfunction getSamplerProbabilityFromEnv() {\n    const probability = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.getNumberFromEnv)('OTEL_TRACES_SAMPLER_ARG');\n    if (probability == null) {\n        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__.diag.error(`OTEL_TRACES_SAMPLER_ARG is blank, defaulting to ${DEFAULT_RATIO}.`);\n        return DEFAULT_RATIO;\n    }\n    if (probability < 0 || probability > 1) {\n        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__.diag.error(`OTEL_TRACES_SAMPLER_ARG=${probability} was given, but it is out of range ([0..1]), defaulting to ${DEFAULT_RATIO}.`);\n        return DEFAULT_RATIO;\n    }\n    return probability;\n}\n//# sourceMappingURL=config.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Nkay10cmFjZS1iYXNlL2J1aWxkL2VzbS9jb25maWcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDMEM7QUFDK0I7QUFDWDtBQUNGO0FBQ007QUFDWTtBQUM5RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLHFFQUFnQjtBQUN2RCxpQ0FBaUMscUVBQWdCO0FBQ2pELFNBQVM7QUFDVDtBQUNBLHVDQUF1QyxxRUFBZ0I7QUFDdkQsaUNBQWlDLHFFQUFnQjtBQUNqRCw0QkFBNEIscUVBQWdCO0FBQzVDLDZCQUE2QixxRUFBZ0I7QUFDN0MseUNBQXlDLHFFQUFnQjtBQUN6RCx3Q0FBd0MscUVBQWdCO0FBQ3hELFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxvQkFBb0IscUVBQWdCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixxRUFBZTtBQUN0QztBQUNBLHVCQUF1Qix1RUFBZ0I7QUFDdkM7QUFDQSx1QkFBdUIsMkVBQWtCO0FBQ3pDLDBCQUEwQixxRUFBZTtBQUN6QyxhQUFhO0FBQ2I7QUFDQSx1QkFBdUIsMkVBQWtCO0FBQ3pDLDBCQUEwQix1RUFBZ0I7QUFDMUMsYUFBYTtBQUNiO0FBQ0EsdUJBQXVCLHVGQUF3QjtBQUMvQztBQUNBLHVCQUF1QiwyRUFBa0I7QUFDekMsMEJBQTBCLHVGQUF3QjtBQUNsRCxhQUFhO0FBQ2I7QUFDQSxZQUFZLG9EQUFJLHFDQUFxQyxRQUFRLDRCQUE0QixzRUFBc0U7QUFDL0osdUJBQXVCLDJFQUFrQjtBQUN6QywwQkFBMEIscUVBQWU7QUFDekMsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixxRUFBZ0I7QUFDeEM7QUFDQSxRQUFRLG9EQUFJLDBEQUEwRCxjQUFjO0FBQ3BGO0FBQ0E7QUFDQTtBQUNBLFFBQVEsb0RBQUksa0NBQWtDLGFBQWEsNERBQTRELGNBQWM7QUFDckk7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9zZGstdHJhY2UtYmFzZS9idWlsZC9lc20vY29uZmlnLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBkaWFnIH0gZnJvbSAnQG9wZW50ZWxlbWV0cnkvYXBpJztcbmltcG9ydCB7IGdldE51bWJlckZyb21FbnYsIGdldFN0cmluZ0Zyb21FbnYgfSBmcm9tICdAb3BlbnRlbGVtZXRyeS9jb3JlJztcbmltcG9ydCB7IEFsd2F5c09mZlNhbXBsZXIgfSBmcm9tICcuL3NhbXBsZXIvQWx3YXlzT2ZmU2FtcGxlcic7XG5pbXBvcnQgeyBBbHdheXNPblNhbXBsZXIgfSBmcm9tICcuL3NhbXBsZXIvQWx3YXlzT25TYW1wbGVyJztcbmltcG9ydCB7IFBhcmVudEJhc2VkU2FtcGxlciB9IGZyb20gJy4vc2FtcGxlci9QYXJlbnRCYXNlZFNhbXBsZXInO1xuaW1wb3J0IHsgVHJhY2VJZFJhdGlvQmFzZWRTYW1wbGVyIH0gZnJvbSAnLi9zYW1wbGVyL1RyYWNlSWRSYXRpb0Jhc2VkU2FtcGxlcic7XG5jb25zdCBERUZBVUxUX1JBVElPID0gMTtcbi8qKlxuICogTG9hZCBkZWZhdWx0IGNvbmZpZ3VyYXRpb24uIEZvciBmaWVsZHMgd2l0aCBwcmltaXRpdmUgdmFsdWVzLCBhbnkgdXNlci1wcm92aWRlZFxuICogdmFsdWUgd2lsbCBvdmVycmlkZSB0aGUgY29ycmVzcG9uZGluZyBkZWZhdWx0IHZhbHVlLiBGb3IgZmllbGRzIHdpdGhcbiAqIG5vbi1wcmltaXRpdmUgdmFsdWVzIChsaWtlIGBzcGFuTGltaXRzYCksIHRoZSB1c2VyLXByb3ZpZGVkIHZhbHVlIHdpbGwgYmVcbiAqIHVzZWQgdG8gZXh0ZW5kIHRoZSBkZWZhdWx0IHZhbHVlLlxuICovXG4vLyBvYmplY3QgbmVlZHMgdG8gYmUgd3JhcHBlZCBpbiB0aGlzIGZ1bmN0aW9uIGFuZCBjYWxsZWQgd2hlbiBuZWVkZWQgb3RoZXJ3aXNlXG4vLyBlbnZzIGFyZSBwYXJzZWQgYmVmb3JlIHRlc3RzIGFyZSByYW4gLSBjYXVzZXMgdGVzdHMgdXNpbmcgdGhlc2UgZW52cyB0byBmYWlsXG5leHBvcnQgZnVuY3Rpb24gbG9hZERlZmF1bHRDb25maWcoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2FtcGxlcjogYnVpbGRTYW1wbGVyRnJvbUVudigpLFxuICAgICAgICBmb3JjZUZsdXNoVGltZW91dE1pbGxpczogMzAwMDAsXG4gICAgICAgIGdlbmVyYWxMaW1pdHM6IHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZVZhbHVlTGVuZ3RoTGltaXQ6IGdldE51bWJlckZyb21FbnYoJ09URUxfQVRUUklCVVRFX1ZBTFVFX0xFTkdUSF9MSU1JVCcpID8/IEluZmluaXR5LFxuICAgICAgICAgICAgYXR0cmlidXRlQ291bnRMaW1pdDogZ2V0TnVtYmVyRnJvbUVudignT1RFTF9BVFRSSUJVVEVfQ09VTlRfTElNSVQnKSA/PyAxMjgsXG4gICAgICAgIH0sXG4gICAgICAgIHNwYW5MaW1pdHM6IHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZVZhbHVlTGVuZ3RoTGltaXQ6IGdldE51bWJlckZyb21FbnYoJ09URUxfU1BBTl9BVFRSSUJVVEVfVkFMVUVfTEVOR1RIX0xJTUlUJykgPz8gSW5maW5pdHksXG4gICAgICAgICAgICBhdHRyaWJ1dGVDb3VudExpbWl0OiBnZXROdW1iZXJGcm9tRW52KCdPVEVMX1NQQU5fQVRUUklCVVRFX0NPVU5UX0xJTUlUJykgPz8gMTI4LFxuICAgICAgICAgICAgbGlua0NvdW50TGltaXQ6IGdldE51bWJlckZyb21FbnYoJ09URUxfU1BBTl9MSU5LX0NPVU5UX0xJTUlUJykgPz8gMTI4LFxuICAgICAgICAgICAgZXZlbnRDb3VudExpbWl0OiBnZXROdW1iZXJGcm9tRW52KCdPVEVMX1NQQU5fRVZFTlRfQ09VTlRfTElNSVQnKSA/PyAxMjgsXG4gICAgICAgICAgICBhdHRyaWJ1dGVQZXJFdmVudENvdW50TGltaXQ6IGdldE51bWJlckZyb21FbnYoJ09URUxfU1BBTl9BVFRSSUJVVEVfUEVSX0VWRU5UX0NPVU5UX0xJTUlUJykgPz8gMTI4LFxuICAgICAgICAgICAgYXR0cmlidXRlUGVyTGlua0NvdW50TGltaXQ6IGdldE51bWJlckZyb21FbnYoJ09URUxfU1BBTl9BVFRSSUJVVEVfUEVSX0xJTktfQ09VTlRfTElNSVQnKSA/PyAxMjgsXG4gICAgICAgIH0sXG4gICAgfTtcbn1cbi8qKlxuICogQmFzZWQgb24gZW52aXJvbm1lbnQsIGJ1aWxkcyBhIHNhbXBsZXIsIGNvbXBsaWVzIHdpdGggc3BlY2lmaWNhdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkU2FtcGxlckZyb21FbnYoKSB7XG4gICAgY29uc3Qgc2FtcGxlciA9IGdldFN0cmluZ0Zyb21FbnYoJ09URUxfVFJBQ0VTX1NBTVBMRVInKSA/P1xuICAgICAgICBcInBhcmVudGJhc2VkX2Fsd2F5c19vblwiIC8qIFRyYWNlc1NhbXBsZXJWYWx1ZXMuUGFyZW50QmFzZWRBbHdheXNPbiAqLztcbiAgICBzd2l0Y2ggKHNhbXBsZXIpIHtcbiAgICAgICAgY2FzZSBcImFsd2F5c19vblwiIC8qIFRyYWNlc1NhbXBsZXJWYWx1ZXMuQWx3YXlzT24gKi86XG4gICAgICAgICAgICByZXR1cm4gbmV3IEFsd2F5c09uU2FtcGxlcigpO1xuICAgICAgICBjYXNlIFwiYWx3YXlzX29mZlwiIC8qIFRyYWNlc1NhbXBsZXJWYWx1ZXMuQWx3YXlzT2ZmICovOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBBbHdheXNPZmZTYW1wbGVyKCk7XG4gICAgICAgIGNhc2UgXCJwYXJlbnRiYXNlZF9hbHdheXNfb25cIiAvKiBUcmFjZXNTYW1wbGVyVmFsdWVzLlBhcmVudEJhc2VkQWx3YXlzT24gKi86XG4gICAgICAgICAgICByZXR1cm4gbmV3IFBhcmVudEJhc2VkU2FtcGxlcih7XG4gICAgICAgICAgICAgICAgcm9vdDogbmV3IEFsd2F5c09uU2FtcGxlcigpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIGNhc2UgXCJwYXJlbnRiYXNlZF9hbHdheXNfb2ZmXCIgLyogVHJhY2VzU2FtcGxlclZhbHVlcy5QYXJlbnRCYXNlZEFsd2F5c09mZiAqLzpcbiAgICAgICAgICAgIHJldHVybiBuZXcgUGFyZW50QmFzZWRTYW1wbGVyKHtcbiAgICAgICAgICAgICAgICByb290OiBuZXcgQWx3YXlzT2ZmU2FtcGxlcigpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIGNhc2UgXCJ0cmFjZWlkcmF0aW9cIiAvKiBUcmFjZXNTYW1wbGVyVmFsdWVzLlRyYWNlSWRSYXRpbyAqLzpcbiAgICAgICAgICAgIHJldHVybiBuZXcgVHJhY2VJZFJhdGlvQmFzZWRTYW1wbGVyKGdldFNhbXBsZXJQcm9iYWJpbGl0eUZyb21FbnYoKSk7XG4gICAgICAgIGNhc2UgXCJwYXJlbnRiYXNlZF90cmFjZWlkcmF0aW9cIiAvKiBUcmFjZXNTYW1wbGVyVmFsdWVzLlBhcmVudEJhc2VkVHJhY2VJZFJhdGlvICovOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQYXJlbnRCYXNlZFNhbXBsZXIoe1xuICAgICAgICAgICAgICAgIHJvb3Q6IG5ldyBUcmFjZUlkUmF0aW9CYXNlZFNhbXBsZXIoZ2V0U2FtcGxlclByb2JhYmlsaXR5RnJvbUVudigpKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgZGlhZy5lcnJvcihgT1RFTF9UUkFDRVNfU0FNUExFUiB2YWx1ZSBcIiR7c2FtcGxlcn1cIiBpbnZhbGlkLCBkZWZhdWx0aW5nIHRvIFwiJHtcInBhcmVudGJhc2VkX2Fsd2F5c19vblwiIC8qIFRyYWNlc1NhbXBsZXJWYWx1ZXMuUGFyZW50QmFzZWRBbHdheXNPbiAqL31cIi5gKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUGFyZW50QmFzZWRTYW1wbGVyKHtcbiAgICAgICAgICAgICAgICByb290OiBuZXcgQWx3YXlzT25TYW1wbGVyKCksXG4gICAgICAgICAgICB9KTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRTYW1wbGVyUHJvYmFiaWxpdHlGcm9tRW52KCkge1xuICAgIGNvbnN0IHByb2JhYmlsaXR5ID0gZ2V0TnVtYmVyRnJvbUVudignT1RFTF9UUkFDRVNfU0FNUExFUl9BUkcnKTtcbiAgICBpZiAocHJvYmFiaWxpdHkgPT0gbnVsbCkge1xuICAgICAgICBkaWFnLmVycm9yKGBPVEVMX1RSQUNFU19TQU1QTEVSX0FSRyBpcyBibGFuaywgZGVmYXVsdGluZyB0byAke0RFRkFVTFRfUkFUSU99LmApO1xuICAgICAgICByZXR1cm4gREVGQVVMVF9SQVRJTztcbiAgICB9XG4gICAgaWYgKHByb2JhYmlsaXR5IDwgMCB8fCBwcm9iYWJpbGl0eSA+IDEpIHtcbiAgICAgICAgZGlhZy5lcnJvcihgT1RFTF9UUkFDRVNfU0FNUExFUl9BUkc9JHtwcm9iYWJpbGl0eX0gd2FzIGdpdmVuLCBidXQgaXQgaXMgb3V0IG9mIHJhbmdlIChbMC4uMV0pLCBkZWZhdWx0aW5nIHRvICR7REVGQVVMVF9SQVRJT30uYCk7XG4gICAgICAgIHJldHVybiBERUZBVUxUX1JBVElPO1xuICAgIH1cbiAgICByZXR1cm4gcHJvYmFiaWxpdHk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25maWcuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/config.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/enums.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/enums.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExceptionEventName: () => (/* binding */ ExceptionEventName)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Event name definitions\nconst ExceptionEventName = 'exception';\n//# sourceMappingURL=enums.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Nkay10cmFjZS1iYXNlL2J1aWxkL2VzbS9lbnVtcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Nkay10cmFjZS1iYXNlL2J1aWxkL2VzbS9lbnVtcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLy8gRXZlbnQgbmFtZSBkZWZpbml0aW9uc1xuZXhwb3J0IGNvbnN0IEV4Y2VwdGlvbkV2ZW50TmFtZSA9ICdleGNlcHRpb24nO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW51bXMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/enums.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/BatchSpanProcessorBase.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/BatchSpanProcessorBase.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BatchSpanProcessorBase: () => (/* binding */ BatchSpanProcessorBase)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/diag-api.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/context-api.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/platform/node/environment.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/utils/callback.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/ExportResult.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/platform/node/timer-util.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Implementation of the {@link SpanProcessor} that batches spans exported by\n * the SDK then pushes them to the exporter pipeline.\n */\nclass BatchSpanProcessorBase {\n    _exporter;\n    _maxExportBatchSize;\n    _maxQueueSize;\n    _scheduledDelayMillis;\n    _exportTimeoutMillis;\n    _isExporting = false;\n    _finishedSpans = [];\n    _timer;\n    _shutdownOnce;\n    _droppedSpansCount = 0;\n    constructor(_exporter, config) {\n        this._exporter = _exporter;\n        this._maxExportBatchSize =\n            typeof config?.maxExportBatchSize === 'number'\n                ? config.maxExportBatchSize\n                : ((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.getNumberFromEnv)('OTEL_BSP_MAX_EXPORT_BATCH_SIZE') ?? 512);\n        this._maxQueueSize =\n            typeof config?.maxQueueSize === 'number'\n                ? config.maxQueueSize\n                : ((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.getNumberFromEnv)('OTEL_BSP_MAX_QUEUE_SIZE') ?? 2048);\n        this._scheduledDelayMillis =\n            typeof config?.scheduledDelayMillis === 'number'\n                ? config.scheduledDelayMillis\n                : ((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.getNumberFromEnv)('OTEL_BSP_SCHEDULE_DELAY') ?? 5000);\n        this._exportTimeoutMillis =\n            typeof config?.exportTimeoutMillis === 'number'\n                ? config.exportTimeoutMillis\n                : ((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.getNumberFromEnv)('OTEL_BSP_EXPORT_TIMEOUT') ?? 30000);\n        this._shutdownOnce = new _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.BindOnceFuture(this._shutdown, this);\n        if (this._maxExportBatchSize > this._maxQueueSize) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.diag.warn('BatchSpanProcessor: maxExportBatchSize must be smaller or equal to maxQueueSize, setting maxExportBatchSize to match maxQueueSize');\n            this._maxExportBatchSize = this._maxQueueSize;\n        }\n    }\n    forceFlush() {\n        if (this._shutdownOnce.isCalled) {\n            return this._shutdownOnce.promise;\n        }\n        return this._flushAll();\n    }\n    // does nothing.\n    onStart(_span, _parentContext) { }\n    onEnd(span) {\n        if (this._shutdownOnce.isCalled) {\n            return;\n        }\n        if ((span.spanContext().traceFlags & _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.TraceFlags.SAMPLED) === 0) {\n            return;\n        }\n        this._addToBuffer(span);\n    }\n    shutdown() {\n        return this._shutdownOnce.call();\n    }\n    _shutdown() {\n        return Promise.resolve()\n            .then(() => {\n            return this.onShutdown();\n        })\n            .then(() => {\n            return this._flushAll();\n        })\n            .then(() => {\n            return this._exporter.shutdown();\n        });\n    }\n    /** Add a span in the buffer. */\n    _addToBuffer(span) {\n        if (this._finishedSpans.length >= this._maxQueueSize) {\n            // limit reached, drop span\n            if (this._droppedSpansCount === 0) {\n                _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.diag.debug('maxQueueSize reached, dropping spans');\n            }\n            this._droppedSpansCount++;\n            return;\n        }\n        if (this._droppedSpansCount > 0) {\n            // some spans were dropped, log once with count of spans dropped\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.diag.warn(`Dropped ${this._droppedSpansCount} spans because maxQueueSize reached`);\n            this._droppedSpansCount = 0;\n        }\n        this._finishedSpans.push(span);\n        this._maybeStartTimer();\n    }\n    /**\n     * Send all spans to the exporter respecting the batch size limit\n     * This function is used only on forceFlush or shutdown,\n     * for all other cases _flush should be used\n     * */\n    _flushAll() {\n        return new Promise((resolve, reject) => {\n            const promises = [];\n            // calculate number of batches\n            const count = Math.ceil(this._finishedSpans.length / this._maxExportBatchSize);\n            for (let i = 0, j = count; i < j; i++) {\n                promises.push(this._flushOneBatch());\n            }\n            Promise.all(promises)\n                .then(() => {\n                resolve();\n            })\n                .catch(reject);\n        });\n    }\n    _flushOneBatch() {\n        this._clearTimer();\n        if (this._finishedSpans.length === 0) {\n            return Promise.resolve();\n        }\n        return new Promise((resolve, reject) => {\n            const timer = setTimeout(() => {\n                // don't wait anymore for export, this way the next batch can start\n                reject(new Error('Timeout'));\n            }, this._exportTimeoutMillis);\n            // prevent downstream exporter calls from generating spans\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__.context.with((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_5__.suppressTracing)(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__.context.active()), () => {\n                // Reset the finished spans buffer here because the next invocations of the _flush method\n                // could pass the same finished spans to the exporter if the buffer is cleared\n                // outside the execution of this callback.\n                let spans;\n                if (this._finishedSpans.length <= this._maxExportBatchSize) {\n                    spans = this._finishedSpans;\n                    this._finishedSpans = [];\n                }\n                else {\n                    spans = this._finishedSpans.splice(0, this._maxExportBatchSize);\n                }\n                const doExport = () => this._exporter.export(spans, result => {\n                    clearTimeout(timer);\n                    if (result.code === _opentelemetry_core__WEBPACK_IMPORTED_MODULE_6__.ExportResultCode.SUCCESS) {\n                        resolve();\n                    }\n                    else {\n                        reject(result.error ??\n                            new Error('BatchSpanProcessor: span export failed'));\n                    }\n                });\n                let pendingResources = null;\n                for (let i = 0, len = spans.length; i < len; i++) {\n                    const span = spans[i];\n                    if (span.resource.asyncAttributesPending &&\n                        span.resource.waitForAsyncAttributes) {\n                        pendingResources ??= [];\n                        pendingResources.push(span.resource.waitForAsyncAttributes());\n                    }\n                }\n                // Avoid scheduling a promise to make the behavior more predictable and easier to test\n                if (pendingResources === null) {\n                    doExport();\n                }\n                else {\n                    Promise.all(pendingResources).then(doExport, err => {\n                        (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_7__.globalErrorHandler)(err);\n                        reject(err);\n                    });\n                }\n            });\n        });\n    }\n    _maybeStartTimer() {\n        if (this._isExporting)\n            return;\n        const flush = () => {\n            this._isExporting = true;\n            this._flushOneBatch()\n                .finally(() => {\n                this._isExporting = false;\n                if (this._finishedSpans.length > 0) {\n                    this._clearTimer();\n                    this._maybeStartTimer();\n                }\n            })\n                .catch(e => {\n                this._isExporting = false;\n                (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_7__.globalErrorHandler)(e);\n            });\n        };\n        // we only wait if the queue doesn't have enough elements yet\n        if (this._finishedSpans.length >= this._maxExportBatchSize) {\n            return flush();\n        }\n        if (this._timer !== undefined)\n            return;\n        this._timer = setTimeout(() => flush(), this._scheduledDelayMillis);\n        (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_8__.unrefTimer)(this._timer);\n    }\n    _clearTimer() {\n        if (this._timer !== undefined) {\n            clearTimeout(this._timer);\n            this._timer = undefined;\n        }\n    }\n}\n//# sourceMappingURL=BatchSpanProcessorBase.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/BatchSpanProcessorBase.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/ConsoleSpanExporter.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/ConsoleSpanExporter.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConsoleSpanExporter: () => (/* binding */ ConsoleSpanExporter)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/common/time.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/ExportResult.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * This is implementation of {@link SpanExporter} that prints spans to the\n * console. This class can be used for diagnostic purposes.\n *\n * NOTE: This {@link SpanExporter} is intended for diagnostics use only, output rendered to the console may change at any time.\n */\n/* eslint-disable no-console */\nclass ConsoleSpanExporter {\n    /**\n     * Export spans.\n     * @param spans\n     * @param resultCallback\n     */\n    export(spans, resultCallback) {\n        return this._sendSpans(spans, resultCallback);\n    }\n    /**\n     * Shutdown the exporter.\n     */\n    shutdown() {\n        this._sendSpans([]);\n        return this.forceFlush();\n    }\n    /**\n     * Exports any pending spans in exporter\n     */\n    forceFlush() {\n        return Promise.resolve();\n    }\n    /**\n     * converts span info into more readable format\n     * @param span\n     */\n    _exportInfo(span) {\n        return {\n            resource: {\n                attributes: span.resource.attributes,\n            },\n            instrumentationScope: span.instrumentationScope,\n            traceId: span.spanContext().traceId,\n            parentSpanContext: span.parentSpanContext,\n            traceState: span.spanContext().traceState?.serialize(),\n            name: span.name,\n            id: span.spanContext().spanId,\n            kind: span.kind,\n            timestamp: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.hrTimeToMicroseconds)(span.startTime),\n            duration: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.hrTimeToMicroseconds)(span.duration),\n            attributes: span.attributes,\n            status: span.status,\n            events: span.events,\n            links: span.links,\n        };\n    }\n    /**\n     * Showing spans in console\n     * @param spans\n     * @param done\n     */\n    _sendSpans(spans, done) {\n        for (const span of spans) {\n            console.dir(this._exportInfo(span), { depth: 3 });\n        }\n        if (done) {\n            return done({ code: _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.ExportResultCode.SUCCESS });\n        }\n    }\n}\n//# sourceMappingURL=ConsoleSpanExporter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Nkay10cmFjZS1iYXNlL2J1aWxkL2VzbS9leHBvcnQvQ29uc29sZVNwYW5FeHBvcnRlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDOEU7QUFDOUU7QUFDQSw4QkFBOEIsb0JBQW9CO0FBQ2xEO0FBQ0E7QUFDQSxlQUFlLG9CQUFvQjtBQUNuQztBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLHlFQUFvQjtBQUMzQyxzQkFBc0IseUVBQW9CO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELFVBQVU7QUFDNUQ7QUFDQTtBQUNBLDBCQUEwQixNQUFNLGlFQUFnQixVQUFVO0FBQzFEO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Nkay10cmFjZS1iYXNlL2J1aWxkL2VzbS9leHBvcnQvQ29uc29sZVNwYW5FeHBvcnRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgRXhwb3J0UmVzdWx0Q29kZSwgaHJUaW1lVG9NaWNyb3NlY29uZHMsIH0gZnJvbSAnQG9wZW50ZWxlbWV0cnkvY29yZSc7XG4vKipcbiAqIFRoaXMgaXMgaW1wbGVtZW50YXRpb24gb2Yge0BsaW5rIFNwYW5FeHBvcnRlcn0gdGhhdCBwcmludHMgc3BhbnMgdG8gdGhlXG4gKiBjb25zb2xlLiBUaGlzIGNsYXNzIGNhbiBiZSB1c2VkIGZvciBkaWFnbm9zdGljIHB1cnBvc2VzLlxuICpcbiAqIE5PVEU6IFRoaXMge0BsaW5rIFNwYW5FeHBvcnRlcn0gaXMgaW50ZW5kZWQgZm9yIGRpYWdub3N0aWNzIHVzZSBvbmx5LCBvdXRwdXQgcmVuZGVyZWQgdG8gdGhlIGNvbnNvbGUgbWF5IGNoYW5nZSBhdCBhbnkgdGltZS5cbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuZXhwb3J0IGNsYXNzIENvbnNvbGVTcGFuRXhwb3J0ZXIge1xuICAgIC8qKlxuICAgICAqIEV4cG9ydCBzcGFucy5cbiAgICAgKiBAcGFyYW0gc3BhbnNcbiAgICAgKiBAcGFyYW0gcmVzdWx0Q2FsbGJhY2tcbiAgICAgKi9cbiAgICBleHBvcnQoc3BhbnMsIHJlc3VsdENhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZW5kU3BhbnMoc3BhbnMsIHJlc3VsdENhbGxiYWNrKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2h1dGRvd24gdGhlIGV4cG9ydGVyLlxuICAgICAqL1xuICAgIHNodXRkb3duKCkge1xuICAgICAgICB0aGlzLl9zZW5kU3BhbnMoW10pO1xuICAgICAgICByZXR1cm4gdGhpcy5mb3JjZUZsdXNoKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEV4cG9ydHMgYW55IHBlbmRpbmcgc3BhbnMgaW4gZXhwb3J0ZXJcbiAgICAgKi9cbiAgICBmb3JjZUZsdXNoKCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIGNvbnZlcnRzIHNwYW4gaW5mbyBpbnRvIG1vcmUgcmVhZGFibGUgZm9ybWF0XG4gICAgICogQHBhcmFtIHNwYW5cbiAgICAgKi9cbiAgICBfZXhwb3J0SW5mbyhzcGFuKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXNvdXJjZToge1xuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHNwYW4ucmVzb3VyY2UuYXR0cmlidXRlcyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbnN0cnVtZW50YXRpb25TY29wZTogc3Bhbi5pbnN0cnVtZW50YXRpb25TY29wZSxcbiAgICAgICAgICAgIHRyYWNlSWQ6IHNwYW4uc3BhbkNvbnRleHQoKS50cmFjZUlkLFxuICAgICAgICAgICAgcGFyZW50U3BhbkNvbnRleHQ6IHNwYW4ucGFyZW50U3BhbkNvbnRleHQsXG4gICAgICAgICAgICB0cmFjZVN0YXRlOiBzcGFuLnNwYW5Db250ZXh0KCkudHJhY2VTdGF0ZT8uc2VyaWFsaXplKCksXG4gICAgICAgICAgICBuYW1lOiBzcGFuLm5hbWUsXG4gICAgICAgICAgICBpZDogc3Bhbi5zcGFuQ29udGV4dCgpLnNwYW5JZCxcbiAgICAgICAgICAgIGtpbmQ6IHNwYW4ua2luZCxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogaHJUaW1lVG9NaWNyb3NlY29uZHMoc3Bhbi5zdGFydFRpbWUpLFxuICAgICAgICAgICAgZHVyYXRpb246IGhyVGltZVRvTWljcm9zZWNvbmRzKHNwYW4uZHVyYXRpb24pLFxuICAgICAgICAgICAgYXR0cmlidXRlczogc3Bhbi5hdHRyaWJ1dGVzLFxuICAgICAgICAgICAgc3RhdHVzOiBzcGFuLnN0YXR1cyxcbiAgICAgICAgICAgIGV2ZW50czogc3Bhbi5ldmVudHMsXG4gICAgICAgICAgICBsaW5rczogc3Bhbi5saW5rcyxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2hvd2luZyBzcGFucyBpbiBjb25zb2xlXG4gICAgICogQHBhcmFtIHNwYW5zXG4gICAgICogQHBhcmFtIGRvbmVcbiAgICAgKi9cbiAgICBfc2VuZFNwYW5zKHNwYW5zLCBkb25lKSB7XG4gICAgICAgIGZvciAoY29uc3Qgc3BhbiBvZiBzcGFucykge1xuICAgICAgICAgICAgY29uc29sZS5kaXIodGhpcy5fZXhwb3J0SW5mbyhzcGFuKSwgeyBkZXB0aDogMyB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgcmV0dXJuIGRvbmUoeyBjb2RlOiBFeHBvcnRSZXN1bHRDb2RlLlNVQ0NFU1MgfSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Db25zb2xlU3BhbkV4cG9ydGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/ConsoleSpanExporter.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/InMemorySpanExporter.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/InMemorySpanExporter.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InMemorySpanExporter: () => (/* binding */ InMemorySpanExporter)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/ExportResult.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * This class can be used for testing purposes. It stores the exported spans\n * in a list in memory that can be retrieved using the `getFinishedSpans()`\n * method.\n */\nclass InMemorySpanExporter {\n    _finishedSpans = [];\n    /**\n     * Indicates if the exporter has been \"shutdown.\"\n     * When false, exported spans will not be stored in-memory.\n     */\n    _stopped = false;\n    export(spans, resultCallback) {\n        if (this._stopped)\n            return resultCallback({\n                code: _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.ExportResultCode.FAILED,\n                error: new Error('Exporter has been stopped'),\n            });\n        this._finishedSpans.push(...spans);\n        setTimeout(() => resultCallback({ code: _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.ExportResultCode.SUCCESS }), 0);\n    }\n    shutdown() {\n        this._stopped = true;\n        this._finishedSpans = [];\n        return this.forceFlush();\n    }\n    /**\n     * Exports any pending spans in the exporter\n     */\n    forceFlush() {\n        return Promise.resolve();\n    }\n    reset() {\n        this._finishedSpans = [];\n    }\n    getFinishedSpans() {\n        return this._finishedSpans;\n    }\n}\n//# sourceMappingURL=InMemorySpanExporter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Nkay10cmFjZS1iYXNlL2J1aWxkL2VzbS9leHBvcnQvSW5NZW1vcnlTcGFuRXhwb3J0ZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDdUQ7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLGlFQUFnQjtBQUN0QztBQUNBLGFBQWE7QUFDYjtBQUNBLDBDQUEwQyxNQUFNLGlFQUFnQixVQUFVO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvc2RrLXRyYWNlLWJhc2UvYnVpbGQvZXNtL2V4cG9ydC9Jbk1lbW9yeVNwYW5FeHBvcnRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgRXhwb3J0UmVzdWx0Q29kZSB9IGZyb20gJ0BvcGVudGVsZW1ldHJ5L2NvcmUnO1xuLyoqXG4gKiBUaGlzIGNsYXNzIGNhbiBiZSB1c2VkIGZvciB0ZXN0aW5nIHB1cnBvc2VzLiBJdCBzdG9yZXMgdGhlIGV4cG9ydGVkIHNwYW5zXG4gKiBpbiBhIGxpc3QgaW4gbWVtb3J5IHRoYXQgY2FuIGJlIHJldHJpZXZlZCB1c2luZyB0aGUgYGdldEZpbmlzaGVkU3BhbnMoKWBcbiAqIG1ldGhvZC5cbiAqL1xuZXhwb3J0IGNsYXNzIEluTWVtb3J5U3BhbkV4cG9ydGVyIHtcbiAgICBfZmluaXNoZWRTcGFucyA9IFtdO1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyBpZiB0aGUgZXhwb3J0ZXIgaGFzIGJlZW4gXCJzaHV0ZG93bi5cIlxuICAgICAqIFdoZW4gZmFsc2UsIGV4cG9ydGVkIHNwYW5zIHdpbGwgbm90IGJlIHN0b3JlZCBpbi1tZW1vcnkuXG4gICAgICovXG4gICAgX3N0b3BwZWQgPSBmYWxzZTtcbiAgICBleHBvcnQoc3BhbnMsIHJlc3VsdENhbGxiYWNrKSB7XG4gICAgICAgIGlmICh0aGlzLl9zdG9wcGVkKVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdENhbGxiYWNrKHtcbiAgICAgICAgICAgICAgICBjb2RlOiBFeHBvcnRSZXN1bHRDb2RlLkZBSUxFRCxcbiAgICAgICAgICAgICAgICBlcnJvcjogbmV3IEVycm9yKCdFeHBvcnRlciBoYXMgYmVlbiBzdG9wcGVkJyksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fZmluaXNoZWRTcGFucy5wdXNoKC4uLnNwYW5zKTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiByZXN1bHRDYWxsYmFjayh7IGNvZGU6IEV4cG9ydFJlc3VsdENvZGUuU1VDQ0VTUyB9KSwgMCk7XG4gICAgfVxuICAgIHNodXRkb3duKCkge1xuICAgICAgICB0aGlzLl9zdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fZmluaXNoZWRTcGFucyA9IFtdO1xuICAgICAgICByZXR1cm4gdGhpcy5mb3JjZUZsdXNoKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEV4cG9ydHMgYW55IHBlbmRpbmcgc3BhbnMgaW4gdGhlIGV4cG9ydGVyXG4gICAgICovXG4gICAgZm9yY2VGbHVzaCgpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbiAgICByZXNldCgpIHtcbiAgICAgICAgdGhpcy5fZmluaXNoZWRTcGFucyA9IFtdO1xuICAgIH1cbiAgICBnZXRGaW5pc2hlZFNwYW5zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZmluaXNoZWRTcGFucztcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Jbk1lbW9yeVNwYW5FeHBvcnRlci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/InMemorySpanExporter.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/NoopSpanProcessor.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/NoopSpanProcessor.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NoopSpanProcessor: () => (/* binding */ NoopSpanProcessor)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** No-op implementation of SpanProcessor */\nclass NoopSpanProcessor {\n    onStart(_span, _context) { }\n    onEnd(_span) { }\n    shutdown() {\n        return Promise.resolve();\n    }\n    forceFlush() {\n        return Promise.resolve();\n    }\n}\n//# sourceMappingURL=NoopSpanProcessor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Nkay10cmFjZS1iYXNlL2J1aWxkL2VzbS9leHBvcnQvTm9vcFNwYW5Qcm9jZXNzb3IuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9zZGstdHJhY2UtYmFzZS9idWlsZC9lc20vZXhwb3J0L05vb3BTcGFuUHJvY2Vzc29yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKiogTm8tb3AgaW1wbGVtZW50YXRpb24gb2YgU3BhblByb2Nlc3NvciAqL1xuZXhwb3J0IGNsYXNzIE5vb3BTcGFuUHJvY2Vzc29yIHtcbiAgICBvblN0YXJ0KF9zcGFuLCBfY29udGV4dCkgeyB9XG4gICAgb25FbmQoX3NwYW4pIHsgfVxuICAgIHNodXRkb3duKCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIGZvcmNlRmx1c2goKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Ob29wU3BhblByb2Nlc3Nvci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/NoopSpanProcessor.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/SimpleSpanProcessor.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/SimpleSpanProcessor.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SimpleSpanProcessor: () => (/* binding */ SimpleSpanProcessor)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/utils/callback.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/index.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/ExportResult.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * An implementation of the {@link SpanProcessor} that converts the {@link Span}\n * to {@link ReadableSpan} and passes it to the configured exporter.\n *\n * Only spans that are sampled are converted.\n *\n * NOTE: This {@link SpanProcessor} exports every ended span individually instead of batching spans together, which causes significant performance overhead with most exporters. For production use, please consider using the {@link BatchSpanProcessor} instead.\n */\nclass SimpleSpanProcessor {\n    _exporter;\n    _shutdownOnce;\n    _pendingExports;\n    constructor(_exporter) {\n        this._exporter = _exporter;\n        this._shutdownOnce = new _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.BindOnceFuture(this._shutdown, this);\n        this._pendingExports = new Set();\n    }\n    async forceFlush() {\n        await Promise.all(Array.from(this._pendingExports));\n        if (this._exporter.forceFlush) {\n            await this._exporter.forceFlush();\n        }\n    }\n    onStart(_span, _parentContext) { }\n    onEnd(span) {\n        if (this._shutdownOnce.isCalled) {\n            return;\n        }\n        if ((span.spanContext().traceFlags & _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__.TraceFlags.SAMPLED) === 0) {\n            return;\n        }\n        const pendingExport = this._doExport(span).catch(err => (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.globalErrorHandler)(err));\n        // Enqueue this export to the pending list so it can be flushed by the user.\n        this._pendingExports.add(pendingExport);\n        pendingExport.finally(() => this._pendingExports.delete(pendingExport));\n    }\n    async _doExport(span) {\n        if (span.resource.asyncAttributesPending) {\n            // Ensure resource is fully resolved before exporting.\n            await span.resource.waitForAsyncAttributes?.();\n        }\n        const result = await _opentelemetry_core__WEBPACK_IMPORTED_MODULE_3__.internal._export(this._exporter, [span]);\n        if (result.code !== _opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__.ExportResultCode.SUCCESS) {\n            throw (result.error ??\n                new Error(`SimpleSpanProcessor: span export failed (status ${result})`));\n        }\n    }\n    shutdown() {\n        return this._shutdownOnce.call();\n    }\n    _shutdown() {\n        return this._exporter.shutdown();\n    }\n}\n//# sourceMappingURL=SimpleSpanProcessor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Nkay10cmFjZS1iYXNlL2J1aWxkL2VzbS9leHBvcnQvU2ltcGxlU3BhblByb2Nlc3Nvci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDZ0Q7QUFDc0Q7QUFDdEc7QUFDQSw2QkFBNkIscUJBQXFCLG1CQUFtQjtBQUNyRSxPQUFPLG9CQUFvQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQSxlQUFlLHFCQUFxQiw0TEFBNEwsMEJBQTBCO0FBQzFQO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLCtEQUFjO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLDBEQUFVO0FBQ3ZEO0FBQ0E7QUFDQSxnRUFBZ0UsdUVBQWtCO0FBQ2xGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qix5REFBUTtBQUNyQyw0QkFBNEIsaUVBQWdCO0FBQzVDO0FBQ0EsNkVBQTZFLE9BQU87QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvc2RrLXRyYWNlLWJhc2UvYnVpbGQvZXNtL2V4cG9ydC9TaW1wbGVTcGFuUHJvY2Vzc29yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBUcmFjZUZsYWdzIH0gZnJvbSAnQG9wZW50ZWxlbWV0cnkvYXBpJztcbmltcG9ydCB7IGludGVybmFsLCBFeHBvcnRSZXN1bHRDb2RlLCBnbG9iYWxFcnJvckhhbmRsZXIsIEJpbmRPbmNlRnV0dXJlLCB9IGZyb20gJ0BvcGVudGVsZW1ldHJ5L2NvcmUnO1xuLyoqXG4gKiBBbiBpbXBsZW1lbnRhdGlvbiBvZiB0aGUge0BsaW5rIFNwYW5Qcm9jZXNzb3J9IHRoYXQgY29udmVydHMgdGhlIHtAbGluayBTcGFufVxuICogdG8ge0BsaW5rIFJlYWRhYmxlU3Bhbn0gYW5kIHBhc3NlcyBpdCB0byB0aGUgY29uZmlndXJlZCBleHBvcnRlci5cbiAqXG4gKiBPbmx5IHNwYW5zIHRoYXQgYXJlIHNhbXBsZWQgYXJlIGNvbnZlcnRlZC5cbiAqXG4gKiBOT1RFOiBUaGlzIHtAbGluayBTcGFuUHJvY2Vzc29yfSBleHBvcnRzIGV2ZXJ5IGVuZGVkIHNwYW4gaW5kaXZpZHVhbGx5IGluc3RlYWQgb2YgYmF0Y2hpbmcgc3BhbnMgdG9nZXRoZXIsIHdoaWNoIGNhdXNlcyBzaWduaWZpY2FudCBwZXJmb3JtYW5jZSBvdmVyaGVhZCB3aXRoIG1vc3QgZXhwb3J0ZXJzLiBGb3IgcHJvZHVjdGlvbiB1c2UsIHBsZWFzZSBjb25zaWRlciB1c2luZyB0aGUge0BsaW5rIEJhdGNoU3BhblByb2Nlc3Nvcn0gaW5zdGVhZC5cbiAqL1xuZXhwb3J0IGNsYXNzIFNpbXBsZVNwYW5Qcm9jZXNzb3Ige1xuICAgIF9leHBvcnRlcjtcbiAgICBfc2h1dGRvd25PbmNlO1xuICAgIF9wZW5kaW5nRXhwb3J0cztcbiAgICBjb25zdHJ1Y3RvcihfZXhwb3J0ZXIpIHtcbiAgICAgICAgdGhpcy5fZXhwb3J0ZXIgPSBfZXhwb3J0ZXI7XG4gICAgICAgIHRoaXMuX3NodXRkb3duT25jZSA9IG5ldyBCaW5kT25jZUZ1dHVyZSh0aGlzLl9zaHV0ZG93biwgdGhpcyk7XG4gICAgICAgIHRoaXMuX3BlbmRpbmdFeHBvcnRzID0gbmV3IFNldCgpO1xuICAgIH1cbiAgICBhc3luYyBmb3JjZUZsdXNoKCkge1xuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChBcnJheS5mcm9tKHRoaXMuX3BlbmRpbmdFeHBvcnRzKSk7XG4gICAgICAgIGlmICh0aGlzLl9leHBvcnRlci5mb3JjZUZsdXNoKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9leHBvcnRlci5mb3JjZUZsdXNoKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgb25TdGFydChfc3BhbiwgX3BhcmVudENvbnRleHQpIHsgfVxuICAgIG9uRW5kKHNwYW4pIHtcbiAgICAgICAgaWYgKHRoaXMuX3NodXRkb3duT25jZS5pc0NhbGxlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoc3Bhbi5zcGFuQ29udGV4dCgpLnRyYWNlRmxhZ3MgJiBUcmFjZUZsYWdzLlNBTVBMRUQpID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGVuZGluZ0V4cG9ydCA9IHRoaXMuX2RvRXhwb3J0KHNwYW4pLmNhdGNoKGVyciA9PiBnbG9iYWxFcnJvckhhbmRsZXIoZXJyKSk7XG4gICAgICAgIC8vIEVucXVldWUgdGhpcyBleHBvcnQgdG8gdGhlIHBlbmRpbmcgbGlzdCBzbyBpdCBjYW4gYmUgZmx1c2hlZCBieSB0aGUgdXNlci5cbiAgICAgICAgdGhpcy5fcGVuZGluZ0V4cG9ydHMuYWRkKHBlbmRpbmdFeHBvcnQpO1xuICAgICAgICBwZW5kaW5nRXhwb3J0LmZpbmFsbHkoKCkgPT4gdGhpcy5fcGVuZGluZ0V4cG9ydHMuZGVsZXRlKHBlbmRpbmdFeHBvcnQpKTtcbiAgICB9XG4gICAgYXN5bmMgX2RvRXhwb3J0KHNwYW4pIHtcbiAgICAgICAgaWYgKHNwYW4ucmVzb3VyY2UuYXN5bmNBdHRyaWJ1dGVzUGVuZGluZykge1xuICAgICAgICAgICAgLy8gRW5zdXJlIHJlc291cmNlIGlzIGZ1bGx5IHJlc29sdmVkIGJlZm9yZSBleHBvcnRpbmcuXG4gICAgICAgICAgICBhd2FpdCBzcGFuLnJlc291cmNlLndhaXRGb3JBc3luY0F0dHJpYnV0ZXM/LigpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGludGVybmFsLl9leHBvcnQodGhpcy5fZXhwb3J0ZXIsIFtzcGFuXSk7XG4gICAgICAgIGlmIChyZXN1bHQuY29kZSAhPT0gRXhwb3J0UmVzdWx0Q29kZS5TVUNDRVNTKSB7XG4gICAgICAgICAgICB0aHJvdyAocmVzdWx0LmVycm9yID8/XG4gICAgICAgICAgICAgICAgbmV3IEVycm9yKGBTaW1wbGVTcGFuUHJvY2Vzc29yOiBzcGFuIGV4cG9ydCBmYWlsZWQgKHN0YXR1cyAke3Jlc3VsdH0pYCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNodXRkb3duKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2h1dGRvd25PbmNlLmNhbGwoKTtcbiAgICB9XG4gICAgX3NodXRkb3duKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhwb3J0ZXIuc2h1dGRvd24oKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TaW1wbGVTcGFuUHJvY2Vzc29yLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/SimpleSpanProcessor.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/index.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AlwaysOffSampler: () => (/* reexport safe */ _sampler_AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_7__.AlwaysOffSampler),\n/* harmony export */   AlwaysOnSampler: () => (/* reexport safe */ _sampler_AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_8__.AlwaysOnSampler),\n/* harmony export */   BasicTracerProvider: () => (/* reexport safe */ _BasicTracerProvider__WEBPACK_IMPORTED_MODULE_0__.BasicTracerProvider),\n/* harmony export */   BatchSpanProcessor: () => (/* reexport safe */ _platform__WEBPACK_IMPORTED_MODULE_1__.BatchSpanProcessor),\n/* harmony export */   ConsoleSpanExporter: () => (/* reexport safe */ _export_ConsoleSpanExporter__WEBPACK_IMPORTED_MODULE_3__.ConsoleSpanExporter),\n/* harmony export */   InMemorySpanExporter: () => (/* reexport safe */ _export_InMemorySpanExporter__WEBPACK_IMPORTED_MODULE_4__.InMemorySpanExporter),\n/* harmony export */   NoopSpanProcessor: () => (/* reexport safe */ _export_NoopSpanProcessor__WEBPACK_IMPORTED_MODULE_6__.NoopSpanProcessor),\n/* harmony export */   ParentBasedSampler: () => (/* reexport safe */ _sampler_ParentBasedSampler__WEBPACK_IMPORTED_MODULE_9__.ParentBasedSampler),\n/* harmony export */   RandomIdGenerator: () => (/* reexport safe */ _platform__WEBPACK_IMPORTED_MODULE_2__.RandomIdGenerator),\n/* harmony export */   SamplingDecision: () => (/* reexport safe */ _Sampler__WEBPACK_IMPORTED_MODULE_11__.SamplingDecision),\n/* harmony export */   SimpleSpanProcessor: () => (/* reexport safe */ _export_SimpleSpanProcessor__WEBPACK_IMPORTED_MODULE_5__.SimpleSpanProcessor),\n/* harmony export */   TraceIdRatioBasedSampler: () => (/* reexport safe */ _sampler_TraceIdRatioBasedSampler__WEBPACK_IMPORTED_MODULE_10__.TraceIdRatioBasedSampler)\n/* harmony export */ });\n/* harmony import */ var _BasicTracerProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BasicTracerProvider */ \"(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/BasicTracerProvider.js\");\n/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./platform */ \"(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/node/export/BatchSpanProcessor.js\");\n/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./platform */ \"(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/node/RandomIdGenerator.js\");\n/* harmony import */ var _export_ConsoleSpanExporter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./export/ConsoleSpanExporter */ \"(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/ConsoleSpanExporter.js\");\n/* harmony import */ var _export_InMemorySpanExporter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./export/InMemorySpanExporter */ \"(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/InMemorySpanExporter.js\");\n/* harmony import */ var _export_SimpleSpanProcessor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./export/SimpleSpanProcessor */ \"(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/SimpleSpanProcessor.js\");\n/* harmony import */ var _export_NoopSpanProcessor__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./export/NoopSpanProcessor */ \"(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/NoopSpanProcessor.js\");\n/* harmony import */ var _sampler_AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./sampler/AlwaysOffSampler */ \"(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOffSampler.js\");\n/* harmony import */ var _sampler_AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./sampler/AlwaysOnSampler */ \"(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOnSampler.js\");\n/* harmony import */ var _sampler_ParentBasedSampler__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./sampler/ParentBasedSampler */ \"(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/ParentBasedSampler.js\");\n/* harmony import */ var _sampler_TraceIdRatioBasedSampler__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./sampler/TraceIdRatioBasedSampler */ \"(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/TraceIdRatioBasedSampler.js\");\n/* harmony import */ var _Sampler__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Sampler */ \"(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/Sampler.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Nkay10cmFjZS1iYXNlL2J1aWxkL2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDNEQ7QUFDTztBQUNBO0FBQ0U7QUFDRjtBQUNKO0FBQ0Q7QUFDRjtBQUNNO0FBQ1k7QUFDakM7QUFDN0MiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvc2RrLXRyYWNlLWJhc2UvYnVpbGQvZXNtL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5leHBvcnQgeyBCYXNpY1RyYWNlclByb3ZpZGVyIH0gZnJvbSAnLi9CYXNpY1RyYWNlclByb3ZpZGVyJztcbmV4cG9ydCB7IEJhdGNoU3BhblByb2Nlc3NvciwgUmFuZG9tSWRHZW5lcmF0b3IgfSBmcm9tICcuL3BsYXRmb3JtJztcbmV4cG9ydCB7IENvbnNvbGVTcGFuRXhwb3J0ZXIgfSBmcm9tICcuL2V4cG9ydC9Db25zb2xlU3BhbkV4cG9ydGVyJztcbmV4cG9ydCB7IEluTWVtb3J5U3BhbkV4cG9ydGVyIH0gZnJvbSAnLi9leHBvcnQvSW5NZW1vcnlTcGFuRXhwb3J0ZXInO1xuZXhwb3J0IHsgU2ltcGxlU3BhblByb2Nlc3NvciB9IGZyb20gJy4vZXhwb3J0L1NpbXBsZVNwYW5Qcm9jZXNzb3InO1xuZXhwb3J0IHsgTm9vcFNwYW5Qcm9jZXNzb3IgfSBmcm9tICcuL2V4cG9ydC9Ob29wU3BhblByb2Nlc3Nvcic7XG5leHBvcnQgeyBBbHdheXNPZmZTYW1wbGVyIH0gZnJvbSAnLi9zYW1wbGVyL0Fsd2F5c09mZlNhbXBsZXInO1xuZXhwb3J0IHsgQWx3YXlzT25TYW1wbGVyIH0gZnJvbSAnLi9zYW1wbGVyL0Fsd2F5c09uU2FtcGxlcic7XG5leHBvcnQgeyBQYXJlbnRCYXNlZFNhbXBsZXIgfSBmcm9tICcuL3NhbXBsZXIvUGFyZW50QmFzZWRTYW1wbGVyJztcbmV4cG9ydCB7IFRyYWNlSWRSYXRpb0Jhc2VkU2FtcGxlciB9IGZyb20gJy4vc2FtcGxlci9UcmFjZUlkUmF0aW9CYXNlZFNhbXBsZXInO1xuZXhwb3J0IHsgU2FtcGxpbmdEZWNpc2lvbiB9IGZyb20gJy4vU2FtcGxlcic7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/node/RandomIdGenerator.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/node/RandomIdGenerator.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RandomIdGenerator: () => (/* binding */ RandomIdGenerator)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst SPAN_ID_BYTES = 8;\nconst TRACE_ID_BYTES = 16;\nclass RandomIdGenerator {\n    /**\n     * Returns a random 16-byte trace ID formatted/encoded as a 32 lowercase hex\n     * characters corresponding to 128 bits.\n     */\n    generateTraceId = getIdGenerator(TRACE_ID_BYTES);\n    /**\n     * Returns a random 8-byte span ID formatted/encoded as a 16 lowercase hex\n     * characters corresponding to 64 bits.\n     */\n    generateSpanId = getIdGenerator(SPAN_ID_BYTES);\n}\nconst SHARED_BUFFER = Buffer.allocUnsafe(TRACE_ID_BYTES);\nfunction getIdGenerator(bytes) {\n    return function generateId() {\n        for (let i = 0; i < bytes / 4; i++) {\n            // unsigned right shift drops decimal part of the number\n            // it is required because if a number between 2**32 and 2**32 - 1 is generated, an out of range error is thrown by writeUInt32BE\n            SHARED_BUFFER.writeUInt32BE((Math.random() * 2 ** 32) >>> 0, i * 4);\n        }\n        // If buffer is all 0, set the last byte to 1 to guarantee a valid w3c id is generated\n        for (let i = 0; i < bytes; i++) {\n            if (SHARED_BUFFER[i] > 0) {\n                break;\n            }\n            else if (i === bytes - 1) {\n                SHARED_BUFFER[bytes - 1] = 1;\n            }\n        }\n        return SHARED_BUFFER.toString('hex', 0, bytes);\n    };\n}\n//# sourceMappingURL=RandomIdGenerator.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Nkay10cmFjZS1iYXNlL2J1aWxkL2VzbS9wbGF0Zm9ybS9ub2RlL1JhbmRvbUlkR2VuZXJhdG9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGVBQWU7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixXQUFXO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvc2RrLXRyYWNlLWJhc2UvYnVpbGQvZXNtL3BsYXRmb3JtL25vZGUvUmFuZG9tSWRHZW5lcmF0b3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmNvbnN0IFNQQU5fSURfQllURVMgPSA4O1xuY29uc3QgVFJBQ0VfSURfQllURVMgPSAxNjtcbmV4cG9ydCBjbGFzcyBSYW5kb21JZEdlbmVyYXRvciB7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHJhbmRvbSAxNi1ieXRlIHRyYWNlIElEIGZvcm1hdHRlZC9lbmNvZGVkIGFzIGEgMzIgbG93ZXJjYXNlIGhleFxuICAgICAqIGNoYXJhY3RlcnMgY29ycmVzcG9uZGluZyB0byAxMjggYml0cy5cbiAgICAgKi9cbiAgICBnZW5lcmF0ZVRyYWNlSWQgPSBnZXRJZEdlbmVyYXRvcihUUkFDRV9JRF9CWVRFUyk7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHJhbmRvbSA4LWJ5dGUgc3BhbiBJRCBmb3JtYXR0ZWQvZW5jb2RlZCBhcyBhIDE2IGxvd2VyY2FzZSBoZXhcbiAgICAgKiBjaGFyYWN0ZXJzIGNvcnJlc3BvbmRpbmcgdG8gNjQgYml0cy5cbiAgICAgKi9cbiAgICBnZW5lcmF0ZVNwYW5JZCA9IGdldElkR2VuZXJhdG9yKFNQQU5fSURfQllURVMpO1xufVxuY29uc3QgU0hBUkVEX0JVRkZFUiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShUUkFDRV9JRF9CWVRFUyk7XG5mdW5jdGlvbiBnZXRJZEdlbmVyYXRvcihieXRlcykge1xuICAgIHJldHVybiBmdW5jdGlvbiBnZW5lcmF0ZUlkKCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVzIC8gNDsgaSsrKSB7XG4gICAgICAgICAgICAvLyB1bnNpZ25lZCByaWdodCBzaGlmdCBkcm9wcyBkZWNpbWFsIHBhcnQgb2YgdGhlIG51bWJlclxuICAgICAgICAgICAgLy8gaXQgaXMgcmVxdWlyZWQgYmVjYXVzZSBpZiBhIG51bWJlciBiZXR3ZWVuIDIqKjMyIGFuZCAyKiozMiAtIDEgaXMgZ2VuZXJhdGVkLCBhbiBvdXQgb2YgcmFuZ2UgZXJyb3IgaXMgdGhyb3duIGJ5IHdyaXRlVUludDMyQkVcbiAgICAgICAgICAgIFNIQVJFRF9CVUZGRVIud3JpdGVVSW50MzJCRSgoTWF0aC5yYW5kb20oKSAqIDIgKiogMzIpID4+PiAwLCBpICogNCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgYnVmZmVyIGlzIGFsbCAwLCBzZXQgdGhlIGxhc3QgYnl0ZSB0byAxIHRvIGd1YXJhbnRlZSBhIHZhbGlkIHczYyBpZCBpcyBnZW5lcmF0ZWRcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBieXRlczsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoU0hBUkVEX0JVRkZFUltpXSA+IDApIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGkgPT09IGJ5dGVzIC0gMSkge1xuICAgICAgICAgICAgICAgIFNIQVJFRF9CVUZGRVJbYnl0ZXMgLSAxXSA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFNIQVJFRF9CVUZGRVIudG9TdHJpbmcoJ2hleCcsIDAsIGJ5dGVzKTtcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UmFuZG9tSWRHZW5lcmF0b3IuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/node/RandomIdGenerator.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/node/export/BatchSpanProcessor.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/node/export/BatchSpanProcessor.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BatchSpanProcessor: () => (/* binding */ BatchSpanProcessor)\n/* harmony export */ });\n/* harmony import */ var _export_BatchSpanProcessorBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../export/BatchSpanProcessorBase */ \"(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/BatchSpanProcessorBase.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nclass BatchSpanProcessor extends _export_BatchSpanProcessorBase__WEBPACK_IMPORTED_MODULE_0__.BatchSpanProcessorBase {\n    onShutdown() { }\n}\n//# sourceMappingURL=BatchSpanProcessor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Nkay10cmFjZS1iYXNlL2J1aWxkL2VzbS9wbGF0Zm9ybS9ub2RlL2V4cG9ydC9CYXRjaFNwYW5Qcm9jZXNzb3IuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDZ0Y7QUFDekUsaUNBQWlDLGtGQUFzQjtBQUM5RDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvc2RrLXRyYWNlLWJhc2UvYnVpbGQvZXNtL3BsYXRmb3JtL25vZGUvZXhwb3J0L0JhdGNoU3BhblByb2Nlc3Nvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgQmF0Y2hTcGFuUHJvY2Vzc29yQmFzZSB9IGZyb20gJy4uLy4uLy4uL2V4cG9ydC9CYXRjaFNwYW5Qcm9jZXNzb3JCYXNlJztcbmV4cG9ydCBjbGFzcyBCYXRjaFNwYW5Qcm9jZXNzb3IgZXh0ZW5kcyBCYXRjaFNwYW5Qcm9jZXNzb3JCYXNlIHtcbiAgICBvblNodXRkb3duKCkgeyB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1CYXRjaFNwYW5Qcm9jZXNzb3IuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/node/export/BatchSpanProcessor.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOffSampler.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOffSampler.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AlwaysOffSampler: () => (/* binding */ AlwaysOffSampler)\n/* harmony export */ });\n/* harmony import */ var _Sampler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Sampler */ \"(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/Sampler.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Sampler that samples no traces. */\nclass AlwaysOffSampler {\n    shouldSample() {\n        return {\n            decision: _Sampler__WEBPACK_IMPORTED_MODULE_0__.SamplingDecision.NOT_RECORD,\n        };\n    }\n    toString() {\n        return 'AlwaysOffSampler';\n    }\n}\n//# sourceMappingURL=AlwaysOffSampler.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Nkay10cmFjZS1iYXNlL2J1aWxkL2VzbS9zYW1wbGVyL0Fsd2F5c09mZlNhbXBsZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDOEM7QUFDOUM7QUFDTztBQUNQO0FBQ0E7QUFDQSxzQkFBc0Isc0RBQWdCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Nkay10cmFjZS1iYXNlL2J1aWxkL2VzbS9zYW1wbGVyL0Fsd2F5c09mZlNhbXBsZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IFNhbXBsaW5nRGVjaXNpb24gfSBmcm9tICcuLi9TYW1wbGVyJztcbi8qKiBTYW1wbGVyIHRoYXQgc2FtcGxlcyBubyB0cmFjZXMuICovXG5leHBvcnQgY2xhc3MgQWx3YXlzT2ZmU2FtcGxlciB7XG4gICAgc2hvdWxkU2FtcGxlKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGVjaXNpb246IFNhbXBsaW5nRGVjaXNpb24uTk9UX1JFQ09SRCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiAnQWx3YXlzT2ZmU2FtcGxlcic7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QWx3YXlzT2ZmU2FtcGxlci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOffSampler.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOnSampler.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOnSampler.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AlwaysOnSampler: () => (/* binding */ AlwaysOnSampler)\n/* harmony export */ });\n/* harmony import */ var _Sampler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Sampler */ \"(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/Sampler.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Sampler that samples all traces. */\nclass AlwaysOnSampler {\n    shouldSample() {\n        return {\n            decision: _Sampler__WEBPACK_IMPORTED_MODULE_0__.SamplingDecision.RECORD_AND_SAMPLED,\n        };\n    }\n    toString() {\n        return 'AlwaysOnSampler';\n    }\n}\n//# sourceMappingURL=AlwaysOnSampler.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Nkay10cmFjZS1iYXNlL2J1aWxkL2VzbS9zYW1wbGVyL0Fsd2F5c09uU2FtcGxlci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUM4QztBQUM5QztBQUNPO0FBQ1A7QUFDQTtBQUNBLHNCQUFzQixzREFBZ0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvc2RrLXRyYWNlLWJhc2UvYnVpbGQvZXNtL3NhbXBsZXIvQWx3YXlzT25TYW1wbGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBTYW1wbGluZ0RlY2lzaW9uIH0gZnJvbSAnLi4vU2FtcGxlcic7XG4vKiogU2FtcGxlciB0aGF0IHNhbXBsZXMgYWxsIHRyYWNlcy4gKi9cbmV4cG9ydCBjbGFzcyBBbHdheXNPblNhbXBsZXIge1xuICAgIHNob3VsZFNhbXBsZSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRlY2lzaW9uOiBTYW1wbGluZ0RlY2lzaW9uLlJFQ09SRF9BTkRfU0FNUExFRCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiAnQWx3YXlzT25TYW1wbGVyJztcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BbHdheXNPblNhbXBsZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOnSampler.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/ParentBasedSampler.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/ParentBasedSampler.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ParentBasedSampler: () => (/* binding */ ParentBasedSampler)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace-api.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js\");\n/* harmony import */ var _AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AlwaysOffSampler */ \"(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOffSampler.js\");\n/* harmony import */ var _AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AlwaysOnSampler */ \"(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOnSampler.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n/**\n * A composite sampler that either respects the parent span's sampling decision\n * or delegates to `delegateSampler` for root spans.\n */\nclass ParentBasedSampler {\n    _root;\n    _remoteParentSampled;\n    _remoteParentNotSampled;\n    _localParentSampled;\n    _localParentNotSampled;\n    constructor(config) {\n        this._root = config.root;\n        if (!this._root) {\n            (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.globalErrorHandler)(new Error('ParentBasedSampler must have a root sampler configured'));\n            this._root = new _AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_1__.AlwaysOnSampler();\n        }\n        this._remoteParentSampled =\n            config.remoteParentSampled ?? new _AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_1__.AlwaysOnSampler();\n        this._remoteParentNotSampled =\n            config.remoteParentNotSampled ?? new _AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_2__.AlwaysOffSampler();\n        this._localParentSampled =\n            config.localParentSampled ?? new _AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_1__.AlwaysOnSampler();\n        this._localParentNotSampled =\n            config.localParentNotSampled ?? new _AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_2__.AlwaysOffSampler();\n    }\n    shouldSample(context, traceId, spanName, spanKind, attributes, links) {\n        const parentContext = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.trace.getSpanContext(context);\n        if (!parentContext || !(0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__.isSpanContextValid)(parentContext)) {\n            return this._root.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n        }\n        if (parentContext.isRemote) {\n            if (parentContext.traceFlags & _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__.TraceFlags.SAMPLED) {\n                return this._remoteParentSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n            }\n            return this._remoteParentNotSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n        }\n        if (parentContext.traceFlags & _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__.TraceFlags.SAMPLED) {\n            return this._localParentSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n        }\n        return this._localParentNotSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n    }\n    toString() {\n        return `ParentBased{root=${this._root.toString()}, remoteParentSampled=${this._remoteParentSampled.toString()}, remoteParentNotSampled=${this._remoteParentNotSampled.toString()}, localParentSampled=${this._localParentSampled.toString()}, localParentNotSampled=${this._localParentNotSampled.toString()}}`;\n    }\n}\n//# sourceMappingURL=ParentBasedSampler.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Nkay10cmFjZS1iYXNlL2J1aWxkL2VzbS9zYW1wbGVyL1BhcmVudEJhc2VkU2FtcGxlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQzRFO0FBQ25CO0FBQ0g7QUFDRjtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksdUVBQWtCO0FBQzlCLDZCQUE2Qiw2REFBZTtBQUM1QztBQUNBO0FBQ0EsOENBQThDLDZEQUFlO0FBQzdEO0FBQ0EsaURBQWlELCtEQUFnQjtBQUNqRTtBQUNBLDZDQUE2Qyw2REFBZTtBQUM1RDtBQUNBLGdEQUFnRCwrREFBZ0I7QUFDaEU7QUFDQTtBQUNBLDhCQUE4QixxREFBSztBQUNuQywrQkFBK0Isc0VBQWtCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQywwREFBVTtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QywwREFBVTtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLE9BQU8sc0JBQXNCLHdCQUF3QixxQ0FBcUMsMkJBQTJCLHdDQUF3Qyx1QkFBdUIsb0NBQW9DLDBCQUEwQix3Q0FBd0M7QUFDdFQ7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Nkay10cmFjZS1iYXNlL2J1aWxkL2VzbS9zYW1wbGVyL1BhcmVudEJhc2VkU2FtcGxlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgaXNTcGFuQ29udGV4dFZhbGlkLCBUcmFjZUZsYWdzLCB0cmFjZSwgfSBmcm9tICdAb3BlbnRlbGVtZXRyeS9hcGknO1xuaW1wb3J0IHsgZ2xvYmFsRXJyb3JIYW5kbGVyIH0gZnJvbSAnQG9wZW50ZWxlbWV0cnkvY29yZSc7XG5pbXBvcnQgeyBBbHdheXNPZmZTYW1wbGVyIH0gZnJvbSAnLi9BbHdheXNPZmZTYW1wbGVyJztcbmltcG9ydCB7IEFsd2F5c09uU2FtcGxlciB9IGZyb20gJy4vQWx3YXlzT25TYW1wbGVyJztcbi8qKlxuICogQSBjb21wb3NpdGUgc2FtcGxlciB0aGF0IGVpdGhlciByZXNwZWN0cyB0aGUgcGFyZW50IHNwYW4ncyBzYW1wbGluZyBkZWNpc2lvblxuICogb3IgZGVsZWdhdGVzIHRvIGBkZWxlZ2F0ZVNhbXBsZXJgIGZvciByb290IHNwYW5zLlxuICovXG5leHBvcnQgY2xhc3MgUGFyZW50QmFzZWRTYW1wbGVyIHtcbiAgICBfcm9vdDtcbiAgICBfcmVtb3RlUGFyZW50U2FtcGxlZDtcbiAgICBfcmVtb3RlUGFyZW50Tm90U2FtcGxlZDtcbiAgICBfbG9jYWxQYXJlbnRTYW1wbGVkO1xuICAgIF9sb2NhbFBhcmVudE5vdFNhbXBsZWQ7XG4gICAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgICAgIHRoaXMuX3Jvb3QgPSBjb25maWcucm9vdDtcbiAgICAgICAgaWYgKCF0aGlzLl9yb290KSB7XG4gICAgICAgICAgICBnbG9iYWxFcnJvckhhbmRsZXIobmV3IEVycm9yKCdQYXJlbnRCYXNlZFNhbXBsZXIgbXVzdCBoYXZlIGEgcm9vdCBzYW1wbGVyIGNvbmZpZ3VyZWQnKSk7XG4gICAgICAgICAgICB0aGlzLl9yb290ID0gbmV3IEFsd2F5c09uU2FtcGxlcigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3JlbW90ZVBhcmVudFNhbXBsZWQgPVxuICAgICAgICAgICAgY29uZmlnLnJlbW90ZVBhcmVudFNhbXBsZWQgPz8gbmV3IEFsd2F5c09uU2FtcGxlcigpO1xuICAgICAgICB0aGlzLl9yZW1vdGVQYXJlbnROb3RTYW1wbGVkID1cbiAgICAgICAgICAgIGNvbmZpZy5yZW1vdGVQYXJlbnROb3RTYW1wbGVkID8/IG5ldyBBbHdheXNPZmZTYW1wbGVyKCk7XG4gICAgICAgIHRoaXMuX2xvY2FsUGFyZW50U2FtcGxlZCA9XG4gICAgICAgICAgICBjb25maWcubG9jYWxQYXJlbnRTYW1wbGVkID8/IG5ldyBBbHdheXNPblNhbXBsZXIoKTtcbiAgICAgICAgdGhpcy5fbG9jYWxQYXJlbnROb3RTYW1wbGVkID1cbiAgICAgICAgICAgIGNvbmZpZy5sb2NhbFBhcmVudE5vdFNhbXBsZWQgPz8gbmV3IEFsd2F5c09mZlNhbXBsZXIoKTtcbiAgICB9XG4gICAgc2hvdWxkU2FtcGxlKGNvbnRleHQsIHRyYWNlSWQsIHNwYW5OYW1lLCBzcGFuS2luZCwgYXR0cmlidXRlcywgbGlua3MpIHtcbiAgICAgICAgY29uc3QgcGFyZW50Q29udGV4dCA9IHRyYWNlLmdldFNwYW5Db250ZXh0KGNvbnRleHQpO1xuICAgICAgICBpZiAoIXBhcmVudENvbnRleHQgfHwgIWlzU3BhbkNvbnRleHRWYWxpZChwYXJlbnRDb250ZXh0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Jvb3Quc2hvdWxkU2FtcGxlKGNvbnRleHQsIHRyYWNlSWQsIHNwYW5OYW1lLCBzcGFuS2luZCwgYXR0cmlidXRlcywgbGlua3MpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJlbnRDb250ZXh0LmlzUmVtb3RlKSB7XG4gICAgICAgICAgICBpZiAocGFyZW50Q29udGV4dC50cmFjZUZsYWdzICYgVHJhY2VGbGFncy5TQU1QTEVEKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlbW90ZVBhcmVudFNhbXBsZWQuc2hvdWxkU2FtcGxlKGNvbnRleHQsIHRyYWNlSWQsIHNwYW5OYW1lLCBzcGFuS2luZCwgYXR0cmlidXRlcywgbGlua3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlbW90ZVBhcmVudE5vdFNhbXBsZWQuc2hvdWxkU2FtcGxlKGNvbnRleHQsIHRyYWNlSWQsIHNwYW5OYW1lLCBzcGFuS2luZCwgYXR0cmlidXRlcywgbGlua3MpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJlbnRDb250ZXh0LnRyYWNlRmxhZ3MgJiBUcmFjZUZsYWdzLlNBTVBMRUQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9sb2NhbFBhcmVudFNhbXBsZWQuc2hvdWxkU2FtcGxlKGNvbnRleHQsIHRyYWNlSWQsIHNwYW5OYW1lLCBzcGFuS2luZCwgYXR0cmlidXRlcywgbGlua3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9sb2NhbFBhcmVudE5vdFNhbXBsZWQuc2hvdWxkU2FtcGxlKGNvbnRleHQsIHRyYWNlSWQsIHNwYW5OYW1lLCBzcGFuS2luZCwgYXR0cmlidXRlcywgbGlua3MpO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIGBQYXJlbnRCYXNlZHtyb290PSR7dGhpcy5fcm9vdC50b1N0cmluZygpfSwgcmVtb3RlUGFyZW50U2FtcGxlZD0ke3RoaXMuX3JlbW90ZVBhcmVudFNhbXBsZWQudG9TdHJpbmcoKX0sIHJlbW90ZVBhcmVudE5vdFNhbXBsZWQ9JHt0aGlzLl9yZW1vdGVQYXJlbnROb3RTYW1wbGVkLnRvU3RyaW5nKCl9LCBsb2NhbFBhcmVudFNhbXBsZWQ9JHt0aGlzLl9sb2NhbFBhcmVudFNhbXBsZWQudG9TdHJpbmcoKX0sIGxvY2FsUGFyZW50Tm90U2FtcGxlZD0ke3RoaXMuX2xvY2FsUGFyZW50Tm90U2FtcGxlZC50b1N0cmluZygpfX1gO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBhcmVudEJhc2VkU2FtcGxlci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/ParentBasedSampler.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/TraceIdRatioBasedSampler.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/TraceIdRatioBasedSampler.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TraceIdRatioBasedSampler: () => (/* binding */ TraceIdRatioBasedSampler)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js\");\n/* harmony import */ var _Sampler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Sampler */ \"(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/Sampler.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/** Sampler that samples a given fraction of traces based of trace id deterministically. */\nclass TraceIdRatioBasedSampler {\n    _ratio;\n    _upperBound;\n    constructor(_ratio = 0) {\n        this._ratio = _ratio;\n        this._ratio = this._normalize(_ratio);\n        this._upperBound = Math.floor(this._ratio * 0xffffffff);\n    }\n    shouldSample(context, traceId) {\n        return {\n            decision: (0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.isValidTraceId)(traceId) && this._accumulate(traceId) < this._upperBound\n                ? _Sampler__WEBPACK_IMPORTED_MODULE_1__.SamplingDecision.RECORD_AND_SAMPLED\n                : _Sampler__WEBPACK_IMPORTED_MODULE_1__.SamplingDecision.NOT_RECORD,\n        };\n    }\n    toString() {\n        return `TraceIdRatioBased{${this._ratio}}`;\n    }\n    _normalize(ratio) {\n        if (typeof ratio !== 'number' || isNaN(ratio))\n            return 0;\n        return ratio >= 1 ? 1 : ratio <= 0 ? 0 : ratio;\n    }\n    _accumulate(traceId) {\n        let accumulation = 0;\n        for (let i = 0; i < traceId.length / 8; i++) {\n            const pos = i * 8;\n            const part = parseInt(traceId.slice(pos, pos + 8), 16);\n            accumulation = (accumulation ^ part) >>> 0;\n        }\n        return accumulation;\n    }\n}\n//# sourceMappingURL=TraceIdRatioBasedSampler.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Nkay10cmFjZS1iYXNlL2J1aWxkL2VzbS9zYW1wbGVyL1RyYWNlSWRSYXRpb0Jhc2VkU2FtcGxlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDb0Q7QUFDTjtBQUM5QztBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLGtFQUFjO0FBQ3BDLGtCQUFrQixzREFBZ0I7QUFDbEMsa0JBQWtCLHNEQUFnQjtBQUNsQztBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsRUFBRSxhQUFhO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isd0JBQXdCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvc2RrLXRyYWNlLWJhc2UvYnVpbGQvZXNtL3NhbXBsZXIvVHJhY2VJZFJhdGlvQmFzZWRTYW1wbGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBpc1ZhbGlkVHJhY2VJZCB9IGZyb20gJ0BvcGVudGVsZW1ldHJ5L2FwaSc7XG5pbXBvcnQgeyBTYW1wbGluZ0RlY2lzaW9uIH0gZnJvbSAnLi4vU2FtcGxlcic7XG4vKiogU2FtcGxlciB0aGF0IHNhbXBsZXMgYSBnaXZlbiBmcmFjdGlvbiBvZiB0cmFjZXMgYmFzZWQgb2YgdHJhY2UgaWQgZGV0ZXJtaW5pc3RpY2FsbHkuICovXG5leHBvcnQgY2xhc3MgVHJhY2VJZFJhdGlvQmFzZWRTYW1wbGVyIHtcbiAgICBfcmF0aW87XG4gICAgX3VwcGVyQm91bmQ7XG4gICAgY29uc3RydWN0b3IoX3JhdGlvID0gMCkge1xuICAgICAgICB0aGlzLl9yYXRpbyA9IF9yYXRpbztcbiAgICAgICAgdGhpcy5fcmF0aW8gPSB0aGlzLl9ub3JtYWxpemUoX3JhdGlvKTtcbiAgICAgICAgdGhpcy5fdXBwZXJCb3VuZCA9IE1hdGguZmxvb3IodGhpcy5fcmF0aW8gKiAweGZmZmZmZmZmKTtcbiAgICB9XG4gICAgc2hvdWxkU2FtcGxlKGNvbnRleHQsIHRyYWNlSWQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRlY2lzaW9uOiBpc1ZhbGlkVHJhY2VJZCh0cmFjZUlkKSAmJiB0aGlzLl9hY2N1bXVsYXRlKHRyYWNlSWQpIDwgdGhpcy5fdXBwZXJCb3VuZFxuICAgICAgICAgICAgICAgID8gU2FtcGxpbmdEZWNpc2lvbi5SRUNPUkRfQU5EX1NBTVBMRURcbiAgICAgICAgICAgICAgICA6IFNhbXBsaW5nRGVjaXNpb24uTk9UX1JFQ09SRCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBgVHJhY2VJZFJhdGlvQmFzZWR7JHt0aGlzLl9yYXRpb319YDtcbiAgICB9XG4gICAgX25vcm1hbGl6ZShyYXRpbykge1xuICAgICAgICBpZiAodHlwZW9mIHJhdGlvICE9PSAnbnVtYmVyJyB8fCBpc05hTihyYXRpbykpXG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgcmV0dXJuIHJhdGlvID49IDEgPyAxIDogcmF0aW8gPD0gMCA/IDAgOiByYXRpbztcbiAgICB9XG4gICAgX2FjY3VtdWxhdGUodHJhY2VJZCkge1xuICAgICAgICBsZXQgYWNjdW11bGF0aW9uID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0cmFjZUlkLmxlbmd0aCAvIDg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgcG9zID0gaSAqIDg7XG4gICAgICAgICAgICBjb25zdCBwYXJ0ID0gcGFyc2VJbnQodHJhY2VJZC5zbGljZShwb3MsIHBvcyArIDgpLCAxNik7XG4gICAgICAgICAgICBhY2N1bXVsYXRpb24gPSAoYWNjdW11bGF0aW9uIF4gcGFydCkgPj4+IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjY3VtdWxhdGlvbjtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1UcmFjZUlkUmF0aW9CYXNlZFNhbXBsZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/TraceIdRatioBasedSampler.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/utility.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/utility.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_ATTRIBUTE_COUNT_LIMIT: () => (/* binding */ DEFAULT_ATTRIBUTE_COUNT_LIMIT),\n/* harmony export */   DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT: () => (/* binding */ DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT),\n/* harmony export */   mergeConfig: () => (/* binding */ mergeConfig),\n/* harmony export */   reconfigureLimits: () => (/* binding */ reconfigureLimits)\n/* harmony export */ });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ \"(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/config.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/platform/node/environment.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nconst DEFAULT_ATTRIBUTE_COUNT_LIMIT = 128;\nconst DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT = Infinity;\n/**\n * Function to merge Default configuration (as specified in './config') with\n * user provided configurations.\n */\nfunction mergeConfig(userConfig) {\n    const perInstanceDefaults = {\n        sampler: (0,_config__WEBPACK_IMPORTED_MODULE_0__.buildSamplerFromEnv)(),\n    };\n    const DEFAULT_CONFIG = (0,_config__WEBPACK_IMPORTED_MODULE_0__.loadDefaultConfig)();\n    const target = Object.assign({}, DEFAULT_CONFIG, perInstanceDefaults, userConfig);\n    target.generalLimits = Object.assign({}, DEFAULT_CONFIG.generalLimits, userConfig.generalLimits || {});\n    target.spanLimits = Object.assign({}, DEFAULT_CONFIG.spanLimits, userConfig.spanLimits || {});\n    return target;\n}\n/**\n * When general limits are provided and model specific limits are not,\n * configures the model specific limits by using the values from the general ones.\n * @param userConfig User provided tracer configuration\n */\nfunction reconfigureLimits(userConfig) {\n    const spanLimits = Object.assign({}, userConfig.spanLimits);\n    /**\n     * Reassign span attribute count limit to use first non null value defined by user or use default value\n     */\n    spanLimits.attributeCountLimit =\n        userConfig.spanLimits?.attributeCountLimit ??\n            userConfig.generalLimits?.attributeCountLimit ??\n            (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.getNumberFromEnv)('OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT') ??\n            (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.getNumberFromEnv)('OTEL_ATTRIBUTE_COUNT_LIMIT') ??\n            DEFAULT_ATTRIBUTE_COUNT_LIMIT;\n    /**\n     * Reassign span attribute value length limit to use first non null value defined by user or use default value\n     */\n    spanLimits.attributeValueLengthLimit =\n        userConfig.spanLimits?.attributeValueLengthLimit ??\n            userConfig.generalLimits?.attributeValueLengthLimit ??\n            (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.getNumberFromEnv)('OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT') ??\n            (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.getNumberFromEnv)('OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT') ??\n            DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT;\n    return Object.assign({}, userConfig, { spanLimits });\n}\n//# sourceMappingURL=utility.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Nkay10cmFjZS1iYXNlL2J1aWxkL2VzbS91dGlsaXR5LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNrRTtBQUNYO0FBQ2hEO0FBQ0E7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSxpQkFBaUIsNERBQW1CO0FBQ3BDO0FBQ0EsMkJBQTJCLDBEQUFpQjtBQUM1QyxtQ0FBbUM7QUFDbkMsMkNBQTJDLDhEQUE4RDtBQUN6Ryx3Q0FBd0Msd0RBQXdEO0FBQ2hHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCx1Q0FBdUM7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxxRUFBZ0I7QUFDNUIsWUFBWSxxRUFBZ0I7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHFFQUFnQjtBQUM1QixZQUFZLHFFQUFnQjtBQUM1QjtBQUNBLDJCQUEyQixnQkFBZ0IsWUFBWTtBQUN2RDtBQUNBIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Nkay10cmFjZS1iYXNlL2J1aWxkL2VzbS91dGlsaXR5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBidWlsZFNhbXBsZXJGcm9tRW52LCBsb2FkRGVmYXVsdENvbmZpZyB9IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IGdldE51bWJlckZyb21FbnYgfSBmcm9tICdAb3BlbnRlbGVtZXRyeS9jb3JlJztcbmV4cG9ydCBjb25zdCBERUZBVUxUX0FUVFJJQlVURV9DT1VOVF9MSU1JVCA9IDEyODtcbmV4cG9ydCBjb25zdCBERUZBVUxUX0FUVFJJQlVURV9WQUxVRV9MRU5HVEhfTElNSVQgPSBJbmZpbml0eTtcbi8qKlxuICogRnVuY3Rpb24gdG8gbWVyZ2UgRGVmYXVsdCBjb25maWd1cmF0aW9uIChhcyBzcGVjaWZpZWQgaW4gJy4vY29uZmlnJykgd2l0aFxuICogdXNlciBwcm92aWRlZCBjb25maWd1cmF0aW9ucy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlQ29uZmlnKHVzZXJDb25maWcpIHtcbiAgICBjb25zdCBwZXJJbnN0YW5jZURlZmF1bHRzID0ge1xuICAgICAgICBzYW1wbGVyOiBidWlsZFNhbXBsZXJGcm9tRW52KCksXG4gICAgfTtcbiAgICBjb25zdCBERUZBVUxUX0NPTkZJRyA9IGxvYWREZWZhdWx0Q29uZmlnKCk7XG4gICAgY29uc3QgdGFyZ2V0ID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9DT05GSUcsIHBlckluc3RhbmNlRGVmYXVsdHMsIHVzZXJDb25maWcpO1xuICAgIHRhcmdldC5nZW5lcmFsTGltaXRzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9DT05GSUcuZ2VuZXJhbExpbWl0cywgdXNlckNvbmZpZy5nZW5lcmFsTGltaXRzIHx8IHt9KTtcbiAgICB0YXJnZXQuc3BhbkxpbWl0cyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfQ09ORklHLnNwYW5MaW1pdHMsIHVzZXJDb25maWcuc3BhbkxpbWl0cyB8fCB7fSk7XG4gICAgcmV0dXJuIHRhcmdldDtcbn1cbi8qKlxuICogV2hlbiBnZW5lcmFsIGxpbWl0cyBhcmUgcHJvdmlkZWQgYW5kIG1vZGVsIHNwZWNpZmljIGxpbWl0cyBhcmUgbm90LFxuICogY29uZmlndXJlcyB0aGUgbW9kZWwgc3BlY2lmaWMgbGltaXRzIGJ5IHVzaW5nIHRoZSB2YWx1ZXMgZnJvbSB0aGUgZ2VuZXJhbCBvbmVzLlxuICogQHBhcmFtIHVzZXJDb25maWcgVXNlciBwcm92aWRlZCB0cmFjZXIgY29uZmlndXJhdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVjb25maWd1cmVMaW1pdHModXNlckNvbmZpZykge1xuICAgIGNvbnN0IHNwYW5MaW1pdHMgPSBPYmplY3QuYXNzaWduKHt9LCB1c2VyQ29uZmlnLnNwYW5MaW1pdHMpO1xuICAgIC8qKlxuICAgICAqIFJlYXNzaWduIHNwYW4gYXR0cmlidXRlIGNvdW50IGxpbWl0IHRvIHVzZSBmaXJzdCBub24gbnVsbCB2YWx1ZSBkZWZpbmVkIGJ5IHVzZXIgb3IgdXNlIGRlZmF1bHQgdmFsdWVcbiAgICAgKi9cbiAgICBzcGFuTGltaXRzLmF0dHJpYnV0ZUNvdW50TGltaXQgPVxuICAgICAgICB1c2VyQ29uZmlnLnNwYW5MaW1pdHM/LmF0dHJpYnV0ZUNvdW50TGltaXQgPz9cbiAgICAgICAgICAgIHVzZXJDb25maWcuZ2VuZXJhbExpbWl0cz8uYXR0cmlidXRlQ291bnRMaW1pdCA/P1xuICAgICAgICAgICAgZ2V0TnVtYmVyRnJvbUVudignT1RFTF9TUEFOX0FUVFJJQlVURV9DT1VOVF9MSU1JVCcpID8/XG4gICAgICAgICAgICBnZXROdW1iZXJGcm9tRW52KCdPVEVMX0FUVFJJQlVURV9DT1VOVF9MSU1JVCcpID8/XG4gICAgICAgICAgICBERUZBVUxUX0FUVFJJQlVURV9DT1VOVF9MSU1JVDtcbiAgICAvKipcbiAgICAgKiBSZWFzc2lnbiBzcGFuIGF0dHJpYnV0ZSB2YWx1ZSBsZW5ndGggbGltaXQgdG8gdXNlIGZpcnN0IG5vbiBudWxsIHZhbHVlIGRlZmluZWQgYnkgdXNlciBvciB1c2UgZGVmYXVsdCB2YWx1ZVxuICAgICAqL1xuICAgIHNwYW5MaW1pdHMuYXR0cmlidXRlVmFsdWVMZW5ndGhMaW1pdCA9XG4gICAgICAgIHVzZXJDb25maWcuc3BhbkxpbWl0cz8uYXR0cmlidXRlVmFsdWVMZW5ndGhMaW1pdCA/P1xuICAgICAgICAgICAgdXNlckNvbmZpZy5nZW5lcmFsTGltaXRzPy5hdHRyaWJ1dGVWYWx1ZUxlbmd0aExpbWl0ID8/XG4gICAgICAgICAgICBnZXROdW1iZXJGcm9tRW52KCdPVEVMX1NQQU5fQVRUUklCVVRFX1ZBTFVFX0xFTkdUSF9MSU1JVCcpID8/XG4gICAgICAgICAgICBnZXROdW1iZXJGcm9tRW52KCdPVEVMX0FUVFJJQlVURV9WQUxVRV9MRU5HVEhfTElNSVQnKSA/P1xuICAgICAgICAgICAgREVGQVVMVF9BVFRSSUJVVEVfVkFMVUVfTEVOR1RIX0xJTUlUO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCB1c2VyQ29uZmlnLCB7IHNwYW5MaW1pdHMgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlsaXR5LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/utility.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_ABORTED: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_ABORTED),\n/* harmony export */   ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_HANDLED: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_HANDLED),\n/* harmony export */   ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_SKIPPED: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_SKIPPED),\n/* harmony export */   ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_UNHANDLED: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_UNHANDLED),\n/* harmony export */   ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ACQUIRED: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ACQUIRED),\n/* harmony export */   ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ENDPOINT_LIMITER: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ENDPOINT_LIMITER),\n/* harmony export */   ASPNETCORE_RATE_LIMITING_RESULT_VALUE_GLOBAL_LIMITER: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ASPNETCORE_RATE_LIMITING_RESULT_VALUE_GLOBAL_LIMITER),\n/* harmony export */   ASPNETCORE_RATE_LIMITING_RESULT_VALUE_REQUEST_CANCELED: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ASPNETCORE_RATE_LIMITING_RESULT_VALUE_REQUEST_CANCELED),\n/* harmony export */   ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_FAILURE: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_FAILURE),\n/* harmony export */   ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_SUCCESS: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_SUCCESS),\n/* harmony export */   ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT),\n/* harmony export */   ATTR_ASPNETCORE_DIAGNOSTICS_HANDLER_TYPE: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_ASPNETCORE_DIAGNOSTICS_HANDLER_TYPE),\n/* harmony export */   ATTR_ASPNETCORE_RATE_LIMITING_POLICY: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_ASPNETCORE_RATE_LIMITING_POLICY),\n/* harmony export */   ATTR_ASPNETCORE_RATE_LIMITING_RESULT: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_ASPNETCORE_RATE_LIMITING_RESULT),\n/* harmony export */   ATTR_ASPNETCORE_REQUEST_IS_UNHANDLED: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_ASPNETCORE_REQUEST_IS_UNHANDLED),\n/* harmony export */   ATTR_ASPNETCORE_ROUTING_IS_FALLBACK: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_ASPNETCORE_ROUTING_IS_FALLBACK),\n/* harmony export */   ATTR_ASPNETCORE_ROUTING_MATCH_STATUS: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_ASPNETCORE_ROUTING_MATCH_STATUS),\n/* harmony export */   ATTR_ASPNETCORE_USER_IS_AUTHENTICATED: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_ASPNETCORE_USER_IS_AUTHENTICATED),\n/* harmony export */   ATTR_CLIENT_ADDRESS: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_CLIENT_ADDRESS),\n/* harmony export */   ATTR_CLIENT_PORT: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_CLIENT_PORT),\n/* harmony export */   ATTR_CODE_COLUMN_NUMBER: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_CODE_COLUMN_NUMBER),\n/* harmony export */   ATTR_CODE_FILE_PATH: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_CODE_FILE_PATH),\n/* harmony export */   ATTR_CODE_FUNCTION_NAME: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_CODE_FUNCTION_NAME),\n/* harmony export */   ATTR_CODE_LINE_NUMBER: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_CODE_LINE_NUMBER),\n/* harmony export */   ATTR_CODE_STACKTRACE: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_CODE_STACKTRACE),\n/* harmony export */   ATTR_DB_COLLECTION_NAME: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_DB_COLLECTION_NAME),\n/* harmony export */   ATTR_DB_NAMESPACE: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_DB_NAMESPACE),\n/* harmony export */   ATTR_DB_OPERATION_BATCH_SIZE: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_DB_OPERATION_BATCH_SIZE),\n/* harmony export */   ATTR_DB_OPERATION_NAME: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_DB_OPERATION_NAME),\n/* harmony export */   ATTR_DB_QUERY_SUMMARY: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_DB_QUERY_SUMMARY),\n/* harmony export */   ATTR_DB_QUERY_TEXT: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_DB_QUERY_TEXT),\n/* harmony export */   ATTR_DB_RESPONSE_STATUS_CODE: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_DB_RESPONSE_STATUS_CODE),\n/* harmony export */   ATTR_DB_STORED_PROCEDURE_NAME: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_DB_STORED_PROCEDURE_NAME),\n/* harmony export */   ATTR_DB_SYSTEM_NAME: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_DB_SYSTEM_NAME),\n/* harmony export */   ATTR_DOTNET_GC_HEAP_GENERATION: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_DOTNET_GC_HEAP_GENERATION),\n/* harmony export */   ATTR_ERROR_TYPE: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_ERROR_TYPE),\n/* harmony export */   ATTR_EXCEPTION_ESCAPED: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_EXCEPTION_ESCAPED),\n/* harmony export */   ATTR_EXCEPTION_MESSAGE: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_EXCEPTION_MESSAGE),\n/* harmony export */   ATTR_EXCEPTION_STACKTRACE: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_EXCEPTION_STACKTRACE),\n/* harmony export */   ATTR_EXCEPTION_TYPE: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_EXCEPTION_TYPE),\n/* harmony export */   ATTR_HTTP_REQUEST_HEADER: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_HTTP_REQUEST_HEADER),\n/* harmony export */   ATTR_HTTP_REQUEST_METHOD: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_HTTP_REQUEST_METHOD),\n/* harmony export */   ATTR_HTTP_REQUEST_METHOD_ORIGINAL: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_HTTP_REQUEST_METHOD_ORIGINAL),\n/* harmony export */   ATTR_HTTP_REQUEST_RESEND_COUNT: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_HTTP_REQUEST_RESEND_COUNT),\n/* harmony export */   ATTR_HTTP_RESPONSE_HEADER: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_HTTP_RESPONSE_HEADER),\n/* harmony export */   ATTR_HTTP_RESPONSE_STATUS_CODE: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_HTTP_RESPONSE_STATUS_CODE),\n/* harmony export */   ATTR_HTTP_ROUTE: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_HTTP_ROUTE),\n/* harmony export */   ATTR_JVM_GC_ACTION: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_JVM_GC_ACTION),\n/* harmony export */   ATTR_JVM_GC_NAME: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_JVM_GC_NAME),\n/* harmony export */   ATTR_JVM_MEMORY_POOL_NAME: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_JVM_MEMORY_POOL_NAME),\n/* harmony export */   ATTR_JVM_MEMORY_TYPE: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_JVM_MEMORY_TYPE),\n/* harmony export */   ATTR_JVM_THREAD_DAEMON: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_JVM_THREAD_DAEMON),\n/* harmony export */   ATTR_JVM_THREAD_STATE: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_JVM_THREAD_STATE),\n/* harmony export */   ATTR_NETWORK_LOCAL_ADDRESS: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_NETWORK_LOCAL_ADDRESS),\n/* harmony export */   ATTR_NETWORK_LOCAL_PORT: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_NETWORK_LOCAL_PORT),\n/* harmony export */   ATTR_NETWORK_PEER_ADDRESS: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_NETWORK_PEER_ADDRESS),\n/* harmony export */   ATTR_NETWORK_PEER_PORT: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_NETWORK_PEER_PORT),\n/* harmony export */   ATTR_NETWORK_PROTOCOL_NAME: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_NETWORK_PROTOCOL_NAME),\n/* harmony export */   ATTR_NETWORK_PROTOCOL_VERSION: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_NETWORK_PROTOCOL_VERSION),\n/* harmony export */   ATTR_NETWORK_TRANSPORT: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_NETWORK_TRANSPORT),\n/* harmony export */   ATTR_NETWORK_TYPE: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_NETWORK_TYPE),\n/* harmony export */   ATTR_OTEL_SCOPE_NAME: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_OTEL_SCOPE_NAME),\n/* harmony export */   ATTR_OTEL_SCOPE_VERSION: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_OTEL_SCOPE_VERSION),\n/* harmony export */   ATTR_OTEL_STATUS_CODE: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_OTEL_STATUS_CODE),\n/* harmony export */   ATTR_OTEL_STATUS_DESCRIPTION: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_OTEL_STATUS_DESCRIPTION),\n/* harmony export */   ATTR_SERVER_ADDRESS: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_SERVER_ADDRESS),\n/* harmony export */   ATTR_SERVER_PORT: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_SERVER_PORT),\n/* harmony export */   ATTR_SERVICE_NAME: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_SERVICE_NAME),\n/* harmony export */   ATTR_SERVICE_VERSION: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_SERVICE_VERSION),\n/* harmony export */   ATTR_SIGNALR_CONNECTION_STATUS: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_SIGNALR_CONNECTION_STATUS),\n/* harmony export */   ATTR_SIGNALR_TRANSPORT: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_SIGNALR_TRANSPORT),\n/* harmony export */   ATTR_TELEMETRY_SDK_LANGUAGE: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_TELEMETRY_SDK_LANGUAGE),\n/* harmony export */   ATTR_TELEMETRY_SDK_NAME: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_TELEMETRY_SDK_NAME),\n/* harmony export */   ATTR_TELEMETRY_SDK_VERSION: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_TELEMETRY_SDK_VERSION),\n/* harmony export */   ATTR_URL_FRAGMENT: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_URL_FRAGMENT),\n/* harmony export */   ATTR_URL_FULL: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_URL_FULL),\n/* harmony export */   ATTR_URL_PATH: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_URL_PATH),\n/* harmony export */   ATTR_URL_QUERY: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_URL_QUERY),\n/* harmony export */   ATTR_URL_SCHEME: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_URL_SCHEME),\n/* harmony export */   ATTR_USER_AGENT_ORIGINAL: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ATTR_USER_AGENT_ORIGINAL),\n/* harmony export */   AWSECSLAUNCHTYPEVALUES_EC2: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.AWSECSLAUNCHTYPEVALUES_EC2),\n/* harmony export */   AWSECSLAUNCHTYPEVALUES_FARGATE: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.AWSECSLAUNCHTYPEVALUES_FARGATE),\n/* harmony export */   AwsEcsLaunchtypeValues: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.AwsEcsLaunchtypeValues),\n/* harmony export */   CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS),\n/* harmony export */   CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC),\n/* harmony export */   CLOUDPLATFORMVALUES_AWS_EC2: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.CLOUDPLATFORMVALUES_AWS_EC2),\n/* harmony export */   CLOUDPLATFORMVALUES_AWS_ECS: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.CLOUDPLATFORMVALUES_AWS_ECS),\n/* harmony export */   CLOUDPLATFORMVALUES_AWS_EKS: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.CLOUDPLATFORMVALUES_AWS_EKS),\n/* harmony export */   CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK),\n/* harmony export */   CLOUDPLATFORMVALUES_AWS_LAMBDA: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.CLOUDPLATFORMVALUES_AWS_LAMBDA),\n/* harmony export */   CLOUDPLATFORMVALUES_AZURE_AKS: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.CLOUDPLATFORMVALUES_AZURE_AKS),\n/* harmony export */   CLOUDPLATFORMVALUES_AZURE_APP_SERVICE: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.CLOUDPLATFORMVALUES_AZURE_APP_SERVICE),\n/* harmony export */   CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES),\n/* harmony export */   CLOUDPLATFORMVALUES_AZURE_FUNCTIONS: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.CLOUDPLATFORMVALUES_AZURE_FUNCTIONS),\n/* harmony export */   CLOUDPLATFORMVALUES_AZURE_VM: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.CLOUDPLATFORMVALUES_AZURE_VM),\n/* harmony export */   CLOUDPLATFORMVALUES_GCP_APP_ENGINE: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.CLOUDPLATFORMVALUES_GCP_APP_ENGINE),\n/* harmony export */   CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS),\n/* harmony export */   CLOUDPLATFORMVALUES_GCP_CLOUD_RUN: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.CLOUDPLATFORMVALUES_GCP_CLOUD_RUN),\n/* harmony export */   CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE),\n/* harmony export */   CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE),\n/* harmony export */   CLOUDPROVIDERVALUES_ALIBABA_CLOUD: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.CLOUDPROVIDERVALUES_ALIBABA_CLOUD),\n/* harmony export */   CLOUDPROVIDERVALUES_AWS: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.CLOUDPROVIDERVALUES_AWS),\n/* harmony export */   CLOUDPROVIDERVALUES_AZURE: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.CLOUDPROVIDERVALUES_AZURE),\n/* harmony export */   CLOUDPROVIDERVALUES_GCP: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.CLOUDPROVIDERVALUES_GCP),\n/* harmony export */   CloudPlatformValues: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.CloudPlatformValues),\n/* harmony export */   CloudProviderValues: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.CloudProviderValues),\n/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_ALL: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBCASSANDRACONSISTENCYLEVELVALUES_ALL),\n/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_ANY: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBCASSANDRACONSISTENCYLEVELVALUES_ANY),\n/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM),\n/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE),\n/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM),\n/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL),\n/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_ONE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBCASSANDRACONSISTENCYLEVELVALUES_ONE),\n/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM),\n/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL),\n/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_THREE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBCASSANDRACONSISTENCYLEVELVALUES_THREE),\n/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_TWO: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBCASSANDRACONSISTENCYLEVELVALUES_TWO),\n/* harmony export */   DBSYSTEMVALUES_ADABAS: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_ADABAS),\n/* harmony export */   DBSYSTEMVALUES_CACHE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_CACHE),\n/* harmony export */   DBSYSTEMVALUES_CASSANDRA: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_CASSANDRA),\n/* harmony export */   DBSYSTEMVALUES_CLOUDSCAPE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_CLOUDSCAPE),\n/* harmony export */   DBSYSTEMVALUES_COCKROACHDB: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_COCKROACHDB),\n/* harmony export */   DBSYSTEMVALUES_COLDFUSION: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_COLDFUSION),\n/* harmony export */   DBSYSTEMVALUES_COSMOSDB: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_COSMOSDB),\n/* harmony export */   DBSYSTEMVALUES_COUCHBASE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_COUCHBASE),\n/* harmony export */   DBSYSTEMVALUES_COUCHDB: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_COUCHDB),\n/* harmony export */   DBSYSTEMVALUES_DB2: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_DB2),\n/* harmony export */   DBSYSTEMVALUES_DERBY: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_DERBY),\n/* harmony export */   DBSYSTEMVALUES_DYNAMODB: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_DYNAMODB),\n/* harmony export */   DBSYSTEMVALUES_EDB: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_EDB),\n/* harmony export */   DBSYSTEMVALUES_ELASTICSEARCH: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_ELASTICSEARCH),\n/* harmony export */   DBSYSTEMVALUES_FILEMAKER: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_FILEMAKER),\n/* harmony export */   DBSYSTEMVALUES_FIREBIRD: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_FIREBIRD),\n/* harmony export */   DBSYSTEMVALUES_FIRSTSQL: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_FIRSTSQL),\n/* harmony export */   DBSYSTEMVALUES_GEODE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_GEODE),\n/* harmony export */   DBSYSTEMVALUES_H2: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_H2),\n/* harmony export */   DBSYSTEMVALUES_HANADB: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_HANADB),\n/* harmony export */   DBSYSTEMVALUES_HBASE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_HBASE),\n/* harmony export */   DBSYSTEMVALUES_HIVE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_HIVE),\n/* harmony export */   DBSYSTEMVALUES_HSQLDB: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_HSQLDB),\n/* harmony export */   DBSYSTEMVALUES_INFORMIX: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_INFORMIX),\n/* harmony export */   DBSYSTEMVALUES_INGRES: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_INGRES),\n/* harmony export */   DBSYSTEMVALUES_INSTANTDB: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_INSTANTDB),\n/* harmony export */   DBSYSTEMVALUES_INTERBASE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_INTERBASE),\n/* harmony export */   DBSYSTEMVALUES_MARIADB: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_MARIADB),\n/* harmony export */   DBSYSTEMVALUES_MAXDB: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_MAXDB),\n/* harmony export */   DBSYSTEMVALUES_MEMCACHED: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_MEMCACHED),\n/* harmony export */   DBSYSTEMVALUES_MONGODB: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_MONGODB),\n/* harmony export */   DBSYSTEMVALUES_MSSQL: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_MSSQL),\n/* harmony export */   DBSYSTEMVALUES_MYSQL: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_MYSQL),\n/* harmony export */   DBSYSTEMVALUES_NEO4J: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_NEO4J),\n/* harmony export */   DBSYSTEMVALUES_NETEZZA: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_NETEZZA),\n/* harmony export */   DBSYSTEMVALUES_ORACLE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_ORACLE),\n/* harmony export */   DBSYSTEMVALUES_OTHER_SQL: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_OTHER_SQL),\n/* harmony export */   DBSYSTEMVALUES_PERVASIVE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_PERVASIVE),\n/* harmony export */   DBSYSTEMVALUES_POINTBASE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_POINTBASE),\n/* harmony export */   DBSYSTEMVALUES_POSTGRESQL: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_POSTGRESQL),\n/* harmony export */   DBSYSTEMVALUES_PROGRESS: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_PROGRESS),\n/* harmony export */   DBSYSTEMVALUES_REDIS: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_REDIS),\n/* harmony export */   DBSYSTEMVALUES_REDSHIFT: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_REDSHIFT),\n/* harmony export */   DBSYSTEMVALUES_SQLITE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_SQLITE),\n/* harmony export */   DBSYSTEMVALUES_SYBASE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_SYBASE),\n/* harmony export */   DBSYSTEMVALUES_TERADATA: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_TERADATA),\n/* harmony export */   DBSYSTEMVALUES_VERTICA: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_VERTICA),\n/* harmony export */   DB_SYSTEM_NAME_VALUE_MARIADB: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.DB_SYSTEM_NAME_VALUE_MARIADB),\n/* harmony export */   DB_SYSTEM_NAME_VALUE_MICROSOFT_SQL_SERVER: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.DB_SYSTEM_NAME_VALUE_MICROSOFT_SQL_SERVER),\n/* harmony export */   DB_SYSTEM_NAME_VALUE_MYSQL: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.DB_SYSTEM_NAME_VALUE_MYSQL),\n/* harmony export */   DB_SYSTEM_NAME_VALUE_POSTGRESQL: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.DB_SYSTEM_NAME_VALUE_POSTGRESQL),\n/* harmony export */   DOTNET_GC_HEAP_GENERATION_VALUE_GEN0: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.DOTNET_GC_HEAP_GENERATION_VALUE_GEN0),\n/* harmony export */   DOTNET_GC_HEAP_GENERATION_VALUE_GEN1: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.DOTNET_GC_HEAP_GENERATION_VALUE_GEN1),\n/* harmony export */   DOTNET_GC_HEAP_GENERATION_VALUE_GEN2: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.DOTNET_GC_HEAP_GENERATION_VALUE_GEN2),\n/* harmony export */   DOTNET_GC_HEAP_GENERATION_VALUE_LOH: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.DOTNET_GC_HEAP_GENERATION_VALUE_LOH),\n/* harmony export */   DOTNET_GC_HEAP_GENERATION_VALUE_POH: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.DOTNET_GC_HEAP_GENERATION_VALUE_POH),\n/* harmony export */   DbCassandraConsistencyLevelValues: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DbCassandraConsistencyLevelValues),\n/* harmony export */   DbSystemValues: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DbSystemValues),\n/* harmony export */   ERROR_TYPE_VALUE_OTHER: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.ERROR_TYPE_VALUE_OTHER),\n/* harmony export */   EVENT_EXCEPTION: () => (/* reexport safe */ _stable_events__WEBPACK_IMPORTED_MODULE_4__.EVENT_EXCEPTION),\n/* harmony export */   FAASDOCUMENTOPERATIONVALUES_DELETE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.FAASDOCUMENTOPERATIONVALUES_DELETE),\n/* harmony export */   FAASDOCUMENTOPERATIONVALUES_EDIT: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.FAASDOCUMENTOPERATIONVALUES_EDIT),\n/* harmony export */   FAASDOCUMENTOPERATIONVALUES_INSERT: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.FAASDOCUMENTOPERATIONVALUES_INSERT),\n/* harmony export */   FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD),\n/* harmony export */   FAASINVOKEDPROVIDERVALUES_AWS: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.FAASINVOKEDPROVIDERVALUES_AWS),\n/* harmony export */   FAASINVOKEDPROVIDERVALUES_AZURE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.FAASINVOKEDPROVIDERVALUES_AZURE),\n/* harmony export */   FAASINVOKEDPROVIDERVALUES_GCP: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.FAASINVOKEDPROVIDERVALUES_GCP),\n/* harmony export */   FAASTRIGGERVALUES_DATASOURCE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.FAASTRIGGERVALUES_DATASOURCE),\n/* harmony export */   FAASTRIGGERVALUES_HTTP: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.FAASTRIGGERVALUES_HTTP),\n/* harmony export */   FAASTRIGGERVALUES_OTHER: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.FAASTRIGGERVALUES_OTHER),\n/* harmony export */   FAASTRIGGERVALUES_PUBSUB: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.FAASTRIGGERVALUES_PUBSUB),\n/* harmony export */   FAASTRIGGERVALUES_TIMER: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.FAASTRIGGERVALUES_TIMER),\n/* harmony export */   FaasDocumentOperationValues: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.FaasDocumentOperationValues),\n/* harmony export */   FaasInvokedProviderValues: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.FaasInvokedProviderValues),\n/* harmony export */   FaasTriggerValues: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.FaasTriggerValues),\n/* harmony export */   HOSTARCHVALUES_AMD64: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.HOSTARCHVALUES_AMD64),\n/* harmony export */   HOSTARCHVALUES_ARM32: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.HOSTARCHVALUES_ARM32),\n/* harmony export */   HOSTARCHVALUES_ARM64: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.HOSTARCHVALUES_ARM64),\n/* harmony export */   HOSTARCHVALUES_IA64: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.HOSTARCHVALUES_IA64),\n/* harmony export */   HOSTARCHVALUES_PPC32: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.HOSTARCHVALUES_PPC32),\n/* harmony export */   HOSTARCHVALUES_PPC64: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.HOSTARCHVALUES_PPC64),\n/* harmony export */   HOSTARCHVALUES_X86: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.HOSTARCHVALUES_X86),\n/* harmony export */   HTTPFLAVORVALUES_HTTP_1_0: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.HTTPFLAVORVALUES_HTTP_1_0),\n/* harmony export */   HTTPFLAVORVALUES_HTTP_1_1: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.HTTPFLAVORVALUES_HTTP_1_1),\n/* harmony export */   HTTPFLAVORVALUES_HTTP_2_0: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.HTTPFLAVORVALUES_HTTP_2_0),\n/* harmony export */   HTTPFLAVORVALUES_QUIC: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.HTTPFLAVORVALUES_QUIC),\n/* harmony export */   HTTPFLAVORVALUES_SPDY: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.HTTPFLAVORVALUES_SPDY),\n/* harmony export */   HTTP_REQUEST_METHOD_VALUE_CONNECT: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.HTTP_REQUEST_METHOD_VALUE_CONNECT),\n/* harmony export */   HTTP_REQUEST_METHOD_VALUE_DELETE: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.HTTP_REQUEST_METHOD_VALUE_DELETE),\n/* harmony export */   HTTP_REQUEST_METHOD_VALUE_GET: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.HTTP_REQUEST_METHOD_VALUE_GET),\n/* harmony export */   HTTP_REQUEST_METHOD_VALUE_HEAD: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.HTTP_REQUEST_METHOD_VALUE_HEAD),\n/* harmony export */   HTTP_REQUEST_METHOD_VALUE_OPTIONS: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.HTTP_REQUEST_METHOD_VALUE_OPTIONS),\n/* harmony export */   HTTP_REQUEST_METHOD_VALUE_OTHER: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.HTTP_REQUEST_METHOD_VALUE_OTHER),\n/* harmony export */   HTTP_REQUEST_METHOD_VALUE_PATCH: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.HTTP_REQUEST_METHOD_VALUE_PATCH),\n/* harmony export */   HTTP_REQUEST_METHOD_VALUE_POST: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.HTTP_REQUEST_METHOD_VALUE_POST),\n/* harmony export */   HTTP_REQUEST_METHOD_VALUE_PUT: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.HTTP_REQUEST_METHOD_VALUE_PUT),\n/* harmony export */   HTTP_REQUEST_METHOD_VALUE_TRACE: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.HTTP_REQUEST_METHOD_VALUE_TRACE),\n/* harmony export */   HostArchValues: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.HostArchValues),\n/* harmony export */   HttpFlavorValues: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.HttpFlavorValues),\n/* harmony export */   JVM_MEMORY_TYPE_VALUE_HEAP: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.JVM_MEMORY_TYPE_VALUE_HEAP),\n/* harmony export */   JVM_MEMORY_TYPE_VALUE_NON_HEAP: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.JVM_MEMORY_TYPE_VALUE_NON_HEAP),\n/* harmony export */   JVM_THREAD_STATE_VALUE_BLOCKED: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.JVM_THREAD_STATE_VALUE_BLOCKED),\n/* harmony export */   JVM_THREAD_STATE_VALUE_NEW: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.JVM_THREAD_STATE_VALUE_NEW),\n/* harmony export */   JVM_THREAD_STATE_VALUE_RUNNABLE: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.JVM_THREAD_STATE_VALUE_RUNNABLE),\n/* harmony export */   JVM_THREAD_STATE_VALUE_TERMINATED: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.JVM_THREAD_STATE_VALUE_TERMINATED),\n/* harmony export */   JVM_THREAD_STATE_VALUE_TIMED_WAITING: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.JVM_THREAD_STATE_VALUE_TIMED_WAITING),\n/* harmony export */   JVM_THREAD_STATE_VALUE_WAITING: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.JVM_THREAD_STATE_VALUE_WAITING),\n/* harmony export */   MESSAGETYPEVALUES_RECEIVED: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.MESSAGETYPEVALUES_RECEIVED),\n/* harmony export */   MESSAGETYPEVALUES_SENT: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.MESSAGETYPEVALUES_SENT),\n/* harmony export */   MESSAGINGDESTINATIONKINDVALUES_QUEUE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.MESSAGINGDESTINATIONKINDVALUES_QUEUE),\n/* harmony export */   MESSAGINGDESTINATIONKINDVALUES_TOPIC: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.MESSAGINGDESTINATIONKINDVALUES_TOPIC),\n/* harmony export */   MESSAGINGOPERATIONVALUES_PROCESS: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.MESSAGINGOPERATIONVALUES_PROCESS),\n/* harmony export */   MESSAGINGOPERATIONVALUES_RECEIVE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.MESSAGINGOPERATIONVALUES_RECEIVE),\n/* harmony export */   METRIC_ASPNETCORE_DIAGNOSTICS_EXCEPTIONS: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_ASPNETCORE_DIAGNOSTICS_EXCEPTIONS),\n/* harmony export */   METRIC_ASPNETCORE_RATE_LIMITING_ACTIVE_REQUEST_LEASES: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_ASPNETCORE_RATE_LIMITING_ACTIVE_REQUEST_LEASES),\n/* harmony export */   METRIC_ASPNETCORE_RATE_LIMITING_QUEUED_REQUESTS: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_ASPNETCORE_RATE_LIMITING_QUEUED_REQUESTS),\n/* harmony export */   METRIC_ASPNETCORE_RATE_LIMITING_REQUESTS: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_ASPNETCORE_RATE_LIMITING_REQUESTS),\n/* harmony export */   METRIC_ASPNETCORE_RATE_LIMITING_REQUEST_LEASE_DURATION: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_ASPNETCORE_RATE_LIMITING_REQUEST_LEASE_DURATION),\n/* harmony export */   METRIC_ASPNETCORE_RATE_LIMITING_REQUEST_TIME_IN_QUEUE: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_ASPNETCORE_RATE_LIMITING_REQUEST_TIME_IN_QUEUE),\n/* harmony export */   METRIC_ASPNETCORE_ROUTING_MATCH_ATTEMPTS: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_ASPNETCORE_ROUTING_MATCH_ATTEMPTS),\n/* harmony export */   METRIC_DB_CLIENT_OPERATION_DURATION: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_DB_CLIENT_OPERATION_DURATION),\n/* harmony export */   METRIC_DOTNET_ASSEMBLY_COUNT: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_DOTNET_ASSEMBLY_COUNT),\n/* harmony export */   METRIC_DOTNET_EXCEPTIONS: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_DOTNET_EXCEPTIONS),\n/* harmony export */   METRIC_DOTNET_GC_COLLECTIONS: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_DOTNET_GC_COLLECTIONS),\n/* harmony export */   METRIC_DOTNET_GC_HEAP_TOTAL_ALLOCATED: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_DOTNET_GC_HEAP_TOTAL_ALLOCATED),\n/* harmony export */   METRIC_DOTNET_GC_LAST_COLLECTION_HEAP_FRAGMENTATION_SIZE: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_DOTNET_GC_LAST_COLLECTION_HEAP_FRAGMENTATION_SIZE),\n/* harmony export */   METRIC_DOTNET_GC_LAST_COLLECTION_HEAP_SIZE: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_DOTNET_GC_LAST_COLLECTION_HEAP_SIZE),\n/* harmony export */   METRIC_DOTNET_GC_LAST_COLLECTION_MEMORY_COMMITTED_SIZE: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_DOTNET_GC_LAST_COLLECTION_MEMORY_COMMITTED_SIZE),\n/* harmony export */   METRIC_DOTNET_GC_PAUSE_TIME: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_DOTNET_GC_PAUSE_TIME),\n/* harmony export */   METRIC_DOTNET_JIT_COMPILATION_TIME: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_DOTNET_JIT_COMPILATION_TIME),\n/* harmony export */   METRIC_DOTNET_JIT_COMPILED_IL_SIZE: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_DOTNET_JIT_COMPILED_IL_SIZE),\n/* harmony export */   METRIC_DOTNET_JIT_COMPILED_METHODS: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_DOTNET_JIT_COMPILED_METHODS),\n/* harmony export */   METRIC_DOTNET_MONITOR_LOCK_CONTENTIONS: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_DOTNET_MONITOR_LOCK_CONTENTIONS),\n/* harmony export */   METRIC_DOTNET_PROCESS_CPU_COUNT: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_DOTNET_PROCESS_CPU_COUNT),\n/* harmony export */   METRIC_DOTNET_PROCESS_CPU_TIME: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_DOTNET_PROCESS_CPU_TIME),\n/* harmony export */   METRIC_DOTNET_PROCESS_MEMORY_WORKING_SET: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_DOTNET_PROCESS_MEMORY_WORKING_SET),\n/* harmony export */   METRIC_DOTNET_THREAD_POOL_QUEUE_LENGTH: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_DOTNET_THREAD_POOL_QUEUE_LENGTH),\n/* harmony export */   METRIC_DOTNET_THREAD_POOL_THREAD_COUNT: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_DOTNET_THREAD_POOL_THREAD_COUNT),\n/* harmony export */   METRIC_DOTNET_THREAD_POOL_WORK_ITEM_COUNT: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_DOTNET_THREAD_POOL_WORK_ITEM_COUNT),\n/* harmony export */   METRIC_DOTNET_TIMER_COUNT: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_DOTNET_TIMER_COUNT),\n/* harmony export */   METRIC_HTTP_CLIENT_REQUEST_DURATION: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_HTTP_CLIENT_REQUEST_DURATION),\n/* harmony export */   METRIC_HTTP_SERVER_REQUEST_DURATION: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_HTTP_SERVER_REQUEST_DURATION),\n/* harmony export */   METRIC_JVM_CLASS_COUNT: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_JVM_CLASS_COUNT),\n/* harmony export */   METRIC_JVM_CLASS_LOADED: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_JVM_CLASS_LOADED),\n/* harmony export */   METRIC_JVM_CLASS_UNLOADED: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_JVM_CLASS_UNLOADED),\n/* harmony export */   METRIC_JVM_CPU_COUNT: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_JVM_CPU_COUNT),\n/* harmony export */   METRIC_JVM_CPU_RECENT_UTILIZATION: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_JVM_CPU_RECENT_UTILIZATION),\n/* harmony export */   METRIC_JVM_CPU_TIME: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_JVM_CPU_TIME),\n/* harmony export */   METRIC_JVM_GC_DURATION: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_JVM_GC_DURATION),\n/* harmony export */   METRIC_JVM_MEMORY_COMMITTED: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_JVM_MEMORY_COMMITTED),\n/* harmony export */   METRIC_JVM_MEMORY_LIMIT: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_JVM_MEMORY_LIMIT),\n/* harmony export */   METRIC_JVM_MEMORY_USED: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_JVM_MEMORY_USED),\n/* harmony export */   METRIC_JVM_MEMORY_USED_AFTER_LAST_GC: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_JVM_MEMORY_USED_AFTER_LAST_GC),\n/* harmony export */   METRIC_JVM_THREAD_COUNT: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_JVM_THREAD_COUNT),\n/* harmony export */   METRIC_KESTREL_ACTIVE_CONNECTIONS: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_KESTREL_ACTIVE_CONNECTIONS),\n/* harmony export */   METRIC_KESTREL_ACTIVE_TLS_HANDSHAKES: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_KESTREL_ACTIVE_TLS_HANDSHAKES),\n/* harmony export */   METRIC_KESTREL_CONNECTION_DURATION: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_KESTREL_CONNECTION_DURATION),\n/* harmony export */   METRIC_KESTREL_QUEUED_CONNECTIONS: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_KESTREL_QUEUED_CONNECTIONS),\n/* harmony export */   METRIC_KESTREL_QUEUED_REQUESTS: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_KESTREL_QUEUED_REQUESTS),\n/* harmony export */   METRIC_KESTREL_REJECTED_CONNECTIONS: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_KESTREL_REJECTED_CONNECTIONS),\n/* harmony export */   METRIC_KESTREL_TLS_HANDSHAKE_DURATION: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_KESTREL_TLS_HANDSHAKE_DURATION),\n/* harmony export */   METRIC_KESTREL_UPGRADED_CONNECTIONS: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_KESTREL_UPGRADED_CONNECTIONS),\n/* harmony export */   METRIC_SIGNALR_SERVER_ACTIVE_CONNECTIONS: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_SIGNALR_SERVER_ACTIVE_CONNECTIONS),\n/* harmony export */   METRIC_SIGNALR_SERVER_CONNECTION_DURATION: () => (/* reexport safe */ _stable_metrics__WEBPACK_IMPORTED_MODULE_3__.METRIC_SIGNALR_SERVER_CONNECTION_DURATION),\n/* harmony export */   MessageTypeValues: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.MessageTypeValues),\n/* harmony export */   MessagingDestinationKindValues: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.MessagingDestinationKindValues),\n/* harmony export */   MessagingOperationValues: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.MessagingOperationValues),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_CDMA: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONSUBTYPEVALUES_CDMA),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_EDGE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONSUBTYPEVALUES_EDGE),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_GPRS: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONSUBTYPEVALUES_GPRS),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_GSM: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONSUBTYPEVALUES_GSM),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_HSPA: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONSUBTYPEVALUES_HSPA),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_IDEN: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONSUBTYPEVALUES_IDEN),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_LTE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONSUBTYPEVALUES_LTE),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_NR: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONSUBTYPEVALUES_NR),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_UMTS: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONSUBTYPEVALUES_UMTS),\n/* harmony export */   NETHOSTCONNECTIONTYPEVALUES_CELL: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONTYPEVALUES_CELL),\n/* harmony export */   NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE),\n/* harmony export */   NETHOSTCONNECTIONTYPEVALUES_UNKNOWN: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONTYPEVALUES_UNKNOWN),\n/* harmony export */   NETHOSTCONNECTIONTYPEVALUES_WIFI: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONTYPEVALUES_WIFI),\n/* harmony export */   NETHOSTCONNECTIONTYPEVALUES_WIRED: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONTYPEVALUES_WIRED),\n/* harmony export */   NETTRANSPORTVALUES_INPROC: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.NETTRANSPORTVALUES_INPROC),\n/* harmony export */   NETTRANSPORTVALUES_IP: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.NETTRANSPORTVALUES_IP),\n/* harmony export */   NETTRANSPORTVALUES_IP_TCP: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.NETTRANSPORTVALUES_IP_TCP),\n/* harmony export */   NETTRANSPORTVALUES_IP_UDP: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.NETTRANSPORTVALUES_IP_UDP),\n/* harmony export */   NETTRANSPORTVALUES_OTHER: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.NETTRANSPORTVALUES_OTHER),\n/* harmony export */   NETTRANSPORTVALUES_PIPE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.NETTRANSPORTVALUES_PIPE),\n/* harmony export */   NETTRANSPORTVALUES_UNIX: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.NETTRANSPORTVALUES_UNIX),\n/* harmony export */   NETWORK_TRANSPORT_VALUE_PIPE: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.NETWORK_TRANSPORT_VALUE_PIPE),\n/* harmony export */   NETWORK_TRANSPORT_VALUE_QUIC: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.NETWORK_TRANSPORT_VALUE_QUIC),\n/* harmony export */   NETWORK_TRANSPORT_VALUE_TCP: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.NETWORK_TRANSPORT_VALUE_TCP),\n/* harmony export */   NETWORK_TRANSPORT_VALUE_UDP: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.NETWORK_TRANSPORT_VALUE_UDP),\n/* harmony export */   NETWORK_TRANSPORT_VALUE_UNIX: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.NETWORK_TRANSPORT_VALUE_UNIX),\n/* harmony export */   NETWORK_TYPE_VALUE_IPV4: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.NETWORK_TYPE_VALUE_IPV4),\n/* harmony export */   NETWORK_TYPE_VALUE_IPV6: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.NETWORK_TYPE_VALUE_IPV6),\n/* harmony export */   NetHostConnectionSubtypeValues: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.NetHostConnectionSubtypeValues),\n/* harmony export */   NetHostConnectionTypeValues: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.NetHostConnectionTypeValues),\n/* harmony export */   NetTransportValues: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.NetTransportValues),\n/* harmony export */   OSTYPEVALUES_AIX: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.OSTYPEVALUES_AIX),\n/* harmony export */   OSTYPEVALUES_DARWIN: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.OSTYPEVALUES_DARWIN),\n/* harmony export */   OSTYPEVALUES_DRAGONFLYBSD: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.OSTYPEVALUES_DRAGONFLYBSD),\n/* harmony export */   OSTYPEVALUES_FREEBSD: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.OSTYPEVALUES_FREEBSD),\n/* harmony export */   OSTYPEVALUES_HPUX: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.OSTYPEVALUES_HPUX),\n/* harmony export */   OSTYPEVALUES_LINUX: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.OSTYPEVALUES_LINUX),\n/* harmony export */   OSTYPEVALUES_NETBSD: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.OSTYPEVALUES_NETBSD),\n/* harmony export */   OSTYPEVALUES_OPENBSD: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.OSTYPEVALUES_OPENBSD),\n/* harmony export */   OSTYPEVALUES_SOLARIS: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.OSTYPEVALUES_SOLARIS),\n/* harmony export */   OSTYPEVALUES_WINDOWS: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.OSTYPEVALUES_WINDOWS),\n/* harmony export */   OSTYPEVALUES_Z_OS: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.OSTYPEVALUES_Z_OS),\n/* harmony export */   OTEL_STATUS_CODE_VALUE_ERROR: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.OTEL_STATUS_CODE_VALUE_ERROR),\n/* harmony export */   OTEL_STATUS_CODE_VALUE_OK: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.OTEL_STATUS_CODE_VALUE_OK),\n/* harmony export */   OsTypeValues: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.OsTypeValues),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_ABORTED: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.RPCGRPCSTATUSCODEVALUES_ABORTED),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_CANCELLED: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.RPCGRPCSTATUSCODEVALUES_CANCELLED),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_DATA_LOSS: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.RPCGRPCSTATUSCODEVALUES_DATA_LOSS),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_INTERNAL: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.RPCGRPCSTATUSCODEVALUES_INTERNAL),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_NOT_FOUND: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.RPCGRPCSTATUSCODEVALUES_NOT_FOUND),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_OK: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.RPCGRPCSTATUSCODEVALUES_OK),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_UNAVAILABLE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.RPCGRPCSTATUSCODEVALUES_UNAVAILABLE),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_UNKNOWN: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.RPCGRPCSTATUSCODEVALUES_UNKNOWN),\n/* harmony export */   RpcGrpcStatusCodeValues: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.RpcGrpcStatusCodeValues),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_ATTRIBUTES_TO_GET: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_AWS_DYNAMODB_ATTRIBUTES_TO_GET),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_CONSISTENT_READ: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_AWS_DYNAMODB_CONSISTENT_READ),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_CONSUMED_CAPACITY: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_AWS_DYNAMODB_CONSUMED_CAPACITY),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_COUNT: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_AWS_DYNAMODB_COUNT),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_EXCLUSIVE_START_TABLE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_AWS_DYNAMODB_EXCLUSIVE_START_TABLE),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_INDEX_NAME: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_AWS_DYNAMODB_INDEX_NAME),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_ITEM_COLLECTION_METRICS: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_AWS_DYNAMODB_ITEM_COLLECTION_METRICS),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_LIMIT: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_AWS_DYNAMODB_LIMIT),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_PROJECTION: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_AWS_DYNAMODB_PROJECTION),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_SCANNED_COUNT: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_AWS_DYNAMODB_SCANNED_COUNT),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_SCAN_FORWARD: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_AWS_DYNAMODB_SCAN_FORWARD),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_SEGMENT: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_AWS_DYNAMODB_SEGMENT),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_SELECT: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_AWS_DYNAMODB_SELECT),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_TABLE_COUNT: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_AWS_DYNAMODB_TABLE_COUNT),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_TABLE_NAMES: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_AWS_DYNAMODB_TABLE_NAMES),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_TOTAL_SEGMENTS: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_AWS_DYNAMODB_TOTAL_SEGMENTS),\n/* harmony export */   SEMATTRS_AWS_LAMBDA_INVOKED_ARN: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_AWS_LAMBDA_INVOKED_ARN),\n/* harmony export */   SEMATTRS_CODE_FILEPATH: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_CODE_FILEPATH),\n/* harmony export */   SEMATTRS_CODE_FUNCTION: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_CODE_FUNCTION),\n/* harmony export */   SEMATTRS_CODE_LINENO: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_CODE_LINENO),\n/* harmony export */   SEMATTRS_CODE_NAMESPACE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_CODE_NAMESPACE),\n/* harmony export */   SEMATTRS_DB_CASSANDRA_CONSISTENCY_LEVEL: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_DB_CASSANDRA_CONSISTENCY_LEVEL),\n/* harmony export */   SEMATTRS_DB_CASSANDRA_COORDINATOR_DC: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_DB_CASSANDRA_COORDINATOR_DC),\n/* harmony export */   SEMATTRS_DB_CASSANDRA_COORDINATOR_ID: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_DB_CASSANDRA_COORDINATOR_ID),\n/* harmony export */   SEMATTRS_DB_CASSANDRA_IDEMPOTENCE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_DB_CASSANDRA_IDEMPOTENCE),\n/* harmony export */   SEMATTRS_DB_CASSANDRA_KEYSPACE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_DB_CASSANDRA_KEYSPACE),\n/* harmony export */   SEMATTRS_DB_CASSANDRA_PAGE_SIZE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_DB_CASSANDRA_PAGE_SIZE),\n/* harmony export */   SEMATTRS_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT),\n/* harmony export */   SEMATTRS_DB_CASSANDRA_TABLE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_DB_CASSANDRA_TABLE),\n/* harmony export */   SEMATTRS_DB_CONNECTION_STRING: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_DB_CONNECTION_STRING),\n/* harmony export */   SEMATTRS_DB_HBASE_NAMESPACE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_DB_HBASE_NAMESPACE),\n/* harmony export */   SEMATTRS_DB_JDBC_DRIVER_CLASSNAME: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_DB_JDBC_DRIVER_CLASSNAME),\n/* harmony export */   SEMATTRS_DB_MONGODB_COLLECTION: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_DB_MONGODB_COLLECTION),\n/* harmony export */   SEMATTRS_DB_MSSQL_INSTANCE_NAME: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_DB_MSSQL_INSTANCE_NAME),\n/* harmony export */   SEMATTRS_DB_NAME: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_DB_NAME),\n/* harmony export */   SEMATTRS_DB_OPERATION: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_DB_OPERATION),\n/* harmony export */   SEMATTRS_DB_REDIS_DATABASE_INDEX: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_DB_REDIS_DATABASE_INDEX),\n/* harmony export */   SEMATTRS_DB_SQL_TABLE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_DB_SQL_TABLE),\n/* harmony export */   SEMATTRS_DB_STATEMENT: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_DB_STATEMENT),\n/* harmony export */   SEMATTRS_DB_SYSTEM: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_DB_SYSTEM),\n/* harmony export */   SEMATTRS_DB_USER: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_DB_USER),\n/* harmony export */   SEMATTRS_ENDUSER_ID: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_ENDUSER_ID),\n/* harmony export */   SEMATTRS_ENDUSER_ROLE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_ENDUSER_ROLE),\n/* harmony export */   SEMATTRS_ENDUSER_SCOPE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_ENDUSER_SCOPE),\n/* harmony export */   SEMATTRS_EXCEPTION_ESCAPED: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_EXCEPTION_ESCAPED),\n/* harmony export */   SEMATTRS_EXCEPTION_MESSAGE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_EXCEPTION_MESSAGE),\n/* harmony export */   SEMATTRS_EXCEPTION_STACKTRACE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_EXCEPTION_STACKTRACE),\n/* harmony export */   SEMATTRS_EXCEPTION_TYPE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_EXCEPTION_TYPE),\n/* harmony export */   SEMATTRS_FAAS_COLDSTART: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_FAAS_COLDSTART),\n/* harmony export */   SEMATTRS_FAAS_CRON: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_FAAS_CRON),\n/* harmony export */   SEMATTRS_FAAS_DOCUMENT_COLLECTION: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_FAAS_DOCUMENT_COLLECTION),\n/* harmony export */   SEMATTRS_FAAS_DOCUMENT_NAME: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_FAAS_DOCUMENT_NAME),\n/* harmony export */   SEMATTRS_FAAS_DOCUMENT_OPERATION: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_FAAS_DOCUMENT_OPERATION),\n/* harmony export */   SEMATTRS_FAAS_DOCUMENT_TIME: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_FAAS_DOCUMENT_TIME),\n/* harmony export */   SEMATTRS_FAAS_EXECUTION: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_FAAS_EXECUTION),\n/* harmony export */   SEMATTRS_FAAS_INVOKED_NAME: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_FAAS_INVOKED_NAME),\n/* harmony export */   SEMATTRS_FAAS_INVOKED_PROVIDER: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_FAAS_INVOKED_PROVIDER),\n/* harmony export */   SEMATTRS_FAAS_INVOKED_REGION: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_FAAS_INVOKED_REGION),\n/* harmony export */   SEMATTRS_FAAS_TIME: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_FAAS_TIME),\n/* harmony export */   SEMATTRS_FAAS_TRIGGER: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_FAAS_TRIGGER),\n/* harmony export */   SEMATTRS_HTTP_CLIENT_IP: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_HTTP_CLIENT_IP),\n/* harmony export */   SEMATTRS_HTTP_FLAVOR: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_HTTP_FLAVOR),\n/* harmony export */   SEMATTRS_HTTP_HOST: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_HTTP_HOST),\n/* harmony export */   SEMATTRS_HTTP_METHOD: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_HTTP_METHOD),\n/* harmony export */   SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH),\n/* harmony export */   SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED),\n/* harmony export */   SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH),\n/* harmony export */   SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED),\n/* harmony export */   SEMATTRS_HTTP_ROUTE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_HTTP_ROUTE),\n/* harmony export */   SEMATTRS_HTTP_SCHEME: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_HTTP_SCHEME),\n/* harmony export */   SEMATTRS_HTTP_SERVER_NAME: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_HTTP_SERVER_NAME),\n/* harmony export */   SEMATTRS_HTTP_STATUS_CODE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_HTTP_STATUS_CODE),\n/* harmony export */   SEMATTRS_HTTP_TARGET: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_HTTP_TARGET),\n/* harmony export */   SEMATTRS_HTTP_URL: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_HTTP_URL),\n/* harmony export */   SEMATTRS_HTTP_USER_AGENT: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_HTTP_USER_AGENT),\n/* harmony export */   SEMATTRS_MESSAGE_COMPRESSED_SIZE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_MESSAGE_COMPRESSED_SIZE),\n/* harmony export */   SEMATTRS_MESSAGE_ID: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_MESSAGE_ID),\n/* harmony export */   SEMATTRS_MESSAGE_TYPE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_MESSAGE_TYPE),\n/* harmony export */   SEMATTRS_MESSAGE_UNCOMPRESSED_SIZE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_MESSAGE_UNCOMPRESSED_SIZE),\n/* harmony export */   SEMATTRS_MESSAGING_CONSUMER_ID: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_MESSAGING_CONSUMER_ID),\n/* harmony export */   SEMATTRS_MESSAGING_CONVERSATION_ID: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_MESSAGING_CONVERSATION_ID),\n/* harmony export */   SEMATTRS_MESSAGING_DESTINATION: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_MESSAGING_DESTINATION),\n/* harmony export */   SEMATTRS_MESSAGING_DESTINATION_KIND: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_MESSAGING_DESTINATION_KIND),\n/* harmony export */   SEMATTRS_MESSAGING_KAFKA_CLIENT_ID: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_MESSAGING_KAFKA_CLIENT_ID),\n/* harmony export */   SEMATTRS_MESSAGING_KAFKA_CONSUMER_GROUP: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_MESSAGING_KAFKA_CONSUMER_GROUP),\n/* harmony export */   SEMATTRS_MESSAGING_KAFKA_MESSAGE_KEY: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_MESSAGING_KAFKA_MESSAGE_KEY),\n/* harmony export */   SEMATTRS_MESSAGING_KAFKA_PARTITION: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_MESSAGING_KAFKA_PARTITION),\n/* harmony export */   SEMATTRS_MESSAGING_KAFKA_TOMBSTONE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_MESSAGING_KAFKA_TOMBSTONE),\n/* harmony export */   SEMATTRS_MESSAGING_MESSAGE_ID: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_MESSAGING_MESSAGE_ID),\n/* harmony export */   SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES),\n/* harmony export */   SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES),\n/* harmony export */   SEMATTRS_MESSAGING_OPERATION: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_MESSAGING_OPERATION),\n/* harmony export */   SEMATTRS_MESSAGING_PROTOCOL: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_MESSAGING_PROTOCOL),\n/* harmony export */   SEMATTRS_MESSAGING_PROTOCOL_VERSION: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_MESSAGING_PROTOCOL_VERSION),\n/* harmony export */   SEMATTRS_MESSAGING_RABBITMQ_ROUTING_KEY: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_MESSAGING_RABBITMQ_ROUTING_KEY),\n/* harmony export */   SEMATTRS_MESSAGING_SYSTEM: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_MESSAGING_SYSTEM),\n/* harmony export */   SEMATTRS_MESSAGING_TEMP_DESTINATION: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_MESSAGING_TEMP_DESTINATION),\n/* harmony export */   SEMATTRS_MESSAGING_URL: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_MESSAGING_URL),\n/* harmony export */   SEMATTRS_NET_HOST_CARRIER_ICC: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_NET_HOST_CARRIER_ICC),\n/* harmony export */   SEMATTRS_NET_HOST_CARRIER_MCC: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_NET_HOST_CARRIER_MCC),\n/* harmony export */   SEMATTRS_NET_HOST_CARRIER_MNC: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_NET_HOST_CARRIER_MNC),\n/* harmony export */   SEMATTRS_NET_HOST_CARRIER_NAME: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_NET_HOST_CARRIER_NAME),\n/* harmony export */   SEMATTRS_NET_HOST_CONNECTION_SUBTYPE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_NET_HOST_CONNECTION_SUBTYPE),\n/* harmony export */   SEMATTRS_NET_HOST_CONNECTION_TYPE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_NET_HOST_CONNECTION_TYPE),\n/* harmony export */   SEMATTRS_NET_HOST_IP: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_NET_HOST_IP),\n/* harmony export */   SEMATTRS_NET_HOST_NAME: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_NET_HOST_NAME),\n/* harmony export */   SEMATTRS_NET_HOST_PORT: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_NET_HOST_PORT),\n/* harmony export */   SEMATTRS_NET_PEER_IP: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_NET_PEER_IP),\n/* harmony export */   SEMATTRS_NET_PEER_NAME: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_NET_PEER_NAME),\n/* harmony export */   SEMATTRS_NET_PEER_PORT: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_NET_PEER_PORT),\n/* harmony export */   SEMATTRS_NET_TRANSPORT: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_NET_TRANSPORT),\n/* harmony export */   SEMATTRS_PEER_SERVICE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_PEER_SERVICE),\n/* harmony export */   SEMATTRS_RPC_GRPC_STATUS_CODE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_RPC_GRPC_STATUS_CODE),\n/* harmony export */   SEMATTRS_RPC_JSONRPC_ERROR_CODE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_RPC_JSONRPC_ERROR_CODE),\n/* harmony export */   SEMATTRS_RPC_JSONRPC_ERROR_MESSAGE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_RPC_JSONRPC_ERROR_MESSAGE),\n/* harmony export */   SEMATTRS_RPC_JSONRPC_REQUEST_ID: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_RPC_JSONRPC_REQUEST_ID),\n/* harmony export */   SEMATTRS_RPC_JSONRPC_VERSION: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_RPC_JSONRPC_VERSION),\n/* harmony export */   SEMATTRS_RPC_METHOD: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_RPC_METHOD),\n/* harmony export */   SEMATTRS_RPC_SERVICE: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_RPC_SERVICE),\n/* harmony export */   SEMATTRS_RPC_SYSTEM: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_RPC_SYSTEM),\n/* harmony export */   SEMATTRS_THREAD_ID: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_THREAD_ID),\n/* harmony export */   SEMATTRS_THREAD_NAME: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_THREAD_NAME),\n/* harmony export */   SEMRESATTRS_AWS_ECS_CLUSTER_ARN: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_AWS_ECS_CLUSTER_ARN),\n/* harmony export */   SEMRESATTRS_AWS_ECS_CONTAINER_ARN: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_AWS_ECS_CONTAINER_ARN),\n/* harmony export */   SEMRESATTRS_AWS_ECS_LAUNCHTYPE: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_AWS_ECS_LAUNCHTYPE),\n/* harmony export */   SEMRESATTRS_AWS_ECS_TASK_ARN: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_AWS_ECS_TASK_ARN),\n/* harmony export */   SEMRESATTRS_AWS_ECS_TASK_FAMILY: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_AWS_ECS_TASK_FAMILY),\n/* harmony export */   SEMRESATTRS_AWS_ECS_TASK_REVISION: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_AWS_ECS_TASK_REVISION),\n/* harmony export */   SEMRESATTRS_AWS_EKS_CLUSTER_ARN: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_AWS_EKS_CLUSTER_ARN),\n/* harmony export */   SEMRESATTRS_AWS_LOG_GROUP_ARNS: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_AWS_LOG_GROUP_ARNS),\n/* harmony export */   SEMRESATTRS_AWS_LOG_GROUP_NAMES: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_AWS_LOG_GROUP_NAMES),\n/* harmony export */   SEMRESATTRS_AWS_LOG_STREAM_ARNS: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_AWS_LOG_STREAM_ARNS),\n/* harmony export */   SEMRESATTRS_AWS_LOG_STREAM_NAMES: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_AWS_LOG_STREAM_NAMES),\n/* harmony export */   SEMRESATTRS_CLOUD_ACCOUNT_ID: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_CLOUD_ACCOUNT_ID),\n/* harmony export */   SEMRESATTRS_CLOUD_AVAILABILITY_ZONE: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_CLOUD_AVAILABILITY_ZONE),\n/* harmony export */   SEMRESATTRS_CLOUD_PLATFORM: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_CLOUD_PLATFORM),\n/* harmony export */   SEMRESATTRS_CLOUD_PROVIDER: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_CLOUD_PROVIDER),\n/* harmony export */   SEMRESATTRS_CLOUD_REGION: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_CLOUD_REGION),\n/* harmony export */   SEMRESATTRS_CONTAINER_ID: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_CONTAINER_ID),\n/* harmony export */   SEMRESATTRS_CONTAINER_IMAGE_NAME: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_CONTAINER_IMAGE_NAME),\n/* harmony export */   SEMRESATTRS_CONTAINER_IMAGE_TAG: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_CONTAINER_IMAGE_TAG),\n/* harmony export */   SEMRESATTRS_CONTAINER_NAME: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_CONTAINER_NAME),\n/* harmony export */   SEMRESATTRS_CONTAINER_RUNTIME: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_CONTAINER_RUNTIME),\n/* harmony export */   SEMRESATTRS_DEPLOYMENT_ENVIRONMENT: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_DEPLOYMENT_ENVIRONMENT),\n/* harmony export */   SEMRESATTRS_DEVICE_ID: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_DEVICE_ID),\n/* harmony export */   SEMRESATTRS_DEVICE_MODEL_IDENTIFIER: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_DEVICE_MODEL_IDENTIFIER),\n/* harmony export */   SEMRESATTRS_DEVICE_MODEL_NAME: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_DEVICE_MODEL_NAME),\n/* harmony export */   SEMRESATTRS_FAAS_ID: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_FAAS_ID),\n/* harmony export */   SEMRESATTRS_FAAS_INSTANCE: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_FAAS_INSTANCE),\n/* harmony export */   SEMRESATTRS_FAAS_MAX_MEMORY: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_FAAS_MAX_MEMORY),\n/* harmony export */   SEMRESATTRS_FAAS_NAME: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_FAAS_NAME),\n/* harmony export */   SEMRESATTRS_FAAS_VERSION: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_FAAS_VERSION),\n/* harmony export */   SEMRESATTRS_HOST_ARCH: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_HOST_ARCH),\n/* harmony export */   SEMRESATTRS_HOST_ID: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_HOST_ID),\n/* harmony export */   SEMRESATTRS_HOST_IMAGE_ID: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_HOST_IMAGE_ID),\n/* harmony export */   SEMRESATTRS_HOST_IMAGE_NAME: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_HOST_IMAGE_NAME),\n/* harmony export */   SEMRESATTRS_HOST_IMAGE_VERSION: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_HOST_IMAGE_VERSION),\n/* harmony export */   SEMRESATTRS_HOST_NAME: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_HOST_NAME),\n/* harmony export */   SEMRESATTRS_HOST_TYPE: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_HOST_TYPE),\n/* harmony export */   SEMRESATTRS_K8S_CLUSTER_NAME: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_K8S_CLUSTER_NAME),\n/* harmony export */   SEMRESATTRS_K8S_CONTAINER_NAME: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_K8S_CONTAINER_NAME),\n/* harmony export */   SEMRESATTRS_K8S_CRONJOB_NAME: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_K8S_CRONJOB_NAME),\n/* harmony export */   SEMRESATTRS_K8S_CRONJOB_UID: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_K8S_CRONJOB_UID),\n/* harmony export */   SEMRESATTRS_K8S_DAEMONSET_NAME: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_K8S_DAEMONSET_NAME),\n/* harmony export */   SEMRESATTRS_K8S_DAEMONSET_UID: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_K8S_DAEMONSET_UID),\n/* harmony export */   SEMRESATTRS_K8S_DEPLOYMENT_NAME: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_K8S_DEPLOYMENT_NAME),\n/* harmony export */   SEMRESATTRS_K8S_DEPLOYMENT_UID: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_K8S_DEPLOYMENT_UID),\n/* harmony export */   SEMRESATTRS_K8S_JOB_NAME: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_K8S_JOB_NAME),\n/* harmony export */   SEMRESATTRS_K8S_JOB_UID: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_K8S_JOB_UID),\n/* harmony export */   SEMRESATTRS_K8S_NAMESPACE_NAME: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_K8S_NAMESPACE_NAME),\n/* harmony export */   SEMRESATTRS_K8S_NODE_NAME: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_K8S_NODE_NAME),\n/* harmony export */   SEMRESATTRS_K8S_NODE_UID: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_K8S_NODE_UID),\n/* harmony export */   SEMRESATTRS_K8S_POD_NAME: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_K8S_POD_NAME),\n/* harmony export */   SEMRESATTRS_K8S_POD_UID: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_K8S_POD_UID),\n/* harmony export */   SEMRESATTRS_K8S_REPLICASET_NAME: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_K8S_REPLICASET_NAME),\n/* harmony export */   SEMRESATTRS_K8S_REPLICASET_UID: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_K8S_REPLICASET_UID),\n/* harmony export */   SEMRESATTRS_K8S_STATEFULSET_NAME: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_K8S_STATEFULSET_NAME),\n/* harmony export */   SEMRESATTRS_K8S_STATEFULSET_UID: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_K8S_STATEFULSET_UID),\n/* harmony export */   SEMRESATTRS_OS_DESCRIPTION: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_OS_DESCRIPTION),\n/* harmony export */   SEMRESATTRS_OS_NAME: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_OS_NAME),\n/* harmony export */   SEMRESATTRS_OS_TYPE: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_OS_TYPE),\n/* harmony export */   SEMRESATTRS_OS_VERSION: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_OS_VERSION),\n/* harmony export */   SEMRESATTRS_PROCESS_COMMAND: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_PROCESS_COMMAND),\n/* harmony export */   SEMRESATTRS_PROCESS_COMMAND_ARGS: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_PROCESS_COMMAND_ARGS),\n/* harmony export */   SEMRESATTRS_PROCESS_COMMAND_LINE: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_PROCESS_COMMAND_LINE),\n/* harmony export */   SEMRESATTRS_PROCESS_EXECUTABLE_NAME: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_PROCESS_EXECUTABLE_NAME),\n/* harmony export */   SEMRESATTRS_PROCESS_EXECUTABLE_PATH: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_PROCESS_EXECUTABLE_PATH),\n/* harmony export */   SEMRESATTRS_PROCESS_OWNER: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_PROCESS_OWNER),\n/* harmony export */   SEMRESATTRS_PROCESS_PID: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_PROCESS_PID),\n/* harmony export */   SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION),\n/* harmony export */   SEMRESATTRS_PROCESS_RUNTIME_NAME: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_PROCESS_RUNTIME_NAME),\n/* harmony export */   SEMRESATTRS_PROCESS_RUNTIME_VERSION: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_PROCESS_RUNTIME_VERSION),\n/* harmony export */   SEMRESATTRS_SERVICE_INSTANCE_ID: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_SERVICE_INSTANCE_ID),\n/* harmony export */   SEMRESATTRS_SERVICE_NAME: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_SERVICE_NAME),\n/* harmony export */   SEMRESATTRS_SERVICE_NAMESPACE: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_SERVICE_NAMESPACE),\n/* harmony export */   SEMRESATTRS_SERVICE_VERSION: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_SERVICE_VERSION),\n/* harmony export */   SEMRESATTRS_TELEMETRY_AUTO_VERSION: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_TELEMETRY_AUTO_VERSION),\n/* harmony export */   SEMRESATTRS_TELEMETRY_SDK_LANGUAGE: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_TELEMETRY_SDK_LANGUAGE),\n/* harmony export */   SEMRESATTRS_TELEMETRY_SDK_NAME: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_TELEMETRY_SDK_NAME),\n/* harmony export */   SEMRESATTRS_TELEMETRY_SDK_VERSION: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_TELEMETRY_SDK_VERSION),\n/* harmony export */   SEMRESATTRS_WEBENGINE_DESCRIPTION: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_WEBENGINE_DESCRIPTION),\n/* harmony export */   SEMRESATTRS_WEBENGINE_NAME: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_WEBENGINE_NAME),\n/* harmony export */   SEMRESATTRS_WEBENGINE_VERSION: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_WEBENGINE_VERSION),\n/* harmony export */   SIGNALR_CONNECTION_STATUS_VALUE_APP_SHUTDOWN: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.SIGNALR_CONNECTION_STATUS_VALUE_APP_SHUTDOWN),\n/* harmony export */   SIGNALR_CONNECTION_STATUS_VALUE_NORMAL_CLOSURE: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.SIGNALR_CONNECTION_STATUS_VALUE_NORMAL_CLOSURE),\n/* harmony export */   SIGNALR_CONNECTION_STATUS_VALUE_TIMEOUT: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.SIGNALR_CONNECTION_STATUS_VALUE_TIMEOUT),\n/* harmony export */   SIGNALR_TRANSPORT_VALUE_LONG_POLLING: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.SIGNALR_TRANSPORT_VALUE_LONG_POLLING),\n/* harmony export */   SIGNALR_TRANSPORT_VALUE_SERVER_SENT_EVENTS: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.SIGNALR_TRANSPORT_VALUE_SERVER_SENT_EVENTS),\n/* harmony export */   SIGNALR_TRANSPORT_VALUE_WEB_SOCKETS: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.SIGNALR_TRANSPORT_VALUE_WEB_SOCKETS),\n/* harmony export */   SemanticAttributes: () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SemanticAttributes),\n/* harmony export */   SemanticResourceAttributes: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SemanticResourceAttributes),\n/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_CPP: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.TELEMETRYSDKLANGUAGEVALUES_CPP),\n/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_DOTNET: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.TELEMETRYSDKLANGUAGEVALUES_DOTNET),\n/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_ERLANG: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.TELEMETRYSDKLANGUAGEVALUES_ERLANG),\n/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_GO: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.TELEMETRYSDKLANGUAGEVALUES_GO),\n/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_JAVA: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.TELEMETRYSDKLANGUAGEVALUES_JAVA),\n/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_NODEJS: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.TELEMETRYSDKLANGUAGEVALUES_NODEJS),\n/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_PHP: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.TELEMETRYSDKLANGUAGEVALUES_PHP),\n/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_PYTHON: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.TELEMETRYSDKLANGUAGEVALUES_PYTHON),\n/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_RUBY: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.TELEMETRYSDKLANGUAGEVALUES_RUBY),\n/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_WEBJS: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.TELEMETRYSDKLANGUAGEVALUES_WEBJS),\n/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_CPP: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.TELEMETRY_SDK_LANGUAGE_VALUE_CPP),\n/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_DOTNET: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.TELEMETRY_SDK_LANGUAGE_VALUE_DOTNET),\n/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_ERLANG: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.TELEMETRY_SDK_LANGUAGE_VALUE_ERLANG),\n/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_GO: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.TELEMETRY_SDK_LANGUAGE_VALUE_GO),\n/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_JAVA: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.TELEMETRY_SDK_LANGUAGE_VALUE_JAVA),\n/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_NODEJS: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.TELEMETRY_SDK_LANGUAGE_VALUE_NODEJS),\n/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_PHP: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.TELEMETRY_SDK_LANGUAGE_VALUE_PHP),\n/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_PYTHON: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.TELEMETRY_SDK_LANGUAGE_VALUE_PYTHON),\n/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_RUBY: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.TELEMETRY_SDK_LANGUAGE_VALUE_RUBY),\n/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_RUST: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.TELEMETRY_SDK_LANGUAGE_VALUE_RUST),\n/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_SWIFT: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.TELEMETRY_SDK_LANGUAGE_VALUE_SWIFT),\n/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_WEBJS: () => (/* reexport safe */ _stable_attributes__WEBPACK_IMPORTED_MODULE_2__.TELEMETRY_SDK_LANGUAGE_VALUE_WEBJS),\n/* harmony export */   TelemetrySdkLanguageValues: () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.TelemetrySdkLanguageValues)\n/* harmony export */ });\n/* harmony import */ var _trace__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./trace */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/trace/index.js\");\n/* harmony import */ var _resource__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./resource */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/resource/index.js\");\n/* harmony import */ var _stable_attributes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stable_attributes */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/stable_attributes.js\");\n/* harmony import */ var _stable_metrics__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./stable_metrics */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/stable_metrics.js\");\n/* harmony import */ var _stable_events__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./stable_events */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/stable_events.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable no-restricted-syntax --\n * These re-exports are only of constants, only two-levels deep, and\n * should not cause problems for tree-shakers.\n */\n// Deprecated. These are kept around for compatibility purposes\n\n\n// Use these instead\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3NlbWFudGljLWNvbnZlbnRpb25zL2J1aWxkL2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN3QjtBQUNHO0FBQzNCO0FBQ29DO0FBQ0g7QUFDRDtBQUNoQyIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvRmluZmxvdy1FbnRlcnByaXNlL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9zZW1hbnRpYy1jb252ZW50aW9ucy9idWlsZC9lc20vaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXJlc3RyaWN0ZWQtc3ludGF4IC0tXG4gKiBUaGVzZSByZS1leHBvcnRzIGFyZSBvbmx5IG9mIGNvbnN0YW50cywgb25seSB0d28tbGV2ZWxzIGRlZXAsIGFuZFxuICogc2hvdWxkIG5vdCBjYXVzZSBwcm9ibGVtcyBmb3IgdHJlZS1zaGFrZXJzLlxuICovXG4vLyBEZXByZWNhdGVkLiBUaGVzZSBhcmUga2VwdCBhcm91bmQgZm9yIGNvbXBhdGliaWxpdHkgcHVycG9zZXNcbmV4cG9ydCAqIGZyb20gJy4vdHJhY2UnO1xuZXhwb3J0ICogZnJvbSAnLi9yZXNvdXJjZSc7XG4vLyBVc2UgdGhlc2UgaW5zdGVhZFxuZXhwb3J0ICogZnJvbSAnLi9zdGFibGVfYXR0cmlidXRlcyc7XG5leHBvcnQgKiBmcm9tICcuL3N0YWJsZV9tZXRyaWNzJztcbmV4cG9ydCAqIGZyb20gJy4vc3RhYmxlX2V2ZW50cyc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/internal/utils.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/semantic-conventions/build/esm/internal/utils.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createConstMap: () => (/* binding */ createConstMap)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Creates a const map from the given values\n * @param values - An array of values to be used as keys and values in the map.\n * @returns A populated version of the map with the values and keys derived from the values.\n */\n/*#__NO_SIDE_EFFECTS__*/\nfunction createConstMap(values) {\n    // eslint-disable-next-line prefer-const, @typescript-eslint/no-explicit-any\n    let res = {};\n    const len = values.length;\n    for (let lp = 0; lp < len; lp++) {\n        const val = values[lp];\n        if (val) {\n            res[String(val).toUpperCase().replace(/[-.]/g, '_')] = val;\n        }\n    }\n    return res;\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3NlbWFudGljLWNvbnZlbnRpb25zL2J1aWxkL2VzbS9pbnRlcm5hbC91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsVUFBVTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3NlbWFudGljLWNvbnZlbnRpb25zL2J1aWxkL2VzbS9pbnRlcm5hbC91dGlscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBDcmVhdGVzIGEgY29uc3QgbWFwIGZyb20gdGhlIGdpdmVuIHZhbHVlc1xuICogQHBhcmFtIHZhbHVlcyAtIEFuIGFycmF5IG9mIHZhbHVlcyB0byBiZSB1c2VkIGFzIGtleXMgYW5kIHZhbHVlcyBpbiB0aGUgbWFwLlxuICogQHJldHVybnMgQSBwb3B1bGF0ZWQgdmVyc2lvbiBvZiB0aGUgbWFwIHdpdGggdGhlIHZhbHVlcyBhbmQga2V5cyBkZXJpdmVkIGZyb20gdGhlIHZhbHVlcy5cbiAqL1xuLyojX19OT19TSURFX0VGRkVDVFNfXyovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29uc3RNYXAodmFsdWVzKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1jb25zdCwgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGxldCByZXMgPSB7fTtcbiAgICBjb25zdCBsZW4gPSB2YWx1ZXMubGVuZ3RoO1xuICAgIGZvciAobGV0IGxwID0gMDsgbHAgPCBsZW47IGxwKyspIHtcbiAgICAgICAgY29uc3QgdmFsID0gdmFsdWVzW2xwXTtcbiAgICAgICAgaWYgKHZhbCkge1xuICAgICAgICAgICAgcmVzW1N0cmluZyh2YWwpLnRvVXBwZXJDYXNlKCkucmVwbGFjZSgvWy0uXS9nLCAnXycpXSA9IHZhbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/internal/utils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/resource/SemanticResourceAttributes.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/semantic-conventions/build/esm/resource/SemanticResourceAttributes.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AWSECSLAUNCHTYPEVALUES_EC2: () => (/* binding */ AWSECSLAUNCHTYPEVALUES_EC2),\n/* harmony export */   AWSECSLAUNCHTYPEVALUES_FARGATE: () => (/* binding */ AWSECSLAUNCHTYPEVALUES_FARGATE),\n/* harmony export */   AwsEcsLaunchtypeValues: () => (/* binding */ AwsEcsLaunchtypeValues),\n/* harmony export */   CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS: () => (/* binding */ CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS),\n/* harmony export */   CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC: () => (/* binding */ CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC),\n/* harmony export */   CLOUDPLATFORMVALUES_AWS_EC2: () => (/* binding */ CLOUDPLATFORMVALUES_AWS_EC2),\n/* harmony export */   CLOUDPLATFORMVALUES_AWS_ECS: () => (/* binding */ CLOUDPLATFORMVALUES_AWS_ECS),\n/* harmony export */   CLOUDPLATFORMVALUES_AWS_EKS: () => (/* binding */ CLOUDPLATFORMVALUES_AWS_EKS),\n/* harmony export */   CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK: () => (/* binding */ CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK),\n/* harmony export */   CLOUDPLATFORMVALUES_AWS_LAMBDA: () => (/* binding */ CLOUDPLATFORMVALUES_AWS_LAMBDA),\n/* harmony export */   CLOUDPLATFORMVALUES_AZURE_AKS: () => (/* binding */ CLOUDPLATFORMVALUES_AZURE_AKS),\n/* harmony export */   CLOUDPLATFORMVALUES_AZURE_APP_SERVICE: () => (/* binding */ CLOUDPLATFORMVALUES_AZURE_APP_SERVICE),\n/* harmony export */   CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES: () => (/* binding */ CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES),\n/* harmony export */   CLOUDPLATFORMVALUES_AZURE_FUNCTIONS: () => (/* binding */ CLOUDPLATFORMVALUES_AZURE_FUNCTIONS),\n/* harmony export */   CLOUDPLATFORMVALUES_AZURE_VM: () => (/* binding */ CLOUDPLATFORMVALUES_AZURE_VM),\n/* harmony export */   CLOUDPLATFORMVALUES_GCP_APP_ENGINE: () => (/* binding */ CLOUDPLATFORMVALUES_GCP_APP_ENGINE),\n/* harmony export */   CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS: () => (/* binding */ CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS),\n/* harmony export */   CLOUDPLATFORMVALUES_GCP_CLOUD_RUN: () => (/* binding */ CLOUDPLATFORMVALUES_GCP_CLOUD_RUN),\n/* harmony export */   CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE: () => (/* binding */ CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE),\n/* harmony export */   CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE: () => (/* binding */ CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE),\n/* harmony export */   CLOUDPROVIDERVALUES_ALIBABA_CLOUD: () => (/* binding */ CLOUDPROVIDERVALUES_ALIBABA_CLOUD),\n/* harmony export */   CLOUDPROVIDERVALUES_AWS: () => (/* binding */ CLOUDPROVIDERVALUES_AWS),\n/* harmony export */   CLOUDPROVIDERVALUES_AZURE: () => (/* binding */ CLOUDPROVIDERVALUES_AZURE),\n/* harmony export */   CLOUDPROVIDERVALUES_GCP: () => (/* binding */ CLOUDPROVIDERVALUES_GCP),\n/* harmony export */   CloudPlatformValues: () => (/* binding */ CloudPlatformValues),\n/* harmony export */   CloudProviderValues: () => (/* binding */ CloudProviderValues),\n/* harmony export */   HOSTARCHVALUES_AMD64: () => (/* binding */ HOSTARCHVALUES_AMD64),\n/* harmony export */   HOSTARCHVALUES_ARM32: () => (/* binding */ HOSTARCHVALUES_ARM32),\n/* harmony export */   HOSTARCHVALUES_ARM64: () => (/* binding */ HOSTARCHVALUES_ARM64),\n/* harmony export */   HOSTARCHVALUES_IA64: () => (/* binding */ HOSTARCHVALUES_IA64),\n/* harmony export */   HOSTARCHVALUES_PPC32: () => (/* binding */ HOSTARCHVALUES_PPC32),\n/* harmony export */   HOSTARCHVALUES_PPC64: () => (/* binding */ HOSTARCHVALUES_PPC64),\n/* harmony export */   HOSTARCHVALUES_X86: () => (/* binding */ HOSTARCHVALUES_X86),\n/* harmony export */   HostArchValues: () => (/* binding */ HostArchValues),\n/* harmony export */   OSTYPEVALUES_AIX: () => (/* binding */ OSTYPEVALUES_AIX),\n/* harmony export */   OSTYPEVALUES_DARWIN: () => (/* binding */ OSTYPEVALUES_DARWIN),\n/* harmony export */   OSTYPEVALUES_DRAGONFLYBSD: () => (/* binding */ OSTYPEVALUES_DRAGONFLYBSD),\n/* harmony export */   OSTYPEVALUES_FREEBSD: () => (/* binding */ OSTYPEVALUES_FREEBSD),\n/* harmony export */   OSTYPEVALUES_HPUX: () => (/* binding */ OSTYPEVALUES_HPUX),\n/* harmony export */   OSTYPEVALUES_LINUX: () => (/* binding */ OSTYPEVALUES_LINUX),\n/* harmony export */   OSTYPEVALUES_NETBSD: () => (/* binding */ OSTYPEVALUES_NETBSD),\n/* harmony export */   OSTYPEVALUES_OPENBSD: () => (/* binding */ OSTYPEVALUES_OPENBSD),\n/* harmony export */   OSTYPEVALUES_SOLARIS: () => (/* binding */ OSTYPEVALUES_SOLARIS),\n/* harmony export */   OSTYPEVALUES_WINDOWS: () => (/* binding */ OSTYPEVALUES_WINDOWS),\n/* harmony export */   OSTYPEVALUES_Z_OS: () => (/* binding */ OSTYPEVALUES_Z_OS),\n/* harmony export */   OsTypeValues: () => (/* binding */ OsTypeValues),\n/* harmony export */   SEMRESATTRS_AWS_ECS_CLUSTER_ARN: () => (/* binding */ SEMRESATTRS_AWS_ECS_CLUSTER_ARN),\n/* harmony export */   SEMRESATTRS_AWS_ECS_CONTAINER_ARN: () => (/* binding */ SEMRESATTRS_AWS_ECS_CONTAINER_ARN),\n/* harmony export */   SEMRESATTRS_AWS_ECS_LAUNCHTYPE: () => (/* binding */ SEMRESATTRS_AWS_ECS_LAUNCHTYPE),\n/* harmony export */   SEMRESATTRS_AWS_ECS_TASK_ARN: () => (/* binding */ SEMRESATTRS_AWS_ECS_TASK_ARN),\n/* harmony export */   SEMRESATTRS_AWS_ECS_TASK_FAMILY: () => (/* binding */ SEMRESATTRS_AWS_ECS_TASK_FAMILY),\n/* harmony export */   SEMRESATTRS_AWS_ECS_TASK_REVISION: () => (/* binding */ SEMRESATTRS_AWS_ECS_TASK_REVISION),\n/* harmony export */   SEMRESATTRS_AWS_EKS_CLUSTER_ARN: () => (/* binding */ SEMRESATTRS_AWS_EKS_CLUSTER_ARN),\n/* harmony export */   SEMRESATTRS_AWS_LOG_GROUP_ARNS: () => (/* binding */ SEMRESATTRS_AWS_LOG_GROUP_ARNS),\n/* harmony export */   SEMRESATTRS_AWS_LOG_GROUP_NAMES: () => (/* binding */ SEMRESATTRS_AWS_LOG_GROUP_NAMES),\n/* harmony export */   SEMRESATTRS_AWS_LOG_STREAM_ARNS: () => (/* binding */ SEMRESATTRS_AWS_LOG_STREAM_ARNS),\n/* harmony export */   SEMRESATTRS_AWS_LOG_STREAM_NAMES: () => (/* binding */ SEMRESATTRS_AWS_LOG_STREAM_NAMES),\n/* harmony export */   SEMRESATTRS_CLOUD_ACCOUNT_ID: () => (/* binding */ SEMRESATTRS_CLOUD_ACCOUNT_ID),\n/* harmony export */   SEMRESATTRS_CLOUD_AVAILABILITY_ZONE: () => (/* binding */ SEMRESATTRS_CLOUD_AVAILABILITY_ZONE),\n/* harmony export */   SEMRESATTRS_CLOUD_PLATFORM: () => (/* binding */ SEMRESATTRS_CLOUD_PLATFORM),\n/* harmony export */   SEMRESATTRS_CLOUD_PROVIDER: () => (/* binding */ SEMRESATTRS_CLOUD_PROVIDER),\n/* harmony export */   SEMRESATTRS_CLOUD_REGION: () => (/* binding */ SEMRESATTRS_CLOUD_REGION),\n/* harmony export */   SEMRESATTRS_CONTAINER_ID: () => (/* binding */ SEMRESATTRS_CONTAINER_ID),\n/* harmony export */   SEMRESATTRS_CONTAINER_IMAGE_NAME: () => (/* binding */ SEMRESATTRS_CONTAINER_IMAGE_NAME),\n/* harmony export */   SEMRESATTRS_CONTAINER_IMAGE_TAG: () => (/* binding */ SEMRESATTRS_CONTAINER_IMAGE_TAG),\n/* harmony export */   SEMRESATTRS_CONTAINER_NAME: () => (/* binding */ SEMRESATTRS_CONTAINER_NAME),\n/* harmony export */   SEMRESATTRS_CONTAINER_RUNTIME: () => (/* binding */ SEMRESATTRS_CONTAINER_RUNTIME),\n/* harmony export */   SEMRESATTRS_DEPLOYMENT_ENVIRONMENT: () => (/* binding */ SEMRESATTRS_DEPLOYMENT_ENVIRONMENT),\n/* harmony export */   SEMRESATTRS_DEVICE_ID: () => (/* binding */ SEMRESATTRS_DEVICE_ID),\n/* harmony export */   SEMRESATTRS_DEVICE_MODEL_IDENTIFIER: () => (/* binding */ SEMRESATTRS_DEVICE_MODEL_IDENTIFIER),\n/* harmony export */   SEMRESATTRS_DEVICE_MODEL_NAME: () => (/* binding */ SEMRESATTRS_DEVICE_MODEL_NAME),\n/* harmony export */   SEMRESATTRS_FAAS_ID: () => (/* binding */ SEMRESATTRS_FAAS_ID),\n/* harmony export */   SEMRESATTRS_FAAS_INSTANCE: () => (/* binding */ SEMRESATTRS_FAAS_INSTANCE),\n/* harmony export */   SEMRESATTRS_FAAS_MAX_MEMORY: () => (/* binding */ SEMRESATTRS_FAAS_MAX_MEMORY),\n/* harmony export */   SEMRESATTRS_FAAS_NAME: () => (/* binding */ SEMRESATTRS_FAAS_NAME),\n/* harmony export */   SEMRESATTRS_FAAS_VERSION: () => (/* binding */ SEMRESATTRS_FAAS_VERSION),\n/* harmony export */   SEMRESATTRS_HOST_ARCH: () => (/* binding */ SEMRESATTRS_HOST_ARCH),\n/* harmony export */   SEMRESATTRS_HOST_ID: () => (/* binding */ SEMRESATTRS_HOST_ID),\n/* harmony export */   SEMRESATTRS_HOST_IMAGE_ID: () => (/* binding */ SEMRESATTRS_HOST_IMAGE_ID),\n/* harmony export */   SEMRESATTRS_HOST_IMAGE_NAME: () => (/* binding */ SEMRESATTRS_HOST_IMAGE_NAME),\n/* harmony export */   SEMRESATTRS_HOST_IMAGE_VERSION: () => (/* binding */ SEMRESATTRS_HOST_IMAGE_VERSION),\n/* harmony export */   SEMRESATTRS_HOST_NAME: () => (/* binding */ SEMRESATTRS_HOST_NAME),\n/* harmony export */   SEMRESATTRS_HOST_TYPE: () => (/* binding */ SEMRESATTRS_HOST_TYPE),\n/* harmony export */   SEMRESATTRS_K8S_CLUSTER_NAME: () => (/* binding */ SEMRESATTRS_K8S_CLUSTER_NAME),\n/* harmony export */   SEMRESATTRS_K8S_CONTAINER_NAME: () => (/* binding */ SEMRESATTRS_K8S_CONTAINER_NAME),\n/* harmony export */   SEMRESATTRS_K8S_CRONJOB_NAME: () => (/* binding */ SEMRESATTRS_K8S_CRONJOB_NAME),\n/* harmony export */   SEMRESATTRS_K8S_CRONJOB_UID: () => (/* binding */ SEMRESATTRS_K8S_CRONJOB_UID),\n/* harmony export */   SEMRESATTRS_K8S_DAEMONSET_NAME: () => (/* binding */ SEMRESATTRS_K8S_DAEMONSET_NAME),\n/* harmony export */   SEMRESATTRS_K8S_DAEMONSET_UID: () => (/* binding */ SEMRESATTRS_K8S_DAEMONSET_UID),\n/* harmony export */   SEMRESATTRS_K8S_DEPLOYMENT_NAME: () => (/* binding */ SEMRESATTRS_K8S_DEPLOYMENT_NAME),\n/* harmony export */   SEMRESATTRS_K8S_DEPLOYMENT_UID: () => (/* binding */ SEMRESATTRS_K8S_DEPLOYMENT_UID),\n/* harmony export */   SEMRESATTRS_K8S_JOB_NAME: () => (/* binding */ SEMRESATTRS_K8S_JOB_NAME),\n/* harmony export */   SEMRESATTRS_K8S_JOB_UID: () => (/* binding */ SEMRESATTRS_K8S_JOB_UID),\n/* harmony export */   SEMRESATTRS_K8S_NAMESPACE_NAME: () => (/* binding */ SEMRESATTRS_K8S_NAMESPACE_NAME),\n/* harmony export */   SEMRESATTRS_K8S_NODE_NAME: () => (/* binding */ SEMRESATTRS_K8S_NODE_NAME),\n/* harmony export */   SEMRESATTRS_K8S_NODE_UID: () => (/* binding */ SEMRESATTRS_K8S_NODE_UID),\n/* harmony export */   SEMRESATTRS_K8S_POD_NAME: () => (/* binding */ SEMRESATTRS_K8S_POD_NAME),\n/* harmony export */   SEMRESATTRS_K8S_POD_UID: () => (/* binding */ SEMRESATTRS_K8S_POD_UID),\n/* harmony export */   SEMRESATTRS_K8S_REPLICASET_NAME: () => (/* binding */ SEMRESATTRS_K8S_REPLICASET_NAME),\n/* harmony export */   SEMRESATTRS_K8S_REPLICASET_UID: () => (/* binding */ SEMRESATTRS_K8S_REPLICASET_UID),\n/* harmony export */   SEMRESATTRS_K8S_STATEFULSET_NAME: () => (/* binding */ SEMRESATTRS_K8S_STATEFULSET_NAME),\n/* harmony export */   SEMRESATTRS_K8S_STATEFULSET_UID: () => (/* binding */ SEMRESATTRS_K8S_STATEFULSET_UID),\n/* harmony export */   SEMRESATTRS_OS_DESCRIPTION: () => (/* binding */ SEMRESATTRS_OS_DESCRIPTION),\n/* harmony export */   SEMRESATTRS_OS_NAME: () => (/* binding */ SEMRESATTRS_OS_NAME),\n/* harmony export */   SEMRESATTRS_OS_TYPE: () => (/* binding */ SEMRESATTRS_OS_TYPE),\n/* harmony export */   SEMRESATTRS_OS_VERSION: () => (/* binding */ SEMRESATTRS_OS_VERSION),\n/* harmony export */   SEMRESATTRS_PROCESS_COMMAND: () => (/* binding */ SEMRESATTRS_PROCESS_COMMAND),\n/* harmony export */   SEMRESATTRS_PROCESS_COMMAND_ARGS: () => (/* binding */ SEMRESATTRS_PROCESS_COMMAND_ARGS),\n/* harmony export */   SEMRESATTRS_PROCESS_COMMAND_LINE: () => (/* binding */ SEMRESATTRS_PROCESS_COMMAND_LINE),\n/* harmony export */   SEMRESATTRS_PROCESS_EXECUTABLE_NAME: () => (/* binding */ SEMRESATTRS_PROCESS_EXECUTABLE_NAME),\n/* harmony export */   SEMRESATTRS_PROCESS_EXECUTABLE_PATH: () => (/* binding */ SEMRESATTRS_PROCESS_EXECUTABLE_PATH),\n/* harmony export */   SEMRESATTRS_PROCESS_OWNER: () => (/* binding */ SEMRESATTRS_PROCESS_OWNER),\n/* harmony export */   SEMRESATTRS_PROCESS_PID: () => (/* binding */ SEMRESATTRS_PROCESS_PID),\n/* harmony export */   SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION: () => (/* binding */ SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION),\n/* harmony export */   SEMRESATTRS_PROCESS_RUNTIME_NAME: () => (/* binding */ SEMRESATTRS_PROCESS_RUNTIME_NAME),\n/* harmony export */   SEMRESATTRS_PROCESS_RUNTIME_VERSION: () => (/* binding */ SEMRESATTRS_PROCESS_RUNTIME_VERSION),\n/* harmony export */   SEMRESATTRS_SERVICE_INSTANCE_ID: () => (/* binding */ SEMRESATTRS_SERVICE_INSTANCE_ID),\n/* harmony export */   SEMRESATTRS_SERVICE_NAME: () => (/* binding */ SEMRESATTRS_SERVICE_NAME),\n/* harmony export */   SEMRESATTRS_SERVICE_NAMESPACE: () => (/* binding */ SEMRESATTRS_SERVICE_NAMESPACE),\n/* harmony export */   SEMRESATTRS_SERVICE_VERSION: () => (/* binding */ SEMRESATTRS_SERVICE_VERSION),\n/* harmony export */   SEMRESATTRS_TELEMETRY_AUTO_VERSION: () => (/* binding */ SEMRESATTRS_TELEMETRY_AUTO_VERSION),\n/* harmony export */   SEMRESATTRS_TELEMETRY_SDK_LANGUAGE: () => (/* binding */ SEMRESATTRS_TELEMETRY_SDK_LANGUAGE),\n/* harmony export */   SEMRESATTRS_TELEMETRY_SDK_NAME: () => (/* binding */ SEMRESATTRS_TELEMETRY_SDK_NAME),\n/* harmony export */   SEMRESATTRS_TELEMETRY_SDK_VERSION: () => (/* binding */ SEMRESATTRS_TELEMETRY_SDK_VERSION),\n/* harmony export */   SEMRESATTRS_WEBENGINE_DESCRIPTION: () => (/* binding */ SEMRESATTRS_WEBENGINE_DESCRIPTION),\n/* harmony export */   SEMRESATTRS_WEBENGINE_NAME: () => (/* binding */ SEMRESATTRS_WEBENGINE_NAME),\n/* harmony export */   SEMRESATTRS_WEBENGINE_VERSION: () => (/* binding */ SEMRESATTRS_WEBENGINE_VERSION),\n/* harmony export */   SemanticResourceAttributes: () => (/* binding */ SemanticResourceAttributes),\n/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_CPP: () => (/* binding */ TELEMETRYSDKLANGUAGEVALUES_CPP),\n/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_DOTNET: () => (/* binding */ TELEMETRYSDKLANGUAGEVALUES_DOTNET),\n/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_ERLANG: () => (/* binding */ TELEMETRYSDKLANGUAGEVALUES_ERLANG),\n/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_GO: () => (/* binding */ TELEMETRYSDKLANGUAGEVALUES_GO),\n/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_JAVA: () => (/* binding */ TELEMETRYSDKLANGUAGEVALUES_JAVA),\n/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_NODEJS: () => (/* binding */ TELEMETRYSDKLANGUAGEVALUES_NODEJS),\n/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_PHP: () => (/* binding */ TELEMETRYSDKLANGUAGEVALUES_PHP),\n/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_PYTHON: () => (/* binding */ TELEMETRYSDKLANGUAGEVALUES_PYTHON),\n/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_RUBY: () => (/* binding */ TELEMETRYSDKLANGUAGEVALUES_RUBY),\n/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_WEBJS: () => (/* binding */ TELEMETRYSDKLANGUAGEVALUES_WEBJS),\n/* harmony export */   TelemetrySdkLanguageValues: () => (/* binding */ TelemetrySdkLanguageValues)\n/* harmony export */ });\n/* harmony import */ var _internal_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/utils */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/internal/utils.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//----------------------------------------------------------------------------------------------------------\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\n//----------------------------------------------------------------------------------------------------------\n//----------------------------------------------------------------------------------------------------------\n// Constant values for SemanticResourceAttributes\n//----------------------------------------------------------------------------------------------------------\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_CLOUD_PROVIDER = 'cloud.provider';\nconst TMP_CLOUD_ACCOUNT_ID = 'cloud.account.id';\nconst TMP_CLOUD_REGION = 'cloud.region';\nconst TMP_CLOUD_AVAILABILITY_ZONE = 'cloud.availability_zone';\nconst TMP_CLOUD_PLATFORM = 'cloud.platform';\nconst TMP_AWS_ECS_CONTAINER_ARN = 'aws.ecs.container.arn';\nconst TMP_AWS_ECS_CLUSTER_ARN = 'aws.ecs.cluster.arn';\nconst TMP_AWS_ECS_LAUNCHTYPE = 'aws.ecs.launchtype';\nconst TMP_AWS_ECS_TASK_ARN = 'aws.ecs.task.arn';\nconst TMP_AWS_ECS_TASK_FAMILY = 'aws.ecs.task.family';\nconst TMP_AWS_ECS_TASK_REVISION = 'aws.ecs.task.revision';\nconst TMP_AWS_EKS_CLUSTER_ARN = 'aws.eks.cluster.arn';\nconst TMP_AWS_LOG_GROUP_NAMES = 'aws.log.group.names';\nconst TMP_AWS_LOG_GROUP_ARNS = 'aws.log.group.arns';\nconst TMP_AWS_LOG_STREAM_NAMES = 'aws.log.stream.names';\nconst TMP_AWS_LOG_STREAM_ARNS = 'aws.log.stream.arns';\nconst TMP_CONTAINER_NAME = 'container.name';\nconst TMP_CONTAINER_ID = 'container.id';\nconst TMP_CONTAINER_RUNTIME = 'container.runtime';\nconst TMP_CONTAINER_IMAGE_NAME = 'container.image.name';\nconst TMP_CONTAINER_IMAGE_TAG = 'container.image.tag';\nconst TMP_DEPLOYMENT_ENVIRONMENT = 'deployment.environment';\nconst TMP_DEVICE_ID = 'device.id';\nconst TMP_DEVICE_MODEL_IDENTIFIER = 'device.model.identifier';\nconst TMP_DEVICE_MODEL_NAME = 'device.model.name';\nconst TMP_FAAS_NAME = 'faas.name';\nconst TMP_FAAS_ID = 'faas.id';\nconst TMP_FAAS_VERSION = 'faas.version';\nconst TMP_FAAS_INSTANCE = 'faas.instance';\nconst TMP_FAAS_MAX_MEMORY = 'faas.max_memory';\nconst TMP_HOST_ID = 'host.id';\nconst TMP_HOST_NAME = 'host.name';\nconst TMP_HOST_TYPE = 'host.type';\nconst TMP_HOST_ARCH = 'host.arch';\nconst TMP_HOST_IMAGE_NAME = 'host.image.name';\nconst TMP_HOST_IMAGE_ID = 'host.image.id';\nconst TMP_HOST_IMAGE_VERSION = 'host.image.version';\nconst TMP_K8S_CLUSTER_NAME = 'k8s.cluster.name';\nconst TMP_K8S_NODE_NAME = 'k8s.node.name';\nconst TMP_K8S_NODE_UID = 'k8s.node.uid';\nconst TMP_K8S_NAMESPACE_NAME = 'k8s.namespace.name';\nconst TMP_K8S_POD_UID = 'k8s.pod.uid';\nconst TMP_K8S_POD_NAME = 'k8s.pod.name';\nconst TMP_K8S_CONTAINER_NAME = 'k8s.container.name';\nconst TMP_K8S_REPLICASET_UID = 'k8s.replicaset.uid';\nconst TMP_K8S_REPLICASET_NAME = 'k8s.replicaset.name';\nconst TMP_K8S_DEPLOYMENT_UID = 'k8s.deployment.uid';\nconst TMP_K8S_DEPLOYMENT_NAME = 'k8s.deployment.name';\nconst TMP_K8S_STATEFULSET_UID = 'k8s.statefulset.uid';\nconst TMP_K8S_STATEFULSET_NAME = 'k8s.statefulset.name';\nconst TMP_K8S_DAEMONSET_UID = 'k8s.daemonset.uid';\nconst TMP_K8S_DAEMONSET_NAME = 'k8s.daemonset.name';\nconst TMP_K8S_JOB_UID = 'k8s.job.uid';\nconst TMP_K8S_JOB_NAME = 'k8s.job.name';\nconst TMP_K8S_CRONJOB_UID = 'k8s.cronjob.uid';\nconst TMP_K8S_CRONJOB_NAME = 'k8s.cronjob.name';\nconst TMP_OS_TYPE = 'os.type';\nconst TMP_OS_DESCRIPTION = 'os.description';\nconst TMP_OS_NAME = 'os.name';\nconst TMP_OS_VERSION = 'os.version';\nconst TMP_PROCESS_PID = 'process.pid';\nconst TMP_PROCESS_EXECUTABLE_NAME = 'process.executable.name';\nconst TMP_PROCESS_EXECUTABLE_PATH = 'process.executable.path';\nconst TMP_PROCESS_COMMAND = 'process.command';\nconst TMP_PROCESS_COMMAND_LINE = 'process.command_line';\nconst TMP_PROCESS_COMMAND_ARGS = 'process.command_args';\nconst TMP_PROCESS_OWNER = 'process.owner';\nconst TMP_PROCESS_RUNTIME_NAME = 'process.runtime.name';\nconst TMP_PROCESS_RUNTIME_VERSION = 'process.runtime.version';\nconst TMP_PROCESS_RUNTIME_DESCRIPTION = 'process.runtime.description';\nconst TMP_SERVICE_NAME = 'service.name';\nconst TMP_SERVICE_NAMESPACE = 'service.namespace';\nconst TMP_SERVICE_INSTANCE_ID = 'service.instance.id';\nconst TMP_SERVICE_VERSION = 'service.version';\nconst TMP_TELEMETRY_SDK_NAME = 'telemetry.sdk.name';\nconst TMP_TELEMETRY_SDK_LANGUAGE = 'telemetry.sdk.language';\nconst TMP_TELEMETRY_SDK_VERSION = 'telemetry.sdk.version';\nconst TMP_TELEMETRY_AUTO_VERSION = 'telemetry.auto.version';\nconst TMP_WEBENGINE_NAME = 'webengine.name';\nconst TMP_WEBENGINE_VERSION = 'webengine.version';\nconst TMP_WEBENGINE_DESCRIPTION = 'webengine.description';\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use ATTR_CLOUD_PROVIDER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_CLOUD_PROVIDER = TMP_CLOUD_PROVIDER;\n/**\n * The cloud account ID the resource is assigned to.\n *\n * @deprecated Use ATTR_CLOUD_ACCOUNT_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_CLOUD_ACCOUNT_ID = TMP_CLOUD_ACCOUNT_ID;\n/**\n * The geographical region the resource is running. Refer to your provider&#39;s docs to see the available regions, for example [Alibaba Cloud regions](https://www.alibabacloud.com/help/doc-detail/40654.htm), [AWS regions](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/), [Azure regions](https://azure.microsoft.com/en-us/global-infrastructure/geographies/), or [Google Cloud regions](https://cloud.google.com/about/locations).\n *\n * @deprecated Use ATTR_CLOUD_REGION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_CLOUD_REGION = TMP_CLOUD_REGION;\n/**\n * Cloud regions often have multiple, isolated locations known as zones to increase availability. Availability zone represents the zone where the resource is running.\n *\n * Note: Availability zones are called &#34;zones&#34; on Alibaba Cloud and Google Cloud.\n *\n * @deprecated Use ATTR_CLOUD_AVAILABILITY_ZONE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_CLOUD_AVAILABILITY_ZONE = TMP_CLOUD_AVAILABILITY_ZONE;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use ATTR_CLOUD_PLATFORM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_CLOUD_PLATFORM = TMP_CLOUD_PLATFORM;\n/**\n * The Amazon Resource Name (ARN) of an [ECS container instance](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_instances.html).\n *\n * @deprecated Use ATTR_AWS_ECS_CONTAINER_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_AWS_ECS_CONTAINER_ARN = TMP_AWS_ECS_CONTAINER_ARN;\n/**\n * The ARN of an [ECS cluster](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html).\n *\n * @deprecated Use ATTR_AWS_ECS_CLUSTER_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_AWS_ECS_CLUSTER_ARN = TMP_AWS_ECS_CLUSTER_ARN;\n/**\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n *\n * @deprecated Use ATTR_AWS_ECS_LAUNCHTYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_AWS_ECS_LAUNCHTYPE = TMP_AWS_ECS_LAUNCHTYPE;\n/**\n * The ARN of an [ECS task definition](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html).\n *\n * @deprecated Use ATTR_AWS_ECS_TASK_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_AWS_ECS_TASK_ARN = TMP_AWS_ECS_TASK_ARN;\n/**\n * The task definition family this task definition is a member of.\n *\n * @deprecated Use ATTR_AWS_ECS_TASK_FAMILY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_AWS_ECS_TASK_FAMILY = TMP_AWS_ECS_TASK_FAMILY;\n/**\n * The revision for this task definition.\n *\n * @deprecated Use ATTR_AWS_ECS_TASK_REVISION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_AWS_ECS_TASK_REVISION = TMP_AWS_ECS_TASK_REVISION;\n/**\n * The ARN of an EKS cluster.\n *\n * @deprecated Use ATTR_AWS_EKS_CLUSTER_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_AWS_EKS_CLUSTER_ARN = TMP_AWS_EKS_CLUSTER_ARN;\n/**\n * The name(s) of the AWS log group(s) an application is writing to.\n *\n * Note: Multiple log groups must be supported for cases like multi-container applications, where a single application has sidecar containers, and each write to their own log group.\n *\n * @deprecated Use ATTR_AWS_LOG_GROUP_NAMES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_AWS_LOG_GROUP_NAMES = TMP_AWS_LOG_GROUP_NAMES;\n/**\n * The Amazon Resource Name(s) (ARN) of the AWS log group(s).\n *\n * Note: See the [log group ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format).\n *\n * @deprecated Use ATTR_AWS_LOG_GROUP_ARNS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_AWS_LOG_GROUP_ARNS = TMP_AWS_LOG_GROUP_ARNS;\n/**\n * The name(s) of the AWS log stream(s) an application is writing to.\n *\n * @deprecated Use ATTR_AWS_LOG_STREAM_NAMES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_AWS_LOG_STREAM_NAMES = TMP_AWS_LOG_STREAM_NAMES;\n/**\n * The ARN(s) of the AWS log stream(s).\n *\n * Note: See the [log stream ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format). One log group can contain several log streams, so these ARNs necessarily identify both a log group and a log stream.\n *\n * @deprecated Use ATTR_AWS_LOG_STREAM_ARNS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_AWS_LOG_STREAM_ARNS = TMP_AWS_LOG_STREAM_ARNS;\n/**\n * Container name.\n *\n * @deprecated Use ATTR_CONTAINER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_CONTAINER_NAME = TMP_CONTAINER_NAME;\n/**\n * Container ID. Usually a UUID, as for example used to [identify Docker containers](https://docs.docker.com/engine/reference/run/#container-identification). The UUID might be abbreviated.\n *\n * @deprecated Use ATTR_CONTAINER_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_CONTAINER_ID = TMP_CONTAINER_ID;\n/**\n * The container runtime managing this container.\n *\n * @deprecated Use ATTR_CONTAINER_RUNTIME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_CONTAINER_RUNTIME = TMP_CONTAINER_RUNTIME;\n/**\n * Name of the image the container was built on.\n *\n * @deprecated Use ATTR_CONTAINER_IMAGE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_CONTAINER_IMAGE_NAME = TMP_CONTAINER_IMAGE_NAME;\n/**\n * Container image tag.\n *\n * @deprecated Use ATTR_CONTAINER_IMAGE_TAGS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_CONTAINER_IMAGE_TAG = TMP_CONTAINER_IMAGE_TAG;\n/**\n * Name of the [deployment environment](https://en.wikipedia.org/wiki/Deployment_environment) (aka deployment tier).\n *\n * @deprecated Use ATTR_DEPLOYMENT_ENVIRONMENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_DEPLOYMENT_ENVIRONMENT = TMP_DEPLOYMENT_ENVIRONMENT;\n/**\n * A unique identifier representing the device.\n *\n * Note: The device identifier MUST only be defined using the values outlined below. This value is not an advertising identifier and MUST NOT be used as such. On iOS (Swift or Objective-C), this value MUST be equal to the [vendor identifier](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor). On Android (Java or Kotlin), this value MUST be equal to the Firebase Installation ID or a globally unique UUID which is persisted across sessions in your application. More information can be found [here](https://developer.android.com/training/articles/user-data-ids) on best practices and exact implementation details. Caution should be taken when storing personal data or anything which can identify a user. GDPR and data protection laws may apply, ensure you do your own due diligence.\n *\n * @deprecated Use ATTR_DEVICE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_DEVICE_ID = TMP_DEVICE_ID;\n/**\n * The model identifier for the device.\n *\n * Note: It&#39;s recommended this value represents a machine readable version of the model identifier rather than the market or consumer-friendly name of the device.\n *\n * @deprecated Use ATTR_DEVICE_MODEL_IDENTIFIER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_DEVICE_MODEL_IDENTIFIER = TMP_DEVICE_MODEL_IDENTIFIER;\n/**\n * The marketing name for the device model.\n *\n * Note: It&#39;s recommended this value represents a human readable version of the device model rather than a machine readable alternative.\n *\n * @deprecated Use ATTR_DEVICE_MODEL_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_DEVICE_MODEL_NAME = TMP_DEVICE_MODEL_NAME;\n/**\n * The name of the single function that this runtime instance executes.\n *\n * Note: This is the name of the function as configured/deployed on the FaaS platform and is usually different from the name of the callback function (which may be stored in the [`code.namespace`/`code.function`](../../trace/semantic_conventions/span-general.md#source-code-attributes) span attributes).\n *\n * @deprecated Use ATTR_FAAS_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_FAAS_NAME = TMP_FAAS_NAME;\n/**\n* The unique ID of the single function that this runtime instance executes.\n*\n* Note: Depending on the cloud provider, use:\n\n* **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).\nTake care not to use the &#34;invoked ARN&#34; directly but replace any\n[alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html) with the resolved function version, as the same runtime instance may be invokable with multiple\ndifferent aliases.\n* **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)\n* **Azure:** The [Fully Qualified Resource ID](https://docs.microsoft.com/en-us/rest/api/resources/resources/get-by-id).\n\nOn some providers, it may not be possible to determine the full ID at startup,\nwhich is why this field cannot be made required. For example, on AWS the account ID\npart of the ARN is not available without calling another AWS API\nwhich may be deemed too slow for a short-running lambda function.\nAs an alternative, consider setting `faas.id` as a span attribute instead.\n*\n* @deprecated Use ATTR_CLOUD_RESOURCE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n*/\nconst SEMRESATTRS_FAAS_ID = TMP_FAAS_ID;\n/**\n* The immutable version of the function being executed.\n*\n* Note: Depending on the cloud provider and platform, use:\n\n* **AWS Lambda:** The [function version](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html)\n  (an integer represented as a decimal string).\n* **Google Cloud Run:** The [revision](https://cloud.google.com/run/docs/managing/revisions)\n  (i.e., the function name plus the revision suffix).\n* **Google Cloud Functions:** The value of the\n  [`K_REVISION` environment variable](https://cloud.google.com/functions/docs/env-var#runtime_environment_variables_set_automatically).\n* **Azure Functions:** Not applicable. Do not set this attribute.\n*\n* @deprecated Use ATTR_FAAS_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n*/\nconst SEMRESATTRS_FAAS_VERSION = TMP_FAAS_VERSION;\n/**\n * The execution environment ID as a string, that will be potentially reused for other invocations to the same function/function version.\n *\n * Note: * **AWS Lambda:** Use the (full) log stream name.\n *\n * @deprecated Use ATTR_FAAS_INSTANCE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_FAAS_INSTANCE = TMP_FAAS_INSTANCE;\n/**\n * The amount of memory available to the serverless function in MiB.\n *\n * Note: It&#39;s recommended to set this attribute since e.g. too little memory can easily stop a Java AWS Lambda function from working correctly. On AWS Lambda, the environment variable `AWS_LAMBDA_FUNCTION_MEMORY_SIZE` provides this information.\n *\n * @deprecated Use ATTR_FAAS_MAX_MEMORY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_FAAS_MAX_MEMORY = TMP_FAAS_MAX_MEMORY;\n/**\n * Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider.\n *\n * @deprecated Use ATTR_HOST_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_HOST_ID = TMP_HOST_ID;\n/**\n * Name of the host. On Unix systems, it may contain what the hostname command returns, or the fully qualified hostname, or another name specified by the user.\n *\n * @deprecated Use ATTR_HOST_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_HOST_NAME = TMP_HOST_NAME;\n/**\n * Type of host. For Cloud, this must be the machine type.\n *\n * @deprecated Use ATTR_HOST_TYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_HOST_TYPE = TMP_HOST_TYPE;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use ATTR_HOST_ARCH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_HOST_ARCH = TMP_HOST_ARCH;\n/**\n * Name of the VM image or OS install the host was instantiated from.\n *\n * @deprecated Use ATTR_HOST_IMAGE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_HOST_IMAGE_NAME = TMP_HOST_IMAGE_NAME;\n/**\n * VM image ID. For Cloud, this value is from the provider.\n *\n * @deprecated Use ATTR_HOST_IMAGE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_HOST_IMAGE_ID = TMP_HOST_IMAGE_ID;\n/**\n * The version string of the VM image as defined in [Version Attributes](README.md#version-attributes).\n *\n * @deprecated Use ATTR_HOST_IMAGE_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_HOST_IMAGE_VERSION = TMP_HOST_IMAGE_VERSION;\n/**\n * The name of the cluster.\n *\n * @deprecated Use ATTR_K8S_CLUSTER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_K8S_CLUSTER_NAME = TMP_K8S_CLUSTER_NAME;\n/**\n * The name of the Node.\n *\n * @deprecated Use ATTR_K8S_NODE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_K8S_NODE_NAME = TMP_K8S_NODE_NAME;\n/**\n * The UID of the Node.\n *\n * @deprecated Use ATTR_K8S_NODE_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_K8S_NODE_UID = TMP_K8S_NODE_UID;\n/**\n * The name of the namespace that the pod is running in.\n *\n * @deprecated Use ATTR_K8S_NAMESPACE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_K8S_NAMESPACE_NAME = TMP_K8S_NAMESPACE_NAME;\n/**\n * The UID of the Pod.\n *\n * @deprecated Use ATTR_K8S_POD_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_K8S_POD_UID = TMP_K8S_POD_UID;\n/**\n * The name of the Pod.\n *\n * @deprecated Use ATTR_K8S_POD_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_K8S_POD_NAME = TMP_K8S_POD_NAME;\n/**\n * The name of the Container in a Pod template.\n *\n * @deprecated Use ATTR_K8S_CONTAINER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_K8S_CONTAINER_NAME = TMP_K8S_CONTAINER_NAME;\n/**\n * The UID of the ReplicaSet.\n *\n * @deprecated Use ATTR_K8S_REPLICASET_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_K8S_REPLICASET_UID = TMP_K8S_REPLICASET_UID;\n/**\n * The name of the ReplicaSet.\n *\n * @deprecated Use ATTR_K8S_REPLICASET_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_K8S_REPLICASET_NAME = TMP_K8S_REPLICASET_NAME;\n/**\n * The UID of the Deployment.\n *\n * @deprecated Use ATTR_K8S_DEPLOYMENT_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_K8S_DEPLOYMENT_UID = TMP_K8S_DEPLOYMENT_UID;\n/**\n * The name of the Deployment.\n *\n * @deprecated Use ATTR_K8S_DEPLOYMENT_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_K8S_DEPLOYMENT_NAME = TMP_K8S_DEPLOYMENT_NAME;\n/**\n * The UID of the StatefulSet.\n *\n * @deprecated Use ATTR_K8S_STATEFULSET_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_K8S_STATEFULSET_UID = TMP_K8S_STATEFULSET_UID;\n/**\n * The name of the StatefulSet.\n *\n * @deprecated Use ATTR_K8S_STATEFULSET_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_K8S_STATEFULSET_NAME = TMP_K8S_STATEFULSET_NAME;\n/**\n * The UID of the DaemonSet.\n *\n * @deprecated Use ATTR_K8S_DAEMONSET_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_K8S_DAEMONSET_UID = TMP_K8S_DAEMONSET_UID;\n/**\n * The name of the DaemonSet.\n *\n * @deprecated Use ATTR_K8S_DAEMONSET_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_K8S_DAEMONSET_NAME = TMP_K8S_DAEMONSET_NAME;\n/**\n * The UID of the Job.\n *\n * @deprecated Use ATTR_K8S_JOB_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_K8S_JOB_UID = TMP_K8S_JOB_UID;\n/**\n * The name of the Job.\n *\n * @deprecated Use ATTR_K8S_JOB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_K8S_JOB_NAME = TMP_K8S_JOB_NAME;\n/**\n * The UID of the CronJob.\n *\n * @deprecated Use ATTR_K8S_CRONJOB_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_K8S_CRONJOB_UID = TMP_K8S_CRONJOB_UID;\n/**\n * The name of the CronJob.\n *\n * @deprecated Use ATTR_K8S_CRONJOB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_K8S_CRONJOB_NAME = TMP_K8S_CRONJOB_NAME;\n/**\n * The operating system type.\n *\n * @deprecated Use ATTR_OS_TYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_OS_TYPE = TMP_OS_TYPE;\n/**\n * Human readable (not intended to be parsed) OS version information, like e.g. reported by `ver` or `lsb_release -a` commands.\n *\n * @deprecated Use ATTR_OS_DESCRIPTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_OS_DESCRIPTION = TMP_OS_DESCRIPTION;\n/**\n * Human readable operating system name.\n *\n * @deprecated Use ATTR_OS_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_OS_NAME = TMP_OS_NAME;\n/**\n * The version string of the operating system as defined in [Version Attributes](../../resource/semantic_conventions/README.md#version-attributes).\n *\n * @deprecated Use ATTR_OS_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_OS_VERSION = TMP_OS_VERSION;\n/**\n * Process identifier (PID).\n *\n * @deprecated Use ATTR_PROCESS_PID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_PROCESS_PID = TMP_PROCESS_PID;\n/**\n * The name of the process executable. On Linux based systems, can be set to the `Name` in `proc/[pid]/status`. On Windows, can be set to the base name of `GetProcessImageFileNameW`.\n *\n * @deprecated Use ATTR_PROCESS_EXECUTABLE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_PROCESS_EXECUTABLE_NAME = TMP_PROCESS_EXECUTABLE_NAME;\n/**\n * The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.\n *\n * @deprecated Use ATTR_PROCESS_EXECUTABLE_PATH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_PROCESS_EXECUTABLE_PATH = TMP_PROCESS_EXECUTABLE_PATH;\n/**\n * The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in `proc/[pid]/cmdline`. On Windows, can be set to the first parameter extracted from `GetCommandLineW`.\n *\n * @deprecated Use ATTR_PROCESS_COMMAND in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_PROCESS_COMMAND = TMP_PROCESS_COMMAND;\n/**\n * The full command used to launch the process as a single string representing the full command. On Windows, can be set to the result of `GetCommandLineW`. Do not set this if you have to assemble it just for monitoring; use `process.command_args` instead.\n *\n * @deprecated Use ATTR_PROCESS_COMMAND_LINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_PROCESS_COMMAND_LINE = TMP_PROCESS_COMMAND_LINE;\n/**\n * All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`.\n *\n * @deprecated Use ATTR_PROCESS_COMMAND_ARGS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_PROCESS_COMMAND_ARGS = TMP_PROCESS_COMMAND_ARGS;\n/**\n * The username of the user that owns the process.\n *\n * @deprecated Use ATTR_PROCESS_OWNER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_PROCESS_OWNER = TMP_PROCESS_OWNER;\n/**\n * The name of the runtime of this process. For compiled native binaries, this SHOULD be the name of the compiler.\n *\n * @deprecated Use ATTR_PROCESS_RUNTIME_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_PROCESS_RUNTIME_NAME = TMP_PROCESS_RUNTIME_NAME;\n/**\n * The version of the runtime of this process, as returned by the runtime without modification.\n *\n * @deprecated Use ATTR_PROCESS_RUNTIME_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_PROCESS_RUNTIME_VERSION = TMP_PROCESS_RUNTIME_VERSION;\n/**\n * An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.\n *\n * @deprecated Use ATTR_PROCESS_RUNTIME_DESCRIPTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION = TMP_PROCESS_RUNTIME_DESCRIPTION;\n/**\n * Logical name of the service.\n *\n * Note: MUST be the same for all instances of horizontally scaled services. If the value was not specified, SDKs MUST fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md#process), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value MUST be set to `unknown_service`.\n *\n * @deprecated Use ATTR_SERVICE_NAME.\n */\nconst SEMRESATTRS_SERVICE_NAME = TMP_SERVICE_NAME;\n/**\n * A namespace for `service.name`.\n *\n * Note: A string value having a meaning that helps to distinguish a group of services, for example the team name that owns a group of services. `service.name` is expected to be unique within the same namespace. If `service.namespace` is not specified in the Resource then `service.name` is expected to be unique for all services that have no explicit namespace defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length namespace string is assumed equal to unspecified namespace.\n *\n * @deprecated Use ATTR_SERVICE_NAMESPACE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_SERVICE_NAMESPACE = TMP_SERVICE_NAMESPACE;\n/**\n * The string ID of the service instance.\n *\n * Note: MUST be unique for each instance of the same `service.namespace,service.name` pair (in other words `service.namespace,service.name,service.instance.id` triplet MUST be globally unique). The ID helps to distinguish instances of the same service that exist at the same time (e.g. instances of a horizontally scaled service). It is preferable for the ID to be persistent and stay the same for the lifetime of the service instance, however it is acceptable that the ID is ephemeral and changes during important lifetime events for the service (e.g. service restarts). If the service has no inherent unique ID that can be used as the value of this attribute it is recommended to generate a random Version 1 or Version 4 RFC 4122 UUID (services aiming for reproducible UUIDs may also use Version 5, see RFC 4122 for more recommendations).\n *\n * @deprecated Use ATTR_SERVICE_INSTANCE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_SERVICE_INSTANCE_ID = TMP_SERVICE_INSTANCE_ID;\n/**\n * The version string of the service API or implementation.\n *\n * @deprecated Use ATTR_SERVICE_VERSION.\n */\nconst SEMRESATTRS_SERVICE_VERSION = TMP_SERVICE_VERSION;\n/**\n * The name of the telemetry SDK as defined above.\n *\n * @deprecated Use ATTR_TELEMETRY_SDK_NAME.\n */\nconst SEMRESATTRS_TELEMETRY_SDK_NAME = TMP_TELEMETRY_SDK_NAME;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use ATTR_TELEMETRY_SDK_LANGUAGE.\n */\nconst SEMRESATTRS_TELEMETRY_SDK_LANGUAGE = TMP_TELEMETRY_SDK_LANGUAGE;\n/**\n * The version string of the telemetry SDK.\n *\n * @deprecated Use ATTR_TELEMETRY_SDK_VERSION.\n */\nconst SEMRESATTRS_TELEMETRY_SDK_VERSION = TMP_TELEMETRY_SDK_VERSION;\n/**\n * The version string of the auto instrumentation agent, if used.\n *\n * @deprecated Use ATTR_TELEMETRY_DISTRO_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_TELEMETRY_AUTO_VERSION = TMP_TELEMETRY_AUTO_VERSION;\n/**\n * The name of the web engine.\n *\n * @deprecated Use ATTR_WEBENGINE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_WEBENGINE_NAME = TMP_WEBENGINE_NAME;\n/**\n * The version of the web engine.\n *\n * @deprecated Use ATTR_WEBENGINE_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_WEBENGINE_VERSION = TMP_WEBENGINE_VERSION;\n/**\n * Additional description of the web engine (e.g. detailed version and edition information).\n *\n * @deprecated Use ATTR_WEBENGINE_DESCRIPTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_WEBENGINE_DESCRIPTION = TMP_WEBENGINE_DESCRIPTION;\n/**\n * Create exported Value Map for SemanticResourceAttributes values\n * @deprecated Use the SEMRESATTRS_XXXXX constants rather than the SemanticResourceAttributes.XXXXX for bundle minification\n */\nconst SemanticResourceAttributes = \n/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([\n    TMP_CLOUD_PROVIDER,\n    TMP_CLOUD_ACCOUNT_ID,\n    TMP_CLOUD_REGION,\n    TMP_CLOUD_AVAILABILITY_ZONE,\n    TMP_CLOUD_PLATFORM,\n    TMP_AWS_ECS_CONTAINER_ARN,\n    TMP_AWS_ECS_CLUSTER_ARN,\n    TMP_AWS_ECS_LAUNCHTYPE,\n    TMP_AWS_ECS_TASK_ARN,\n    TMP_AWS_ECS_TASK_FAMILY,\n    TMP_AWS_ECS_TASK_REVISION,\n    TMP_AWS_EKS_CLUSTER_ARN,\n    TMP_AWS_LOG_GROUP_NAMES,\n    TMP_AWS_LOG_GROUP_ARNS,\n    TMP_AWS_LOG_STREAM_NAMES,\n    TMP_AWS_LOG_STREAM_ARNS,\n    TMP_CONTAINER_NAME,\n    TMP_CONTAINER_ID,\n    TMP_CONTAINER_RUNTIME,\n    TMP_CONTAINER_IMAGE_NAME,\n    TMP_CONTAINER_IMAGE_TAG,\n    TMP_DEPLOYMENT_ENVIRONMENT,\n    TMP_DEVICE_ID,\n    TMP_DEVICE_MODEL_IDENTIFIER,\n    TMP_DEVICE_MODEL_NAME,\n    TMP_FAAS_NAME,\n    TMP_FAAS_ID,\n    TMP_FAAS_VERSION,\n    TMP_FAAS_INSTANCE,\n    TMP_FAAS_MAX_MEMORY,\n    TMP_HOST_ID,\n    TMP_HOST_NAME,\n    TMP_HOST_TYPE,\n    TMP_HOST_ARCH,\n    TMP_HOST_IMAGE_NAME,\n    TMP_HOST_IMAGE_ID,\n    TMP_HOST_IMAGE_VERSION,\n    TMP_K8S_CLUSTER_NAME,\n    TMP_K8S_NODE_NAME,\n    TMP_K8S_NODE_UID,\n    TMP_K8S_NAMESPACE_NAME,\n    TMP_K8S_POD_UID,\n    TMP_K8S_POD_NAME,\n    TMP_K8S_CONTAINER_NAME,\n    TMP_K8S_REPLICASET_UID,\n    TMP_K8S_REPLICASET_NAME,\n    TMP_K8S_DEPLOYMENT_UID,\n    TMP_K8S_DEPLOYMENT_NAME,\n    TMP_K8S_STATEFULSET_UID,\n    TMP_K8S_STATEFULSET_NAME,\n    TMP_K8S_DAEMONSET_UID,\n    TMP_K8S_DAEMONSET_NAME,\n    TMP_K8S_JOB_UID,\n    TMP_K8S_JOB_NAME,\n    TMP_K8S_CRONJOB_UID,\n    TMP_K8S_CRONJOB_NAME,\n    TMP_OS_TYPE,\n    TMP_OS_DESCRIPTION,\n    TMP_OS_NAME,\n    TMP_OS_VERSION,\n    TMP_PROCESS_PID,\n    TMP_PROCESS_EXECUTABLE_NAME,\n    TMP_PROCESS_EXECUTABLE_PATH,\n    TMP_PROCESS_COMMAND,\n    TMP_PROCESS_COMMAND_LINE,\n    TMP_PROCESS_COMMAND_ARGS,\n    TMP_PROCESS_OWNER,\n    TMP_PROCESS_RUNTIME_NAME,\n    TMP_PROCESS_RUNTIME_VERSION,\n    TMP_PROCESS_RUNTIME_DESCRIPTION,\n    TMP_SERVICE_NAME,\n    TMP_SERVICE_NAMESPACE,\n    TMP_SERVICE_INSTANCE_ID,\n    TMP_SERVICE_VERSION,\n    TMP_TELEMETRY_SDK_NAME,\n    TMP_TELEMETRY_SDK_LANGUAGE,\n    TMP_TELEMETRY_SDK_VERSION,\n    TMP_TELEMETRY_AUTO_VERSION,\n    TMP_WEBENGINE_NAME,\n    TMP_WEBENGINE_VERSION,\n    TMP_WEBENGINE_DESCRIPTION,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for CloudProviderValues enum definition\n *\n * Name of the cloud provider.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD = 'alibaba_cloud';\nconst TMP_CLOUDPROVIDERVALUES_AWS = 'aws';\nconst TMP_CLOUDPROVIDERVALUES_AZURE = 'azure';\nconst TMP_CLOUDPROVIDERVALUES_GCP = 'gcp';\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use CLOUD_PROVIDER_VALUE_ALIBABA_CLOUD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst CLOUDPROVIDERVALUES_ALIBABA_CLOUD = TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD;\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use CLOUD_PROVIDER_VALUE_AWS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst CLOUDPROVIDERVALUES_AWS = TMP_CLOUDPROVIDERVALUES_AWS;\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use CLOUD_PROVIDER_VALUE_AZURE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst CLOUDPROVIDERVALUES_AZURE = TMP_CLOUDPROVIDERVALUES_AZURE;\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use CLOUD_PROVIDER_VALUE_GCP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst CLOUDPROVIDERVALUES_GCP = TMP_CLOUDPROVIDERVALUES_GCP;\n/**\n * The constant map of values for CloudProviderValues.\n * @deprecated Use the CLOUDPROVIDERVALUES_XXXXX constants rather than the CloudProviderValues.XXXXX for bundle minification.\n */\nconst CloudProviderValues = \n/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([\n    TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD,\n    TMP_CLOUDPROVIDERVALUES_AWS,\n    TMP_CLOUDPROVIDERVALUES_AZURE,\n    TMP_CLOUDPROVIDERVALUES_GCP,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for CloudPlatformValues enum definition\n *\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS = 'alibaba_cloud_ecs';\nconst TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC = 'alibaba_cloud_fc';\nconst TMP_CLOUDPLATFORMVALUES_AWS_EC2 = 'aws_ec2';\nconst TMP_CLOUDPLATFORMVALUES_AWS_ECS = 'aws_ecs';\nconst TMP_CLOUDPLATFORMVALUES_AWS_EKS = 'aws_eks';\nconst TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA = 'aws_lambda';\nconst TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK = 'aws_elastic_beanstalk';\nconst TMP_CLOUDPLATFORMVALUES_AZURE_VM = 'azure_vm';\nconst TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES = 'azure_container_instances';\nconst TMP_CLOUDPLATFORMVALUES_AZURE_AKS = 'azure_aks';\nconst TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS = 'azure_functions';\nconst TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE = 'azure_app_service';\nconst TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE = 'gcp_compute_engine';\nconst TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN = 'gcp_cloud_run';\nconst TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE = 'gcp_kubernetes_engine';\nconst TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS = 'gcp_cloud_functions';\nconst TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE = 'gcp_app_engine';\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_ALIBABA_CLOUD_ECS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS = TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_ALIBABA_CLOUD_FC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC = TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_EC2 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst CLOUDPLATFORMVALUES_AWS_EC2 = TMP_CLOUDPLATFORMVALUES_AWS_EC2;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_ECS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst CLOUDPLATFORMVALUES_AWS_ECS = TMP_CLOUDPLATFORMVALUES_AWS_ECS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_EKS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst CLOUDPLATFORMVALUES_AWS_EKS = TMP_CLOUDPLATFORMVALUES_AWS_EKS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_LAMBDA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst CLOUDPLATFORMVALUES_AWS_LAMBDA = TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_ELASTIC_BEANSTALK in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK = TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_VM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst CLOUDPLATFORMVALUES_AZURE_VM = TMP_CLOUDPLATFORMVALUES_AZURE_VM;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_CONTAINER_INSTANCES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES = TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_AKS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst CLOUDPLATFORMVALUES_AZURE_AKS = TMP_CLOUDPLATFORMVALUES_AZURE_AKS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_FUNCTIONS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst CLOUDPLATFORMVALUES_AZURE_FUNCTIONS = TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_APP_SERVICE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst CLOUDPLATFORMVALUES_AZURE_APP_SERVICE = TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_COMPUTE_ENGINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE = TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_CLOUD_RUN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst CLOUDPLATFORMVALUES_GCP_CLOUD_RUN = TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_KUBERNETES_ENGINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE = TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_CLOUD_FUNCTIONS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS = TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_APP_ENGINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst CLOUDPLATFORMVALUES_GCP_APP_ENGINE = TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE;\n/**\n * The constant map of values for CloudPlatformValues.\n * @deprecated Use the CLOUDPLATFORMVALUES_XXXXX constants rather than the CloudPlatformValues.XXXXX for bundle minification.\n */\nconst CloudPlatformValues = \n/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([\n    TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS,\n    TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC,\n    TMP_CLOUDPLATFORMVALUES_AWS_EC2,\n    TMP_CLOUDPLATFORMVALUES_AWS_ECS,\n    TMP_CLOUDPLATFORMVALUES_AWS_EKS,\n    TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA,\n    TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK,\n    TMP_CLOUDPLATFORMVALUES_AZURE_VM,\n    TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES,\n    TMP_CLOUDPLATFORMVALUES_AZURE_AKS,\n    TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS,\n    TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE,\n    TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE,\n    TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN,\n    TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE,\n    TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS,\n    TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for AwsEcsLaunchtypeValues enum definition\n *\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_AWSECSLAUNCHTYPEVALUES_EC2 = 'ec2';\nconst TMP_AWSECSLAUNCHTYPEVALUES_FARGATE = 'fargate';\n/**\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n *\n * @deprecated Use AWS_ECS_LAUNCHTYPE_VALUE_EC2 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst AWSECSLAUNCHTYPEVALUES_EC2 = TMP_AWSECSLAUNCHTYPEVALUES_EC2;\n/**\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n *\n * @deprecated Use AWS_ECS_LAUNCHTYPE_VALUE_FARGATE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst AWSECSLAUNCHTYPEVALUES_FARGATE = TMP_AWSECSLAUNCHTYPEVALUES_FARGATE;\n/**\n * The constant map of values for AwsEcsLaunchtypeValues.\n * @deprecated Use the AWSECSLAUNCHTYPEVALUES_XXXXX constants rather than the AwsEcsLaunchtypeValues.XXXXX for bundle minification.\n */\nconst AwsEcsLaunchtypeValues = \n/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([\n    TMP_AWSECSLAUNCHTYPEVALUES_EC2,\n    TMP_AWSECSLAUNCHTYPEVALUES_FARGATE,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for HostArchValues enum definition\n *\n * The CPU architecture the host system is running on.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_HOSTARCHVALUES_AMD64 = 'amd64';\nconst TMP_HOSTARCHVALUES_ARM32 = 'arm32';\nconst TMP_HOSTARCHVALUES_ARM64 = 'arm64';\nconst TMP_HOSTARCHVALUES_IA64 = 'ia64';\nconst TMP_HOSTARCHVALUES_PPC32 = 'ppc32';\nconst TMP_HOSTARCHVALUES_PPC64 = 'ppc64';\nconst TMP_HOSTARCHVALUES_X86 = 'x86';\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_AMD64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst HOSTARCHVALUES_AMD64 = TMP_HOSTARCHVALUES_AMD64;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_ARM32 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst HOSTARCHVALUES_ARM32 = TMP_HOSTARCHVALUES_ARM32;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_ARM64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst HOSTARCHVALUES_ARM64 = TMP_HOSTARCHVALUES_ARM64;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_IA64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst HOSTARCHVALUES_IA64 = TMP_HOSTARCHVALUES_IA64;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_PPC32 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst HOSTARCHVALUES_PPC32 = TMP_HOSTARCHVALUES_PPC32;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_PPC64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst HOSTARCHVALUES_PPC64 = TMP_HOSTARCHVALUES_PPC64;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_X86 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst HOSTARCHVALUES_X86 = TMP_HOSTARCHVALUES_X86;\n/**\n * The constant map of values for HostArchValues.\n * @deprecated Use the HOSTARCHVALUES_XXXXX constants rather than the HostArchValues.XXXXX for bundle minification.\n */\nconst HostArchValues = \n/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([\n    TMP_HOSTARCHVALUES_AMD64,\n    TMP_HOSTARCHVALUES_ARM32,\n    TMP_HOSTARCHVALUES_ARM64,\n    TMP_HOSTARCHVALUES_IA64,\n    TMP_HOSTARCHVALUES_PPC32,\n    TMP_HOSTARCHVALUES_PPC64,\n    TMP_HOSTARCHVALUES_X86,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for OsTypeValues enum definition\n *\n * The operating system type.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_OSTYPEVALUES_WINDOWS = 'windows';\nconst TMP_OSTYPEVALUES_LINUX = 'linux';\nconst TMP_OSTYPEVALUES_DARWIN = 'darwin';\nconst TMP_OSTYPEVALUES_FREEBSD = 'freebsd';\nconst TMP_OSTYPEVALUES_NETBSD = 'netbsd';\nconst TMP_OSTYPEVALUES_OPENBSD = 'openbsd';\nconst TMP_OSTYPEVALUES_DRAGONFLYBSD = 'dragonflybsd';\nconst TMP_OSTYPEVALUES_HPUX = 'hpux';\nconst TMP_OSTYPEVALUES_AIX = 'aix';\nconst TMP_OSTYPEVALUES_SOLARIS = 'solaris';\nconst TMP_OSTYPEVALUES_Z_OS = 'z_os';\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_WINDOWS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst OSTYPEVALUES_WINDOWS = TMP_OSTYPEVALUES_WINDOWS;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_LINUX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst OSTYPEVALUES_LINUX = TMP_OSTYPEVALUES_LINUX;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_DARWIN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst OSTYPEVALUES_DARWIN = TMP_OSTYPEVALUES_DARWIN;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_FREEBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst OSTYPEVALUES_FREEBSD = TMP_OSTYPEVALUES_FREEBSD;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_NETBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst OSTYPEVALUES_NETBSD = TMP_OSTYPEVALUES_NETBSD;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_OPENBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst OSTYPEVALUES_OPENBSD = TMP_OSTYPEVALUES_OPENBSD;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_DRAGONFLYBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst OSTYPEVALUES_DRAGONFLYBSD = TMP_OSTYPEVALUES_DRAGONFLYBSD;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_HPUX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst OSTYPEVALUES_HPUX = TMP_OSTYPEVALUES_HPUX;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_AIX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst OSTYPEVALUES_AIX = TMP_OSTYPEVALUES_AIX;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_SOLARIS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst OSTYPEVALUES_SOLARIS = TMP_OSTYPEVALUES_SOLARIS;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_Z_OS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst OSTYPEVALUES_Z_OS = TMP_OSTYPEVALUES_Z_OS;\n/**\n * The constant map of values for OsTypeValues.\n * @deprecated Use the OSTYPEVALUES_XXXXX constants rather than the OsTypeValues.XXXXX for bundle minification.\n */\nconst OsTypeValues = \n/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([\n    TMP_OSTYPEVALUES_WINDOWS,\n    TMP_OSTYPEVALUES_LINUX,\n    TMP_OSTYPEVALUES_DARWIN,\n    TMP_OSTYPEVALUES_FREEBSD,\n    TMP_OSTYPEVALUES_NETBSD,\n    TMP_OSTYPEVALUES_OPENBSD,\n    TMP_OSTYPEVALUES_DRAGONFLYBSD,\n    TMP_OSTYPEVALUES_HPUX,\n    TMP_OSTYPEVALUES_AIX,\n    TMP_OSTYPEVALUES_SOLARIS,\n    TMP_OSTYPEVALUES_Z_OS,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for TelemetrySdkLanguageValues enum definition\n *\n * The language of the telemetry SDK.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_CPP = 'cpp';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET = 'dotnet';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG = 'erlang';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_GO = 'go';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA = 'java';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS = 'nodejs';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_PHP = 'php';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON = 'python';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY = 'ruby';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS = 'webjs';\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_CPP.\n */\nconst TELEMETRYSDKLANGUAGEVALUES_CPP = TMP_TELEMETRYSDKLANGUAGEVALUES_CPP;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_DOTNET.\n */\nconst TELEMETRYSDKLANGUAGEVALUES_DOTNET = TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_ERLANG.\n */\nconst TELEMETRYSDKLANGUAGEVALUES_ERLANG = TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_GO.\n */\nconst TELEMETRYSDKLANGUAGEVALUES_GO = TMP_TELEMETRYSDKLANGUAGEVALUES_GO;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_JAVA.\n */\nconst TELEMETRYSDKLANGUAGEVALUES_JAVA = TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_NODEJS.\n */\nconst TELEMETRYSDKLANGUAGEVALUES_NODEJS = TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_PHP.\n */\nconst TELEMETRYSDKLANGUAGEVALUES_PHP = TMP_TELEMETRYSDKLANGUAGEVALUES_PHP;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_PYTHON.\n */\nconst TELEMETRYSDKLANGUAGEVALUES_PYTHON = TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_RUBY.\n */\nconst TELEMETRYSDKLANGUAGEVALUES_RUBY = TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_WEBJS.\n */\nconst TELEMETRYSDKLANGUAGEVALUES_WEBJS = TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS;\n/**\n * The constant map of values for TelemetrySdkLanguageValues.\n * @deprecated Use the TELEMETRYSDKLANGUAGEVALUES_XXXXX constants rather than the TelemetrySdkLanguageValues.XXXXX for bundle minification.\n */\nconst TelemetrySdkLanguageValues = \n/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([\n    TMP_TELEMETRYSDKLANGUAGEVALUES_CPP,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_GO,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_PHP,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS,\n]);\n//# sourceMappingURL=SemanticResourceAttributes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/resource/SemanticResourceAttributes.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/resource/index.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/semantic-conventions/build/esm/resource/index.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AWSECSLAUNCHTYPEVALUES_EC2: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.AWSECSLAUNCHTYPEVALUES_EC2),\n/* harmony export */   AWSECSLAUNCHTYPEVALUES_FARGATE: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.AWSECSLAUNCHTYPEVALUES_FARGATE),\n/* harmony export */   AwsEcsLaunchtypeValues: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.AwsEcsLaunchtypeValues),\n/* harmony export */   CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS),\n/* harmony export */   CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC),\n/* harmony export */   CLOUDPLATFORMVALUES_AWS_EC2: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.CLOUDPLATFORMVALUES_AWS_EC2),\n/* harmony export */   CLOUDPLATFORMVALUES_AWS_ECS: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.CLOUDPLATFORMVALUES_AWS_ECS),\n/* harmony export */   CLOUDPLATFORMVALUES_AWS_EKS: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.CLOUDPLATFORMVALUES_AWS_EKS),\n/* harmony export */   CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK),\n/* harmony export */   CLOUDPLATFORMVALUES_AWS_LAMBDA: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.CLOUDPLATFORMVALUES_AWS_LAMBDA),\n/* harmony export */   CLOUDPLATFORMVALUES_AZURE_AKS: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.CLOUDPLATFORMVALUES_AZURE_AKS),\n/* harmony export */   CLOUDPLATFORMVALUES_AZURE_APP_SERVICE: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.CLOUDPLATFORMVALUES_AZURE_APP_SERVICE),\n/* harmony export */   CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES),\n/* harmony export */   CLOUDPLATFORMVALUES_AZURE_FUNCTIONS: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.CLOUDPLATFORMVALUES_AZURE_FUNCTIONS),\n/* harmony export */   CLOUDPLATFORMVALUES_AZURE_VM: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.CLOUDPLATFORMVALUES_AZURE_VM),\n/* harmony export */   CLOUDPLATFORMVALUES_GCP_APP_ENGINE: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.CLOUDPLATFORMVALUES_GCP_APP_ENGINE),\n/* harmony export */   CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS),\n/* harmony export */   CLOUDPLATFORMVALUES_GCP_CLOUD_RUN: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.CLOUDPLATFORMVALUES_GCP_CLOUD_RUN),\n/* harmony export */   CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE),\n/* harmony export */   CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE),\n/* harmony export */   CLOUDPROVIDERVALUES_ALIBABA_CLOUD: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.CLOUDPROVIDERVALUES_ALIBABA_CLOUD),\n/* harmony export */   CLOUDPROVIDERVALUES_AWS: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.CLOUDPROVIDERVALUES_AWS),\n/* harmony export */   CLOUDPROVIDERVALUES_AZURE: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.CLOUDPROVIDERVALUES_AZURE),\n/* harmony export */   CLOUDPROVIDERVALUES_GCP: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.CLOUDPROVIDERVALUES_GCP),\n/* harmony export */   CloudPlatformValues: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.CloudPlatformValues),\n/* harmony export */   CloudProviderValues: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.CloudProviderValues),\n/* harmony export */   HOSTARCHVALUES_AMD64: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.HOSTARCHVALUES_AMD64),\n/* harmony export */   HOSTARCHVALUES_ARM32: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.HOSTARCHVALUES_ARM32),\n/* harmony export */   HOSTARCHVALUES_ARM64: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.HOSTARCHVALUES_ARM64),\n/* harmony export */   HOSTARCHVALUES_IA64: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.HOSTARCHVALUES_IA64),\n/* harmony export */   HOSTARCHVALUES_PPC32: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.HOSTARCHVALUES_PPC32),\n/* harmony export */   HOSTARCHVALUES_PPC64: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.HOSTARCHVALUES_PPC64),\n/* harmony export */   HOSTARCHVALUES_X86: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.HOSTARCHVALUES_X86),\n/* harmony export */   HostArchValues: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.HostArchValues),\n/* harmony export */   OSTYPEVALUES_AIX: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.OSTYPEVALUES_AIX),\n/* harmony export */   OSTYPEVALUES_DARWIN: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.OSTYPEVALUES_DARWIN),\n/* harmony export */   OSTYPEVALUES_DRAGONFLYBSD: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.OSTYPEVALUES_DRAGONFLYBSD),\n/* harmony export */   OSTYPEVALUES_FREEBSD: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.OSTYPEVALUES_FREEBSD),\n/* harmony export */   OSTYPEVALUES_HPUX: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.OSTYPEVALUES_HPUX),\n/* harmony export */   OSTYPEVALUES_LINUX: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.OSTYPEVALUES_LINUX),\n/* harmony export */   OSTYPEVALUES_NETBSD: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.OSTYPEVALUES_NETBSD),\n/* harmony export */   OSTYPEVALUES_OPENBSD: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.OSTYPEVALUES_OPENBSD),\n/* harmony export */   OSTYPEVALUES_SOLARIS: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.OSTYPEVALUES_SOLARIS),\n/* harmony export */   OSTYPEVALUES_WINDOWS: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.OSTYPEVALUES_WINDOWS),\n/* harmony export */   OSTYPEVALUES_Z_OS: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.OSTYPEVALUES_Z_OS),\n/* harmony export */   OsTypeValues: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.OsTypeValues),\n/* harmony export */   SEMRESATTRS_AWS_ECS_CLUSTER_ARN: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_AWS_ECS_CLUSTER_ARN),\n/* harmony export */   SEMRESATTRS_AWS_ECS_CONTAINER_ARN: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_AWS_ECS_CONTAINER_ARN),\n/* harmony export */   SEMRESATTRS_AWS_ECS_LAUNCHTYPE: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_AWS_ECS_LAUNCHTYPE),\n/* harmony export */   SEMRESATTRS_AWS_ECS_TASK_ARN: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_AWS_ECS_TASK_ARN),\n/* harmony export */   SEMRESATTRS_AWS_ECS_TASK_FAMILY: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_AWS_ECS_TASK_FAMILY),\n/* harmony export */   SEMRESATTRS_AWS_ECS_TASK_REVISION: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_AWS_ECS_TASK_REVISION),\n/* harmony export */   SEMRESATTRS_AWS_EKS_CLUSTER_ARN: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_AWS_EKS_CLUSTER_ARN),\n/* harmony export */   SEMRESATTRS_AWS_LOG_GROUP_ARNS: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_AWS_LOG_GROUP_ARNS),\n/* harmony export */   SEMRESATTRS_AWS_LOG_GROUP_NAMES: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_AWS_LOG_GROUP_NAMES),\n/* harmony export */   SEMRESATTRS_AWS_LOG_STREAM_ARNS: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_AWS_LOG_STREAM_ARNS),\n/* harmony export */   SEMRESATTRS_AWS_LOG_STREAM_NAMES: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_AWS_LOG_STREAM_NAMES),\n/* harmony export */   SEMRESATTRS_CLOUD_ACCOUNT_ID: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_CLOUD_ACCOUNT_ID),\n/* harmony export */   SEMRESATTRS_CLOUD_AVAILABILITY_ZONE: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_CLOUD_AVAILABILITY_ZONE),\n/* harmony export */   SEMRESATTRS_CLOUD_PLATFORM: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_CLOUD_PLATFORM),\n/* harmony export */   SEMRESATTRS_CLOUD_PROVIDER: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_CLOUD_PROVIDER),\n/* harmony export */   SEMRESATTRS_CLOUD_REGION: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_CLOUD_REGION),\n/* harmony export */   SEMRESATTRS_CONTAINER_ID: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_CONTAINER_ID),\n/* harmony export */   SEMRESATTRS_CONTAINER_IMAGE_NAME: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_CONTAINER_IMAGE_NAME),\n/* harmony export */   SEMRESATTRS_CONTAINER_IMAGE_TAG: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_CONTAINER_IMAGE_TAG),\n/* harmony export */   SEMRESATTRS_CONTAINER_NAME: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_CONTAINER_NAME),\n/* harmony export */   SEMRESATTRS_CONTAINER_RUNTIME: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_CONTAINER_RUNTIME),\n/* harmony export */   SEMRESATTRS_DEPLOYMENT_ENVIRONMENT: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_DEPLOYMENT_ENVIRONMENT),\n/* harmony export */   SEMRESATTRS_DEVICE_ID: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_DEVICE_ID),\n/* harmony export */   SEMRESATTRS_DEVICE_MODEL_IDENTIFIER: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_DEVICE_MODEL_IDENTIFIER),\n/* harmony export */   SEMRESATTRS_DEVICE_MODEL_NAME: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_DEVICE_MODEL_NAME),\n/* harmony export */   SEMRESATTRS_FAAS_ID: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_FAAS_ID),\n/* harmony export */   SEMRESATTRS_FAAS_INSTANCE: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_FAAS_INSTANCE),\n/* harmony export */   SEMRESATTRS_FAAS_MAX_MEMORY: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_FAAS_MAX_MEMORY),\n/* harmony export */   SEMRESATTRS_FAAS_NAME: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_FAAS_NAME),\n/* harmony export */   SEMRESATTRS_FAAS_VERSION: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_FAAS_VERSION),\n/* harmony export */   SEMRESATTRS_HOST_ARCH: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_HOST_ARCH),\n/* harmony export */   SEMRESATTRS_HOST_ID: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_HOST_ID),\n/* harmony export */   SEMRESATTRS_HOST_IMAGE_ID: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_HOST_IMAGE_ID),\n/* harmony export */   SEMRESATTRS_HOST_IMAGE_NAME: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_HOST_IMAGE_NAME),\n/* harmony export */   SEMRESATTRS_HOST_IMAGE_VERSION: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_HOST_IMAGE_VERSION),\n/* harmony export */   SEMRESATTRS_HOST_NAME: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_HOST_NAME),\n/* harmony export */   SEMRESATTRS_HOST_TYPE: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_HOST_TYPE),\n/* harmony export */   SEMRESATTRS_K8S_CLUSTER_NAME: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_K8S_CLUSTER_NAME),\n/* harmony export */   SEMRESATTRS_K8S_CONTAINER_NAME: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_K8S_CONTAINER_NAME),\n/* harmony export */   SEMRESATTRS_K8S_CRONJOB_NAME: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_K8S_CRONJOB_NAME),\n/* harmony export */   SEMRESATTRS_K8S_CRONJOB_UID: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_K8S_CRONJOB_UID),\n/* harmony export */   SEMRESATTRS_K8S_DAEMONSET_NAME: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_K8S_DAEMONSET_NAME),\n/* harmony export */   SEMRESATTRS_K8S_DAEMONSET_UID: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_K8S_DAEMONSET_UID),\n/* harmony export */   SEMRESATTRS_K8S_DEPLOYMENT_NAME: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_K8S_DEPLOYMENT_NAME),\n/* harmony export */   SEMRESATTRS_K8S_DEPLOYMENT_UID: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_K8S_DEPLOYMENT_UID),\n/* harmony export */   SEMRESATTRS_K8S_JOB_NAME: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_K8S_JOB_NAME),\n/* harmony export */   SEMRESATTRS_K8S_JOB_UID: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_K8S_JOB_UID),\n/* harmony export */   SEMRESATTRS_K8S_NAMESPACE_NAME: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_K8S_NAMESPACE_NAME),\n/* harmony export */   SEMRESATTRS_K8S_NODE_NAME: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_K8S_NODE_NAME),\n/* harmony export */   SEMRESATTRS_K8S_NODE_UID: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_K8S_NODE_UID),\n/* harmony export */   SEMRESATTRS_K8S_POD_NAME: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_K8S_POD_NAME),\n/* harmony export */   SEMRESATTRS_K8S_POD_UID: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_K8S_POD_UID),\n/* harmony export */   SEMRESATTRS_K8S_REPLICASET_NAME: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_K8S_REPLICASET_NAME),\n/* harmony export */   SEMRESATTRS_K8S_REPLICASET_UID: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_K8S_REPLICASET_UID),\n/* harmony export */   SEMRESATTRS_K8S_STATEFULSET_NAME: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_K8S_STATEFULSET_NAME),\n/* harmony export */   SEMRESATTRS_K8S_STATEFULSET_UID: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_K8S_STATEFULSET_UID),\n/* harmony export */   SEMRESATTRS_OS_DESCRIPTION: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_OS_DESCRIPTION),\n/* harmony export */   SEMRESATTRS_OS_NAME: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_OS_NAME),\n/* harmony export */   SEMRESATTRS_OS_TYPE: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_OS_TYPE),\n/* harmony export */   SEMRESATTRS_OS_VERSION: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_OS_VERSION),\n/* harmony export */   SEMRESATTRS_PROCESS_COMMAND: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_PROCESS_COMMAND),\n/* harmony export */   SEMRESATTRS_PROCESS_COMMAND_ARGS: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_PROCESS_COMMAND_ARGS),\n/* harmony export */   SEMRESATTRS_PROCESS_COMMAND_LINE: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_PROCESS_COMMAND_LINE),\n/* harmony export */   SEMRESATTRS_PROCESS_EXECUTABLE_NAME: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_PROCESS_EXECUTABLE_NAME),\n/* harmony export */   SEMRESATTRS_PROCESS_EXECUTABLE_PATH: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_PROCESS_EXECUTABLE_PATH),\n/* harmony export */   SEMRESATTRS_PROCESS_OWNER: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_PROCESS_OWNER),\n/* harmony export */   SEMRESATTRS_PROCESS_PID: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_PROCESS_PID),\n/* harmony export */   SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION),\n/* harmony export */   SEMRESATTRS_PROCESS_RUNTIME_NAME: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_PROCESS_RUNTIME_NAME),\n/* harmony export */   SEMRESATTRS_PROCESS_RUNTIME_VERSION: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_PROCESS_RUNTIME_VERSION),\n/* harmony export */   SEMRESATTRS_SERVICE_INSTANCE_ID: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_SERVICE_INSTANCE_ID),\n/* harmony export */   SEMRESATTRS_SERVICE_NAME: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_SERVICE_NAME),\n/* harmony export */   SEMRESATTRS_SERVICE_NAMESPACE: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_SERVICE_NAMESPACE),\n/* harmony export */   SEMRESATTRS_SERVICE_VERSION: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_SERVICE_VERSION),\n/* harmony export */   SEMRESATTRS_TELEMETRY_AUTO_VERSION: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_TELEMETRY_AUTO_VERSION),\n/* harmony export */   SEMRESATTRS_TELEMETRY_SDK_LANGUAGE: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_TELEMETRY_SDK_LANGUAGE),\n/* harmony export */   SEMRESATTRS_TELEMETRY_SDK_NAME: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_TELEMETRY_SDK_NAME),\n/* harmony export */   SEMRESATTRS_TELEMETRY_SDK_VERSION: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_TELEMETRY_SDK_VERSION),\n/* harmony export */   SEMRESATTRS_WEBENGINE_DESCRIPTION: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_WEBENGINE_DESCRIPTION),\n/* harmony export */   SEMRESATTRS_WEBENGINE_NAME: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_WEBENGINE_NAME),\n/* harmony export */   SEMRESATTRS_WEBENGINE_VERSION: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_WEBENGINE_VERSION),\n/* harmony export */   SemanticResourceAttributes: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SemanticResourceAttributes),\n/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_CPP: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.TELEMETRYSDKLANGUAGEVALUES_CPP),\n/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_DOTNET: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.TELEMETRYSDKLANGUAGEVALUES_DOTNET),\n/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_ERLANG: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.TELEMETRYSDKLANGUAGEVALUES_ERLANG),\n/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_GO: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.TELEMETRYSDKLANGUAGEVALUES_GO),\n/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_JAVA: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.TELEMETRYSDKLANGUAGEVALUES_JAVA),\n/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_NODEJS: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.TELEMETRYSDKLANGUAGEVALUES_NODEJS),\n/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_PHP: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.TELEMETRYSDKLANGUAGEVALUES_PHP),\n/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_PYTHON: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.TELEMETRYSDKLANGUAGEVALUES_PYTHON),\n/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_RUBY: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.TELEMETRYSDKLANGUAGEVALUES_RUBY),\n/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_WEBJS: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.TELEMETRYSDKLANGUAGEVALUES_WEBJS),\n/* harmony export */   TelemetrySdkLanguageValues: () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.TelemetrySdkLanguageValues)\n/* harmony export */ });\n/* harmony import */ var _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SemanticResourceAttributes */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/resource/SemanticResourceAttributes.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable no-restricted-syntax --\n * These re-exports are only of constants, only one-level deep at this point,\n * and should not cause problems for tree-shakers.\n */\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3NlbWFudGljLWNvbnZlbnRpb25zL2J1aWxkL2VzbS9yZXNvdXJjZS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQzZDO0FBQzdDIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3NlbWFudGljLWNvbnZlbnRpb25zL2J1aWxkL2VzbS9yZXNvdXJjZS9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1zeW50YXggLS1cbiAqIFRoZXNlIHJlLWV4cG9ydHMgYXJlIG9ubHkgb2YgY29uc3RhbnRzLCBvbmx5IG9uZS1sZXZlbCBkZWVwIGF0IHRoaXMgcG9pbnQsXG4gKiBhbmQgc2hvdWxkIG5vdCBjYXVzZSBwcm9ibGVtcyBmb3IgdHJlZS1zaGFrZXJzLlxuICovXG5leHBvcnQgKiBmcm9tICcuL1NlbWFudGljUmVzb3VyY2VBdHRyaWJ1dGVzJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/resource/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/stable_attributes.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/semantic-conventions/build/esm/stable_attributes.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_ABORTED: () => (/* binding */ ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_ABORTED),\n/* harmony export */   ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_HANDLED: () => (/* binding */ ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_HANDLED),\n/* harmony export */   ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_SKIPPED: () => (/* binding */ ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_SKIPPED),\n/* harmony export */   ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_UNHANDLED: () => (/* binding */ ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_UNHANDLED),\n/* harmony export */   ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ACQUIRED: () => (/* binding */ ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ACQUIRED),\n/* harmony export */   ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ENDPOINT_LIMITER: () => (/* binding */ ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ENDPOINT_LIMITER),\n/* harmony export */   ASPNETCORE_RATE_LIMITING_RESULT_VALUE_GLOBAL_LIMITER: () => (/* binding */ ASPNETCORE_RATE_LIMITING_RESULT_VALUE_GLOBAL_LIMITER),\n/* harmony export */   ASPNETCORE_RATE_LIMITING_RESULT_VALUE_REQUEST_CANCELED: () => (/* binding */ ASPNETCORE_RATE_LIMITING_RESULT_VALUE_REQUEST_CANCELED),\n/* harmony export */   ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_FAILURE: () => (/* binding */ ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_FAILURE),\n/* harmony export */   ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_SUCCESS: () => (/* binding */ ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_SUCCESS),\n/* harmony export */   ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT: () => (/* binding */ ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT),\n/* harmony export */   ATTR_ASPNETCORE_DIAGNOSTICS_HANDLER_TYPE: () => (/* binding */ ATTR_ASPNETCORE_DIAGNOSTICS_HANDLER_TYPE),\n/* harmony export */   ATTR_ASPNETCORE_RATE_LIMITING_POLICY: () => (/* binding */ ATTR_ASPNETCORE_RATE_LIMITING_POLICY),\n/* harmony export */   ATTR_ASPNETCORE_RATE_LIMITING_RESULT: () => (/* binding */ ATTR_ASPNETCORE_RATE_LIMITING_RESULT),\n/* harmony export */   ATTR_ASPNETCORE_REQUEST_IS_UNHANDLED: () => (/* binding */ ATTR_ASPNETCORE_REQUEST_IS_UNHANDLED),\n/* harmony export */   ATTR_ASPNETCORE_ROUTING_IS_FALLBACK: () => (/* binding */ ATTR_ASPNETCORE_ROUTING_IS_FALLBACK),\n/* harmony export */   ATTR_ASPNETCORE_ROUTING_MATCH_STATUS: () => (/* binding */ ATTR_ASPNETCORE_ROUTING_MATCH_STATUS),\n/* harmony export */   ATTR_ASPNETCORE_USER_IS_AUTHENTICATED: () => (/* binding */ ATTR_ASPNETCORE_USER_IS_AUTHENTICATED),\n/* harmony export */   ATTR_CLIENT_ADDRESS: () => (/* binding */ ATTR_CLIENT_ADDRESS),\n/* harmony export */   ATTR_CLIENT_PORT: () => (/* binding */ ATTR_CLIENT_PORT),\n/* harmony export */   ATTR_CODE_COLUMN_NUMBER: () => (/* binding */ ATTR_CODE_COLUMN_NUMBER),\n/* harmony export */   ATTR_CODE_FILE_PATH: () => (/* binding */ ATTR_CODE_FILE_PATH),\n/* harmony export */   ATTR_CODE_FUNCTION_NAME: () => (/* binding */ ATTR_CODE_FUNCTION_NAME),\n/* harmony export */   ATTR_CODE_LINE_NUMBER: () => (/* binding */ ATTR_CODE_LINE_NUMBER),\n/* harmony export */   ATTR_CODE_STACKTRACE: () => (/* binding */ ATTR_CODE_STACKTRACE),\n/* harmony export */   ATTR_DB_COLLECTION_NAME: () => (/* binding */ ATTR_DB_COLLECTION_NAME),\n/* harmony export */   ATTR_DB_NAMESPACE: () => (/* binding */ ATTR_DB_NAMESPACE),\n/* harmony export */   ATTR_DB_OPERATION_BATCH_SIZE: () => (/* binding */ ATTR_DB_OPERATION_BATCH_SIZE),\n/* harmony export */   ATTR_DB_OPERATION_NAME: () => (/* binding */ ATTR_DB_OPERATION_NAME),\n/* harmony export */   ATTR_DB_QUERY_SUMMARY: () => (/* binding */ ATTR_DB_QUERY_SUMMARY),\n/* harmony export */   ATTR_DB_QUERY_TEXT: () => (/* binding */ ATTR_DB_QUERY_TEXT),\n/* harmony export */   ATTR_DB_RESPONSE_STATUS_CODE: () => (/* binding */ ATTR_DB_RESPONSE_STATUS_CODE),\n/* harmony export */   ATTR_DB_STORED_PROCEDURE_NAME: () => (/* binding */ ATTR_DB_STORED_PROCEDURE_NAME),\n/* harmony export */   ATTR_DB_SYSTEM_NAME: () => (/* binding */ ATTR_DB_SYSTEM_NAME),\n/* harmony export */   ATTR_DOTNET_GC_HEAP_GENERATION: () => (/* binding */ ATTR_DOTNET_GC_HEAP_GENERATION),\n/* harmony export */   ATTR_ERROR_TYPE: () => (/* binding */ ATTR_ERROR_TYPE),\n/* harmony export */   ATTR_EXCEPTION_ESCAPED: () => (/* binding */ ATTR_EXCEPTION_ESCAPED),\n/* harmony export */   ATTR_EXCEPTION_MESSAGE: () => (/* binding */ ATTR_EXCEPTION_MESSAGE),\n/* harmony export */   ATTR_EXCEPTION_STACKTRACE: () => (/* binding */ ATTR_EXCEPTION_STACKTRACE),\n/* harmony export */   ATTR_EXCEPTION_TYPE: () => (/* binding */ ATTR_EXCEPTION_TYPE),\n/* harmony export */   ATTR_HTTP_REQUEST_HEADER: () => (/* binding */ ATTR_HTTP_REQUEST_HEADER),\n/* harmony export */   ATTR_HTTP_REQUEST_METHOD: () => (/* binding */ ATTR_HTTP_REQUEST_METHOD),\n/* harmony export */   ATTR_HTTP_REQUEST_METHOD_ORIGINAL: () => (/* binding */ ATTR_HTTP_REQUEST_METHOD_ORIGINAL),\n/* harmony export */   ATTR_HTTP_REQUEST_RESEND_COUNT: () => (/* binding */ ATTR_HTTP_REQUEST_RESEND_COUNT),\n/* harmony export */   ATTR_HTTP_RESPONSE_HEADER: () => (/* binding */ ATTR_HTTP_RESPONSE_HEADER),\n/* harmony export */   ATTR_HTTP_RESPONSE_STATUS_CODE: () => (/* binding */ ATTR_HTTP_RESPONSE_STATUS_CODE),\n/* harmony export */   ATTR_HTTP_ROUTE: () => (/* binding */ ATTR_HTTP_ROUTE),\n/* harmony export */   ATTR_JVM_GC_ACTION: () => (/* binding */ ATTR_JVM_GC_ACTION),\n/* harmony export */   ATTR_JVM_GC_NAME: () => (/* binding */ ATTR_JVM_GC_NAME),\n/* harmony export */   ATTR_JVM_MEMORY_POOL_NAME: () => (/* binding */ ATTR_JVM_MEMORY_POOL_NAME),\n/* harmony export */   ATTR_JVM_MEMORY_TYPE: () => (/* binding */ ATTR_JVM_MEMORY_TYPE),\n/* harmony export */   ATTR_JVM_THREAD_DAEMON: () => (/* binding */ ATTR_JVM_THREAD_DAEMON),\n/* harmony export */   ATTR_JVM_THREAD_STATE: () => (/* binding */ ATTR_JVM_THREAD_STATE),\n/* harmony export */   ATTR_NETWORK_LOCAL_ADDRESS: () => (/* binding */ ATTR_NETWORK_LOCAL_ADDRESS),\n/* harmony export */   ATTR_NETWORK_LOCAL_PORT: () => (/* binding */ ATTR_NETWORK_LOCAL_PORT),\n/* harmony export */   ATTR_NETWORK_PEER_ADDRESS: () => (/* binding */ ATTR_NETWORK_PEER_ADDRESS),\n/* harmony export */   ATTR_NETWORK_PEER_PORT: () => (/* binding */ ATTR_NETWORK_PEER_PORT),\n/* harmony export */   ATTR_NETWORK_PROTOCOL_NAME: () => (/* binding */ ATTR_NETWORK_PROTOCOL_NAME),\n/* harmony export */   ATTR_NETWORK_PROTOCOL_VERSION: () => (/* binding */ ATTR_NETWORK_PROTOCOL_VERSION),\n/* harmony export */   ATTR_NETWORK_TRANSPORT: () => (/* binding */ ATTR_NETWORK_TRANSPORT),\n/* harmony export */   ATTR_NETWORK_TYPE: () => (/* binding */ ATTR_NETWORK_TYPE),\n/* harmony export */   ATTR_OTEL_SCOPE_NAME: () => (/* binding */ ATTR_OTEL_SCOPE_NAME),\n/* harmony export */   ATTR_OTEL_SCOPE_VERSION: () => (/* binding */ ATTR_OTEL_SCOPE_VERSION),\n/* harmony export */   ATTR_OTEL_STATUS_CODE: () => (/* binding */ ATTR_OTEL_STATUS_CODE),\n/* harmony export */   ATTR_OTEL_STATUS_DESCRIPTION: () => (/* binding */ ATTR_OTEL_STATUS_DESCRIPTION),\n/* harmony export */   ATTR_SERVER_ADDRESS: () => (/* binding */ ATTR_SERVER_ADDRESS),\n/* harmony export */   ATTR_SERVER_PORT: () => (/* binding */ ATTR_SERVER_PORT),\n/* harmony export */   ATTR_SERVICE_NAME: () => (/* binding */ ATTR_SERVICE_NAME),\n/* harmony export */   ATTR_SERVICE_VERSION: () => (/* binding */ ATTR_SERVICE_VERSION),\n/* harmony export */   ATTR_SIGNALR_CONNECTION_STATUS: () => (/* binding */ ATTR_SIGNALR_CONNECTION_STATUS),\n/* harmony export */   ATTR_SIGNALR_TRANSPORT: () => (/* binding */ ATTR_SIGNALR_TRANSPORT),\n/* harmony export */   ATTR_TELEMETRY_SDK_LANGUAGE: () => (/* binding */ ATTR_TELEMETRY_SDK_LANGUAGE),\n/* harmony export */   ATTR_TELEMETRY_SDK_NAME: () => (/* binding */ ATTR_TELEMETRY_SDK_NAME),\n/* harmony export */   ATTR_TELEMETRY_SDK_VERSION: () => (/* binding */ ATTR_TELEMETRY_SDK_VERSION),\n/* harmony export */   ATTR_URL_FRAGMENT: () => (/* binding */ ATTR_URL_FRAGMENT),\n/* harmony export */   ATTR_URL_FULL: () => (/* binding */ ATTR_URL_FULL),\n/* harmony export */   ATTR_URL_PATH: () => (/* binding */ ATTR_URL_PATH),\n/* harmony export */   ATTR_URL_QUERY: () => (/* binding */ ATTR_URL_QUERY),\n/* harmony export */   ATTR_URL_SCHEME: () => (/* binding */ ATTR_URL_SCHEME),\n/* harmony export */   ATTR_USER_AGENT_ORIGINAL: () => (/* binding */ ATTR_USER_AGENT_ORIGINAL),\n/* harmony export */   DB_SYSTEM_NAME_VALUE_MARIADB: () => (/* binding */ DB_SYSTEM_NAME_VALUE_MARIADB),\n/* harmony export */   DB_SYSTEM_NAME_VALUE_MICROSOFT_SQL_SERVER: () => (/* binding */ DB_SYSTEM_NAME_VALUE_MICROSOFT_SQL_SERVER),\n/* harmony export */   DB_SYSTEM_NAME_VALUE_MYSQL: () => (/* binding */ DB_SYSTEM_NAME_VALUE_MYSQL),\n/* harmony export */   DB_SYSTEM_NAME_VALUE_POSTGRESQL: () => (/* binding */ DB_SYSTEM_NAME_VALUE_POSTGRESQL),\n/* harmony export */   DOTNET_GC_HEAP_GENERATION_VALUE_GEN0: () => (/* binding */ DOTNET_GC_HEAP_GENERATION_VALUE_GEN0),\n/* harmony export */   DOTNET_GC_HEAP_GENERATION_VALUE_GEN1: () => (/* binding */ DOTNET_GC_HEAP_GENERATION_VALUE_GEN1),\n/* harmony export */   DOTNET_GC_HEAP_GENERATION_VALUE_GEN2: () => (/* binding */ DOTNET_GC_HEAP_GENERATION_VALUE_GEN2),\n/* harmony export */   DOTNET_GC_HEAP_GENERATION_VALUE_LOH: () => (/* binding */ DOTNET_GC_HEAP_GENERATION_VALUE_LOH),\n/* harmony export */   DOTNET_GC_HEAP_GENERATION_VALUE_POH: () => (/* binding */ DOTNET_GC_HEAP_GENERATION_VALUE_POH),\n/* harmony export */   ERROR_TYPE_VALUE_OTHER: () => (/* binding */ ERROR_TYPE_VALUE_OTHER),\n/* harmony export */   HTTP_REQUEST_METHOD_VALUE_CONNECT: () => (/* binding */ HTTP_REQUEST_METHOD_VALUE_CONNECT),\n/* harmony export */   HTTP_REQUEST_METHOD_VALUE_DELETE: () => (/* binding */ HTTP_REQUEST_METHOD_VALUE_DELETE),\n/* harmony export */   HTTP_REQUEST_METHOD_VALUE_GET: () => (/* binding */ HTTP_REQUEST_METHOD_VALUE_GET),\n/* harmony export */   HTTP_REQUEST_METHOD_VALUE_HEAD: () => (/* binding */ HTTP_REQUEST_METHOD_VALUE_HEAD),\n/* harmony export */   HTTP_REQUEST_METHOD_VALUE_OPTIONS: () => (/* binding */ HTTP_REQUEST_METHOD_VALUE_OPTIONS),\n/* harmony export */   HTTP_REQUEST_METHOD_VALUE_OTHER: () => (/* binding */ HTTP_REQUEST_METHOD_VALUE_OTHER),\n/* harmony export */   HTTP_REQUEST_METHOD_VALUE_PATCH: () => (/* binding */ HTTP_REQUEST_METHOD_VALUE_PATCH),\n/* harmony export */   HTTP_REQUEST_METHOD_VALUE_POST: () => (/* binding */ HTTP_REQUEST_METHOD_VALUE_POST),\n/* harmony export */   HTTP_REQUEST_METHOD_VALUE_PUT: () => (/* binding */ HTTP_REQUEST_METHOD_VALUE_PUT),\n/* harmony export */   HTTP_REQUEST_METHOD_VALUE_TRACE: () => (/* binding */ HTTP_REQUEST_METHOD_VALUE_TRACE),\n/* harmony export */   JVM_MEMORY_TYPE_VALUE_HEAP: () => (/* binding */ JVM_MEMORY_TYPE_VALUE_HEAP),\n/* harmony export */   JVM_MEMORY_TYPE_VALUE_NON_HEAP: () => (/* binding */ JVM_MEMORY_TYPE_VALUE_NON_HEAP),\n/* harmony export */   JVM_THREAD_STATE_VALUE_BLOCKED: () => (/* binding */ JVM_THREAD_STATE_VALUE_BLOCKED),\n/* harmony export */   JVM_THREAD_STATE_VALUE_NEW: () => (/* binding */ JVM_THREAD_STATE_VALUE_NEW),\n/* harmony export */   JVM_THREAD_STATE_VALUE_RUNNABLE: () => (/* binding */ JVM_THREAD_STATE_VALUE_RUNNABLE),\n/* harmony export */   JVM_THREAD_STATE_VALUE_TERMINATED: () => (/* binding */ JVM_THREAD_STATE_VALUE_TERMINATED),\n/* harmony export */   JVM_THREAD_STATE_VALUE_TIMED_WAITING: () => (/* binding */ JVM_THREAD_STATE_VALUE_TIMED_WAITING),\n/* harmony export */   JVM_THREAD_STATE_VALUE_WAITING: () => (/* binding */ JVM_THREAD_STATE_VALUE_WAITING),\n/* harmony export */   NETWORK_TRANSPORT_VALUE_PIPE: () => (/* binding */ NETWORK_TRANSPORT_VALUE_PIPE),\n/* harmony export */   NETWORK_TRANSPORT_VALUE_QUIC: () => (/* binding */ NETWORK_TRANSPORT_VALUE_QUIC),\n/* harmony export */   NETWORK_TRANSPORT_VALUE_TCP: () => (/* binding */ NETWORK_TRANSPORT_VALUE_TCP),\n/* harmony export */   NETWORK_TRANSPORT_VALUE_UDP: () => (/* binding */ NETWORK_TRANSPORT_VALUE_UDP),\n/* harmony export */   NETWORK_TRANSPORT_VALUE_UNIX: () => (/* binding */ NETWORK_TRANSPORT_VALUE_UNIX),\n/* harmony export */   NETWORK_TYPE_VALUE_IPV4: () => (/* binding */ NETWORK_TYPE_VALUE_IPV4),\n/* harmony export */   NETWORK_TYPE_VALUE_IPV6: () => (/* binding */ NETWORK_TYPE_VALUE_IPV6),\n/* harmony export */   OTEL_STATUS_CODE_VALUE_ERROR: () => (/* binding */ OTEL_STATUS_CODE_VALUE_ERROR),\n/* harmony export */   OTEL_STATUS_CODE_VALUE_OK: () => (/* binding */ OTEL_STATUS_CODE_VALUE_OK),\n/* harmony export */   SIGNALR_CONNECTION_STATUS_VALUE_APP_SHUTDOWN: () => (/* binding */ SIGNALR_CONNECTION_STATUS_VALUE_APP_SHUTDOWN),\n/* harmony export */   SIGNALR_CONNECTION_STATUS_VALUE_NORMAL_CLOSURE: () => (/* binding */ SIGNALR_CONNECTION_STATUS_VALUE_NORMAL_CLOSURE),\n/* harmony export */   SIGNALR_CONNECTION_STATUS_VALUE_TIMEOUT: () => (/* binding */ SIGNALR_CONNECTION_STATUS_VALUE_TIMEOUT),\n/* harmony export */   SIGNALR_TRANSPORT_VALUE_LONG_POLLING: () => (/* binding */ SIGNALR_TRANSPORT_VALUE_LONG_POLLING),\n/* harmony export */   SIGNALR_TRANSPORT_VALUE_SERVER_SENT_EVENTS: () => (/* binding */ SIGNALR_TRANSPORT_VALUE_SERVER_SENT_EVENTS),\n/* harmony export */   SIGNALR_TRANSPORT_VALUE_WEB_SOCKETS: () => (/* binding */ SIGNALR_TRANSPORT_VALUE_WEB_SOCKETS),\n/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_CPP: () => (/* binding */ TELEMETRY_SDK_LANGUAGE_VALUE_CPP),\n/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_DOTNET: () => (/* binding */ TELEMETRY_SDK_LANGUAGE_VALUE_DOTNET),\n/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_ERLANG: () => (/* binding */ TELEMETRY_SDK_LANGUAGE_VALUE_ERLANG),\n/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_GO: () => (/* binding */ TELEMETRY_SDK_LANGUAGE_VALUE_GO),\n/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_JAVA: () => (/* binding */ TELEMETRY_SDK_LANGUAGE_VALUE_JAVA),\n/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_NODEJS: () => (/* binding */ TELEMETRY_SDK_LANGUAGE_VALUE_NODEJS),\n/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_PHP: () => (/* binding */ TELEMETRY_SDK_LANGUAGE_VALUE_PHP),\n/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_PYTHON: () => (/* binding */ TELEMETRY_SDK_LANGUAGE_VALUE_PYTHON),\n/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_RUBY: () => (/* binding */ TELEMETRY_SDK_LANGUAGE_VALUE_RUBY),\n/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_RUST: () => (/* binding */ TELEMETRY_SDK_LANGUAGE_VALUE_RUST),\n/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_SWIFT: () => (/* binding */ TELEMETRY_SDK_LANGUAGE_VALUE_SWIFT),\n/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_WEBJS: () => (/* binding */ TELEMETRY_SDK_LANGUAGE_VALUE_WEBJS)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n//----------------------------------------------------------------------------------------------------------\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates/registry/stable/attributes.ts.j2\n//----------------------------------------------------------------------------------------------------------\n/**\n * ASP.NET Core exception middleware handling result.\n *\n * @example handled\n * @example unhandled\n */\nconst ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT = 'aspnetcore.diagnostics.exception.result';\n/**\n * Enum value \"aborted\" for attribute {@link ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT}.\n *\n * Exception handling didn't run because the request was aborted.\n */\nconst ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_ABORTED = \"aborted\";\n/**\n * Enum value \"handled\" for attribute {@link ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT}.\n *\n * Exception was handled by the exception handling middleware.\n */\nconst ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_HANDLED = \"handled\";\n/**\n * Enum value \"skipped\" for attribute {@link ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT}.\n *\n * Exception handling was skipped because the response had started.\n */\nconst ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_SKIPPED = \"skipped\";\n/**\n * Enum value \"unhandled\" for attribute {@link ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT}.\n *\n * Exception was not handled by the exception handling middleware.\n */\nconst ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_UNHANDLED = \"unhandled\";\n/**\n * Full type name of the [`IExceptionHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.diagnostics.iexceptionhandler) implementation that handled the exception.\n *\n * @example Contoso.MyHandler\n */\nconst ATTR_ASPNETCORE_DIAGNOSTICS_HANDLER_TYPE = 'aspnetcore.diagnostics.handler.type';\n/**\n * Rate limiting policy name.\n *\n * @example fixed\n * @example sliding\n * @example token\n */\nconst ATTR_ASPNETCORE_RATE_LIMITING_POLICY = 'aspnetcore.rate_limiting.policy';\n/**\n * Rate-limiting result, shows whether the lease was acquired or contains a rejection reason\n *\n * @example acquired\n * @example request_canceled\n */\nconst ATTR_ASPNETCORE_RATE_LIMITING_RESULT = 'aspnetcore.rate_limiting.result';\n/**\n * Enum value \"acquired\" for attribute {@link ATTR_ASPNETCORE_RATE_LIMITING_RESULT}.\n *\n * Lease was acquired\n */\nconst ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ACQUIRED = \"acquired\";\n/**\n * Enum value \"endpoint_limiter\" for attribute {@link ATTR_ASPNETCORE_RATE_LIMITING_RESULT}.\n *\n * Lease request was rejected by the endpoint limiter\n */\nconst ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ENDPOINT_LIMITER = \"endpoint_limiter\";\n/**\n * Enum value \"global_limiter\" for attribute {@link ATTR_ASPNETCORE_RATE_LIMITING_RESULT}.\n *\n * Lease request was rejected by the global limiter\n */\nconst ASPNETCORE_RATE_LIMITING_RESULT_VALUE_GLOBAL_LIMITER = \"global_limiter\";\n/**\n * Enum value \"request_canceled\" for attribute {@link ATTR_ASPNETCORE_RATE_LIMITING_RESULT}.\n *\n * Lease request was canceled\n */\nconst ASPNETCORE_RATE_LIMITING_RESULT_VALUE_REQUEST_CANCELED = \"request_canceled\";\n/**\n * Flag indicating if request was handled by the application pipeline.\n *\n * @example true\n */\nconst ATTR_ASPNETCORE_REQUEST_IS_UNHANDLED = 'aspnetcore.request.is_unhandled';\n/**\n * A value that indicates whether the matched route is a fallback route.\n *\n * @example true\n */\nconst ATTR_ASPNETCORE_ROUTING_IS_FALLBACK = 'aspnetcore.routing.is_fallback';\n/**\n * Match result - success or failure\n *\n * @example success\n * @example failure\n */\nconst ATTR_ASPNETCORE_ROUTING_MATCH_STATUS = 'aspnetcore.routing.match_status';\n/**\n * Enum value \"failure\" for attribute {@link ATTR_ASPNETCORE_ROUTING_MATCH_STATUS}.\n *\n * Match failed\n */\nconst ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_FAILURE = \"failure\";\n/**\n * Enum value \"success\" for attribute {@link ATTR_ASPNETCORE_ROUTING_MATCH_STATUS}.\n *\n * Match succeeded\n */\nconst ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_SUCCESS = \"success\";\n/**\n * A value that indicates whether the user is authenticated.\n *\n * @example true\n */\nconst ATTR_ASPNETCORE_USER_IS_AUTHENTICATED = 'aspnetcore.user.is_authenticated';\n/**\n * Client address - domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n *\n * @example client.example.com\n * @example 10.1.2.80\n * @example /tmp/my.sock\n *\n * @note When observed from the server side, and when communicating through an intermediary, `client.address` **SHOULD** represent the client address behind any intermediaries,  for example proxies, if it's available.\n */\nconst ATTR_CLIENT_ADDRESS = 'client.address';\n/**\n * Client port number.\n *\n * @example 65123\n *\n * @note When observed from the server side, and when communicating through an intermediary, `client.port` **SHOULD** represent the client port behind any intermediaries,  for example proxies, if it's available.\n */\nconst ATTR_CLIENT_PORT = 'client.port';\n/**\n * The column number in `code.file.path` best representing the operation. It **SHOULD** point within the code unit named in `code.function.name`. This attribute **MUST NOT** be used on the Profile signal since the data is already captured in 'message Line'. This constraint is imposed to prevent redundancy and maintain data integrity.\n *\n * @example 16\n */\nconst ATTR_CODE_COLUMN_NUMBER = 'code.column.number';\n/**\n * The source code file name that identifies the code unit as uniquely as possible (preferably an absolute file path). This attribute **MUST NOT** be used on the Profile signal since the data is already captured in 'message Function'. This constraint is imposed to prevent redundancy and maintain data integrity.\n *\n * @example \"/usr/local/MyApplication/content_root/app/index.php\"\n */\nconst ATTR_CODE_FILE_PATH = 'code.file.path';\n/**\n * The method or function fully-qualified name without arguments. The value should fit the natural representation of the language runtime, which is also likely the same used within `code.stacktrace` attribute value. This attribute **MUST NOT** be used on the Profile signal since the data is already captured in 'message Function'. This constraint is imposed to prevent redundancy and maintain data integrity.\n *\n * @example com.example.MyHttpService.serveRequest\n * @example GuzzleHttp\\\\Client::transfer\n * @example fopen\n *\n * @note Values and format depends on each language runtime, thus it is impossible to provide an exhaustive list of examples.\n * The values are usually the same (or prefixes of) the ones found in native stack trace representation stored in\n * `code.stacktrace` without information on arguments.\n *\n * Examples:\n *\n *   - Java method: `com.example.MyHttpService.serveRequest`\n *   - Java anonymous class method: `com.mycompany.Main$1.myMethod`\n *   - Java lambda method: `com.mycompany.Main$$Lambda/0x0000748ae4149c00.myMethod`\n *   - PHP function: `GuzzleHttp\\Client::transfer`\n *   - Go function: `github.com/my/repo/pkg.foo.func5`\n *   - Elixir: `OpenTelemetry.Ctx.new`\n *   - Erlang: `opentelemetry_ctx:new`\n *   - Rust: `playground::my_module::my_cool_func`\n *   - C function: `fopen`\n */\nconst ATTR_CODE_FUNCTION_NAME = 'code.function.name';\n/**\n * The line number in `code.file.path` best representing the operation. It **SHOULD** point within the code unit named in `code.function.name`. This attribute **MUST NOT** be used on the Profile signal since the data is already captured in 'message Line'. This constraint is imposed to prevent redundancy and maintain data integrity.\n *\n * @example 42\n */\nconst ATTR_CODE_LINE_NUMBER = 'code.line.number';\n/**\n * A stacktrace as a string in the natural representation for the language runtime. The representation is identical to [`exception.stacktrace`](/docs/exceptions/exceptions-spans.md#stacktrace-representation). This attribute **MUST NOT** be used on the Profile signal since the data is already captured in 'message Location'. This constraint is imposed to prevent redundancy and maintain data integrity.\n *\n * @example \"at com.example.GenerateTrace.methodB(GenerateTrace.java:13)\\\\n at com.example.GenerateTrace.methodA(GenerateTrace.java:9)\\\\n at com.example.GenerateTrace.main(GenerateTrace.java:5)\\\\n\"\n */\nconst ATTR_CODE_STACKTRACE = 'code.stacktrace';\n/**\n * The name of a collection (table, container) within the database.\n *\n * @example public.users\n * @example customers\n *\n * @note It is **RECOMMENDED** to capture the value as provided by the application\n * without attempting to do any case normalization.\n *\n * The collection name **SHOULD NOT** be extracted from `db.query.text`,\n * when the database system supports query text with multiple collections\n * in non-batch operations.\n *\n * For batch operations, if the individual operations are known to have the same\n * collection name then that collection name **SHOULD** be used.\n */\nconst ATTR_DB_COLLECTION_NAME = 'db.collection.name';\n/**\n * The name of the database, fully qualified within the server address and port.\n *\n * @example customers\n * @example test.users\n *\n * @note If a database system has multiple namespace components, they **SHOULD** be concatenated from the most general to the most specific namespace component, using `|` as a separator between the components. Any missing components (and their associated separators) **SHOULD** be omitted.\n * Semantic conventions for individual database systems **SHOULD** document what `db.namespace` means in the context of that system.\n * It is **RECOMMENDED** to capture the value as provided by the application without attempting to do any case normalization.\n */\nconst ATTR_DB_NAMESPACE = 'db.namespace';\n/**\n * The number of queries included in a batch operation.\n *\n * @example 2\n * @example 3\n * @example 4\n *\n * @note Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` **SHOULD** never be `1`.\n */\nconst ATTR_DB_OPERATION_BATCH_SIZE = 'db.operation.batch.size';\n/**\n * The name of the operation or command being executed.\n *\n * @example findAndModify\n * @example HMSET\n * @example SELECT\n *\n * @note It is **RECOMMENDED** to capture the value as provided by the application\n * without attempting to do any case normalization.\n *\n * The operation name **SHOULD NOT** be extracted from `db.query.text`,\n * when the database system supports query text with multiple operations\n * in non-batch operations.\n *\n * If spaces can occur in the operation name, multiple consecutive spaces\n * **SHOULD** be normalized to a single space.\n *\n * For batch operations, if the individual operations are known to have the same operation name\n * then that operation name **SHOULD** be used prepended by `BATCH `,\n * otherwise `db.operation.name` **SHOULD** be `BATCH` or some other database\n * system specific term if more applicable.\n */\nconst ATTR_DB_OPERATION_NAME = 'db.operation.name';\n/**\n * Low cardinality summary of a database query.\n *\n * @example SELECT wuser_table\n * @example INSERT shipping_details SELECT orders\n * @example get user by id\n *\n * @note The query summary describes a class of database queries and is useful\n * as a grouping key, especially when analyzing telemetry for database\n * calls involving complex queries.\n *\n * Summary may be available to the instrumentation through\n * instrumentation hooks or other means. If it is not available, instrumentations\n * that support query parsing **SHOULD** generate a summary following\n * [Generating query summary](/docs/database/database-spans.md#generating-a-summary-of-the-query)\n * section.\n */\nconst ATTR_DB_QUERY_SUMMARY = 'db.query.summary';\n/**\n * The database query being executed.\n *\n * @example SELECT * FROM wuser_table where username = ?\n * @example SET mykey ?\n *\n * @note For sanitization see [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).\n * For batch operations, if the individual operations are known to have the same query text then that query text **SHOULD** be used, otherwise all of the individual query texts **SHOULD** be concatenated with separator `; ` or some other database system specific separator if more applicable.\n * Parameterized query text **SHOULD NOT** be sanitized. Even though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.\n */\nconst ATTR_DB_QUERY_TEXT = 'db.query.text';\n/**\n * Database response status code.\n *\n * @example 102\n * @example ORA-17002\n * @example 08P01\n * @example 404\n *\n * @note The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.\n * Semantic conventions for individual database systems **SHOULD** document what `db.response.status_code` means in the context of that system.\n */\nconst ATTR_DB_RESPONSE_STATUS_CODE = 'db.response.status_code';\n/**\n * The name of a stored procedure within the database.\n *\n * @example GetCustomer\n *\n * @note It is **RECOMMENDED** to capture the value as provided by the application\n * without attempting to do any case normalization.\n *\n * For batch operations, if the individual operations are known to have the same\n * stored procedure name then that stored procedure name **SHOULD** be used.\n */\nconst ATTR_DB_STORED_PROCEDURE_NAME = 'db.stored_procedure.name';\n/**\n * The database management system (DBMS) product as identified by the client instrumentation.\n *\n * @note The actual DBMS may differ from the one identified by the client. For example, when using PostgreSQL client libraries to connect to a CockroachDB, the `db.system.name` is set to `postgresql` based on the instrumentation's best knowledge.\n */\nconst ATTR_DB_SYSTEM_NAME = 'db.system.name';\n/**\n * Enum value \"mariadb\" for attribute {@link ATTR_DB_SYSTEM_NAME}.\n *\n * [MariaDB](https://mariadb.org/)\n */\nconst DB_SYSTEM_NAME_VALUE_MARIADB = \"mariadb\";\n/**\n * Enum value \"microsoft.sql_server\" for attribute {@link ATTR_DB_SYSTEM_NAME}.\n *\n * [Microsoft SQL Server](https://www.microsoft.com/sql-server)\n */\nconst DB_SYSTEM_NAME_VALUE_MICROSOFT_SQL_SERVER = \"microsoft.sql_server\";\n/**\n * Enum value \"mysql\" for attribute {@link ATTR_DB_SYSTEM_NAME}.\n *\n * [MySQL](https://www.mysql.com/)\n */\nconst DB_SYSTEM_NAME_VALUE_MYSQL = \"mysql\";\n/**\n * Enum value \"postgresql\" for attribute {@link ATTR_DB_SYSTEM_NAME}.\n *\n * [PostgreSQL](https://www.postgresql.org/)\n */\nconst DB_SYSTEM_NAME_VALUE_POSTGRESQL = \"postgresql\";\n/**\n * Name of the garbage collector managed heap generation.\n *\n * @example gen0\n * @example gen1\n * @example gen2\n */\nconst ATTR_DOTNET_GC_HEAP_GENERATION = 'dotnet.gc.heap.generation';\n/**\n * Enum value \"gen0\" for attribute {@link ATTR_DOTNET_GC_HEAP_GENERATION}.\n *\n * Generation 0\n */\nconst DOTNET_GC_HEAP_GENERATION_VALUE_GEN0 = \"gen0\";\n/**\n * Enum value \"gen1\" for attribute {@link ATTR_DOTNET_GC_HEAP_GENERATION}.\n *\n * Generation 1\n */\nconst DOTNET_GC_HEAP_GENERATION_VALUE_GEN1 = \"gen1\";\n/**\n * Enum value \"gen2\" for attribute {@link ATTR_DOTNET_GC_HEAP_GENERATION}.\n *\n * Generation 2\n */\nconst DOTNET_GC_HEAP_GENERATION_VALUE_GEN2 = \"gen2\";\n/**\n * Enum value \"loh\" for attribute {@link ATTR_DOTNET_GC_HEAP_GENERATION}.\n *\n * Large Object Heap\n */\nconst DOTNET_GC_HEAP_GENERATION_VALUE_LOH = \"loh\";\n/**\n * Enum value \"poh\" for attribute {@link ATTR_DOTNET_GC_HEAP_GENERATION}.\n *\n * Pinned Object Heap\n */\nconst DOTNET_GC_HEAP_GENERATION_VALUE_POH = \"poh\";\n/**\n * Describes a class of error the operation ended with.\n *\n * @example timeout\n * @example java.net.UnknownHostException\n * @example server_certificate_invalid\n * @example 500\n *\n * @note The `error.type` **SHOULD** be predictable, and **SHOULD** have low cardinality.\n *\n * When `error.type` is set to a type (e.g., an exception type), its\n * canonical class name identifying the type within the artifact **SHOULD** be used.\n *\n * Instrumentations **SHOULD** document the list of errors they report.\n *\n * The cardinality of `error.type` within one instrumentation library **SHOULD** be low.\n * Telemetry consumers that aggregate data from multiple instrumentation libraries and applications\n * should be prepared for `error.type` to have high cardinality at query time when no\n * additional filters are applied.\n *\n * If the operation has completed successfully, instrumentations **SHOULD NOT** set `error.type`.\n *\n * If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\n * it's **RECOMMENDED** to:\n *\n *   - Use a domain-specific attribute\n *   - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n */\nconst ATTR_ERROR_TYPE = 'error.type';\n/**\n * Enum value \"_OTHER\" for attribute {@link ATTR_ERROR_TYPE}.\n *\n * A fallback error value to be used when the instrumentation doesn't define a custom value.\n */\nconst ERROR_TYPE_VALUE_OTHER = \"_OTHER\";\n/**\n * Indicates that the exception is escaping the scope of the span.\n *\n * @deprecated It's no longer recommended to record exceptions that are handled and do not escape the scope of a span.\n */\nconst ATTR_EXCEPTION_ESCAPED = 'exception.escaped';\n/**\n * The exception message.\n *\n * @example Division by zero\n * @example Can't convert 'int' object to str implicitly\n */\nconst ATTR_EXCEPTION_MESSAGE = 'exception.message';\n/**\n * A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.\n *\n * @example \"Exception in thread \"main\" java.lang.RuntimeException: Test exception\\\\n at com.example.GenerateTrace.methodB(GenerateTrace.java:13)\\\\n at com.example.GenerateTrace.methodA(GenerateTrace.java:9)\\\\n at com.example.GenerateTrace.main(GenerateTrace.java:5)\\\\n\"\n */\nconst ATTR_EXCEPTION_STACKTRACE = 'exception.stacktrace';\n/**\n * The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.\n *\n * @example java.net.ConnectException\n * @example OSError\n */\nconst ATTR_EXCEPTION_TYPE = 'exception.type';\n/**\n * HTTP request headers, `<key>` being the normalized HTTP Header name (lowercase), the value being the header values.\n *\n * @example [\"application/json\"]\n * @example [\"1.2.3.4\", \"1.2.3.5\"]\n *\n * @note Instrumentations **SHOULD** require an explicit configuration of which headers are to be captured.\n * Including all request headers can be a security risk - explicit configuration helps avoid leaking sensitive information.\n *\n * The `User-Agent` header is already captured in the `user_agent.original` attribute.\n * Users **MAY** explicitly configure instrumentations to capture them even though it is not recommended.\n *\n * The attribute value **MUST** consist of either multiple header values as an array of strings\n * or a single-item array containing a possibly comma-concatenated string, depending on the way\n * the HTTP library provides access to headers.\n *\n * Examples:\n *\n *   - A header `Content-Type: application/json` **SHOULD** be recorded as the `http.request.header.content-type`\n *     attribute with value `[\"application/json\"]`.\n *   - A header `X-Forwarded-For: 1.2.3.4, 1.2.3.5` **SHOULD** be recorded as the `http.request.header.x-forwarded-for`\n *     attribute with value `[\"1.2.3.4\", \"1.2.3.5\"]` or `[\"1.2.3.4, 1.2.3.5\"]` depending on the HTTP library.\n */\nconst ATTR_HTTP_REQUEST_HEADER = (key) => `http.request.header.${key}`;\n/**\n * HTTP request method.\n *\n * @example GET\n * @example POST\n * @example HEAD\n *\n * @note HTTP request method value **SHOULD** be \"known\" to the instrumentation.\n * By default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\n * and the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n *\n * If the HTTP request method is not known to instrumentation, it **MUST** set the `http.request.method` attribute to `_OTHER`.\n *\n * If the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it **MUST** provide a way to override\n * the list of known HTTP methods. If this override is done via environment variable, then the environment variable **MUST** be named\n * OTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n * (this list **MUST** be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n *\n * HTTP method names are case-sensitive and `http.request.method` attribute value **MUST** match a known HTTP method name exactly.\n * Instrumentations for specific web frameworks that consider HTTP methods to be case insensitive, **SHOULD** populate a canonical equivalent.\n * Tracing instrumentations that do so, **MUST** also set `http.request.method_original` to the original value.\n */\nconst ATTR_HTTP_REQUEST_METHOD = 'http.request.method';\n/**\n * Enum value \"_OTHER\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * Any HTTP method that the instrumentation has no prior knowledge of.\n */\nconst HTTP_REQUEST_METHOD_VALUE_OTHER = \"_OTHER\";\n/**\n * Enum value \"CONNECT\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * CONNECT method.\n */\nconst HTTP_REQUEST_METHOD_VALUE_CONNECT = \"CONNECT\";\n/**\n * Enum value \"DELETE\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * DELETE method.\n */\nconst HTTP_REQUEST_METHOD_VALUE_DELETE = \"DELETE\";\n/**\n * Enum value \"GET\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * GET method.\n */\nconst HTTP_REQUEST_METHOD_VALUE_GET = \"GET\";\n/**\n * Enum value \"HEAD\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * HEAD method.\n */\nconst HTTP_REQUEST_METHOD_VALUE_HEAD = \"HEAD\";\n/**\n * Enum value \"OPTIONS\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * OPTIONS method.\n */\nconst HTTP_REQUEST_METHOD_VALUE_OPTIONS = \"OPTIONS\";\n/**\n * Enum value \"PATCH\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * PATCH method.\n */\nconst HTTP_REQUEST_METHOD_VALUE_PATCH = \"PATCH\";\n/**\n * Enum value \"POST\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * POST method.\n */\nconst HTTP_REQUEST_METHOD_VALUE_POST = \"POST\";\n/**\n * Enum value \"PUT\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * PUT method.\n */\nconst HTTP_REQUEST_METHOD_VALUE_PUT = \"PUT\";\n/**\n * Enum value \"TRACE\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * TRACE method.\n */\nconst HTTP_REQUEST_METHOD_VALUE_TRACE = \"TRACE\";\n/**\n * Original HTTP method sent by the client in the request line.\n *\n * @example GeT\n * @example ACL\n * @example foo\n */\nconst ATTR_HTTP_REQUEST_METHOD_ORIGINAL = 'http.request.method_original';\n/**\n * The ordinal number of request resending attempt (for any reason, including redirects).\n *\n * @example 3\n *\n * @note The resend count **SHOULD** be updated each time an HTTP request gets resent by the client, regardless of what was the cause of the resending (e.g. redirection, authorization failure, 503 Server Unavailable, network issues, or any other).\n */\nconst ATTR_HTTP_REQUEST_RESEND_COUNT = 'http.request.resend_count';\n/**\n * HTTP response headers, `<key>` being the normalized HTTP Header name (lowercase), the value being the header values.\n *\n * @example [\"application/json\"]\n * @example [\"abc\", \"def\"]\n *\n * @note Instrumentations **SHOULD** require an explicit configuration of which headers are to be captured.\n * Including all response headers can be a security risk - explicit configuration helps avoid leaking sensitive information.\n *\n * Users **MAY** explicitly configure instrumentations to capture them even though it is not recommended.\n *\n * The attribute value **MUST** consist of either multiple header values as an array of strings\n * or a single-item array containing a possibly comma-concatenated string, depending on the way\n * the HTTP library provides access to headers.\n *\n * Examples:\n *\n *   - A header `Content-Type: application/json` header **SHOULD** be recorded as the `http.request.response.content-type`\n *     attribute with value `[\"application/json\"]`.\n *   - A header `My-custom-header: abc, def` header **SHOULD** be recorded as the `http.response.header.my-custom-header`\n *     attribute with value `[\"abc\", \"def\"]` or `[\"abc, def\"]` depending on the HTTP library.\n */\nconst ATTR_HTTP_RESPONSE_HEADER = (key) => `http.response.header.${key}`;\n/**\n * [HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).\n *\n * @example 200\n */\nconst ATTR_HTTP_RESPONSE_STATUS_CODE = 'http.response.status_code';\n/**\n * The matched route, that is, the path template in the format used by the respective server framework.\n *\n * @example /users/:userID?\n * @example {controller}/{action}/{id?}\n *\n * @note **MUST NOT** be populated when this is not supported by the HTTP server framework as the route attribute should have low-cardinality and the URI path can NOT substitute it.\n * **SHOULD** include the [application root](/docs/http/http-spans.md#http-server-definitions) if there is one.\n */\nconst ATTR_HTTP_ROUTE = 'http.route';\n/**\n * Name of the garbage collector action.\n *\n * @example end of minor GC\n * @example end of major GC\n *\n * @note Garbage collector action is generally obtained via [GarbageCollectionNotificationInfo#getGcAction()](https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcAction()).\n */\nconst ATTR_JVM_GC_ACTION = 'jvm.gc.action';\n/**\n * Name of the garbage collector.\n *\n * @example G1 Young Generation\n * @example G1 Old Generation\n *\n * @note Garbage collector name is generally obtained via [GarbageCollectionNotificationInfo#getGcName()](https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcName()).\n */\nconst ATTR_JVM_GC_NAME = 'jvm.gc.name';\n/**\n * Name of the memory pool.\n *\n * @example G1 Old Gen\n * @example G1 Eden space\n * @example G1 Survivor Space\n *\n * @note Pool names are generally obtained via [MemoryPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/MemoryPoolMXBean.html#getName()).\n */\nconst ATTR_JVM_MEMORY_POOL_NAME = 'jvm.memory.pool.name';\n/**\n * The type of memory.\n *\n * @example heap\n * @example non_heap\n */\nconst ATTR_JVM_MEMORY_TYPE = 'jvm.memory.type';\n/**\n * Enum value \"heap\" for attribute {@link ATTR_JVM_MEMORY_TYPE}.\n *\n * Heap memory.\n */\nconst JVM_MEMORY_TYPE_VALUE_HEAP = \"heap\";\n/**\n * Enum value \"non_heap\" for attribute {@link ATTR_JVM_MEMORY_TYPE}.\n *\n * Non-heap memory\n */\nconst JVM_MEMORY_TYPE_VALUE_NON_HEAP = \"non_heap\";\n/**\n * Whether the thread is daemon or not.\n */\nconst ATTR_JVM_THREAD_DAEMON = 'jvm.thread.daemon';\n/**\n * State of the thread.\n *\n * @example runnable\n * @example blocked\n */\nconst ATTR_JVM_THREAD_STATE = 'jvm.thread.state';\n/**\n * Enum value \"blocked\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n *\n * A thread that is blocked waiting for a monitor lock is in this state.\n */\nconst JVM_THREAD_STATE_VALUE_BLOCKED = \"blocked\";\n/**\n * Enum value \"new\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n *\n * A thread that has not yet started is in this state.\n */\nconst JVM_THREAD_STATE_VALUE_NEW = \"new\";\n/**\n * Enum value \"runnable\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n *\n * A thread executing in the Java virtual machine is in this state.\n */\nconst JVM_THREAD_STATE_VALUE_RUNNABLE = \"runnable\";\n/**\n * Enum value \"terminated\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n *\n * A thread that has exited is in this state.\n */\nconst JVM_THREAD_STATE_VALUE_TERMINATED = \"terminated\";\n/**\n * Enum value \"timed_waiting\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n *\n * A thread that is waiting for another thread to perform an action for up to a specified waiting time is in this state.\n */\nconst JVM_THREAD_STATE_VALUE_TIMED_WAITING = \"timed_waiting\";\n/**\n * Enum value \"waiting\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n *\n * A thread that is waiting indefinitely for another thread to perform a particular action is in this state.\n */\nconst JVM_THREAD_STATE_VALUE_WAITING = \"waiting\";\n/**\n * Local address of the network connection - IP address or Unix domain socket name.\n *\n * @example 10.1.2.80\n * @example /tmp/my.sock\n */\nconst ATTR_NETWORK_LOCAL_ADDRESS = 'network.local.address';\n/**\n * Local port number of the network connection.\n *\n * @example 65123\n */\nconst ATTR_NETWORK_LOCAL_PORT = 'network.local.port';\n/**\n * Peer address of the network connection - IP address or Unix domain socket name.\n *\n * @example 10.1.2.80\n * @example /tmp/my.sock\n */\nconst ATTR_NETWORK_PEER_ADDRESS = 'network.peer.address';\n/**\n * Peer port number of the network connection.\n *\n * @example 65123\n */\nconst ATTR_NETWORK_PEER_PORT = 'network.peer.port';\n/**\n * [OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.\n *\n * @example amqp\n * @example http\n * @example mqtt\n *\n * @note The value **SHOULD** be normalized to lowercase.\n */\nconst ATTR_NETWORK_PROTOCOL_NAME = 'network.protocol.name';\n/**\n * The actual version of the protocol used for network communication.\n *\n * @example 1.1\n * @example 2\n *\n * @note If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute **SHOULD** be set to the negotiated version. If the actual protocol version is not known, this attribute **SHOULD NOT** be set.\n */\nconst ATTR_NETWORK_PROTOCOL_VERSION = 'network.protocol.version';\n/**\n * [OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n *\n * @example tcp\n * @example udp\n *\n * @note The value **SHOULD** be normalized to lowercase.\n *\n * Consider always setting the transport when setting a port number, since\n * a port number is ambiguous without knowing the transport. For example\n * different processes could be listening on TCP port 12345 and UDP port 12345.\n */\nconst ATTR_NETWORK_TRANSPORT = 'network.transport';\n/**\n * Enum value \"pipe\" for attribute {@link ATTR_NETWORK_TRANSPORT}.\n *\n * Named or anonymous pipe.\n */\nconst NETWORK_TRANSPORT_VALUE_PIPE = \"pipe\";\n/**\n * Enum value \"quic\" for attribute {@link ATTR_NETWORK_TRANSPORT}.\n *\n * QUIC\n */\nconst NETWORK_TRANSPORT_VALUE_QUIC = \"quic\";\n/**\n * Enum value \"tcp\" for attribute {@link ATTR_NETWORK_TRANSPORT}.\n *\n * TCP\n */\nconst NETWORK_TRANSPORT_VALUE_TCP = \"tcp\";\n/**\n * Enum value \"udp\" for attribute {@link ATTR_NETWORK_TRANSPORT}.\n *\n * UDP\n */\nconst NETWORK_TRANSPORT_VALUE_UDP = \"udp\";\n/**\n * Enum value \"unix\" for attribute {@link ATTR_NETWORK_TRANSPORT}.\n *\n * Unix domain socket\n */\nconst NETWORK_TRANSPORT_VALUE_UNIX = \"unix\";\n/**\n * [OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.\n *\n * @example ipv4\n * @example ipv6\n *\n * @note The value **SHOULD** be normalized to lowercase.\n */\nconst ATTR_NETWORK_TYPE = 'network.type';\n/**\n * Enum value \"ipv4\" for attribute {@link ATTR_NETWORK_TYPE}.\n *\n * IPv4\n */\nconst NETWORK_TYPE_VALUE_IPV4 = \"ipv4\";\n/**\n * Enum value \"ipv6\" for attribute {@link ATTR_NETWORK_TYPE}.\n *\n * IPv6\n */\nconst NETWORK_TYPE_VALUE_IPV6 = \"ipv6\";\n/**\n * The name of the instrumentation scope - (`InstrumentationScope.Name` in OTLP).\n *\n * @example io.opentelemetry.contrib.mongodb\n */\nconst ATTR_OTEL_SCOPE_NAME = 'otel.scope.name';\n/**\n * The version of the instrumentation scope - (`InstrumentationScope.Version` in OTLP).\n *\n * @example 1.0.0\n */\nconst ATTR_OTEL_SCOPE_VERSION = 'otel.scope.version';\n/**\n * Name of the code, either \"OK\" or \"ERROR\". **MUST NOT** be set if the status code is UNSET.\n */\nconst ATTR_OTEL_STATUS_CODE = 'otel.status_code';\n/**\n * Enum value \"ERROR\" for attribute {@link ATTR_OTEL_STATUS_CODE}.\n *\n * The operation contains an error.\n */\nconst OTEL_STATUS_CODE_VALUE_ERROR = \"ERROR\";\n/**\n * Enum value \"OK\" for attribute {@link ATTR_OTEL_STATUS_CODE}.\n *\n * The operation has been validated by an Application developer or Operator to have completed successfully.\n */\nconst OTEL_STATUS_CODE_VALUE_OK = \"OK\";\n/**\n * Description of the Status if it has a value, otherwise not set.\n *\n * @example resource not found\n */\nconst ATTR_OTEL_STATUS_DESCRIPTION = 'otel.status_description';\n/**\n * Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n *\n * @example example.com\n * @example 10.1.2.80\n * @example /tmp/my.sock\n *\n * @note When observed from the client side, and when communicating through an intermediary, `server.address` **SHOULD** represent the server address behind any intermediaries, for example proxies, if it's available.\n */\nconst ATTR_SERVER_ADDRESS = 'server.address';\n/**\n * Server port number.\n *\n * @example 80\n * @example 8080\n * @example 443\n *\n * @note When observed from the client side, and when communicating through an intermediary, `server.port` **SHOULD** represent the server port behind any intermediaries, for example proxies, if it's available.\n */\nconst ATTR_SERVER_PORT = 'server.port';\n/**\n * Logical name of the service.\n *\n * @example shoppingcart\n *\n * @note **MUST** be the same for all instances of horizontally scaled services. If the value was not specified, SDKs **MUST** fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value **MUST** be set to `unknown_service`.\n */\nconst ATTR_SERVICE_NAME = 'service.name';\n/**\n * The version string of the service API or implementation. The format is not defined by these conventions.\n *\n * @example 2.0.0\n * @example a01dbef8a\n */\nconst ATTR_SERVICE_VERSION = 'service.version';\n/**\n * SignalR HTTP connection closure status.\n *\n * @example app_shutdown\n * @example timeout\n */\nconst ATTR_SIGNALR_CONNECTION_STATUS = 'signalr.connection.status';\n/**\n * Enum value \"app_shutdown\" for attribute {@link ATTR_SIGNALR_CONNECTION_STATUS}.\n *\n * The connection was closed because the app is shutting down.\n */\nconst SIGNALR_CONNECTION_STATUS_VALUE_APP_SHUTDOWN = \"app_shutdown\";\n/**\n * Enum value \"normal_closure\" for attribute {@link ATTR_SIGNALR_CONNECTION_STATUS}.\n *\n * The connection was closed normally.\n */\nconst SIGNALR_CONNECTION_STATUS_VALUE_NORMAL_CLOSURE = \"normal_closure\";\n/**\n * Enum value \"timeout\" for attribute {@link ATTR_SIGNALR_CONNECTION_STATUS}.\n *\n * The connection was closed due to a timeout.\n */\nconst SIGNALR_CONNECTION_STATUS_VALUE_TIMEOUT = \"timeout\";\n/**\n * [SignalR transport type](https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/docs/specs/TransportProtocols.md)\n *\n * @example web_sockets\n * @example long_polling\n */\nconst ATTR_SIGNALR_TRANSPORT = 'signalr.transport';\n/**\n * Enum value \"long_polling\" for attribute {@link ATTR_SIGNALR_TRANSPORT}.\n *\n * LongPolling protocol\n */\nconst SIGNALR_TRANSPORT_VALUE_LONG_POLLING = \"long_polling\";\n/**\n * Enum value \"server_sent_events\" for attribute {@link ATTR_SIGNALR_TRANSPORT}.\n *\n * ServerSentEvents protocol\n */\nconst SIGNALR_TRANSPORT_VALUE_SERVER_SENT_EVENTS = \"server_sent_events\";\n/**\n * Enum value \"web_sockets\" for attribute {@link ATTR_SIGNALR_TRANSPORT}.\n *\n * WebSockets protocol\n */\nconst SIGNALR_TRANSPORT_VALUE_WEB_SOCKETS = \"web_sockets\";\n/**\n * The language of the telemetry SDK.\n */\nconst ATTR_TELEMETRY_SDK_LANGUAGE = 'telemetry.sdk.language';\n/**\n * Enum value \"cpp\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nconst TELEMETRY_SDK_LANGUAGE_VALUE_CPP = \"cpp\";\n/**\n * Enum value \"dotnet\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nconst TELEMETRY_SDK_LANGUAGE_VALUE_DOTNET = \"dotnet\";\n/**\n * Enum value \"erlang\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nconst TELEMETRY_SDK_LANGUAGE_VALUE_ERLANG = \"erlang\";\n/**\n * Enum value \"go\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nconst TELEMETRY_SDK_LANGUAGE_VALUE_GO = \"go\";\n/**\n * Enum value \"java\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nconst TELEMETRY_SDK_LANGUAGE_VALUE_JAVA = \"java\";\n/**\n * Enum value \"nodejs\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nconst TELEMETRY_SDK_LANGUAGE_VALUE_NODEJS = \"nodejs\";\n/**\n * Enum value \"php\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nconst TELEMETRY_SDK_LANGUAGE_VALUE_PHP = \"php\";\n/**\n * Enum value \"python\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nconst TELEMETRY_SDK_LANGUAGE_VALUE_PYTHON = \"python\";\n/**\n * Enum value \"ruby\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nconst TELEMETRY_SDK_LANGUAGE_VALUE_RUBY = \"ruby\";\n/**\n * Enum value \"rust\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nconst TELEMETRY_SDK_LANGUAGE_VALUE_RUST = \"rust\";\n/**\n * Enum value \"swift\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nconst TELEMETRY_SDK_LANGUAGE_VALUE_SWIFT = \"swift\";\n/**\n * Enum value \"webjs\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nconst TELEMETRY_SDK_LANGUAGE_VALUE_WEBJS = \"webjs\";\n/**\n * The name of the telemetry SDK as defined above.\n *\n * @example opentelemetry\n *\n * @note The OpenTelemetry SDK **MUST** set the `telemetry.sdk.name` attribute to `opentelemetry`.\n * If another SDK, like a fork or a vendor-provided implementation, is used, this SDK **MUST** set the\n * `telemetry.sdk.name` attribute to the fully-qualified class or module name of this SDK's main entry point\n * or another suitable identifier depending on the language.\n * The identifier `opentelemetry` is reserved and **MUST NOT** be used in this case.\n * All custom identifiers **SHOULD** be stable across different versions of an implementation.\n */\nconst ATTR_TELEMETRY_SDK_NAME = 'telemetry.sdk.name';\n/**\n * The version string of the telemetry SDK.\n *\n * @example 1.2.3\n */\nconst ATTR_TELEMETRY_SDK_VERSION = 'telemetry.sdk.version';\n/**\n * The [URI fragment](https://www.rfc-editor.org/rfc/rfc3986#section-3.5) component\n *\n * @example SemConv\n */\nconst ATTR_URL_FRAGMENT = 'url.fragment';\n/**\n * Absolute URL describing a network resource according to [RFC3986](https://www.rfc-editor.org/rfc/rfc3986)\n *\n * @example https://www.foo.bar/search?q=OpenTelemetry#SemConv\n * @example //localhost\n *\n * @note For network calls, URL usually has `scheme://host[:port][path][?query][#fragment]` format, where the fragment\n * is not transmitted over HTTP, but if it is known, it **SHOULD** be included nevertheless.\n *\n * `url.full` **MUST NOT** contain credentials passed via URL in form of `https://username:password@www.example.com/`.\n * In such case username and password **SHOULD** be redacted and attribute's value **SHOULD** be `https://REDACTED:REDACTED@www.example.com/`.\n *\n * `url.full` **SHOULD** capture the absolute URL when it is available (or can be reconstructed).\n *\n * Sensitive content provided in `url.full` **SHOULD** be scrubbed when instrumentations can identify it.\n *\n *\n * Query string values for the following keys **SHOULD** be redacted by default and replaced by the\n * value `REDACTED`:\n *\n *   - [`AWSAccessKeyId`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n *   - [`Signature`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n *   - [`sig`](https://learn.microsoft.com/azure/storage/common/storage-sas-overview#sas-token)\n *   - [`X-Goog-Signature`](https://cloud.google.com/storage/docs/access-control/signed-urls)\n *\n * This list is subject to change over time.\n *\n * When a query string value is redacted, the query string key **SHOULD** still be preserved, e.g.\n * `https://www.example.com/path?color=blue&sig=REDACTED`.\n */\nconst ATTR_URL_FULL = 'url.full';\n/**\n * The [URI path](https://www.rfc-editor.org/rfc/rfc3986#section-3.3) component\n *\n * @example /search\n *\n * @note Sensitive content provided in `url.path` **SHOULD** be scrubbed when instrumentations can identify it.\n */\nconst ATTR_URL_PATH = 'url.path';\n/**\n * The [URI query](https://www.rfc-editor.org/rfc/rfc3986#section-3.4) component\n *\n * @example q=OpenTelemetry\n *\n * @note Sensitive content provided in `url.query` **SHOULD** be scrubbed when instrumentations can identify it.\n *\n *\n * Query string values for the following keys **SHOULD** be redacted by default and replaced by the value `REDACTED`:\n *\n *   - [`AWSAccessKeyId`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n *   - [`Signature`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n *   - [`sig`](https://learn.microsoft.com/azure/storage/common/storage-sas-overview#sas-token)\n *   - [`X-Goog-Signature`](https://cloud.google.com/storage/docs/access-control/signed-urls)\n *\n * This list is subject to change over time.\n *\n * When a query string value is redacted, the query string key **SHOULD** still be preserved, e.g.\n * `q=OpenTelemetry&sig=REDACTED`.\n */\nconst ATTR_URL_QUERY = 'url.query';\n/**\n * The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n *\n * @example https\n * @example ftp\n * @example telnet\n */\nconst ATTR_URL_SCHEME = 'url.scheme';\n/**\n * Value of the [HTTP User-Agent](https://www.rfc-editor.org/rfc/rfc9110.html#field.user-agent) header sent by the client.\n *\n * @example CERN-LineMode/2.15 libwww/2.17b3\n * @example Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1\n * @example YourApp/1.0.0 grpc-java-okhttp/1.27.2\n */\nconst ATTR_USER_AGENT_ORIGINAL = 'user_agent.original';\n//# sourceMappingURL=stable_attributes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/stable_attributes.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/stable_events.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/semantic-conventions/build/esm/stable_events.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EVENT_EXCEPTION: () => (/* binding */ EVENT_EXCEPTION)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n//-----------------------------------------------------------------------------------------------------------\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates/registry/ts-stable/events.ts.j2\n//-----------------------------------------------------------------------------------------------------------\n/**\n * This event describes a single exception.\n */\nconst EVENT_EXCEPTION = 'exception';\n//# sourceMappingURL=stable_events.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3NlbWFudGljLWNvbnZlbnRpb25zL2J1aWxkL2VzbS9zdGFibGVfZXZlbnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3NlbWFudGljLWNvbnZlbnRpb25zL2J1aWxkL2VzbS9zdGFibGVfZXZlbnRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBETyBOT1QgRURJVCwgdGhpcyBpcyBhbiBBdXRvLWdlbmVyYXRlZCBmaWxlIGZyb20gc2NyaXB0cy9zZW1jb252L3RlbXBsYXRlcy9yZWdpc3RyeS90cy1zdGFibGUvZXZlbnRzLnRzLmoyXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vKipcbiAqIFRoaXMgZXZlbnQgZGVzY3JpYmVzIGEgc2luZ2xlIGV4Y2VwdGlvbi5cbiAqL1xuZXhwb3J0IGNvbnN0IEVWRU5UX0VYQ0VQVElPTiA9ICdleGNlcHRpb24nO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhYmxlX2V2ZW50cy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/stable_events.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/stable_metrics.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/semantic-conventions/build/esm/stable_metrics.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   METRIC_ASPNETCORE_DIAGNOSTICS_EXCEPTIONS: () => (/* binding */ METRIC_ASPNETCORE_DIAGNOSTICS_EXCEPTIONS),\n/* harmony export */   METRIC_ASPNETCORE_RATE_LIMITING_ACTIVE_REQUEST_LEASES: () => (/* binding */ METRIC_ASPNETCORE_RATE_LIMITING_ACTIVE_REQUEST_LEASES),\n/* harmony export */   METRIC_ASPNETCORE_RATE_LIMITING_QUEUED_REQUESTS: () => (/* binding */ METRIC_ASPNETCORE_RATE_LIMITING_QUEUED_REQUESTS),\n/* harmony export */   METRIC_ASPNETCORE_RATE_LIMITING_REQUESTS: () => (/* binding */ METRIC_ASPNETCORE_RATE_LIMITING_REQUESTS),\n/* harmony export */   METRIC_ASPNETCORE_RATE_LIMITING_REQUEST_LEASE_DURATION: () => (/* binding */ METRIC_ASPNETCORE_RATE_LIMITING_REQUEST_LEASE_DURATION),\n/* harmony export */   METRIC_ASPNETCORE_RATE_LIMITING_REQUEST_TIME_IN_QUEUE: () => (/* binding */ METRIC_ASPNETCORE_RATE_LIMITING_REQUEST_TIME_IN_QUEUE),\n/* harmony export */   METRIC_ASPNETCORE_ROUTING_MATCH_ATTEMPTS: () => (/* binding */ METRIC_ASPNETCORE_ROUTING_MATCH_ATTEMPTS),\n/* harmony export */   METRIC_DB_CLIENT_OPERATION_DURATION: () => (/* binding */ METRIC_DB_CLIENT_OPERATION_DURATION),\n/* harmony export */   METRIC_DOTNET_ASSEMBLY_COUNT: () => (/* binding */ METRIC_DOTNET_ASSEMBLY_COUNT),\n/* harmony export */   METRIC_DOTNET_EXCEPTIONS: () => (/* binding */ METRIC_DOTNET_EXCEPTIONS),\n/* harmony export */   METRIC_DOTNET_GC_COLLECTIONS: () => (/* binding */ METRIC_DOTNET_GC_COLLECTIONS),\n/* harmony export */   METRIC_DOTNET_GC_HEAP_TOTAL_ALLOCATED: () => (/* binding */ METRIC_DOTNET_GC_HEAP_TOTAL_ALLOCATED),\n/* harmony export */   METRIC_DOTNET_GC_LAST_COLLECTION_HEAP_FRAGMENTATION_SIZE: () => (/* binding */ METRIC_DOTNET_GC_LAST_COLLECTION_HEAP_FRAGMENTATION_SIZE),\n/* harmony export */   METRIC_DOTNET_GC_LAST_COLLECTION_HEAP_SIZE: () => (/* binding */ METRIC_DOTNET_GC_LAST_COLLECTION_HEAP_SIZE),\n/* harmony export */   METRIC_DOTNET_GC_LAST_COLLECTION_MEMORY_COMMITTED_SIZE: () => (/* binding */ METRIC_DOTNET_GC_LAST_COLLECTION_MEMORY_COMMITTED_SIZE),\n/* harmony export */   METRIC_DOTNET_GC_PAUSE_TIME: () => (/* binding */ METRIC_DOTNET_GC_PAUSE_TIME),\n/* harmony export */   METRIC_DOTNET_JIT_COMPILATION_TIME: () => (/* binding */ METRIC_DOTNET_JIT_COMPILATION_TIME),\n/* harmony export */   METRIC_DOTNET_JIT_COMPILED_IL_SIZE: () => (/* binding */ METRIC_DOTNET_JIT_COMPILED_IL_SIZE),\n/* harmony export */   METRIC_DOTNET_JIT_COMPILED_METHODS: () => (/* binding */ METRIC_DOTNET_JIT_COMPILED_METHODS),\n/* harmony export */   METRIC_DOTNET_MONITOR_LOCK_CONTENTIONS: () => (/* binding */ METRIC_DOTNET_MONITOR_LOCK_CONTENTIONS),\n/* harmony export */   METRIC_DOTNET_PROCESS_CPU_COUNT: () => (/* binding */ METRIC_DOTNET_PROCESS_CPU_COUNT),\n/* harmony export */   METRIC_DOTNET_PROCESS_CPU_TIME: () => (/* binding */ METRIC_DOTNET_PROCESS_CPU_TIME),\n/* harmony export */   METRIC_DOTNET_PROCESS_MEMORY_WORKING_SET: () => (/* binding */ METRIC_DOTNET_PROCESS_MEMORY_WORKING_SET),\n/* harmony export */   METRIC_DOTNET_THREAD_POOL_QUEUE_LENGTH: () => (/* binding */ METRIC_DOTNET_THREAD_POOL_QUEUE_LENGTH),\n/* harmony export */   METRIC_DOTNET_THREAD_POOL_THREAD_COUNT: () => (/* binding */ METRIC_DOTNET_THREAD_POOL_THREAD_COUNT),\n/* harmony export */   METRIC_DOTNET_THREAD_POOL_WORK_ITEM_COUNT: () => (/* binding */ METRIC_DOTNET_THREAD_POOL_WORK_ITEM_COUNT),\n/* harmony export */   METRIC_DOTNET_TIMER_COUNT: () => (/* binding */ METRIC_DOTNET_TIMER_COUNT),\n/* harmony export */   METRIC_HTTP_CLIENT_REQUEST_DURATION: () => (/* binding */ METRIC_HTTP_CLIENT_REQUEST_DURATION),\n/* harmony export */   METRIC_HTTP_SERVER_REQUEST_DURATION: () => (/* binding */ METRIC_HTTP_SERVER_REQUEST_DURATION),\n/* harmony export */   METRIC_JVM_CLASS_COUNT: () => (/* binding */ METRIC_JVM_CLASS_COUNT),\n/* harmony export */   METRIC_JVM_CLASS_LOADED: () => (/* binding */ METRIC_JVM_CLASS_LOADED),\n/* harmony export */   METRIC_JVM_CLASS_UNLOADED: () => (/* binding */ METRIC_JVM_CLASS_UNLOADED),\n/* harmony export */   METRIC_JVM_CPU_COUNT: () => (/* binding */ METRIC_JVM_CPU_COUNT),\n/* harmony export */   METRIC_JVM_CPU_RECENT_UTILIZATION: () => (/* binding */ METRIC_JVM_CPU_RECENT_UTILIZATION),\n/* harmony export */   METRIC_JVM_CPU_TIME: () => (/* binding */ METRIC_JVM_CPU_TIME),\n/* harmony export */   METRIC_JVM_GC_DURATION: () => (/* binding */ METRIC_JVM_GC_DURATION),\n/* harmony export */   METRIC_JVM_MEMORY_COMMITTED: () => (/* binding */ METRIC_JVM_MEMORY_COMMITTED),\n/* harmony export */   METRIC_JVM_MEMORY_LIMIT: () => (/* binding */ METRIC_JVM_MEMORY_LIMIT),\n/* harmony export */   METRIC_JVM_MEMORY_USED: () => (/* binding */ METRIC_JVM_MEMORY_USED),\n/* harmony export */   METRIC_JVM_MEMORY_USED_AFTER_LAST_GC: () => (/* binding */ METRIC_JVM_MEMORY_USED_AFTER_LAST_GC),\n/* harmony export */   METRIC_JVM_THREAD_COUNT: () => (/* binding */ METRIC_JVM_THREAD_COUNT),\n/* harmony export */   METRIC_KESTREL_ACTIVE_CONNECTIONS: () => (/* binding */ METRIC_KESTREL_ACTIVE_CONNECTIONS),\n/* harmony export */   METRIC_KESTREL_ACTIVE_TLS_HANDSHAKES: () => (/* binding */ METRIC_KESTREL_ACTIVE_TLS_HANDSHAKES),\n/* harmony export */   METRIC_KESTREL_CONNECTION_DURATION: () => (/* binding */ METRIC_KESTREL_CONNECTION_DURATION),\n/* harmony export */   METRIC_KESTREL_QUEUED_CONNECTIONS: () => (/* binding */ METRIC_KESTREL_QUEUED_CONNECTIONS),\n/* harmony export */   METRIC_KESTREL_QUEUED_REQUESTS: () => (/* binding */ METRIC_KESTREL_QUEUED_REQUESTS),\n/* harmony export */   METRIC_KESTREL_REJECTED_CONNECTIONS: () => (/* binding */ METRIC_KESTREL_REJECTED_CONNECTIONS),\n/* harmony export */   METRIC_KESTREL_TLS_HANDSHAKE_DURATION: () => (/* binding */ METRIC_KESTREL_TLS_HANDSHAKE_DURATION),\n/* harmony export */   METRIC_KESTREL_UPGRADED_CONNECTIONS: () => (/* binding */ METRIC_KESTREL_UPGRADED_CONNECTIONS),\n/* harmony export */   METRIC_SIGNALR_SERVER_ACTIVE_CONNECTIONS: () => (/* binding */ METRIC_SIGNALR_SERVER_ACTIVE_CONNECTIONS),\n/* harmony export */   METRIC_SIGNALR_SERVER_CONNECTION_DURATION: () => (/* binding */ METRIC_SIGNALR_SERVER_CONNECTION_DURATION)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n//----------------------------------------------------------------------------------------------------------\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates/register/stable/metrics.ts.j2\n//----------------------------------------------------------------------------------------------------------\n/**\n * Number of exceptions caught by exception handling middleware.\n *\n * @note Meter name: `Microsoft.AspNetCore.Diagnostics`; Added in: ASP.NET Core 8.0\n */\nconst METRIC_ASPNETCORE_DIAGNOSTICS_EXCEPTIONS = 'aspnetcore.diagnostics.exceptions';\n/**\n * Number of requests that are currently active on the server that hold a rate limiting lease.\n *\n * @note Meter name: `Microsoft.AspNetCore.RateLimiting`; Added in: ASP.NET Core 8.0\n */\nconst METRIC_ASPNETCORE_RATE_LIMITING_ACTIVE_REQUEST_LEASES = 'aspnetcore.rate_limiting.active_request_leases';\n/**\n * Number of requests that are currently queued, waiting to acquire a rate limiting lease.\n *\n * @note Meter name: `Microsoft.AspNetCore.RateLimiting`; Added in: ASP.NET Core 8.0\n */\nconst METRIC_ASPNETCORE_RATE_LIMITING_QUEUED_REQUESTS = 'aspnetcore.rate_limiting.queued_requests';\n/**\n * The time the request spent in a queue waiting to acquire a rate limiting lease.\n *\n * @note Meter name: `Microsoft.AspNetCore.RateLimiting`; Added in: ASP.NET Core 8.0\n */\nconst METRIC_ASPNETCORE_RATE_LIMITING_REQUEST_TIME_IN_QUEUE = 'aspnetcore.rate_limiting.request.time_in_queue';\n/**\n * The duration of rate limiting lease held by requests on the server.\n *\n * @note Meter name: `Microsoft.AspNetCore.RateLimiting`; Added in: ASP.NET Core 8.0\n */\nconst METRIC_ASPNETCORE_RATE_LIMITING_REQUEST_LEASE_DURATION = 'aspnetcore.rate_limiting.request_lease.duration';\n/**\n * Number of requests that tried to acquire a rate limiting lease.\n *\n * @note Requests could be:\n *\n *   - Rejected by global or endpoint rate limiting policies\n *   - Canceled while waiting for the lease.\n *\n * Meter name: `Microsoft.AspNetCore.RateLimiting`; Added in: ASP.NET Core 8.0\n */\nconst METRIC_ASPNETCORE_RATE_LIMITING_REQUESTS = 'aspnetcore.rate_limiting.requests';\n/**\n * Number of requests that were attempted to be matched to an endpoint.\n *\n * @note Meter name: `Microsoft.AspNetCore.Routing`; Added in: ASP.NET Core 8.0\n */\nconst METRIC_ASPNETCORE_ROUTING_MATCH_ATTEMPTS = 'aspnetcore.routing.match_attempts';\n/**\n * Duration of database client operations.\n *\n * @note Batch operations **SHOULD** be recorded as a single operation.\n */\nconst METRIC_DB_CLIENT_OPERATION_DURATION = 'db.client.operation.duration';\n/**\n * The number of .NET assemblies that are currently loaded.\n *\n * @note Meter name: `System.Runtime`; Added in: .NET 9.0.\n * This metric reports the same values as calling [`AppDomain.CurrentDomain.GetAssemblies().Length`](https://learn.microsoft.com/dotnet/api/system.appdomain.getassemblies).\n */\nconst METRIC_DOTNET_ASSEMBLY_COUNT = 'dotnet.assembly.count';\n/**\n * The number of exceptions that have been thrown in managed code.\n *\n * @note Meter name: `System.Runtime`; Added in: .NET 9.0.\n * This metric reports the same values as counting calls to [`AppDomain.CurrentDomain.FirstChanceException`](https://learn.microsoft.com/dotnet/api/system.appdomain.firstchanceexception).\n */\nconst METRIC_DOTNET_EXCEPTIONS = 'dotnet.exceptions';\n/**\n * The number of garbage collections that have occurred since the process has started.\n *\n * @note Meter name: `System.Runtime`; Added in: .NET 9.0.\n * This metric uses the [`GC.CollectionCount(int generation)`](https://learn.microsoft.com/dotnet/api/system.gc.collectioncount) API to calculate exclusive collections per generation.\n */\nconst METRIC_DOTNET_GC_COLLECTIONS = 'dotnet.gc.collections';\n/**\n * The *approximate* number of bytes allocated on the managed GC heap since the process has started. The returned value does not include any native allocations.\n *\n * @note Meter name: `System.Runtime`; Added in: .NET 9.0.\n * This metric reports the same values as calling [`GC.GetTotalAllocatedBytes()`](https://learn.microsoft.com/dotnet/api/system.gc.gettotalallocatedbytes).\n */\nconst METRIC_DOTNET_GC_HEAP_TOTAL_ALLOCATED = 'dotnet.gc.heap.total_allocated';\n/**\n * The heap fragmentation, as observed during the latest garbage collection.\n *\n * @note Meter name: `System.Runtime`; Added in: .NET 9.0.\n * This metric reports the same values as calling [`GC.GetGCMemoryInfo().GenerationInfo.FragmentationAfterBytes`](https://learn.microsoft.com/dotnet/api/system.gcgenerationinfo.fragmentationafterbytes).\n */\nconst METRIC_DOTNET_GC_LAST_COLLECTION_HEAP_FRAGMENTATION_SIZE = 'dotnet.gc.last_collection.heap.fragmentation.size';\n/**\n * The managed GC heap size (including fragmentation), as observed during the latest garbage collection.\n *\n * @note Meter name: `System.Runtime`; Added in: .NET 9.0.\n * This metric reports the same values as calling [`GC.GetGCMemoryInfo().GenerationInfo.SizeAfterBytes`](https://learn.microsoft.com/dotnet/api/system.gcgenerationinfo.sizeafterbytes).\n */\nconst METRIC_DOTNET_GC_LAST_COLLECTION_HEAP_SIZE = 'dotnet.gc.last_collection.heap.size';\n/**\n * The amount of committed virtual memory in use by the .NET GC, as observed during the latest garbage collection.\n *\n * @note Meter name: `System.Runtime`; Added in: .NET 9.0.\n * This metric reports the same values as calling [`GC.GetGCMemoryInfo().TotalCommittedBytes`](https://learn.microsoft.com/dotnet/api/system.gcmemoryinfo.totalcommittedbytes). Committed virtual memory may be larger than the heap size because it includes both memory for storing existing objects (the heap size) and some extra memory that is ready to handle newly allocated objects in the future.\n */\nconst METRIC_DOTNET_GC_LAST_COLLECTION_MEMORY_COMMITTED_SIZE = 'dotnet.gc.last_collection.memory.committed_size';\n/**\n * The total amount of time paused in GC since the process has started.\n *\n * @note Meter name: `System.Runtime`; Added in: .NET 9.0.\n * This metric reports the same values as calling [`GC.GetTotalPauseDuration()`](https://learn.microsoft.com/dotnet/api/system.gc.gettotalpauseduration).\n */\nconst METRIC_DOTNET_GC_PAUSE_TIME = 'dotnet.gc.pause.time';\n/**\n * The amount of time the JIT compiler has spent compiling methods since the process has started.\n *\n * @note Meter name: `System.Runtime`; Added in: .NET 9.0.\n * This metric reports the same values as calling [`JitInfo.GetCompilationTime()`](https://learn.microsoft.com/dotnet/api/system.runtime.jitinfo.getcompilationtime).\n */\nconst METRIC_DOTNET_JIT_COMPILATION_TIME = 'dotnet.jit.compilation.time';\n/**\n * Count of bytes of intermediate language that have been compiled since the process has started.\n *\n * @note Meter name: `System.Runtime`; Added in: .NET 9.0.\n * This metric reports the same values as calling [`JitInfo.GetCompiledILBytes()`](https://learn.microsoft.com/dotnet/api/system.runtime.jitinfo.getcompiledilbytes).\n */\nconst METRIC_DOTNET_JIT_COMPILED_IL_SIZE = 'dotnet.jit.compiled_il.size';\n/**\n * The number of times the JIT compiler (re)compiled methods since the process has started.\n *\n * @note Meter name: `System.Runtime`; Added in: .NET 9.0.\n * This metric reports the same values as calling [`JitInfo.GetCompiledMethodCount()`](https://learn.microsoft.com/dotnet/api/system.runtime.jitinfo.getcompiledmethodcount).\n */\nconst METRIC_DOTNET_JIT_COMPILED_METHODS = 'dotnet.jit.compiled_methods';\n/**\n * The number of times there was contention when trying to acquire a monitor lock since the process has started.\n *\n * @note Meter name: `System.Runtime`; Added in: .NET 9.0.\n * This metric reports the same values as calling [`Monitor.LockContentionCount`](https://learn.microsoft.com/dotnet/api/system.threading.monitor.lockcontentioncount).\n */\nconst METRIC_DOTNET_MONITOR_LOCK_CONTENTIONS = 'dotnet.monitor.lock_contentions';\n/**\n * The number of processors available to the process.\n *\n * @note Meter name: `System.Runtime`; Added in: .NET 9.0.\n * This metric reports the same values as accessing [`Environment.ProcessorCount`](https://learn.microsoft.com/dotnet/api/system.environment.processorcount).\n */\nconst METRIC_DOTNET_PROCESS_CPU_COUNT = 'dotnet.process.cpu.count';\n/**\n * CPU time used by the process.\n *\n * @note Meter name: `System.Runtime`; Added in: .NET 9.0.\n * This metric reports the same values as accessing the corresponding processor time properties on [`System.Diagnostics.Process`](https://learn.microsoft.com/dotnet/api/system.diagnostics.process).\n */\nconst METRIC_DOTNET_PROCESS_CPU_TIME = 'dotnet.process.cpu.time';\n/**\n * The number of bytes of physical memory mapped to the process context.\n *\n * @note Meter name: `System.Runtime`; Added in: .NET 9.0.\n * This metric reports the same values as calling [`Environment.WorkingSet`](https://learn.microsoft.com/dotnet/api/system.environment.workingset).\n */\nconst METRIC_DOTNET_PROCESS_MEMORY_WORKING_SET = 'dotnet.process.memory.working_set';\n/**\n * The number of work items that are currently queued to be processed by the thread pool.\n *\n * @note Meter name: `System.Runtime`; Added in: .NET 9.0.\n * This metric reports the same values as calling [`ThreadPool.PendingWorkItemCount`](https://learn.microsoft.com/dotnet/api/system.threading.threadpool.pendingworkitemcount).\n */\nconst METRIC_DOTNET_THREAD_POOL_QUEUE_LENGTH = 'dotnet.thread_pool.queue.length';\n/**\n * The number of thread pool threads that currently exist.\n *\n * @note Meter name: `System.Runtime`; Added in: .NET 9.0.\n * This metric reports the same values as calling [`ThreadPool.ThreadCount`](https://learn.microsoft.com/dotnet/api/system.threading.threadpool.threadcount).\n */\nconst METRIC_DOTNET_THREAD_POOL_THREAD_COUNT = 'dotnet.thread_pool.thread.count';\n/**\n * The number of work items that the thread pool has completed since the process has started.\n *\n * @note Meter name: `System.Runtime`; Added in: .NET 9.0.\n * This metric reports the same values as calling [`ThreadPool.CompletedWorkItemCount`](https://learn.microsoft.com/dotnet/api/system.threading.threadpool.completedworkitemcount).\n */\nconst METRIC_DOTNET_THREAD_POOL_WORK_ITEM_COUNT = 'dotnet.thread_pool.work_item.count';\n/**\n * The number of timer instances that are currently active.\n *\n * @note Meter name: `System.Runtime`; Added in: .NET 9.0.\n * This metric reports the same values as calling [`Timer.ActiveCount`](https://learn.microsoft.com/dotnet/api/system.threading.timer.activecount).\n */\nconst METRIC_DOTNET_TIMER_COUNT = 'dotnet.timer.count';\n/**\n * Duration of HTTP client requests.\n */\nconst METRIC_HTTP_CLIENT_REQUEST_DURATION = 'http.client.request.duration';\n/**\n * Duration of HTTP server requests.\n */\nconst METRIC_HTTP_SERVER_REQUEST_DURATION = 'http.server.request.duration';\n/**\n * Number of classes currently loaded.\n */\nconst METRIC_JVM_CLASS_COUNT = 'jvm.class.count';\n/**\n * Number of classes loaded since JVM start.\n */\nconst METRIC_JVM_CLASS_LOADED = 'jvm.class.loaded';\n/**\n * Number of classes unloaded since JVM start.\n */\nconst METRIC_JVM_CLASS_UNLOADED = 'jvm.class.unloaded';\n/**\n * Number of processors available to the Java virtual machine.\n */\nconst METRIC_JVM_CPU_COUNT = 'jvm.cpu.count';\n/**\n * Recent CPU utilization for the process as reported by the JVM.\n *\n * @note The value range is [0.0,1.0]. This utilization is not defined as being for the specific interval since last measurement (unlike `system.cpu.utilization`). [Reference](https://docs.oracle.com/en/java/javase/17/docs/api/jdk.management/com/sun/management/OperatingSystemMXBean.html#getProcessCpuLoad()).\n */\nconst METRIC_JVM_CPU_RECENT_UTILIZATION = 'jvm.cpu.recent_utilization';\n/**\n * CPU time used by the process as reported by the JVM.\n */\nconst METRIC_JVM_CPU_TIME = 'jvm.cpu.time';\n/**\n * Duration of JVM garbage collection actions.\n */\nconst METRIC_JVM_GC_DURATION = 'jvm.gc.duration';\n/**\n * Measure of memory committed.\n */\nconst METRIC_JVM_MEMORY_COMMITTED = 'jvm.memory.committed';\n/**\n * Measure of max obtainable memory.\n */\nconst METRIC_JVM_MEMORY_LIMIT = 'jvm.memory.limit';\n/**\n * Measure of memory used.\n */\nconst METRIC_JVM_MEMORY_USED = 'jvm.memory.used';\n/**\n * Measure of memory used, as measured after the most recent garbage collection event on this pool.\n */\nconst METRIC_JVM_MEMORY_USED_AFTER_LAST_GC = 'jvm.memory.used_after_last_gc';\n/**\n * Number of executing platform threads.\n */\nconst METRIC_JVM_THREAD_COUNT = 'jvm.thread.count';\n/**\n * Number of connections that are currently active on the server.\n *\n * @note Meter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0\n */\nconst METRIC_KESTREL_ACTIVE_CONNECTIONS = 'kestrel.active_connections';\n/**\n * Number of TLS handshakes that are currently in progress on the server.\n *\n * @note Meter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0\n */\nconst METRIC_KESTREL_ACTIVE_TLS_HANDSHAKES = 'kestrel.active_tls_handshakes';\n/**\n * The duration of connections on the server.\n *\n * @note Meter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0\n */\nconst METRIC_KESTREL_CONNECTION_DURATION = 'kestrel.connection.duration';\n/**\n * Number of connections that are currently queued and are waiting to start.\n *\n * @note Meter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0\n */\nconst METRIC_KESTREL_QUEUED_CONNECTIONS = 'kestrel.queued_connections';\n/**\n * Number of HTTP requests on multiplexed connections (HTTP/2 and HTTP/3) that are currently queued and are waiting to start.\n *\n * @note Meter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0\n */\nconst METRIC_KESTREL_QUEUED_REQUESTS = 'kestrel.queued_requests';\n/**\n * Number of connections rejected by the server.\n *\n * @note Connections are rejected when the currently active count exceeds the value configured with `MaxConcurrentConnections`.\n * Meter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0\n */\nconst METRIC_KESTREL_REJECTED_CONNECTIONS = 'kestrel.rejected_connections';\n/**\n * The duration of TLS handshakes on the server.\n *\n * @note Meter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0\n */\nconst METRIC_KESTREL_TLS_HANDSHAKE_DURATION = 'kestrel.tls_handshake.duration';\n/**\n * Number of connections that are currently upgraded (WebSockets). .\n *\n * @note The counter only tracks HTTP/1.1 connections.\n *\n * Meter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0\n */\nconst METRIC_KESTREL_UPGRADED_CONNECTIONS = 'kestrel.upgraded_connections';\n/**\n * Number of connections that are currently active on the server.\n *\n * @note Meter name: `Microsoft.AspNetCore.Http.Connections`; Added in: ASP.NET Core 8.0\n */\nconst METRIC_SIGNALR_SERVER_ACTIVE_CONNECTIONS = 'signalr.server.active_connections';\n/**\n * The duration of connections on the server.\n *\n * @note Meter name: `Microsoft.AspNetCore.Http.Connections`; Added in: ASP.NET Core 8.0\n */\nconst METRIC_SIGNALR_SERVER_CONNECTION_DURATION = 'signalr.server.connection.duration';\n//# sourceMappingURL=stable_metrics.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/stable_metrics.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/trace/SemanticAttributes.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/semantic-conventions/build/esm/trace/SemanticAttributes.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_ALL: () => (/* binding */ DBCASSANDRACONSISTENCYLEVELVALUES_ALL),\n/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_ANY: () => (/* binding */ DBCASSANDRACONSISTENCYLEVELVALUES_ANY),\n/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM: () => (/* binding */ DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM),\n/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE: () => (/* binding */ DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE),\n/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM: () => (/* binding */ DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM),\n/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL: () => (/* binding */ DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL),\n/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_ONE: () => (/* binding */ DBCASSANDRACONSISTENCYLEVELVALUES_ONE),\n/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM: () => (/* binding */ DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM),\n/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL: () => (/* binding */ DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL),\n/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_THREE: () => (/* binding */ DBCASSANDRACONSISTENCYLEVELVALUES_THREE),\n/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_TWO: () => (/* binding */ DBCASSANDRACONSISTENCYLEVELVALUES_TWO),\n/* harmony export */   DBSYSTEMVALUES_ADABAS: () => (/* binding */ DBSYSTEMVALUES_ADABAS),\n/* harmony export */   DBSYSTEMVALUES_CACHE: () => (/* binding */ DBSYSTEMVALUES_CACHE),\n/* harmony export */   DBSYSTEMVALUES_CASSANDRA: () => (/* binding */ DBSYSTEMVALUES_CASSANDRA),\n/* harmony export */   DBSYSTEMVALUES_CLOUDSCAPE: () => (/* binding */ DBSYSTEMVALUES_CLOUDSCAPE),\n/* harmony export */   DBSYSTEMVALUES_COCKROACHDB: () => (/* binding */ DBSYSTEMVALUES_COCKROACHDB),\n/* harmony export */   DBSYSTEMVALUES_COLDFUSION: () => (/* binding */ DBSYSTEMVALUES_COLDFUSION),\n/* harmony export */   DBSYSTEMVALUES_COSMOSDB: () => (/* binding */ DBSYSTEMVALUES_COSMOSDB),\n/* harmony export */   DBSYSTEMVALUES_COUCHBASE: () => (/* binding */ DBSYSTEMVALUES_COUCHBASE),\n/* harmony export */   DBSYSTEMVALUES_COUCHDB: () => (/* binding */ DBSYSTEMVALUES_COUCHDB),\n/* harmony export */   DBSYSTEMVALUES_DB2: () => (/* binding */ DBSYSTEMVALUES_DB2),\n/* harmony export */   DBSYSTEMVALUES_DERBY: () => (/* binding */ DBSYSTEMVALUES_DERBY),\n/* harmony export */   DBSYSTEMVALUES_DYNAMODB: () => (/* binding */ DBSYSTEMVALUES_DYNAMODB),\n/* harmony export */   DBSYSTEMVALUES_EDB: () => (/* binding */ DBSYSTEMVALUES_EDB),\n/* harmony export */   DBSYSTEMVALUES_ELASTICSEARCH: () => (/* binding */ DBSYSTEMVALUES_ELASTICSEARCH),\n/* harmony export */   DBSYSTEMVALUES_FILEMAKER: () => (/* binding */ DBSYSTEMVALUES_FILEMAKER),\n/* harmony export */   DBSYSTEMVALUES_FIREBIRD: () => (/* binding */ DBSYSTEMVALUES_FIREBIRD),\n/* harmony export */   DBSYSTEMVALUES_FIRSTSQL: () => (/* binding */ DBSYSTEMVALUES_FIRSTSQL),\n/* harmony export */   DBSYSTEMVALUES_GEODE: () => (/* binding */ DBSYSTEMVALUES_GEODE),\n/* harmony export */   DBSYSTEMVALUES_H2: () => (/* binding */ DBSYSTEMVALUES_H2),\n/* harmony export */   DBSYSTEMVALUES_HANADB: () => (/* binding */ DBSYSTEMVALUES_HANADB),\n/* harmony export */   DBSYSTEMVALUES_HBASE: () => (/* binding */ DBSYSTEMVALUES_HBASE),\n/* harmony export */   DBSYSTEMVALUES_HIVE: () => (/* binding */ DBSYSTEMVALUES_HIVE),\n/* harmony export */   DBSYSTEMVALUES_HSQLDB: () => (/* binding */ DBSYSTEMVALUES_HSQLDB),\n/* harmony export */   DBSYSTEMVALUES_INFORMIX: () => (/* binding */ DBSYSTEMVALUES_INFORMIX),\n/* harmony export */   DBSYSTEMVALUES_INGRES: () => (/* binding */ DBSYSTEMVALUES_INGRES),\n/* harmony export */   DBSYSTEMVALUES_INSTANTDB: () => (/* binding */ DBSYSTEMVALUES_INSTANTDB),\n/* harmony export */   DBSYSTEMVALUES_INTERBASE: () => (/* binding */ DBSYSTEMVALUES_INTERBASE),\n/* harmony export */   DBSYSTEMVALUES_MARIADB: () => (/* binding */ DBSYSTEMVALUES_MARIADB),\n/* harmony export */   DBSYSTEMVALUES_MAXDB: () => (/* binding */ DBSYSTEMVALUES_MAXDB),\n/* harmony export */   DBSYSTEMVALUES_MEMCACHED: () => (/* binding */ DBSYSTEMVALUES_MEMCACHED),\n/* harmony export */   DBSYSTEMVALUES_MONGODB: () => (/* binding */ DBSYSTEMVALUES_MONGODB),\n/* harmony export */   DBSYSTEMVALUES_MSSQL: () => (/* binding */ DBSYSTEMVALUES_MSSQL),\n/* harmony export */   DBSYSTEMVALUES_MYSQL: () => (/* binding */ DBSYSTEMVALUES_MYSQL),\n/* harmony export */   DBSYSTEMVALUES_NEO4J: () => (/* binding */ DBSYSTEMVALUES_NEO4J),\n/* harmony export */   DBSYSTEMVALUES_NETEZZA: () => (/* binding */ DBSYSTEMVALUES_NETEZZA),\n/* harmony export */   DBSYSTEMVALUES_ORACLE: () => (/* binding */ DBSYSTEMVALUES_ORACLE),\n/* harmony export */   DBSYSTEMVALUES_OTHER_SQL: () => (/* binding */ DBSYSTEMVALUES_OTHER_SQL),\n/* harmony export */   DBSYSTEMVALUES_PERVASIVE: () => (/* binding */ DBSYSTEMVALUES_PERVASIVE),\n/* harmony export */   DBSYSTEMVALUES_POINTBASE: () => (/* binding */ DBSYSTEMVALUES_POINTBASE),\n/* harmony export */   DBSYSTEMVALUES_POSTGRESQL: () => (/* binding */ DBSYSTEMVALUES_POSTGRESQL),\n/* harmony export */   DBSYSTEMVALUES_PROGRESS: () => (/* binding */ DBSYSTEMVALUES_PROGRESS),\n/* harmony export */   DBSYSTEMVALUES_REDIS: () => (/* binding */ DBSYSTEMVALUES_REDIS),\n/* harmony export */   DBSYSTEMVALUES_REDSHIFT: () => (/* binding */ DBSYSTEMVALUES_REDSHIFT),\n/* harmony export */   DBSYSTEMVALUES_SQLITE: () => (/* binding */ DBSYSTEMVALUES_SQLITE),\n/* harmony export */   DBSYSTEMVALUES_SYBASE: () => (/* binding */ DBSYSTEMVALUES_SYBASE),\n/* harmony export */   DBSYSTEMVALUES_TERADATA: () => (/* binding */ DBSYSTEMVALUES_TERADATA),\n/* harmony export */   DBSYSTEMVALUES_VERTICA: () => (/* binding */ DBSYSTEMVALUES_VERTICA),\n/* harmony export */   DbCassandraConsistencyLevelValues: () => (/* binding */ DbCassandraConsistencyLevelValues),\n/* harmony export */   DbSystemValues: () => (/* binding */ DbSystemValues),\n/* harmony export */   FAASDOCUMENTOPERATIONVALUES_DELETE: () => (/* binding */ FAASDOCUMENTOPERATIONVALUES_DELETE),\n/* harmony export */   FAASDOCUMENTOPERATIONVALUES_EDIT: () => (/* binding */ FAASDOCUMENTOPERATIONVALUES_EDIT),\n/* harmony export */   FAASDOCUMENTOPERATIONVALUES_INSERT: () => (/* binding */ FAASDOCUMENTOPERATIONVALUES_INSERT),\n/* harmony export */   FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD: () => (/* binding */ FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD),\n/* harmony export */   FAASINVOKEDPROVIDERVALUES_AWS: () => (/* binding */ FAASINVOKEDPROVIDERVALUES_AWS),\n/* harmony export */   FAASINVOKEDPROVIDERVALUES_AZURE: () => (/* binding */ FAASINVOKEDPROVIDERVALUES_AZURE),\n/* harmony export */   FAASINVOKEDPROVIDERVALUES_GCP: () => (/* binding */ FAASINVOKEDPROVIDERVALUES_GCP),\n/* harmony export */   FAASTRIGGERVALUES_DATASOURCE: () => (/* binding */ FAASTRIGGERVALUES_DATASOURCE),\n/* harmony export */   FAASTRIGGERVALUES_HTTP: () => (/* binding */ FAASTRIGGERVALUES_HTTP),\n/* harmony export */   FAASTRIGGERVALUES_OTHER: () => (/* binding */ FAASTRIGGERVALUES_OTHER),\n/* harmony export */   FAASTRIGGERVALUES_PUBSUB: () => (/* binding */ FAASTRIGGERVALUES_PUBSUB),\n/* harmony export */   FAASTRIGGERVALUES_TIMER: () => (/* binding */ FAASTRIGGERVALUES_TIMER),\n/* harmony export */   FaasDocumentOperationValues: () => (/* binding */ FaasDocumentOperationValues),\n/* harmony export */   FaasInvokedProviderValues: () => (/* binding */ FaasInvokedProviderValues),\n/* harmony export */   FaasTriggerValues: () => (/* binding */ FaasTriggerValues),\n/* harmony export */   HTTPFLAVORVALUES_HTTP_1_0: () => (/* binding */ HTTPFLAVORVALUES_HTTP_1_0),\n/* harmony export */   HTTPFLAVORVALUES_HTTP_1_1: () => (/* binding */ HTTPFLAVORVALUES_HTTP_1_1),\n/* harmony export */   HTTPFLAVORVALUES_HTTP_2_0: () => (/* binding */ HTTPFLAVORVALUES_HTTP_2_0),\n/* harmony export */   HTTPFLAVORVALUES_QUIC: () => (/* binding */ HTTPFLAVORVALUES_QUIC),\n/* harmony export */   HTTPFLAVORVALUES_SPDY: () => (/* binding */ HTTPFLAVORVALUES_SPDY),\n/* harmony export */   HttpFlavorValues: () => (/* binding */ HttpFlavorValues),\n/* harmony export */   MESSAGETYPEVALUES_RECEIVED: () => (/* binding */ MESSAGETYPEVALUES_RECEIVED),\n/* harmony export */   MESSAGETYPEVALUES_SENT: () => (/* binding */ MESSAGETYPEVALUES_SENT),\n/* harmony export */   MESSAGINGDESTINATIONKINDVALUES_QUEUE: () => (/* binding */ MESSAGINGDESTINATIONKINDVALUES_QUEUE),\n/* harmony export */   MESSAGINGDESTINATIONKINDVALUES_TOPIC: () => (/* binding */ MESSAGINGDESTINATIONKINDVALUES_TOPIC),\n/* harmony export */   MESSAGINGOPERATIONVALUES_PROCESS: () => (/* binding */ MESSAGINGOPERATIONVALUES_PROCESS),\n/* harmony export */   MESSAGINGOPERATIONVALUES_RECEIVE: () => (/* binding */ MESSAGINGOPERATIONVALUES_RECEIVE),\n/* harmony export */   MessageTypeValues: () => (/* binding */ MessageTypeValues),\n/* harmony export */   MessagingDestinationKindValues: () => (/* binding */ MessagingDestinationKindValues),\n/* harmony export */   MessagingOperationValues: () => (/* binding */ MessagingOperationValues),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_CDMA: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_CDMA),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_EDGE: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_EDGE),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_GPRS: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_GPRS),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_GSM: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_GSM),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_HSPA: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_HSPA),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_IDEN: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_IDEN),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_LTE: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_LTE),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_NR: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_NR),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_UMTS: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_UMTS),\n/* harmony export */   NETHOSTCONNECTIONTYPEVALUES_CELL: () => (/* binding */ NETHOSTCONNECTIONTYPEVALUES_CELL),\n/* harmony export */   NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE: () => (/* binding */ NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE),\n/* harmony export */   NETHOSTCONNECTIONTYPEVALUES_UNKNOWN: () => (/* binding */ NETHOSTCONNECTIONTYPEVALUES_UNKNOWN),\n/* harmony export */   NETHOSTCONNECTIONTYPEVALUES_WIFI: () => (/* binding */ NETHOSTCONNECTIONTYPEVALUES_WIFI),\n/* harmony export */   NETHOSTCONNECTIONTYPEVALUES_WIRED: () => (/* binding */ NETHOSTCONNECTIONTYPEVALUES_WIRED),\n/* harmony export */   NETTRANSPORTVALUES_INPROC: () => (/* binding */ NETTRANSPORTVALUES_INPROC),\n/* harmony export */   NETTRANSPORTVALUES_IP: () => (/* binding */ NETTRANSPORTVALUES_IP),\n/* harmony export */   NETTRANSPORTVALUES_IP_TCP: () => (/* binding */ NETTRANSPORTVALUES_IP_TCP),\n/* harmony export */   NETTRANSPORTVALUES_IP_UDP: () => (/* binding */ NETTRANSPORTVALUES_IP_UDP),\n/* harmony export */   NETTRANSPORTVALUES_OTHER: () => (/* binding */ NETTRANSPORTVALUES_OTHER),\n/* harmony export */   NETTRANSPORTVALUES_PIPE: () => (/* binding */ NETTRANSPORTVALUES_PIPE),\n/* harmony export */   NETTRANSPORTVALUES_UNIX: () => (/* binding */ NETTRANSPORTVALUES_UNIX),\n/* harmony export */   NetHostConnectionSubtypeValues: () => (/* binding */ NetHostConnectionSubtypeValues),\n/* harmony export */   NetHostConnectionTypeValues: () => (/* binding */ NetHostConnectionTypeValues),\n/* harmony export */   NetTransportValues: () => (/* binding */ NetTransportValues),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_ABORTED: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_ABORTED),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_CANCELLED: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_CANCELLED),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_DATA_LOSS: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_DATA_LOSS),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_INTERNAL: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_INTERNAL),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_NOT_FOUND: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_NOT_FOUND),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_OK: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_OK),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_UNAVAILABLE: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_UNAVAILABLE),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_UNKNOWN: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_UNKNOWN),\n/* harmony export */   RpcGrpcStatusCodeValues: () => (/* binding */ RpcGrpcStatusCodeValues),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_ATTRIBUTES_TO_GET: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_ATTRIBUTES_TO_GET),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_CONSISTENT_READ: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_CONSISTENT_READ),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_CONSUMED_CAPACITY: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_CONSUMED_CAPACITY),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_COUNT: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_COUNT),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_EXCLUSIVE_START_TABLE: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_EXCLUSIVE_START_TABLE),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_INDEX_NAME: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_INDEX_NAME),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_ITEM_COLLECTION_METRICS: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_ITEM_COLLECTION_METRICS),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_LIMIT: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_LIMIT),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_PROJECTION: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_PROJECTION),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_SCANNED_COUNT: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_SCANNED_COUNT),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_SCAN_FORWARD: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_SCAN_FORWARD),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_SEGMENT: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_SEGMENT),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_SELECT: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_SELECT),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_TABLE_COUNT: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_TABLE_COUNT),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_TABLE_NAMES: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_TABLE_NAMES),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_TOTAL_SEGMENTS: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_TOTAL_SEGMENTS),\n/* harmony export */   SEMATTRS_AWS_LAMBDA_INVOKED_ARN: () => (/* binding */ SEMATTRS_AWS_LAMBDA_INVOKED_ARN),\n/* harmony export */   SEMATTRS_CODE_FILEPATH: () => (/* binding */ SEMATTRS_CODE_FILEPATH),\n/* harmony export */   SEMATTRS_CODE_FUNCTION: () => (/* binding */ SEMATTRS_CODE_FUNCTION),\n/* harmony export */   SEMATTRS_CODE_LINENO: () => (/* binding */ SEMATTRS_CODE_LINENO),\n/* harmony export */   SEMATTRS_CODE_NAMESPACE: () => (/* binding */ SEMATTRS_CODE_NAMESPACE),\n/* harmony export */   SEMATTRS_DB_CASSANDRA_CONSISTENCY_LEVEL: () => (/* binding */ SEMATTRS_DB_CASSANDRA_CONSISTENCY_LEVEL),\n/* harmony export */   SEMATTRS_DB_CASSANDRA_COORDINATOR_DC: () => (/* binding */ SEMATTRS_DB_CASSANDRA_COORDINATOR_DC),\n/* harmony export */   SEMATTRS_DB_CASSANDRA_COORDINATOR_ID: () => (/* binding */ SEMATTRS_DB_CASSANDRA_COORDINATOR_ID),\n/* harmony export */   SEMATTRS_DB_CASSANDRA_IDEMPOTENCE: () => (/* binding */ SEMATTRS_DB_CASSANDRA_IDEMPOTENCE),\n/* harmony export */   SEMATTRS_DB_CASSANDRA_KEYSPACE: () => (/* binding */ SEMATTRS_DB_CASSANDRA_KEYSPACE),\n/* harmony export */   SEMATTRS_DB_CASSANDRA_PAGE_SIZE: () => (/* binding */ SEMATTRS_DB_CASSANDRA_PAGE_SIZE),\n/* harmony export */   SEMATTRS_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT: () => (/* binding */ SEMATTRS_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT),\n/* harmony export */   SEMATTRS_DB_CASSANDRA_TABLE: () => (/* binding */ SEMATTRS_DB_CASSANDRA_TABLE),\n/* harmony export */   SEMATTRS_DB_CONNECTION_STRING: () => (/* binding */ SEMATTRS_DB_CONNECTION_STRING),\n/* harmony export */   SEMATTRS_DB_HBASE_NAMESPACE: () => (/* binding */ SEMATTRS_DB_HBASE_NAMESPACE),\n/* harmony export */   SEMATTRS_DB_JDBC_DRIVER_CLASSNAME: () => (/* binding */ SEMATTRS_DB_JDBC_DRIVER_CLASSNAME),\n/* harmony export */   SEMATTRS_DB_MONGODB_COLLECTION: () => (/* binding */ SEMATTRS_DB_MONGODB_COLLECTION),\n/* harmony export */   SEMATTRS_DB_MSSQL_INSTANCE_NAME: () => (/* binding */ SEMATTRS_DB_MSSQL_INSTANCE_NAME),\n/* harmony export */   SEMATTRS_DB_NAME: () => (/* binding */ SEMATTRS_DB_NAME),\n/* harmony export */   SEMATTRS_DB_OPERATION: () => (/* binding */ SEMATTRS_DB_OPERATION),\n/* harmony export */   SEMATTRS_DB_REDIS_DATABASE_INDEX: () => (/* binding */ SEMATTRS_DB_REDIS_DATABASE_INDEX),\n/* harmony export */   SEMATTRS_DB_SQL_TABLE: () => (/* binding */ SEMATTRS_DB_SQL_TABLE),\n/* harmony export */   SEMATTRS_DB_STATEMENT: () => (/* binding */ SEMATTRS_DB_STATEMENT),\n/* harmony export */   SEMATTRS_DB_SYSTEM: () => (/* binding */ SEMATTRS_DB_SYSTEM),\n/* harmony export */   SEMATTRS_DB_USER: () => (/* binding */ SEMATTRS_DB_USER),\n/* harmony export */   SEMATTRS_ENDUSER_ID: () => (/* binding */ SEMATTRS_ENDUSER_ID),\n/* harmony export */   SEMATTRS_ENDUSER_ROLE: () => (/* binding */ SEMATTRS_ENDUSER_ROLE),\n/* harmony export */   SEMATTRS_ENDUSER_SCOPE: () => (/* binding */ SEMATTRS_ENDUSER_SCOPE),\n/* harmony export */   SEMATTRS_EXCEPTION_ESCAPED: () => (/* binding */ SEMATTRS_EXCEPTION_ESCAPED),\n/* harmony export */   SEMATTRS_EXCEPTION_MESSAGE: () => (/* binding */ SEMATTRS_EXCEPTION_MESSAGE),\n/* harmony export */   SEMATTRS_EXCEPTION_STACKTRACE: () => (/* binding */ SEMATTRS_EXCEPTION_STACKTRACE),\n/* harmony export */   SEMATTRS_EXCEPTION_TYPE: () => (/* binding */ SEMATTRS_EXCEPTION_TYPE),\n/* harmony export */   SEMATTRS_FAAS_COLDSTART: () => (/* binding */ SEMATTRS_FAAS_COLDSTART),\n/* harmony export */   SEMATTRS_FAAS_CRON: () => (/* binding */ SEMATTRS_FAAS_CRON),\n/* harmony export */   SEMATTRS_FAAS_DOCUMENT_COLLECTION: () => (/* binding */ SEMATTRS_FAAS_DOCUMENT_COLLECTION),\n/* harmony export */   SEMATTRS_FAAS_DOCUMENT_NAME: () => (/* binding */ SEMATTRS_FAAS_DOCUMENT_NAME),\n/* harmony export */   SEMATTRS_FAAS_DOCUMENT_OPERATION: () => (/* binding */ SEMATTRS_FAAS_DOCUMENT_OPERATION),\n/* harmony export */   SEMATTRS_FAAS_DOCUMENT_TIME: () => (/* binding */ SEMATTRS_FAAS_DOCUMENT_TIME),\n/* harmony export */   SEMATTRS_FAAS_EXECUTION: () => (/* binding */ SEMATTRS_FAAS_EXECUTION),\n/* harmony export */   SEMATTRS_FAAS_INVOKED_NAME: () => (/* binding */ SEMATTRS_FAAS_INVOKED_NAME),\n/* harmony export */   SEMATTRS_FAAS_INVOKED_PROVIDER: () => (/* binding */ SEMATTRS_FAAS_INVOKED_PROVIDER),\n/* harmony export */   SEMATTRS_FAAS_INVOKED_REGION: () => (/* binding */ SEMATTRS_FAAS_INVOKED_REGION),\n/* harmony export */   SEMATTRS_FAAS_TIME: () => (/* binding */ SEMATTRS_FAAS_TIME),\n/* harmony export */   SEMATTRS_FAAS_TRIGGER: () => (/* binding */ SEMATTRS_FAAS_TRIGGER),\n/* harmony export */   SEMATTRS_HTTP_CLIENT_IP: () => (/* binding */ SEMATTRS_HTTP_CLIENT_IP),\n/* harmony export */   SEMATTRS_HTTP_FLAVOR: () => (/* binding */ SEMATTRS_HTTP_FLAVOR),\n/* harmony export */   SEMATTRS_HTTP_HOST: () => (/* binding */ SEMATTRS_HTTP_HOST),\n/* harmony export */   SEMATTRS_HTTP_METHOD: () => (/* binding */ SEMATTRS_HTTP_METHOD),\n/* harmony export */   SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH: () => (/* binding */ SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH),\n/* harmony export */   SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED: () => (/* binding */ SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED),\n/* harmony export */   SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH: () => (/* binding */ SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH),\n/* harmony export */   SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED: () => (/* binding */ SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED),\n/* harmony export */   SEMATTRS_HTTP_ROUTE: () => (/* binding */ SEMATTRS_HTTP_ROUTE),\n/* harmony export */   SEMATTRS_HTTP_SCHEME: () => (/* binding */ SEMATTRS_HTTP_SCHEME),\n/* harmony export */   SEMATTRS_HTTP_SERVER_NAME: () => (/* binding */ SEMATTRS_HTTP_SERVER_NAME),\n/* harmony export */   SEMATTRS_HTTP_STATUS_CODE: () => (/* binding */ SEMATTRS_HTTP_STATUS_CODE),\n/* harmony export */   SEMATTRS_HTTP_TARGET: () => (/* binding */ SEMATTRS_HTTP_TARGET),\n/* harmony export */   SEMATTRS_HTTP_URL: () => (/* binding */ SEMATTRS_HTTP_URL),\n/* harmony export */   SEMATTRS_HTTP_USER_AGENT: () => (/* binding */ SEMATTRS_HTTP_USER_AGENT),\n/* harmony export */   SEMATTRS_MESSAGE_COMPRESSED_SIZE: () => (/* binding */ SEMATTRS_MESSAGE_COMPRESSED_SIZE),\n/* harmony export */   SEMATTRS_MESSAGE_ID: () => (/* binding */ SEMATTRS_MESSAGE_ID),\n/* harmony export */   SEMATTRS_MESSAGE_TYPE: () => (/* binding */ SEMATTRS_MESSAGE_TYPE),\n/* harmony export */   SEMATTRS_MESSAGE_UNCOMPRESSED_SIZE: () => (/* binding */ SEMATTRS_MESSAGE_UNCOMPRESSED_SIZE),\n/* harmony export */   SEMATTRS_MESSAGING_CONSUMER_ID: () => (/* binding */ SEMATTRS_MESSAGING_CONSUMER_ID),\n/* harmony export */   SEMATTRS_MESSAGING_CONVERSATION_ID: () => (/* binding */ SEMATTRS_MESSAGING_CONVERSATION_ID),\n/* harmony export */   SEMATTRS_MESSAGING_DESTINATION: () => (/* binding */ SEMATTRS_MESSAGING_DESTINATION),\n/* harmony export */   SEMATTRS_MESSAGING_DESTINATION_KIND: () => (/* binding */ SEMATTRS_MESSAGING_DESTINATION_KIND),\n/* harmony export */   SEMATTRS_MESSAGING_KAFKA_CLIENT_ID: () => (/* binding */ SEMATTRS_MESSAGING_KAFKA_CLIENT_ID),\n/* harmony export */   SEMATTRS_MESSAGING_KAFKA_CONSUMER_GROUP: () => (/* binding */ SEMATTRS_MESSAGING_KAFKA_CONSUMER_GROUP),\n/* harmony export */   SEMATTRS_MESSAGING_KAFKA_MESSAGE_KEY: () => (/* binding */ SEMATTRS_MESSAGING_KAFKA_MESSAGE_KEY),\n/* harmony export */   SEMATTRS_MESSAGING_KAFKA_PARTITION: () => (/* binding */ SEMATTRS_MESSAGING_KAFKA_PARTITION),\n/* harmony export */   SEMATTRS_MESSAGING_KAFKA_TOMBSTONE: () => (/* binding */ SEMATTRS_MESSAGING_KAFKA_TOMBSTONE),\n/* harmony export */   SEMATTRS_MESSAGING_MESSAGE_ID: () => (/* binding */ SEMATTRS_MESSAGING_MESSAGE_ID),\n/* harmony export */   SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES: () => (/* binding */ SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES),\n/* harmony export */   SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES: () => (/* binding */ SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES),\n/* harmony export */   SEMATTRS_MESSAGING_OPERATION: () => (/* binding */ SEMATTRS_MESSAGING_OPERATION),\n/* harmony export */   SEMATTRS_MESSAGING_PROTOCOL: () => (/* binding */ SEMATTRS_MESSAGING_PROTOCOL),\n/* harmony export */   SEMATTRS_MESSAGING_PROTOCOL_VERSION: () => (/* binding */ SEMATTRS_MESSAGING_PROTOCOL_VERSION),\n/* harmony export */   SEMATTRS_MESSAGING_RABBITMQ_ROUTING_KEY: () => (/* binding */ SEMATTRS_MESSAGING_RABBITMQ_ROUTING_KEY),\n/* harmony export */   SEMATTRS_MESSAGING_SYSTEM: () => (/* binding */ SEMATTRS_MESSAGING_SYSTEM),\n/* harmony export */   SEMATTRS_MESSAGING_TEMP_DESTINATION: () => (/* binding */ SEMATTRS_MESSAGING_TEMP_DESTINATION),\n/* harmony export */   SEMATTRS_MESSAGING_URL: () => (/* binding */ SEMATTRS_MESSAGING_URL),\n/* harmony export */   SEMATTRS_NET_HOST_CARRIER_ICC: () => (/* binding */ SEMATTRS_NET_HOST_CARRIER_ICC),\n/* harmony export */   SEMATTRS_NET_HOST_CARRIER_MCC: () => (/* binding */ SEMATTRS_NET_HOST_CARRIER_MCC),\n/* harmony export */   SEMATTRS_NET_HOST_CARRIER_MNC: () => (/* binding */ SEMATTRS_NET_HOST_CARRIER_MNC),\n/* harmony export */   SEMATTRS_NET_HOST_CARRIER_NAME: () => (/* binding */ SEMATTRS_NET_HOST_CARRIER_NAME),\n/* harmony export */   SEMATTRS_NET_HOST_CONNECTION_SUBTYPE: () => (/* binding */ SEMATTRS_NET_HOST_CONNECTION_SUBTYPE),\n/* harmony export */   SEMATTRS_NET_HOST_CONNECTION_TYPE: () => (/* binding */ SEMATTRS_NET_HOST_CONNECTION_TYPE),\n/* harmony export */   SEMATTRS_NET_HOST_IP: () => (/* binding */ SEMATTRS_NET_HOST_IP),\n/* harmony export */   SEMATTRS_NET_HOST_NAME: () => (/* binding */ SEMATTRS_NET_HOST_NAME),\n/* harmony export */   SEMATTRS_NET_HOST_PORT: () => (/* binding */ SEMATTRS_NET_HOST_PORT),\n/* harmony export */   SEMATTRS_NET_PEER_IP: () => (/* binding */ SEMATTRS_NET_PEER_IP),\n/* harmony export */   SEMATTRS_NET_PEER_NAME: () => (/* binding */ SEMATTRS_NET_PEER_NAME),\n/* harmony export */   SEMATTRS_NET_PEER_PORT: () => (/* binding */ SEMATTRS_NET_PEER_PORT),\n/* harmony export */   SEMATTRS_NET_TRANSPORT: () => (/* binding */ SEMATTRS_NET_TRANSPORT),\n/* harmony export */   SEMATTRS_PEER_SERVICE: () => (/* binding */ SEMATTRS_PEER_SERVICE),\n/* harmony export */   SEMATTRS_RPC_GRPC_STATUS_CODE: () => (/* binding */ SEMATTRS_RPC_GRPC_STATUS_CODE),\n/* harmony export */   SEMATTRS_RPC_JSONRPC_ERROR_CODE: () => (/* binding */ SEMATTRS_RPC_JSONRPC_ERROR_CODE),\n/* harmony export */   SEMATTRS_RPC_JSONRPC_ERROR_MESSAGE: () => (/* binding */ SEMATTRS_RPC_JSONRPC_ERROR_MESSAGE),\n/* harmony export */   SEMATTRS_RPC_JSONRPC_REQUEST_ID: () => (/* binding */ SEMATTRS_RPC_JSONRPC_REQUEST_ID),\n/* harmony export */   SEMATTRS_RPC_JSONRPC_VERSION: () => (/* binding */ SEMATTRS_RPC_JSONRPC_VERSION),\n/* harmony export */   SEMATTRS_RPC_METHOD: () => (/* binding */ SEMATTRS_RPC_METHOD),\n/* harmony export */   SEMATTRS_RPC_SERVICE: () => (/* binding */ SEMATTRS_RPC_SERVICE),\n/* harmony export */   SEMATTRS_RPC_SYSTEM: () => (/* binding */ SEMATTRS_RPC_SYSTEM),\n/* harmony export */   SEMATTRS_THREAD_ID: () => (/* binding */ SEMATTRS_THREAD_ID),\n/* harmony export */   SEMATTRS_THREAD_NAME: () => (/* binding */ SEMATTRS_THREAD_NAME),\n/* harmony export */   SemanticAttributes: () => (/* binding */ SemanticAttributes)\n/* harmony export */ });\n/* harmony import */ var _internal_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/utils */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/internal/utils.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//----------------------------------------------------------------------------------------------------------\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\n//----------------------------------------------------------------------------------------------------------\n//----------------------------------------------------------------------------------------------------------\n// Constant values for SemanticAttributes\n//----------------------------------------------------------------------------------------------------------\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_AWS_LAMBDA_INVOKED_ARN = 'aws.lambda.invoked_arn';\nconst TMP_DB_SYSTEM = 'db.system';\nconst TMP_DB_CONNECTION_STRING = 'db.connection_string';\nconst TMP_DB_USER = 'db.user';\nconst TMP_DB_JDBC_DRIVER_CLASSNAME = 'db.jdbc.driver_classname';\nconst TMP_DB_NAME = 'db.name';\nconst TMP_DB_STATEMENT = 'db.statement';\nconst TMP_DB_OPERATION = 'db.operation';\nconst TMP_DB_MSSQL_INSTANCE_NAME = 'db.mssql.instance_name';\nconst TMP_DB_CASSANDRA_KEYSPACE = 'db.cassandra.keyspace';\nconst TMP_DB_CASSANDRA_PAGE_SIZE = 'db.cassandra.page_size';\nconst TMP_DB_CASSANDRA_CONSISTENCY_LEVEL = 'db.cassandra.consistency_level';\nconst TMP_DB_CASSANDRA_TABLE = 'db.cassandra.table';\nconst TMP_DB_CASSANDRA_IDEMPOTENCE = 'db.cassandra.idempotence';\nconst TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT = 'db.cassandra.speculative_execution_count';\nconst TMP_DB_CASSANDRA_COORDINATOR_ID = 'db.cassandra.coordinator.id';\nconst TMP_DB_CASSANDRA_COORDINATOR_DC = 'db.cassandra.coordinator.dc';\nconst TMP_DB_HBASE_NAMESPACE = 'db.hbase.namespace';\nconst TMP_DB_REDIS_DATABASE_INDEX = 'db.redis.database_index';\nconst TMP_DB_MONGODB_COLLECTION = 'db.mongodb.collection';\nconst TMP_DB_SQL_TABLE = 'db.sql.table';\nconst TMP_EXCEPTION_TYPE = 'exception.type';\nconst TMP_EXCEPTION_MESSAGE = 'exception.message';\nconst TMP_EXCEPTION_STACKTRACE = 'exception.stacktrace';\nconst TMP_EXCEPTION_ESCAPED = 'exception.escaped';\nconst TMP_FAAS_TRIGGER = 'faas.trigger';\nconst TMP_FAAS_EXECUTION = 'faas.execution';\nconst TMP_FAAS_DOCUMENT_COLLECTION = 'faas.document.collection';\nconst TMP_FAAS_DOCUMENT_OPERATION = 'faas.document.operation';\nconst TMP_FAAS_DOCUMENT_TIME = 'faas.document.time';\nconst TMP_FAAS_DOCUMENT_NAME = 'faas.document.name';\nconst TMP_FAAS_TIME = 'faas.time';\nconst TMP_FAAS_CRON = 'faas.cron';\nconst TMP_FAAS_COLDSTART = 'faas.coldstart';\nconst TMP_FAAS_INVOKED_NAME = 'faas.invoked_name';\nconst TMP_FAAS_INVOKED_PROVIDER = 'faas.invoked_provider';\nconst TMP_FAAS_INVOKED_REGION = 'faas.invoked_region';\nconst TMP_NET_TRANSPORT = 'net.transport';\nconst TMP_NET_PEER_IP = 'net.peer.ip';\nconst TMP_NET_PEER_PORT = 'net.peer.port';\nconst TMP_NET_PEER_NAME = 'net.peer.name';\nconst TMP_NET_HOST_IP = 'net.host.ip';\nconst TMP_NET_HOST_PORT = 'net.host.port';\nconst TMP_NET_HOST_NAME = 'net.host.name';\nconst TMP_NET_HOST_CONNECTION_TYPE = 'net.host.connection.type';\nconst TMP_NET_HOST_CONNECTION_SUBTYPE = 'net.host.connection.subtype';\nconst TMP_NET_HOST_CARRIER_NAME = 'net.host.carrier.name';\nconst TMP_NET_HOST_CARRIER_MCC = 'net.host.carrier.mcc';\nconst TMP_NET_HOST_CARRIER_MNC = 'net.host.carrier.mnc';\nconst TMP_NET_HOST_CARRIER_ICC = 'net.host.carrier.icc';\nconst TMP_PEER_SERVICE = 'peer.service';\nconst TMP_ENDUSER_ID = 'enduser.id';\nconst TMP_ENDUSER_ROLE = 'enduser.role';\nconst TMP_ENDUSER_SCOPE = 'enduser.scope';\nconst TMP_THREAD_ID = 'thread.id';\nconst TMP_THREAD_NAME = 'thread.name';\nconst TMP_CODE_FUNCTION = 'code.function';\nconst TMP_CODE_NAMESPACE = 'code.namespace';\nconst TMP_CODE_FILEPATH = 'code.filepath';\nconst TMP_CODE_LINENO = 'code.lineno';\nconst TMP_HTTP_METHOD = 'http.method';\nconst TMP_HTTP_URL = 'http.url';\nconst TMP_HTTP_TARGET = 'http.target';\nconst TMP_HTTP_HOST = 'http.host';\nconst TMP_HTTP_SCHEME = 'http.scheme';\nconst TMP_HTTP_STATUS_CODE = 'http.status_code';\nconst TMP_HTTP_FLAVOR = 'http.flavor';\nconst TMP_HTTP_USER_AGENT = 'http.user_agent';\nconst TMP_HTTP_REQUEST_CONTENT_LENGTH = 'http.request_content_length';\nconst TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED = 'http.request_content_length_uncompressed';\nconst TMP_HTTP_RESPONSE_CONTENT_LENGTH = 'http.response_content_length';\nconst TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED = 'http.response_content_length_uncompressed';\nconst TMP_HTTP_SERVER_NAME = 'http.server_name';\nconst TMP_HTTP_ROUTE = 'http.route';\nconst TMP_HTTP_CLIENT_IP = 'http.client_ip';\nconst TMP_AWS_DYNAMODB_TABLE_NAMES = 'aws.dynamodb.table_names';\nconst TMP_AWS_DYNAMODB_CONSUMED_CAPACITY = 'aws.dynamodb.consumed_capacity';\nconst TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS = 'aws.dynamodb.item_collection_metrics';\nconst TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY = 'aws.dynamodb.provisioned_read_capacity';\nconst TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY = 'aws.dynamodb.provisioned_write_capacity';\nconst TMP_AWS_DYNAMODB_CONSISTENT_READ = 'aws.dynamodb.consistent_read';\nconst TMP_AWS_DYNAMODB_PROJECTION = 'aws.dynamodb.projection';\nconst TMP_AWS_DYNAMODB_LIMIT = 'aws.dynamodb.limit';\nconst TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET = 'aws.dynamodb.attributes_to_get';\nconst TMP_AWS_DYNAMODB_INDEX_NAME = 'aws.dynamodb.index_name';\nconst TMP_AWS_DYNAMODB_SELECT = 'aws.dynamodb.select';\nconst TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES = 'aws.dynamodb.global_secondary_indexes';\nconst TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES = 'aws.dynamodb.local_secondary_indexes';\nconst TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE = 'aws.dynamodb.exclusive_start_table';\nconst TMP_AWS_DYNAMODB_TABLE_COUNT = 'aws.dynamodb.table_count';\nconst TMP_AWS_DYNAMODB_SCAN_FORWARD = 'aws.dynamodb.scan_forward';\nconst TMP_AWS_DYNAMODB_SEGMENT = 'aws.dynamodb.segment';\nconst TMP_AWS_DYNAMODB_TOTAL_SEGMENTS = 'aws.dynamodb.total_segments';\nconst TMP_AWS_DYNAMODB_COUNT = 'aws.dynamodb.count';\nconst TMP_AWS_DYNAMODB_SCANNED_COUNT = 'aws.dynamodb.scanned_count';\nconst TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS = 'aws.dynamodb.attribute_definitions';\nconst TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES = 'aws.dynamodb.global_secondary_index_updates';\nconst TMP_MESSAGING_SYSTEM = 'messaging.system';\nconst TMP_MESSAGING_DESTINATION = 'messaging.destination';\nconst TMP_MESSAGING_DESTINATION_KIND = 'messaging.destination_kind';\nconst TMP_MESSAGING_TEMP_DESTINATION = 'messaging.temp_destination';\nconst TMP_MESSAGING_PROTOCOL = 'messaging.protocol';\nconst TMP_MESSAGING_PROTOCOL_VERSION = 'messaging.protocol_version';\nconst TMP_MESSAGING_URL = 'messaging.url';\nconst TMP_MESSAGING_MESSAGE_ID = 'messaging.message_id';\nconst TMP_MESSAGING_CONVERSATION_ID = 'messaging.conversation_id';\nconst TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES = 'messaging.message_payload_size_bytes';\nconst TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES = 'messaging.message_payload_compressed_size_bytes';\nconst TMP_MESSAGING_OPERATION = 'messaging.operation';\nconst TMP_MESSAGING_CONSUMER_ID = 'messaging.consumer_id';\nconst TMP_MESSAGING_RABBITMQ_ROUTING_KEY = 'messaging.rabbitmq.routing_key';\nconst TMP_MESSAGING_KAFKA_MESSAGE_KEY = 'messaging.kafka.message_key';\nconst TMP_MESSAGING_KAFKA_CONSUMER_GROUP = 'messaging.kafka.consumer_group';\nconst TMP_MESSAGING_KAFKA_CLIENT_ID = 'messaging.kafka.client_id';\nconst TMP_MESSAGING_KAFKA_PARTITION = 'messaging.kafka.partition';\nconst TMP_MESSAGING_KAFKA_TOMBSTONE = 'messaging.kafka.tombstone';\nconst TMP_RPC_SYSTEM = 'rpc.system';\nconst TMP_RPC_SERVICE = 'rpc.service';\nconst TMP_RPC_METHOD = 'rpc.method';\nconst TMP_RPC_GRPC_STATUS_CODE = 'rpc.grpc.status_code';\nconst TMP_RPC_JSONRPC_VERSION = 'rpc.jsonrpc.version';\nconst TMP_RPC_JSONRPC_REQUEST_ID = 'rpc.jsonrpc.request_id';\nconst TMP_RPC_JSONRPC_ERROR_CODE = 'rpc.jsonrpc.error_code';\nconst TMP_RPC_JSONRPC_ERROR_MESSAGE = 'rpc.jsonrpc.error_message';\nconst TMP_MESSAGE_TYPE = 'message.type';\nconst TMP_MESSAGE_ID = 'message.id';\nconst TMP_MESSAGE_COMPRESSED_SIZE = 'message.compressed_size';\nconst TMP_MESSAGE_UNCOMPRESSED_SIZE = 'message.uncompressed_size';\n/**\n * The full invoked ARN as provided on the `Context` passed to the function (`Lambda-Runtime-Invoked-Function-Arn` header on the `/runtime/invocation/next` applicable).\n *\n * Note: This may be different from `faas.id` if an alias is involved.\n *\n * @deprecated Use ATTR_AWS_LAMBDA_INVOKED_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_AWS_LAMBDA_INVOKED_ARN = TMP_AWS_LAMBDA_INVOKED_ARN;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use ATTR_DB_SYSTEM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_DB_SYSTEM = TMP_DB_SYSTEM;\n/**\n * The connection string used to connect to the database. It is recommended to remove embedded credentials.\n *\n * @deprecated Use ATTR_DB_CONNECTION_STRING in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_DB_CONNECTION_STRING = TMP_DB_CONNECTION_STRING;\n/**\n * Username for accessing the database.\n *\n * @deprecated Use ATTR_DB_USER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_DB_USER = TMP_DB_USER;\n/**\n * The fully-qualified class name of the [Java Database Connectivity (JDBC)](https://docs.oracle.com/javase/8/docs/technotes/guides/jdbc/) driver used to connect.\n *\n * @deprecated Use ATTR_DB_JDBC_DRIVER_CLASSNAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_DB_JDBC_DRIVER_CLASSNAME = TMP_DB_JDBC_DRIVER_CLASSNAME;\n/**\n * If no [tech-specific attribute](#call-level-attributes-for-specific-technologies) is defined, this attribute is used to report the name of the database being accessed. For commands that switch the database, this should be set to the target database (even if the command fails).\n *\n * Note: In some SQL databases, the database name to be used is called &#34;schema name&#34;.\n *\n * @deprecated Use ATTR_DB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_DB_NAME = TMP_DB_NAME;\n/**\n * The database statement being executed.\n *\n * Note: The value may be sanitized to exclude sensitive information.\n *\n * @deprecated Use ATTR_DB_STATEMENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_DB_STATEMENT = TMP_DB_STATEMENT;\n/**\n * The name of the operation being executed, e.g. the [MongoDB command name](https://docs.mongodb.com/manual/reference/command/#database-operations) such as `findAndModify`, or the SQL keyword.\n *\n * Note: When setting this to an SQL keyword, it is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if the operation name is provided by the library being instrumented. If the SQL statement has an ambiguous operation, or performs more than one operation, this value may be omitted.\n *\n * @deprecated Use ATTR_DB_OPERATION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_DB_OPERATION = TMP_DB_OPERATION;\n/**\n * The Microsoft SQL Server [instance name](https://docs.microsoft.com/en-us/sql/connect/jdbc/building-the-connection-url?view=sql-server-ver15) connecting to. This name is used to determine the port of a named instance.\n *\n * Note: If setting a `db.mssql.instance_name`, `net.peer.port` is no longer required (but still recommended if non-standard).\n *\n * @deprecated Use ATTR_DB_MSSQL_INSTANCE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_DB_MSSQL_INSTANCE_NAME = TMP_DB_MSSQL_INSTANCE_NAME;\n/**\n * The name of the keyspace being accessed. To be used instead of the generic `db.name` attribute.\n *\n * @deprecated Use ATTR_DB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_DB_CASSANDRA_KEYSPACE = TMP_DB_CASSANDRA_KEYSPACE;\n/**\n * The fetch size used for paging, i.e. how many rows will be returned at once.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_PAGE_SIZE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_DB_CASSANDRA_PAGE_SIZE = TMP_DB_CASSANDRA_PAGE_SIZE;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use ATTR_DB_CASSANDRA_CONSISTENCY_LEVEL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_DB_CASSANDRA_CONSISTENCY_LEVEL = TMP_DB_CASSANDRA_CONSISTENCY_LEVEL;\n/**\n * The name of the primary table that the operation is acting upon, including the schema name (if applicable).\n *\n * Note: This mirrors the db.sql.table attribute but references cassandra rather than sql. It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_TABLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_DB_CASSANDRA_TABLE = TMP_DB_CASSANDRA_TABLE;\n/**\n * Whether or not the query is idempotent.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_IDEMPOTENCE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_DB_CASSANDRA_IDEMPOTENCE = TMP_DB_CASSANDRA_IDEMPOTENCE;\n/**\n * The number of times a query was speculatively executed. Not set or `0` if the query was not executed speculatively.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT = TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT;\n/**\n * The ID of the coordinating node for a query.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_COORDINATOR_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_DB_CASSANDRA_COORDINATOR_ID = TMP_DB_CASSANDRA_COORDINATOR_ID;\n/**\n * The data center of the coordinating node for a query.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_COORDINATOR_DC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_DB_CASSANDRA_COORDINATOR_DC = TMP_DB_CASSANDRA_COORDINATOR_DC;\n/**\n * The [HBase namespace](https://hbase.apache.org/book.html#_namespace) being accessed. To be used instead of the generic `db.name` attribute.\n *\n * @deprecated Use ATTR_DB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_DB_HBASE_NAMESPACE = TMP_DB_HBASE_NAMESPACE;\n/**\n * The index of the database being accessed as used in the [`SELECT` command](https://redis.io/commands/select), provided as an integer. To be used instead of the generic `db.name` attribute.\n *\n * @deprecated Use ATTR_DB_REDIS_DATABASE_INDEX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_DB_REDIS_DATABASE_INDEX = TMP_DB_REDIS_DATABASE_INDEX;\n/**\n * The collection being accessed within the database stated in `db.name`.\n *\n * @deprecated Use ATTR_DB_MONGODB_COLLECTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_DB_MONGODB_COLLECTION = TMP_DB_MONGODB_COLLECTION;\n/**\n * The name of the primary table that the operation is acting upon, including the schema name (if applicable).\n *\n * Note: It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n *\n * @deprecated Use ATTR_DB_SQL_TABLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_DB_SQL_TABLE = TMP_DB_SQL_TABLE;\n/**\n * The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.\n *\n * @deprecated Use ATTR_EXCEPTION_TYPE.\n */\nconst SEMATTRS_EXCEPTION_TYPE = TMP_EXCEPTION_TYPE;\n/**\n * The exception message.\n *\n * @deprecated Use ATTR_EXCEPTION_MESSAGE.\n */\nconst SEMATTRS_EXCEPTION_MESSAGE = TMP_EXCEPTION_MESSAGE;\n/**\n * A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.\n *\n * @deprecated Use ATTR_EXCEPTION_STACKTRACE.\n */\nconst SEMATTRS_EXCEPTION_STACKTRACE = TMP_EXCEPTION_STACKTRACE;\n/**\n* SHOULD be set to true if the exception event is recorded at a point where it is known that the exception is escaping the scope of the span.\n*\n* Note: An exception is considered to have escaped (or left) the scope of a span,\nif that span is ended while the exception is still logically &#34;in flight&#34;.\nThis may be actually &#34;in flight&#34; in some languages (e.g. if the exception\nis passed to a Context manager&#39;s `__exit__` method in Python) but will\nusually be caught at the point of recording the exception in most languages.\n\nIt is usually not possible to determine at the point where an exception is thrown\nwhether it will escape the scope of a span.\nHowever, it is trivial to know that an exception\nwill escape, if one checks for an active exception just before ending the span,\nas done in the [example above](#exception-end-example).\n\nIt follows that an exception may still escape the scope of the span\neven if the `exception.escaped` attribute was not set or set to false,\nsince the event might have been recorded at a time where it was not\nclear whether the exception will escape.\n*\n* @deprecated Use ATTR_EXCEPTION_ESCAPED.\n*/\nconst SEMATTRS_EXCEPTION_ESCAPED = TMP_EXCEPTION_ESCAPED;\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use ATTR_FAAS_TRIGGER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_FAAS_TRIGGER = TMP_FAAS_TRIGGER;\n/**\n * The execution ID of the current function execution.\n *\n * @deprecated Use ATTR_FAAS_INVOCATION_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_FAAS_EXECUTION = TMP_FAAS_EXECUTION;\n/**\n * The name of the source on which the triggering operation was performed. For example, in Cloud Storage or S3 corresponds to the bucket name, and in Cosmos DB to the database name.\n *\n * @deprecated Use ATTR_FAAS_DOCUMENT_COLLECTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_FAAS_DOCUMENT_COLLECTION = TMP_FAAS_DOCUMENT_COLLECTION;\n/**\n * Describes the type of the operation that was performed on the data.\n *\n * @deprecated Use ATTR_FAAS_DOCUMENT_OPERATION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_FAAS_DOCUMENT_OPERATION = TMP_FAAS_DOCUMENT_OPERATION;\n/**\n * A string containing the time when the data was accessed in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n *\n * @deprecated Use ATTR_FAAS_DOCUMENT_TIME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_FAAS_DOCUMENT_TIME = TMP_FAAS_DOCUMENT_TIME;\n/**\n * The document name/table subjected to the operation. For example, in Cloud Storage or S3 is the name of the file, and in Cosmos DB the table name.\n *\n * @deprecated Use ATTR_FAAS_DOCUMENT_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_FAAS_DOCUMENT_NAME = TMP_FAAS_DOCUMENT_NAME;\n/**\n * A string containing the function invocation time in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n *\n * @deprecated Use ATTR_FAAS_TIME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_FAAS_TIME = TMP_FAAS_TIME;\n/**\n * A string containing the schedule period as [Cron Expression](https://docs.oracle.com/cd/E12058_01/doc/doc.1014/e12030/cron_expressions.htm).\n *\n * @deprecated Use ATTR_FAAS_CRON in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_FAAS_CRON = TMP_FAAS_CRON;\n/**\n * A boolean that is true if the serverless function is executed for the first time (aka cold-start).\n *\n * @deprecated Use ATTR_FAAS_COLDSTART in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_FAAS_COLDSTART = TMP_FAAS_COLDSTART;\n/**\n * The name of the invoked function.\n *\n * Note: SHOULD be equal to the `faas.name` resource attribute of the invoked function.\n *\n * @deprecated Use ATTR_FAAS_INVOKED_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_FAAS_INVOKED_NAME = TMP_FAAS_INVOKED_NAME;\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n *\n * @deprecated Use ATTR_FAAS_INVOKED_PROVIDER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_FAAS_INVOKED_PROVIDER = TMP_FAAS_INVOKED_PROVIDER;\n/**\n * The cloud region of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.region` resource attribute of the invoked function.\n *\n * @deprecated Use ATTR_FAAS_INVOKED_REGION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_FAAS_INVOKED_REGION = TMP_FAAS_INVOKED_REGION;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use ATTR_NET_TRANSPORT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_NET_TRANSPORT = TMP_NET_TRANSPORT;\n/**\n * Remote address of the peer (dotted decimal for IPv4 or [RFC5952](https://tools.ietf.org/html/rfc5952) for IPv6).\n *\n * @deprecated Use ATTR_NET_PEER_IP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_NET_PEER_IP = TMP_NET_PEER_IP;\n/**\n * Remote port number.\n *\n * @deprecated Use ATTR_NET_PEER_PORT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_NET_PEER_PORT = TMP_NET_PEER_PORT;\n/**\n * Remote hostname or similar, see note below.\n *\n * @deprecated Use ATTR_NET_PEER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_NET_PEER_NAME = TMP_NET_PEER_NAME;\n/**\n * Like `net.peer.ip` but for the host IP. Useful in case of a multi-IP host.\n *\n * @deprecated Use ATTR_NET_HOST_IP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_NET_HOST_IP = TMP_NET_HOST_IP;\n/**\n * Like `net.peer.port` but for the host port.\n *\n * @deprecated Use ATTR_NET_HOST_PORT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_NET_HOST_PORT = TMP_NET_HOST_PORT;\n/**\n * Local hostname or similar, see note below.\n *\n * @deprecated Use ATTR_NET_HOST_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_NET_HOST_NAME = TMP_NET_HOST_NAME;\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use ATTR_NETWORK_CONNECTION_TYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_NET_HOST_CONNECTION_TYPE = TMP_NET_HOST_CONNECTION_TYPE;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use ATTR_NETWORK_CONNECTION_SUBTYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_NET_HOST_CONNECTION_SUBTYPE = TMP_NET_HOST_CONNECTION_SUBTYPE;\n/**\n * The name of the mobile carrier.\n *\n * @deprecated Use ATTR_NETWORK_CARRIER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_NET_HOST_CARRIER_NAME = TMP_NET_HOST_CARRIER_NAME;\n/**\n * The mobile carrier country code.\n *\n * @deprecated Use ATTR_NETWORK_CARRIER_MCC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_NET_HOST_CARRIER_MCC = TMP_NET_HOST_CARRIER_MCC;\n/**\n * The mobile carrier network code.\n *\n * @deprecated Use ATTR_NETWORK_CARRIER_MNC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_NET_HOST_CARRIER_MNC = TMP_NET_HOST_CARRIER_MNC;\n/**\n * The ISO 3166-1 alpha-2 2-character country code associated with the mobile carrier network.\n *\n * @deprecated Use ATTR_NETWORK_CARRIER_ICC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_NET_HOST_CARRIER_ICC = TMP_NET_HOST_CARRIER_ICC;\n/**\n * The [`service.name`](../../resource/semantic_conventions/README.md#service) of the remote service. SHOULD be equal to the actual `service.name` resource attribute of the remote service if any.\n *\n * @deprecated Use ATTR_PEER_SERVICE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_PEER_SERVICE = TMP_PEER_SERVICE;\n/**\n * Username or client_id extracted from the access token or [Authorization](https://tools.ietf.org/html/rfc7235#section-4.2) header in the inbound request from outside the system.\n *\n * @deprecated Use ATTR_ENDUSER_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_ENDUSER_ID = TMP_ENDUSER_ID;\n/**\n * Actual/assumed role the client is making the request under extracted from token or application security context.\n *\n * @deprecated Use ATTR_ENDUSER_ROLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_ENDUSER_ROLE = TMP_ENDUSER_ROLE;\n/**\n * Scopes or granted authorities the client currently possesses extracted from token or application security context. The value would come from the scope associated with an [OAuth 2.0 Access Token](https://tools.ietf.org/html/rfc6749#section-3.3) or an attribute value in a [SAML 2.0 Assertion](http://docs.oasis-open.org/security/saml/Post2.0/sstc-saml-tech-overview-2.0.html).\n *\n * @deprecated Use ATTR_ENDUSER_SCOPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_ENDUSER_SCOPE = TMP_ENDUSER_SCOPE;\n/**\n * Current &#34;managed&#34; thread ID (as opposed to OS thread ID).\n *\n * @deprecated Use ATTR_THREAD_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_THREAD_ID = TMP_THREAD_ID;\n/**\n * Current thread name.\n *\n * @deprecated Use ATTR_THREAD_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_THREAD_NAME = TMP_THREAD_NAME;\n/**\n * The method or function name, or equivalent (usually rightmost part of the code unit&#39;s name).\n *\n * @deprecated Use ATTR_CODE_FUNCTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_CODE_FUNCTION = TMP_CODE_FUNCTION;\n/**\n * The &#34;namespace&#34; within which `code.function` is defined. Usually the qualified class or module name, such that `code.namespace` + some separator + `code.function` form a unique identifier for the code unit.\n *\n * @deprecated Use ATTR_CODE_NAMESPACE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_CODE_NAMESPACE = TMP_CODE_NAMESPACE;\n/**\n * The source code file name that identifies the code unit as uniquely as possible (preferably an absolute file path).\n *\n * @deprecated Use ATTR_CODE_FILEPATH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_CODE_FILEPATH = TMP_CODE_FILEPATH;\n/**\n * The line number in `code.filepath` best representing the operation. It SHOULD point within the code unit named in `code.function`.\n *\n * @deprecated Use ATTR_CODE_LINENO in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_CODE_LINENO = TMP_CODE_LINENO;\n/**\n * HTTP request method.\n *\n * @deprecated Use ATTR_HTTP_METHOD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_HTTP_METHOD = TMP_HTTP_METHOD;\n/**\n * Full HTTP request URL in the form `scheme://host[:port]/path?query[#fragment]`. Usually the fragment is not transmitted over HTTP, but if it is known, it should be included nevertheless.\n *\n * Note: `http.url` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`. In such case the attribute&#39;s value should be `https://www.example.com/`.\n *\n * @deprecated Use ATTR_HTTP_URL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_HTTP_URL = TMP_HTTP_URL;\n/**\n * The full request target as passed in a HTTP request line or equivalent.\n *\n * @deprecated Use ATTR_HTTP_TARGET in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_HTTP_TARGET = TMP_HTTP_TARGET;\n/**\n * The value of the [HTTP host header](https://tools.ietf.org/html/rfc7230#section-5.4). An empty Host header should also be reported, see note.\n *\n * Note: When the header is present but empty the attribute SHOULD be set to the empty string. Note that this is a valid situation that is expected in certain cases, according the aforementioned [section of RFC 7230](https://tools.ietf.org/html/rfc7230#section-5.4). When the header is not set the attribute MUST NOT be set.\n *\n * @deprecated Use ATTR_HTTP_HOST in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_HTTP_HOST = TMP_HTTP_HOST;\n/**\n * The URI scheme identifying the used protocol.\n *\n * @deprecated Use ATTR_HTTP_SCHEME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_HTTP_SCHEME = TMP_HTTP_SCHEME;\n/**\n * [HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).\n *\n * @deprecated Use ATTR_HTTP_STATUS_CODE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_HTTP_STATUS_CODE = TMP_HTTP_STATUS_CODE;\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use ATTR_HTTP_FLAVOR in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_HTTP_FLAVOR = TMP_HTTP_FLAVOR;\n/**\n * Value of the [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3) header sent by the client.\n *\n * @deprecated Use ATTR_HTTP_USER_AGENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_HTTP_USER_AGENT = TMP_HTTP_USER_AGENT;\n/**\n * The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.\n *\n * @deprecated Use ATTR_HTTP_REQUEST_CONTENT_LENGTH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH = TMP_HTTP_REQUEST_CONTENT_LENGTH;\n/**\n * The size of the uncompressed request payload body after transport decoding. Not set if transport encoding not used.\n *\n * @deprecated Use ATTR_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED = TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED;\n/**\n * The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.\n *\n * @deprecated Use ATTR_HTTP_RESPONSE_CONTENT_LENGTH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH = TMP_HTTP_RESPONSE_CONTENT_LENGTH;\n/**\n * The size of the uncompressed response payload body after transport decoding. Not set if transport encoding not used.\n *\n * @deprecated Use ATTR_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED = TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED;\n/**\n * The primary server name of the matched virtual host. This should be obtained via configuration. If no such configuration can be obtained, this attribute MUST NOT be set ( `net.host.name` should be used instead).\n *\n * Note: `http.url` is usually not readily available on the server side but would have to be assembled in a cumbersome and sometimes lossy process from other information (see e.g. open-telemetry/opentelemetry-python/pull/148). It is thus preferred to supply the raw data that is available.\n *\n * @deprecated Use ATTR_HTTP_SERVER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_HTTP_SERVER_NAME = TMP_HTTP_SERVER_NAME;\n/**\n * The matched route (path template).\n *\n * @deprecated Use ATTR_HTTP_ROUTE.\n */\nconst SEMATTRS_HTTP_ROUTE = TMP_HTTP_ROUTE;\n/**\n* The IP address of the original client behind all proxies, if known (e.g. from [X-Forwarded-For](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For)).\n*\n* Note: This is not necessarily the same as `net.peer.ip`, which would\nidentify the network-level peer, which may be a proxy.\n\nThis attribute should be set when a source of information different\nfrom the one used for `net.peer.ip`, is available even if that other\nsource just confirms the same value as `net.peer.ip`.\nRationale: For `net.peer.ip`, one typically does not know if it\ncomes from a proxy, reverse proxy, or the actual client. Setting\n`http.client_ip` when it&#39;s the same as `net.peer.ip` means that\none is at least somewhat confident that the address is not that of\nthe closest proxy.\n*\n* @deprecated Use ATTR_HTTP_CLIENT_IP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n*/\nconst SEMATTRS_HTTP_CLIENT_IP = TMP_HTTP_CLIENT_IP;\n/**\n * The keys in the `RequestItems` object field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_TABLE_NAMES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_AWS_DYNAMODB_TABLE_NAMES = TMP_AWS_DYNAMODB_TABLE_NAMES;\n/**\n * The JSON-serialized value of each item in the `ConsumedCapacity` response field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_CONSUMED_CAPACITY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_AWS_DYNAMODB_CONSUMED_CAPACITY = TMP_AWS_DYNAMODB_CONSUMED_CAPACITY;\n/**\n * The JSON-serialized value of the `ItemCollectionMetrics` response field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_ITEM_COLLECTION_METRICS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_AWS_DYNAMODB_ITEM_COLLECTION_METRICS = TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS;\n/**\n * The value of the `ProvisionedThroughput.ReadCapacityUnits` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY = TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY;\n/**\n * The value of the `ProvisionedThroughput.WriteCapacityUnits` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY = TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY;\n/**\n * The value of the `ConsistentRead` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_CONSISTENT_READ in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_AWS_DYNAMODB_CONSISTENT_READ = TMP_AWS_DYNAMODB_CONSISTENT_READ;\n/**\n * The value of the `ProjectionExpression` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_PROJECTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_AWS_DYNAMODB_PROJECTION = TMP_AWS_DYNAMODB_PROJECTION;\n/**\n * The value of the `Limit` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_LIMIT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_AWS_DYNAMODB_LIMIT = TMP_AWS_DYNAMODB_LIMIT;\n/**\n * The value of the `AttributesToGet` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_ATTRIBUTES_TO_GET in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_AWS_DYNAMODB_ATTRIBUTES_TO_GET = TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET;\n/**\n * The value of the `IndexName` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_INDEX_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_AWS_DYNAMODB_INDEX_NAME = TMP_AWS_DYNAMODB_INDEX_NAME;\n/**\n * The value of the `Select` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_SELECT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_AWS_DYNAMODB_SELECT = TMP_AWS_DYNAMODB_SELECT;\n/**\n * The JSON-serialized value of each item of the `GlobalSecondaryIndexes` request field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES = TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES;\n/**\n * The JSON-serialized value of each item of the `LocalSecondaryIndexes` request field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES = TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES;\n/**\n * The value of the `ExclusiveStartTableName` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_EXCLUSIVE_START_TABLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_AWS_DYNAMODB_EXCLUSIVE_START_TABLE = TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE;\n/**\n * The the number of items in the `TableNames` response parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_TABLE_COUNT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_AWS_DYNAMODB_TABLE_COUNT = TMP_AWS_DYNAMODB_TABLE_COUNT;\n/**\n * The value of the `ScanIndexForward` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_SCAN_FORWARD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_AWS_DYNAMODB_SCAN_FORWARD = TMP_AWS_DYNAMODB_SCAN_FORWARD;\n/**\n * The value of the `Segment` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_SEGMENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_AWS_DYNAMODB_SEGMENT = TMP_AWS_DYNAMODB_SEGMENT;\n/**\n * The value of the `TotalSegments` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_TOTAL_SEGMENTS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_AWS_DYNAMODB_TOTAL_SEGMENTS = TMP_AWS_DYNAMODB_TOTAL_SEGMENTS;\n/**\n * The value of the `Count` response parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_COUNT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_AWS_DYNAMODB_COUNT = TMP_AWS_DYNAMODB_COUNT;\n/**\n * The value of the `ScannedCount` response parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_SCANNED_COUNT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_AWS_DYNAMODB_SCANNED_COUNT = TMP_AWS_DYNAMODB_SCANNED_COUNT;\n/**\n * The JSON-serialized value of each item in the `AttributeDefinitions` request field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS = TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS;\n/**\n * The JSON-serialized value of each item in the the `GlobalSecondaryIndexUpdates` request field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES = TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES;\n/**\n * A string identifying the messaging system.\n *\n * @deprecated Use ATTR_MESSAGING_SYSTEM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_MESSAGING_SYSTEM = TMP_MESSAGING_SYSTEM;\n/**\n * The message destination name. This might be equal to the span name but is required nevertheless.\n *\n * @deprecated Use ATTR_MESSAGING_DESTINATION_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_MESSAGING_DESTINATION = TMP_MESSAGING_DESTINATION;\n/**\n * The kind of message destination.\n *\n * @deprecated Removed in semconv v1.20.0.\n */\nconst SEMATTRS_MESSAGING_DESTINATION_KIND = TMP_MESSAGING_DESTINATION_KIND;\n/**\n * A boolean that is true if the message destination is temporary.\n *\n * @deprecated Use ATTR_MESSAGING_DESTINATION_TEMPORARY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_MESSAGING_TEMP_DESTINATION = TMP_MESSAGING_TEMP_DESTINATION;\n/**\n * The name of the transport protocol.\n *\n * @deprecated Use ATTR_NETWORK_PROTOCOL_NAME.\n */\nconst SEMATTRS_MESSAGING_PROTOCOL = TMP_MESSAGING_PROTOCOL;\n/**\n * The version of the transport protocol.\n *\n * @deprecated Use ATTR_NETWORK_PROTOCOL_VERSION.\n */\nconst SEMATTRS_MESSAGING_PROTOCOL_VERSION = TMP_MESSAGING_PROTOCOL_VERSION;\n/**\n * Connection string.\n *\n * @deprecated Removed in semconv v1.17.0.\n */\nconst SEMATTRS_MESSAGING_URL = TMP_MESSAGING_URL;\n/**\n * A value used by the messaging system as an identifier for the message, represented as a string.\n *\n * @deprecated Use ATTR_MESSAGING_MESSAGE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_MESSAGING_MESSAGE_ID = TMP_MESSAGING_MESSAGE_ID;\n/**\n * The [conversation ID](#conversations) identifying the conversation to which the message belongs, represented as a string. Sometimes called &#34;Correlation ID&#34;.\n *\n * @deprecated Use ATTR_MESSAGING_MESSAGE_CONVERSATION_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_MESSAGING_CONVERSATION_ID = TMP_MESSAGING_CONVERSATION_ID;\n/**\n * The (uncompressed) size of the message payload in bytes. Also use this attribute if it is unknown whether the compressed or uncompressed payload size is reported.\n *\n * @deprecated Use ATTR_MESSAGING_MESSAGE_BODY_SIZE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES = TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES;\n/**\n * The compressed size of the message payload in bytes.\n *\n * @deprecated Removed in semconv v1.22.0.\n */\nconst SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES = TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES;\n/**\n * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n *\n * @deprecated Use ATTR_MESSAGING_OPERATION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_MESSAGING_OPERATION = TMP_MESSAGING_OPERATION;\n/**\n * The identifier for the consumer receiving a message. For Kafka, set it to `{messaging.kafka.consumer_group} - {messaging.kafka.client_id}`, if both are present, or only `messaging.kafka.consumer_group`. For brokers, such as RabbitMQ and Artemis, set it to the `client_id` of the client consuming the message.\n *\n * @deprecated Removed in semconv v1.21.0.\n */\nconst SEMATTRS_MESSAGING_CONSUMER_ID = TMP_MESSAGING_CONSUMER_ID;\n/**\n * RabbitMQ message routing key.\n *\n * @deprecated Use ATTR_MESSAGING_RABBITMQ_DESTINATION_ROUTING_KEY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_MESSAGING_RABBITMQ_ROUTING_KEY = TMP_MESSAGING_RABBITMQ_ROUTING_KEY;\n/**\n * Message keys in Kafka are used for grouping alike messages to ensure they&#39;re processed on the same partition. They differ from `messaging.message_id` in that they&#39;re not unique. If the key is `null`, the attribute MUST NOT be set.\n *\n * Note: If the key type is not string, it&#39;s string representation has to be supplied for the attribute. If the key has no unambiguous, canonical string form, don&#39;t include its value.\n *\n * @deprecated Use ATTR_MESSAGING_KAFKA_MESSAGE_KEY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_MESSAGING_KAFKA_MESSAGE_KEY = TMP_MESSAGING_KAFKA_MESSAGE_KEY;\n/**\n * Name of the Kafka Consumer Group that is handling the message. Only applies to consumers, not producers.\n *\n * @deprecated Use ATTR_MESSAGING_KAFKA_CONSUMER_GROUP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_MESSAGING_KAFKA_CONSUMER_GROUP = TMP_MESSAGING_KAFKA_CONSUMER_GROUP;\n/**\n * Client Id for the Consumer or Producer that is handling the message.\n *\n * @deprecated Use ATTR_MESSAGING_CLIENT_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_MESSAGING_KAFKA_CLIENT_ID = TMP_MESSAGING_KAFKA_CLIENT_ID;\n/**\n * Partition the message is sent to.\n *\n * @deprecated Use ATTR_MESSAGING_KAFKA_DESTINATION_PARTITION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_MESSAGING_KAFKA_PARTITION = TMP_MESSAGING_KAFKA_PARTITION;\n/**\n * A boolean that is true if the message is a tombstone.\n *\n * @deprecated Use ATTR_MESSAGING_KAFKA_MESSAGE_TOMBSTONE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_MESSAGING_KAFKA_TOMBSTONE = TMP_MESSAGING_KAFKA_TOMBSTONE;\n/**\n * A string identifying the remoting system.\n *\n * @deprecated Use ATTR_RPC_SYSTEM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_RPC_SYSTEM = TMP_RPC_SYSTEM;\n/**\n * The full (logical) name of the service being called, including its package name, if applicable.\n *\n * Note: This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n *\n * @deprecated Use ATTR_RPC_SERVICE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_RPC_SERVICE = TMP_RPC_SERVICE;\n/**\n * The name of the (logical) method being called, must be equal to the $method part in the span name.\n *\n * Note: This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n *\n * @deprecated Use ATTR_RPC_METHOD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_RPC_METHOD = TMP_RPC_METHOD;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use ATTR_RPC_GRPC_STATUS_CODE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_RPC_GRPC_STATUS_CODE = TMP_RPC_GRPC_STATUS_CODE;\n/**\n * Protocol version as in `jsonrpc` property of request/response. Since JSON-RPC 1.0 does not specify this, the value can be omitted.\n *\n * @deprecated Use ATTR_RPC_JSONRPC_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_RPC_JSONRPC_VERSION = TMP_RPC_JSONRPC_VERSION;\n/**\n * `id` property of request or response. Since protocol allows id to be int, string, `null` or missing (for notifications), value is expected to be cast to string for simplicity. Use empty string in case of `null` value. Omit entirely if this is a notification.\n *\n * @deprecated Use ATTR_RPC_JSONRPC_REQUEST_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_RPC_JSONRPC_REQUEST_ID = TMP_RPC_JSONRPC_REQUEST_ID;\n/**\n * `error.code` property of response if it is an error response.\n *\n * @deprecated Use ATTR_RPC_JSONRPC_ERROR_CODE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_RPC_JSONRPC_ERROR_CODE = TMP_RPC_JSONRPC_ERROR_CODE;\n/**\n * `error.message` property of response if it is an error response.\n *\n * @deprecated Use ATTR_RPC_JSONRPC_ERROR_MESSAGE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_RPC_JSONRPC_ERROR_MESSAGE = TMP_RPC_JSONRPC_ERROR_MESSAGE;\n/**\n * Whether this is a received or sent message.\n *\n * @deprecated Use ATTR_MESSAGE_TYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_MESSAGE_TYPE = TMP_MESSAGE_TYPE;\n/**\n * MUST be calculated as two different counters starting from `1` one for sent messages and one for received message.\n *\n * Note: This way we guarantee that the values will be consistent between different implementations.\n *\n * @deprecated Use ATTR_MESSAGE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_MESSAGE_ID = TMP_MESSAGE_ID;\n/**\n * Compressed size of the message in bytes.\n *\n * @deprecated Use ATTR_MESSAGE_COMPRESSED_SIZE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_MESSAGE_COMPRESSED_SIZE = TMP_MESSAGE_COMPRESSED_SIZE;\n/**\n * Uncompressed size of the message in bytes.\n *\n * @deprecated Use ATTR_MESSAGE_UNCOMPRESSED_SIZE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_MESSAGE_UNCOMPRESSED_SIZE = TMP_MESSAGE_UNCOMPRESSED_SIZE;\n/**\n * Create exported Value Map for SemanticAttributes values\n * @deprecated Use the SEMATTRS_XXXXX constants rather than the SemanticAttributes.XXXXX for bundle minification\n */\nconst SemanticAttributes = \n/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([\n    TMP_AWS_LAMBDA_INVOKED_ARN,\n    TMP_DB_SYSTEM,\n    TMP_DB_CONNECTION_STRING,\n    TMP_DB_USER,\n    TMP_DB_JDBC_DRIVER_CLASSNAME,\n    TMP_DB_NAME,\n    TMP_DB_STATEMENT,\n    TMP_DB_OPERATION,\n    TMP_DB_MSSQL_INSTANCE_NAME,\n    TMP_DB_CASSANDRA_KEYSPACE,\n    TMP_DB_CASSANDRA_PAGE_SIZE,\n    TMP_DB_CASSANDRA_CONSISTENCY_LEVEL,\n    TMP_DB_CASSANDRA_TABLE,\n    TMP_DB_CASSANDRA_IDEMPOTENCE,\n    TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT,\n    TMP_DB_CASSANDRA_COORDINATOR_ID,\n    TMP_DB_CASSANDRA_COORDINATOR_DC,\n    TMP_DB_HBASE_NAMESPACE,\n    TMP_DB_REDIS_DATABASE_INDEX,\n    TMP_DB_MONGODB_COLLECTION,\n    TMP_DB_SQL_TABLE,\n    TMP_EXCEPTION_TYPE,\n    TMP_EXCEPTION_MESSAGE,\n    TMP_EXCEPTION_STACKTRACE,\n    TMP_EXCEPTION_ESCAPED,\n    TMP_FAAS_TRIGGER,\n    TMP_FAAS_EXECUTION,\n    TMP_FAAS_DOCUMENT_COLLECTION,\n    TMP_FAAS_DOCUMENT_OPERATION,\n    TMP_FAAS_DOCUMENT_TIME,\n    TMP_FAAS_DOCUMENT_NAME,\n    TMP_FAAS_TIME,\n    TMP_FAAS_CRON,\n    TMP_FAAS_COLDSTART,\n    TMP_FAAS_INVOKED_NAME,\n    TMP_FAAS_INVOKED_PROVIDER,\n    TMP_FAAS_INVOKED_REGION,\n    TMP_NET_TRANSPORT,\n    TMP_NET_PEER_IP,\n    TMP_NET_PEER_PORT,\n    TMP_NET_PEER_NAME,\n    TMP_NET_HOST_IP,\n    TMP_NET_HOST_PORT,\n    TMP_NET_HOST_NAME,\n    TMP_NET_HOST_CONNECTION_TYPE,\n    TMP_NET_HOST_CONNECTION_SUBTYPE,\n    TMP_NET_HOST_CARRIER_NAME,\n    TMP_NET_HOST_CARRIER_MCC,\n    TMP_NET_HOST_CARRIER_MNC,\n    TMP_NET_HOST_CARRIER_ICC,\n    TMP_PEER_SERVICE,\n    TMP_ENDUSER_ID,\n    TMP_ENDUSER_ROLE,\n    TMP_ENDUSER_SCOPE,\n    TMP_THREAD_ID,\n    TMP_THREAD_NAME,\n    TMP_CODE_FUNCTION,\n    TMP_CODE_NAMESPACE,\n    TMP_CODE_FILEPATH,\n    TMP_CODE_LINENO,\n    TMP_HTTP_METHOD,\n    TMP_HTTP_URL,\n    TMP_HTTP_TARGET,\n    TMP_HTTP_HOST,\n    TMP_HTTP_SCHEME,\n    TMP_HTTP_STATUS_CODE,\n    TMP_HTTP_FLAVOR,\n    TMP_HTTP_USER_AGENT,\n    TMP_HTTP_REQUEST_CONTENT_LENGTH,\n    TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED,\n    TMP_HTTP_RESPONSE_CONTENT_LENGTH,\n    TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED,\n    TMP_HTTP_SERVER_NAME,\n    TMP_HTTP_ROUTE,\n    TMP_HTTP_CLIENT_IP,\n    TMP_AWS_DYNAMODB_TABLE_NAMES,\n    TMP_AWS_DYNAMODB_CONSUMED_CAPACITY,\n    TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS,\n    TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY,\n    TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY,\n    TMP_AWS_DYNAMODB_CONSISTENT_READ,\n    TMP_AWS_DYNAMODB_PROJECTION,\n    TMP_AWS_DYNAMODB_LIMIT,\n    TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET,\n    TMP_AWS_DYNAMODB_INDEX_NAME,\n    TMP_AWS_DYNAMODB_SELECT,\n    TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES,\n    TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES,\n    TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE,\n    TMP_AWS_DYNAMODB_TABLE_COUNT,\n    TMP_AWS_DYNAMODB_SCAN_FORWARD,\n    TMP_AWS_DYNAMODB_SEGMENT,\n    TMP_AWS_DYNAMODB_TOTAL_SEGMENTS,\n    TMP_AWS_DYNAMODB_COUNT,\n    TMP_AWS_DYNAMODB_SCANNED_COUNT,\n    TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS,\n    TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES,\n    TMP_MESSAGING_SYSTEM,\n    TMP_MESSAGING_DESTINATION,\n    TMP_MESSAGING_DESTINATION_KIND,\n    TMP_MESSAGING_TEMP_DESTINATION,\n    TMP_MESSAGING_PROTOCOL,\n    TMP_MESSAGING_PROTOCOL_VERSION,\n    TMP_MESSAGING_URL,\n    TMP_MESSAGING_MESSAGE_ID,\n    TMP_MESSAGING_CONVERSATION_ID,\n    TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES,\n    TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES,\n    TMP_MESSAGING_OPERATION,\n    TMP_MESSAGING_CONSUMER_ID,\n    TMP_MESSAGING_RABBITMQ_ROUTING_KEY,\n    TMP_MESSAGING_KAFKA_MESSAGE_KEY,\n    TMP_MESSAGING_KAFKA_CONSUMER_GROUP,\n    TMP_MESSAGING_KAFKA_CLIENT_ID,\n    TMP_MESSAGING_KAFKA_PARTITION,\n    TMP_MESSAGING_KAFKA_TOMBSTONE,\n    TMP_RPC_SYSTEM,\n    TMP_RPC_SERVICE,\n    TMP_RPC_METHOD,\n    TMP_RPC_GRPC_STATUS_CODE,\n    TMP_RPC_JSONRPC_VERSION,\n    TMP_RPC_JSONRPC_REQUEST_ID,\n    TMP_RPC_JSONRPC_ERROR_CODE,\n    TMP_RPC_JSONRPC_ERROR_MESSAGE,\n    TMP_MESSAGE_TYPE,\n    TMP_MESSAGE_ID,\n    TMP_MESSAGE_COMPRESSED_SIZE,\n    TMP_MESSAGE_UNCOMPRESSED_SIZE,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for DbSystemValues enum definition\n *\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_DBSYSTEMVALUES_OTHER_SQL = 'other_sql';\nconst TMP_DBSYSTEMVALUES_MSSQL = 'mssql';\nconst TMP_DBSYSTEMVALUES_MYSQL = 'mysql';\nconst TMP_DBSYSTEMVALUES_ORACLE = 'oracle';\nconst TMP_DBSYSTEMVALUES_DB2 = 'db2';\nconst TMP_DBSYSTEMVALUES_POSTGRESQL = 'postgresql';\nconst TMP_DBSYSTEMVALUES_REDSHIFT = 'redshift';\nconst TMP_DBSYSTEMVALUES_HIVE = 'hive';\nconst TMP_DBSYSTEMVALUES_CLOUDSCAPE = 'cloudscape';\nconst TMP_DBSYSTEMVALUES_HSQLDB = 'hsqldb';\nconst TMP_DBSYSTEMVALUES_PROGRESS = 'progress';\nconst TMP_DBSYSTEMVALUES_MAXDB = 'maxdb';\nconst TMP_DBSYSTEMVALUES_HANADB = 'hanadb';\nconst TMP_DBSYSTEMVALUES_INGRES = 'ingres';\nconst TMP_DBSYSTEMVALUES_FIRSTSQL = 'firstsql';\nconst TMP_DBSYSTEMVALUES_EDB = 'edb';\nconst TMP_DBSYSTEMVALUES_CACHE = 'cache';\nconst TMP_DBSYSTEMVALUES_ADABAS = 'adabas';\nconst TMP_DBSYSTEMVALUES_FIREBIRD = 'firebird';\nconst TMP_DBSYSTEMVALUES_DERBY = 'derby';\nconst TMP_DBSYSTEMVALUES_FILEMAKER = 'filemaker';\nconst TMP_DBSYSTEMVALUES_INFORMIX = 'informix';\nconst TMP_DBSYSTEMVALUES_INSTANTDB = 'instantdb';\nconst TMP_DBSYSTEMVALUES_INTERBASE = 'interbase';\nconst TMP_DBSYSTEMVALUES_MARIADB = 'mariadb';\nconst TMP_DBSYSTEMVALUES_NETEZZA = 'netezza';\nconst TMP_DBSYSTEMVALUES_PERVASIVE = 'pervasive';\nconst TMP_DBSYSTEMVALUES_POINTBASE = 'pointbase';\nconst TMP_DBSYSTEMVALUES_SQLITE = 'sqlite';\nconst TMP_DBSYSTEMVALUES_SYBASE = 'sybase';\nconst TMP_DBSYSTEMVALUES_TERADATA = 'teradata';\nconst TMP_DBSYSTEMVALUES_VERTICA = 'vertica';\nconst TMP_DBSYSTEMVALUES_H2 = 'h2';\nconst TMP_DBSYSTEMVALUES_COLDFUSION = 'coldfusion';\nconst TMP_DBSYSTEMVALUES_CASSANDRA = 'cassandra';\nconst TMP_DBSYSTEMVALUES_HBASE = 'hbase';\nconst TMP_DBSYSTEMVALUES_MONGODB = 'mongodb';\nconst TMP_DBSYSTEMVALUES_REDIS = 'redis';\nconst TMP_DBSYSTEMVALUES_COUCHBASE = 'couchbase';\nconst TMP_DBSYSTEMVALUES_COUCHDB = 'couchdb';\nconst TMP_DBSYSTEMVALUES_COSMOSDB = 'cosmosdb';\nconst TMP_DBSYSTEMVALUES_DYNAMODB = 'dynamodb';\nconst TMP_DBSYSTEMVALUES_NEO4J = 'neo4j';\nconst TMP_DBSYSTEMVALUES_GEODE = 'geode';\nconst TMP_DBSYSTEMVALUES_ELASTICSEARCH = 'elasticsearch';\nconst TMP_DBSYSTEMVALUES_MEMCACHED = 'memcached';\nconst TMP_DBSYSTEMVALUES_COCKROACHDB = 'cockroachdb';\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_OTHER_SQL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBSYSTEMVALUES_OTHER_SQL = TMP_DBSYSTEMVALUES_OTHER_SQL;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MSSQL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBSYSTEMVALUES_MSSQL = TMP_DBSYSTEMVALUES_MSSQL;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MYSQL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBSYSTEMVALUES_MYSQL = TMP_DBSYSTEMVALUES_MYSQL;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_ORACLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBSYSTEMVALUES_ORACLE = TMP_DBSYSTEMVALUES_ORACLE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_DB2 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBSYSTEMVALUES_DB2 = TMP_DBSYSTEMVALUES_DB2;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_POSTGRESQL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBSYSTEMVALUES_POSTGRESQL = TMP_DBSYSTEMVALUES_POSTGRESQL;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_REDSHIFT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBSYSTEMVALUES_REDSHIFT = TMP_DBSYSTEMVALUES_REDSHIFT;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_HIVE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBSYSTEMVALUES_HIVE = TMP_DBSYSTEMVALUES_HIVE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_CLOUDSCAPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBSYSTEMVALUES_CLOUDSCAPE = TMP_DBSYSTEMVALUES_CLOUDSCAPE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_HSQLDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBSYSTEMVALUES_HSQLDB = TMP_DBSYSTEMVALUES_HSQLDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_PROGRESS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBSYSTEMVALUES_PROGRESS = TMP_DBSYSTEMVALUES_PROGRESS;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MAXDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBSYSTEMVALUES_MAXDB = TMP_DBSYSTEMVALUES_MAXDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_HANADB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBSYSTEMVALUES_HANADB = TMP_DBSYSTEMVALUES_HANADB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_INGRES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBSYSTEMVALUES_INGRES = TMP_DBSYSTEMVALUES_INGRES;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_FIRSTSQL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBSYSTEMVALUES_FIRSTSQL = TMP_DBSYSTEMVALUES_FIRSTSQL;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_EDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBSYSTEMVALUES_EDB = TMP_DBSYSTEMVALUES_EDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_CACHE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBSYSTEMVALUES_CACHE = TMP_DBSYSTEMVALUES_CACHE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_ADABAS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBSYSTEMVALUES_ADABAS = TMP_DBSYSTEMVALUES_ADABAS;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_FIREBIRD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBSYSTEMVALUES_FIREBIRD = TMP_DBSYSTEMVALUES_FIREBIRD;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_DERBY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBSYSTEMVALUES_DERBY = TMP_DBSYSTEMVALUES_DERBY;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_FILEMAKER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBSYSTEMVALUES_FILEMAKER = TMP_DBSYSTEMVALUES_FILEMAKER;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_INFORMIX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBSYSTEMVALUES_INFORMIX = TMP_DBSYSTEMVALUES_INFORMIX;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_INSTANTDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBSYSTEMVALUES_INSTANTDB = TMP_DBSYSTEMVALUES_INSTANTDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_INTERBASE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBSYSTEMVALUES_INTERBASE = TMP_DBSYSTEMVALUES_INTERBASE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MARIADB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBSYSTEMVALUES_MARIADB = TMP_DBSYSTEMVALUES_MARIADB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_NETEZZA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBSYSTEMVALUES_NETEZZA = TMP_DBSYSTEMVALUES_NETEZZA;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_PERVASIVE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBSYSTEMVALUES_PERVASIVE = TMP_DBSYSTEMVALUES_PERVASIVE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_POINTBASE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBSYSTEMVALUES_POINTBASE = TMP_DBSYSTEMVALUES_POINTBASE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_SQLITE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBSYSTEMVALUES_SQLITE = TMP_DBSYSTEMVALUES_SQLITE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_SYBASE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBSYSTEMVALUES_SYBASE = TMP_DBSYSTEMVALUES_SYBASE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_TERADATA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBSYSTEMVALUES_TERADATA = TMP_DBSYSTEMVALUES_TERADATA;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_VERTICA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBSYSTEMVALUES_VERTICA = TMP_DBSYSTEMVALUES_VERTICA;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_H2 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBSYSTEMVALUES_H2 = TMP_DBSYSTEMVALUES_H2;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_COLDFUSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBSYSTEMVALUES_COLDFUSION = TMP_DBSYSTEMVALUES_COLDFUSION;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_CASSANDRA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBSYSTEMVALUES_CASSANDRA = TMP_DBSYSTEMVALUES_CASSANDRA;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_HBASE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBSYSTEMVALUES_HBASE = TMP_DBSYSTEMVALUES_HBASE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MONGODB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBSYSTEMVALUES_MONGODB = TMP_DBSYSTEMVALUES_MONGODB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_REDIS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBSYSTEMVALUES_REDIS = TMP_DBSYSTEMVALUES_REDIS;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_COUCHBASE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBSYSTEMVALUES_COUCHBASE = TMP_DBSYSTEMVALUES_COUCHBASE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_COUCHDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBSYSTEMVALUES_COUCHDB = TMP_DBSYSTEMVALUES_COUCHDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_COSMOSDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBSYSTEMVALUES_COSMOSDB = TMP_DBSYSTEMVALUES_COSMOSDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_DYNAMODB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBSYSTEMVALUES_DYNAMODB = TMP_DBSYSTEMVALUES_DYNAMODB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_NEO4J in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBSYSTEMVALUES_NEO4J = TMP_DBSYSTEMVALUES_NEO4J;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_GEODE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBSYSTEMVALUES_GEODE = TMP_DBSYSTEMVALUES_GEODE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_ELASTICSEARCH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBSYSTEMVALUES_ELASTICSEARCH = TMP_DBSYSTEMVALUES_ELASTICSEARCH;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MEMCACHED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBSYSTEMVALUES_MEMCACHED = TMP_DBSYSTEMVALUES_MEMCACHED;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_COCKROACHDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBSYSTEMVALUES_COCKROACHDB = TMP_DBSYSTEMVALUES_COCKROACHDB;\n/**\n * The constant map of values for DbSystemValues.\n * @deprecated Use the DBSYSTEMVALUES_XXXXX constants rather than the DbSystemValues.XXXXX for bundle minification.\n */\nconst DbSystemValues = \n/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([\n    TMP_DBSYSTEMVALUES_OTHER_SQL,\n    TMP_DBSYSTEMVALUES_MSSQL,\n    TMP_DBSYSTEMVALUES_MYSQL,\n    TMP_DBSYSTEMVALUES_ORACLE,\n    TMP_DBSYSTEMVALUES_DB2,\n    TMP_DBSYSTEMVALUES_POSTGRESQL,\n    TMP_DBSYSTEMVALUES_REDSHIFT,\n    TMP_DBSYSTEMVALUES_HIVE,\n    TMP_DBSYSTEMVALUES_CLOUDSCAPE,\n    TMP_DBSYSTEMVALUES_HSQLDB,\n    TMP_DBSYSTEMVALUES_PROGRESS,\n    TMP_DBSYSTEMVALUES_MAXDB,\n    TMP_DBSYSTEMVALUES_HANADB,\n    TMP_DBSYSTEMVALUES_INGRES,\n    TMP_DBSYSTEMVALUES_FIRSTSQL,\n    TMP_DBSYSTEMVALUES_EDB,\n    TMP_DBSYSTEMVALUES_CACHE,\n    TMP_DBSYSTEMVALUES_ADABAS,\n    TMP_DBSYSTEMVALUES_FIREBIRD,\n    TMP_DBSYSTEMVALUES_DERBY,\n    TMP_DBSYSTEMVALUES_FILEMAKER,\n    TMP_DBSYSTEMVALUES_INFORMIX,\n    TMP_DBSYSTEMVALUES_INSTANTDB,\n    TMP_DBSYSTEMVALUES_INTERBASE,\n    TMP_DBSYSTEMVALUES_MARIADB,\n    TMP_DBSYSTEMVALUES_NETEZZA,\n    TMP_DBSYSTEMVALUES_PERVASIVE,\n    TMP_DBSYSTEMVALUES_POINTBASE,\n    TMP_DBSYSTEMVALUES_SQLITE,\n    TMP_DBSYSTEMVALUES_SYBASE,\n    TMP_DBSYSTEMVALUES_TERADATA,\n    TMP_DBSYSTEMVALUES_VERTICA,\n    TMP_DBSYSTEMVALUES_H2,\n    TMP_DBSYSTEMVALUES_COLDFUSION,\n    TMP_DBSYSTEMVALUES_CASSANDRA,\n    TMP_DBSYSTEMVALUES_HBASE,\n    TMP_DBSYSTEMVALUES_MONGODB,\n    TMP_DBSYSTEMVALUES_REDIS,\n    TMP_DBSYSTEMVALUES_COUCHBASE,\n    TMP_DBSYSTEMVALUES_COUCHDB,\n    TMP_DBSYSTEMVALUES_COSMOSDB,\n    TMP_DBSYSTEMVALUES_DYNAMODB,\n    TMP_DBSYSTEMVALUES_NEO4J,\n    TMP_DBSYSTEMVALUES_GEODE,\n    TMP_DBSYSTEMVALUES_ELASTICSEARCH,\n    TMP_DBSYSTEMVALUES_MEMCACHED,\n    TMP_DBSYSTEMVALUES_COCKROACHDB,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for DbCassandraConsistencyLevelValues enum definition\n *\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL = 'all';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM = 'each_quorum';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM = 'quorum';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM = 'local_quorum';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE = 'one';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO = 'two';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE = 'three';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE = 'local_one';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY = 'any';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL = 'serial';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL = 'local_serial';\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_ALL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBCASSANDRACONSISTENCYLEVELVALUES_ALL = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_EACH_QUORUM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_QUORUM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_LOCAL_QUORUM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_ONE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBCASSANDRACONSISTENCYLEVELVALUES_ONE = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_TWO in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBCASSANDRACONSISTENCYLEVELVALUES_TWO = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_THREE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBCASSANDRACONSISTENCYLEVELVALUES_THREE = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_LOCAL_ONE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_ANY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBCASSANDRACONSISTENCYLEVELVALUES_ANY = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_SERIAL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_LOCAL_SERIAL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL;\n/**\n * The constant map of values for DbCassandraConsistencyLevelValues.\n * @deprecated Use the DBCASSANDRACONSISTENCYLEVELVALUES_XXXXX constants rather than the DbCassandraConsistencyLevelValues.XXXXX for bundle minification.\n */\nconst DbCassandraConsistencyLevelValues = \n/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for FaasTriggerValues enum definition\n *\n * Type of the trigger on which the function is executed.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_FAASTRIGGERVALUES_DATASOURCE = 'datasource';\nconst TMP_FAASTRIGGERVALUES_HTTP = 'http';\nconst TMP_FAASTRIGGERVALUES_PUBSUB = 'pubsub';\nconst TMP_FAASTRIGGERVALUES_TIMER = 'timer';\nconst TMP_FAASTRIGGERVALUES_OTHER = 'other';\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use FAAS_TRIGGER_VALUE_DATASOURCE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst FAASTRIGGERVALUES_DATASOURCE = TMP_FAASTRIGGERVALUES_DATASOURCE;\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use FAAS_TRIGGER_VALUE_HTTP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst FAASTRIGGERVALUES_HTTP = TMP_FAASTRIGGERVALUES_HTTP;\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use FAAS_TRIGGER_VALUE_PUBSUB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst FAASTRIGGERVALUES_PUBSUB = TMP_FAASTRIGGERVALUES_PUBSUB;\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use FAAS_TRIGGER_VALUE_TIMER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst FAASTRIGGERVALUES_TIMER = TMP_FAASTRIGGERVALUES_TIMER;\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use FAAS_TRIGGER_VALUE_OTHER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst FAASTRIGGERVALUES_OTHER = TMP_FAASTRIGGERVALUES_OTHER;\n/**\n * The constant map of values for FaasTriggerValues.\n * @deprecated Use the FAASTRIGGERVALUES_XXXXX constants rather than the FaasTriggerValues.XXXXX for bundle minification.\n */\nconst FaasTriggerValues = \n/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([\n    TMP_FAASTRIGGERVALUES_DATASOURCE,\n    TMP_FAASTRIGGERVALUES_HTTP,\n    TMP_FAASTRIGGERVALUES_PUBSUB,\n    TMP_FAASTRIGGERVALUES_TIMER,\n    TMP_FAASTRIGGERVALUES_OTHER,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for FaasDocumentOperationValues enum definition\n *\n * Describes the type of the operation that was performed on the data.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_FAASDOCUMENTOPERATIONVALUES_INSERT = 'insert';\nconst TMP_FAASDOCUMENTOPERATIONVALUES_EDIT = 'edit';\nconst TMP_FAASDOCUMENTOPERATIONVALUES_DELETE = 'delete';\n/**\n * Describes the type of the operation that was performed on the data.\n *\n * @deprecated Use FAAS_DOCUMENT_OPERATION_VALUE_INSERT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst FAASDOCUMENTOPERATIONVALUES_INSERT = TMP_FAASDOCUMENTOPERATIONVALUES_INSERT;\n/**\n * Describes the type of the operation that was performed on the data.\n *\n * @deprecated Use FAAS_DOCUMENT_OPERATION_VALUE_EDIT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst FAASDOCUMENTOPERATIONVALUES_EDIT = TMP_FAASDOCUMENTOPERATIONVALUES_EDIT;\n/**\n * Describes the type of the operation that was performed on the data.\n *\n * @deprecated Use FAAS_DOCUMENT_OPERATION_VALUE_DELETE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst FAASDOCUMENTOPERATIONVALUES_DELETE = TMP_FAASDOCUMENTOPERATIONVALUES_DELETE;\n/**\n * The constant map of values for FaasDocumentOperationValues.\n * @deprecated Use the FAASDOCUMENTOPERATIONVALUES_XXXXX constants rather than the FaasDocumentOperationValues.XXXXX for bundle minification.\n */\nconst FaasDocumentOperationValues = \n/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([\n    TMP_FAASDOCUMENTOPERATIONVALUES_INSERT,\n    TMP_FAASDOCUMENTOPERATIONVALUES_EDIT,\n    TMP_FAASDOCUMENTOPERATIONVALUES_DELETE,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for FaasInvokedProviderValues enum definition\n *\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD = 'alibaba_cloud';\nconst TMP_FAASINVOKEDPROVIDERVALUES_AWS = 'aws';\nconst TMP_FAASINVOKEDPROVIDERVALUES_AZURE = 'azure';\nconst TMP_FAASINVOKEDPROVIDERVALUES_GCP = 'gcp';\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n *\n * @deprecated Use FAAS_INVOKED_PROVIDER_VALUE_ALIBABA_CLOUD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD = TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD;\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n *\n * @deprecated Use FAAS_INVOKED_PROVIDER_VALUE_AWS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst FAASINVOKEDPROVIDERVALUES_AWS = TMP_FAASINVOKEDPROVIDERVALUES_AWS;\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n *\n * @deprecated Use FAAS_INVOKED_PROVIDER_VALUE_AZURE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst FAASINVOKEDPROVIDERVALUES_AZURE = TMP_FAASINVOKEDPROVIDERVALUES_AZURE;\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n *\n * @deprecated Use FAAS_INVOKED_PROVIDER_VALUE_GCP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst FAASINVOKEDPROVIDERVALUES_GCP = TMP_FAASINVOKEDPROVIDERVALUES_GCP;\n/**\n * The constant map of values for FaasInvokedProviderValues.\n * @deprecated Use the FAASINVOKEDPROVIDERVALUES_XXXXX constants rather than the FaasInvokedProviderValues.XXXXX for bundle minification.\n */\nconst FaasInvokedProviderValues = \n/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([\n    TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD,\n    TMP_FAASINVOKEDPROVIDERVALUES_AWS,\n    TMP_FAASINVOKEDPROVIDERVALUES_AZURE,\n    TMP_FAASINVOKEDPROVIDERVALUES_GCP,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for NetTransportValues enum definition\n *\n * Transport protocol used. See note below.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_NETTRANSPORTVALUES_IP_TCP = 'ip_tcp';\nconst TMP_NETTRANSPORTVALUES_IP_UDP = 'ip_udp';\nconst TMP_NETTRANSPORTVALUES_IP = 'ip';\nconst TMP_NETTRANSPORTVALUES_UNIX = 'unix';\nconst TMP_NETTRANSPORTVALUES_PIPE = 'pipe';\nconst TMP_NETTRANSPORTVALUES_INPROC = 'inproc';\nconst TMP_NETTRANSPORTVALUES_OTHER = 'other';\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use NET_TRANSPORT_VALUE_IP_TCP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst NETTRANSPORTVALUES_IP_TCP = TMP_NETTRANSPORTVALUES_IP_TCP;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use NET_TRANSPORT_VALUE_IP_UDP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst NETTRANSPORTVALUES_IP_UDP = TMP_NETTRANSPORTVALUES_IP_UDP;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Removed in v1.21.0.\n */\nconst NETTRANSPORTVALUES_IP = TMP_NETTRANSPORTVALUES_IP;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Removed in v1.21.0.\n */\nconst NETTRANSPORTVALUES_UNIX = TMP_NETTRANSPORTVALUES_UNIX;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use NET_TRANSPORT_VALUE_PIPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst NETTRANSPORTVALUES_PIPE = TMP_NETTRANSPORTVALUES_PIPE;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use NET_TRANSPORT_VALUE_INPROC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst NETTRANSPORTVALUES_INPROC = TMP_NETTRANSPORTVALUES_INPROC;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use NET_TRANSPORT_VALUE_OTHER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst NETTRANSPORTVALUES_OTHER = TMP_NETTRANSPORTVALUES_OTHER;\n/**\n * The constant map of values for NetTransportValues.\n * @deprecated Use the NETTRANSPORTVALUES_XXXXX constants rather than the NetTransportValues.XXXXX for bundle minification.\n */\nconst NetTransportValues = \n/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([\n    TMP_NETTRANSPORTVALUES_IP_TCP,\n    TMP_NETTRANSPORTVALUES_IP_UDP,\n    TMP_NETTRANSPORTVALUES_IP,\n    TMP_NETTRANSPORTVALUES_UNIX,\n    TMP_NETTRANSPORTVALUES_PIPE,\n    TMP_NETTRANSPORTVALUES_INPROC,\n    TMP_NETTRANSPORTVALUES_OTHER,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for NetHostConnectionTypeValues enum definition\n *\n * The internet connection type currently being used by the host.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI = 'wifi';\nconst TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED = 'wired';\nconst TMP_NETHOSTCONNECTIONTYPEVALUES_CELL = 'cell';\nconst TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE = 'unavailable';\nconst TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN = 'unknown';\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use NETWORK_CONNECTION_TYPE_VALUE_WIFI in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst NETHOSTCONNECTIONTYPEVALUES_WIFI = TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI;\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use NETWORK_CONNECTION_TYPE_VALUE_WIRED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst NETHOSTCONNECTIONTYPEVALUES_WIRED = TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED;\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use NETWORK_CONNECTION_TYPE_VALUE_CELL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst NETHOSTCONNECTIONTYPEVALUES_CELL = TMP_NETHOSTCONNECTIONTYPEVALUES_CELL;\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use NETWORK_CONNECTION_TYPE_VALUE_UNAVAILABLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE = TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE;\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use NETWORK_CONNECTION_TYPE_VALUE_UNKNOWN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst NETHOSTCONNECTIONTYPEVALUES_UNKNOWN = TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN;\n/**\n * The constant map of values for NetHostConnectionTypeValues.\n * @deprecated Use the NETHOSTCONNECTIONTYPEVALUES_XXXXX constants rather than the NetHostConnectionTypeValues.XXXXX for bundle minification.\n */\nconst NetHostConnectionTypeValues = \n/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([\n    TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI,\n    TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED,\n    TMP_NETHOSTCONNECTIONTYPEVALUES_CELL,\n    TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE,\n    TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for NetHostConnectionSubtypeValues enum definition\n *\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS = 'gprs';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE = 'edge';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS = 'umts';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA = 'cdma';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0 = 'evdo_0';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A = 'evdo_a';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT = 'cdma2000_1xrtt';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA = 'hsdpa';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA = 'hsupa';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA = 'hspa';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN = 'iden';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B = 'evdo_b';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE = 'lte';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD = 'ehrpd';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP = 'hspap';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM = 'gsm';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA = 'td_scdma';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN = 'iwlan';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR = 'nr';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA = 'nrnsa';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA = 'lte_ca';\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_GPRS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst NETHOSTCONNECTIONSUBTYPEVALUES_GPRS = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_EDGE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst NETHOSTCONNECTIONSUBTYPEVALUES_EDGE = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_UMTS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst NETHOSTCONNECTIONSUBTYPEVALUES_UMTS = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_CDMA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst NETHOSTCONNECTIONSUBTYPEVALUES_CDMA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_EVDO_0 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0 = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_EVDO_A in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_CDMA2000_1XRTT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_HSDPA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_HSUPA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_HSPA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst NETHOSTCONNECTIONSUBTYPEVALUES_HSPA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_IDEN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst NETHOSTCONNECTIONSUBTYPEVALUES_IDEN = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_EVDO_B in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_LTE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst NETHOSTCONNECTIONSUBTYPEVALUES_LTE = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_EHRPD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_HSPAP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_GSM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst NETHOSTCONNECTIONSUBTYPEVALUES_GSM = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_TD_SCDMA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_IWLAN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_NR in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst NETHOSTCONNECTIONSUBTYPEVALUES_NR = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_NRNSA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_LTE_CA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA;\n/**\n * The constant map of values for NetHostConnectionSubtypeValues.\n * @deprecated Use the NETHOSTCONNECTIONSUBTYPEVALUES_XXXXX constants rather than the NetHostConnectionSubtypeValues.XXXXX for bundle minification.\n */\nconst NetHostConnectionSubtypeValues = \n/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for HttpFlavorValues enum definition\n *\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_HTTPFLAVORVALUES_HTTP_1_0 = '1.0';\nconst TMP_HTTPFLAVORVALUES_HTTP_1_1 = '1.1';\nconst TMP_HTTPFLAVORVALUES_HTTP_2_0 = '2.0';\nconst TMP_HTTPFLAVORVALUES_SPDY = 'SPDY';\nconst TMP_HTTPFLAVORVALUES_QUIC = 'QUIC';\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use HTTP_FLAVOR_VALUE_HTTP_1_0 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst HTTPFLAVORVALUES_HTTP_1_0 = TMP_HTTPFLAVORVALUES_HTTP_1_0;\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use HTTP_FLAVOR_VALUE_HTTP_1_1 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst HTTPFLAVORVALUES_HTTP_1_1 = TMP_HTTPFLAVORVALUES_HTTP_1_1;\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use HTTP_FLAVOR_VALUE_HTTP_2_0 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst HTTPFLAVORVALUES_HTTP_2_0 = TMP_HTTPFLAVORVALUES_HTTP_2_0;\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use HTTP_FLAVOR_VALUE_SPDY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst HTTPFLAVORVALUES_SPDY = TMP_HTTPFLAVORVALUES_SPDY;\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use HTTP_FLAVOR_VALUE_QUIC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst HTTPFLAVORVALUES_QUIC = TMP_HTTPFLAVORVALUES_QUIC;\n/**\n * The constant map of values for HttpFlavorValues.\n * @deprecated Use the HTTPFLAVORVALUES_XXXXX constants rather than the HttpFlavorValues.XXXXX for bundle minification.\n */\nconst HttpFlavorValues = {\n    HTTP_1_0: TMP_HTTPFLAVORVALUES_HTTP_1_0,\n    HTTP_1_1: TMP_HTTPFLAVORVALUES_HTTP_1_1,\n    HTTP_2_0: TMP_HTTPFLAVORVALUES_HTTP_2_0,\n    SPDY: TMP_HTTPFLAVORVALUES_SPDY,\n    QUIC: TMP_HTTPFLAVORVALUES_QUIC,\n};\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for MessagingDestinationKindValues enum definition\n *\n * The kind of message destination.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE = 'queue';\nconst TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC = 'topic';\n/**\n * The kind of message destination.\n *\n * @deprecated Removed in semconv v1.20.0.\n */\nconst MESSAGINGDESTINATIONKINDVALUES_QUEUE = TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE;\n/**\n * The kind of message destination.\n *\n * @deprecated Removed in semconv v1.20.0.\n */\nconst MESSAGINGDESTINATIONKINDVALUES_TOPIC = TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC;\n/**\n * The constant map of values for MessagingDestinationKindValues.\n * @deprecated Use the MESSAGINGDESTINATIONKINDVALUES_XXXXX constants rather than the MessagingDestinationKindValues.XXXXX for bundle minification.\n */\nconst MessagingDestinationKindValues = \n/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([\n    TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE,\n    TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for MessagingOperationValues enum definition\n *\n * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_MESSAGINGOPERATIONVALUES_RECEIVE = 'receive';\nconst TMP_MESSAGINGOPERATIONVALUES_PROCESS = 'process';\n/**\n * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n *\n * @deprecated Use MESSAGING_OPERATION_TYPE_VALUE_RECEIVE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst MESSAGINGOPERATIONVALUES_RECEIVE = TMP_MESSAGINGOPERATIONVALUES_RECEIVE;\n/**\n * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n *\n * @deprecated Use MESSAGING_OPERATION_TYPE_VALUE_PROCESS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst MESSAGINGOPERATIONVALUES_PROCESS = TMP_MESSAGINGOPERATIONVALUES_PROCESS;\n/**\n * The constant map of values for MessagingOperationValues.\n * @deprecated Use the MESSAGINGOPERATIONVALUES_XXXXX constants rather than the MessagingOperationValues.XXXXX for bundle minification.\n */\nconst MessagingOperationValues = \n/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([\n    TMP_MESSAGINGOPERATIONVALUES_RECEIVE,\n    TMP_MESSAGINGOPERATIONVALUES_PROCESS,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for RpcGrpcStatusCodeValues enum definition\n *\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_RPCGRPCSTATUSCODEVALUES_OK = 0;\nconst TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED = 1;\nconst TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN = 2;\nconst TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT = 3;\nconst TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED = 4;\nconst TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND = 5;\nconst TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS = 6;\nconst TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED = 7;\nconst TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED = 8;\nconst TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION = 9;\nconst TMP_RPCGRPCSTATUSCODEVALUES_ABORTED = 10;\nconst TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE = 11;\nconst TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED = 12;\nconst TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL = 13;\nconst TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE = 14;\nconst TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS = 15;\nconst TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED = 16;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_OK in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst RPCGRPCSTATUSCODEVALUES_OK = TMP_RPCGRPCSTATUSCODEVALUES_OK;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_CANCELLED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst RPCGRPCSTATUSCODEVALUES_CANCELLED = TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_UNKNOWN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst RPCGRPCSTATUSCODEVALUES_UNKNOWN = TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_INVALID_ARGUMENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT = TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_DEADLINE_EXCEEDED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED = TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_NOT_FOUND in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst RPCGRPCSTATUSCODEVALUES_NOT_FOUND = TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_ALREADY_EXISTS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS = TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_PERMISSION_DENIED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED = TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_RESOURCE_EXHAUSTED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED = TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_FAILED_PRECONDITION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION = TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_ABORTED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst RPCGRPCSTATUSCODEVALUES_ABORTED = TMP_RPCGRPCSTATUSCODEVALUES_ABORTED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_OUT_OF_RANGE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE = TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_UNIMPLEMENTED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED = TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_INTERNAL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst RPCGRPCSTATUSCODEVALUES_INTERNAL = TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_UNAVAILABLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst RPCGRPCSTATUSCODEVALUES_UNAVAILABLE = TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_DATA_LOSS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst RPCGRPCSTATUSCODEVALUES_DATA_LOSS = TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_UNAUTHENTICATED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED = TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED;\n/**\n * The constant map of values for RpcGrpcStatusCodeValues.\n * @deprecated Use the RPCGRPCSTATUSCODEVALUES_XXXXX constants rather than the RpcGrpcStatusCodeValues.XXXXX for bundle minification.\n */\nconst RpcGrpcStatusCodeValues = {\n    OK: TMP_RPCGRPCSTATUSCODEVALUES_OK,\n    CANCELLED: TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED,\n    UNKNOWN: TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN,\n    INVALID_ARGUMENT: TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT,\n    DEADLINE_EXCEEDED: TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED,\n    NOT_FOUND: TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND,\n    ALREADY_EXISTS: TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS,\n    PERMISSION_DENIED: TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED,\n    RESOURCE_EXHAUSTED: TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED,\n    FAILED_PRECONDITION: TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION,\n    ABORTED: TMP_RPCGRPCSTATUSCODEVALUES_ABORTED,\n    OUT_OF_RANGE: TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE,\n    UNIMPLEMENTED: TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED,\n    INTERNAL: TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL,\n    UNAVAILABLE: TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE,\n    DATA_LOSS: TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS,\n    UNAUTHENTICATED: TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED,\n};\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for MessageTypeValues enum definition\n *\n * Whether this is a received or sent message.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_MESSAGETYPEVALUES_SENT = 'SENT';\nconst TMP_MESSAGETYPEVALUES_RECEIVED = 'RECEIVED';\n/**\n * Whether this is a received or sent message.\n *\n * @deprecated Use MESSAGE_TYPE_VALUE_SENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst MESSAGETYPEVALUES_SENT = TMP_MESSAGETYPEVALUES_SENT;\n/**\n * Whether this is a received or sent message.\n *\n * @deprecated Use MESSAGE_TYPE_VALUE_RECEIVED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst MESSAGETYPEVALUES_RECEIVED = TMP_MESSAGETYPEVALUES_RECEIVED;\n/**\n * The constant map of values for MessageTypeValues.\n * @deprecated Use the MESSAGETYPEVALUES_XXXXX constants rather than the MessageTypeValues.XXXXX for bundle minification.\n */\nconst MessageTypeValues = \n/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([\n    TMP_MESSAGETYPEVALUES_SENT,\n    TMP_MESSAGETYPEVALUES_RECEIVED,\n]);\n//# sourceMappingURL=SemanticAttributes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/trace/SemanticAttributes.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/trace/index.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/semantic-conventions/build/esm/trace/index.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_ALL: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBCASSANDRACONSISTENCYLEVELVALUES_ALL),\n/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_ANY: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBCASSANDRACONSISTENCYLEVELVALUES_ANY),\n/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM),\n/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE),\n/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM),\n/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL),\n/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_ONE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBCASSANDRACONSISTENCYLEVELVALUES_ONE),\n/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM),\n/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL),\n/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_THREE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBCASSANDRACONSISTENCYLEVELVALUES_THREE),\n/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_TWO: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBCASSANDRACONSISTENCYLEVELVALUES_TWO),\n/* harmony export */   DBSYSTEMVALUES_ADABAS: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_ADABAS),\n/* harmony export */   DBSYSTEMVALUES_CACHE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_CACHE),\n/* harmony export */   DBSYSTEMVALUES_CASSANDRA: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_CASSANDRA),\n/* harmony export */   DBSYSTEMVALUES_CLOUDSCAPE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_CLOUDSCAPE),\n/* harmony export */   DBSYSTEMVALUES_COCKROACHDB: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_COCKROACHDB),\n/* harmony export */   DBSYSTEMVALUES_COLDFUSION: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_COLDFUSION),\n/* harmony export */   DBSYSTEMVALUES_COSMOSDB: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_COSMOSDB),\n/* harmony export */   DBSYSTEMVALUES_COUCHBASE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_COUCHBASE),\n/* harmony export */   DBSYSTEMVALUES_COUCHDB: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_COUCHDB),\n/* harmony export */   DBSYSTEMVALUES_DB2: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_DB2),\n/* harmony export */   DBSYSTEMVALUES_DERBY: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_DERBY),\n/* harmony export */   DBSYSTEMVALUES_DYNAMODB: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_DYNAMODB),\n/* harmony export */   DBSYSTEMVALUES_EDB: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_EDB),\n/* harmony export */   DBSYSTEMVALUES_ELASTICSEARCH: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_ELASTICSEARCH),\n/* harmony export */   DBSYSTEMVALUES_FILEMAKER: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_FILEMAKER),\n/* harmony export */   DBSYSTEMVALUES_FIREBIRD: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_FIREBIRD),\n/* harmony export */   DBSYSTEMVALUES_FIRSTSQL: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_FIRSTSQL),\n/* harmony export */   DBSYSTEMVALUES_GEODE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_GEODE),\n/* harmony export */   DBSYSTEMVALUES_H2: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_H2),\n/* harmony export */   DBSYSTEMVALUES_HANADB: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_HANADB),\n/* harmony export */   DBSYSTEMVALUES_HBASE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_HBASE),\n/* harmony export */   DBSYSTEMVALUES_HIVE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_HIVE),\n/* harmony export */   DBSYSTEMVALUES_HSQLDB: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_HSQLDB),\n/* harmony export */   DBSYSTEMVALUES_INFORMIX: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_INFORMIX),\n/* harmony export */   DBSYSTEMVALUES_INGRES: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_INGRES),\n/* harmony export */   DBSYSTEMVALUES_INSTANTDB: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_INSTANTDB),\n/* harmony export */   DBSYSTEMVALUES_INTERBASE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_INTERBASE),\n/* harmony export */   DBSYSTEMVALUES_MARIADB: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_MARIADB),\n/* harmony export */   DBSYSTEMVALUES_MAXDB: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_MAXDB),\n/* harmony export */   DBSYSTEMVALUES_MEMCACHED: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_MEMCACHED),\n/* harmony export */   DBSYSTEMVALUES_MONGODB: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_MONGODB),\n/* harmony export */   DBSYSTEMVALUES_MSSQL: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_MSSQL),\n/* harmony export */   DBSYSTEMVALUES_MYSQL: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_MYSQL),\n/* harmony export */   DBSYSTEMVALUES_NEO4J: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_NEO4J),\n/* harmony export */   DBSYSTEMVALUES_NETEZZA: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_NETEZZA),\n/* harmony export */   DBSYSTEMVALUES_ORACLE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_ORACLE),\n/* harmony export */   DBSYSTEMVALUES_OTHER_SQL: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_OTHER_SQL),\n/* harmony export */   DBSYSTEMVALUES_PERVASIVE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_PERVASIVE),\n/* harmony export */   DBSYSTEMVALUES_POINTBASE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_POINTBASE),\n/* harmony export */   DBSYSTEMVALUES_POSTGRESQL: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_POSTGRESQL),\n/* harmony export */   DBSYSTEMVALUES_PROGRESS: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_PROGRESS),\n/* harmony export */   DBSYSTEMVALUES_REDIS: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_REDIS),\n/* harmony export */   DBSYSTEMVALUES_REDSHIFT: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_REDSHIFT),\n/* harmony export */   DBSYSTEMVALUES_SQLITE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_SQLITE),\n/* harmony export */   DBSYSTEMVALUES_SYBASE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_SYBASE),\n/* harmony export */   DBSYSTEMVALUES_TERADATA: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_TERADATA),\n/* harmony export */   DBSYSTEMVALUES_VERTICA: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DBSYSTEMVALUES_VERTICA),\n/* harmony export */   DbCassandraConsistencyLevelValues: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DbCassandraConsistencyLevelValues),\n/* harmony export */   DbSystemValues: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DbSystemValues),\n/* harmony export */   FAASDOCUMENTOPERATIONVALUES_DELETE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.FAASDOCUMENTOPERATIONVALUES_DELETE),\n/* harmony export */   FAASDOCUMENTOPERATIONVALUES_EDIT: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.FAASDOCUMENTOPERATIONVALUES_EDIT),\n/* harmony export */   FAASDOCUMENTOPERATIONVALUES_INSERT: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.FAASDOCUMENTOPERATIONVALUES_INSERT),\n/* harmony export */   FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD),\n/* harmony export */   FAASINVOKEDPROVIDERVALUES_AWS: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.FAASINVOKEDPROVIDERVALUES_AWS),\n/* harmony export */   FAASINVOKEDPROVIDERVALUES_AZURE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.FAASINVOKEDPROVIDERVALUES_AZURE),\n/* harmony export */   FAASINVOKEDPROVIDERVALUES_GCP: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.FAASINVOKEDPROVIDERVALUES_GCP),\n/* harmony export */   FAASTRIGGERVALUES_DATASOURCE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.FAASTRIGGERVALUES_DATASOURCE),\n/* harmony export */   FAASTRIGGERVALUES_HTTP: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.FAASTRIGGERVALUES_HTTP),\n/* harmony export */   FAASTRIGGERVALUES_OTHER: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.FAASTRIGGERVALUES_OTHER),\n/* harmony export */   FAASTRIGGERVALUES_PUBSUB: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.FAASTRIGGERVALUES_PUBSUB),\n/* harmony export */   FAASTRIGGERVALUES_TIMER: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.FAASTRIGGERVALUES_TIMER),\n/* harmony export */   FaasDocumentOperationValues: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.FaasDocumentOperationValues),\n/* harmony export */   FaasInvokedProviderValues: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.FaasInvokedProviderValues),\n/* harmony export */   FaasTriggerValues: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.FaasTriggerValues),\n/* harmony export */   HTTPFLAVORVALUES_HTTP_1_0: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.HTTPFLAVORVALUES_HTTP_1_0),\n/* harmony export */   HTTPFLAVORVALUES_HTTP_1_1: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.HTTPFLAVORVALUES_HTTP_1_1),\n/* harmony export */   HTTPFLAVORVALUES_HTTP_2_0: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.HTTPFLAVORVALUES_HTTP_2_0),\n/* harmony export */   HTTPFLAVORVALUES_QUIC: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.HTTPFLAVORVALUES_QUIC),\n/* harmony export */   HTTPFLAVORVALUES_SPDY: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.HTTPFLAVORVALUES_SPDY),\n/* harmony export */   HttpFlavorValues: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.HttpFlavorValues),\n/* harmony export */   MESSAGETYPEVALUES_RECEIVED: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.MESSAGETYPEVALUES_RECEIVED),\n/* harmony export */   MESSAGETYPEVALUES_SENT: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.MESSAGETYPEVALUES_SENT),\n/* harmony export */   MESSAGINGDESTINATIONKINDVALUES_QUEUE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.MESSAGINGDESTINATIONKINDVALUES_QUEUE),\n/* harmony export */   MESSAGINGDESTINATIONKINDVALUES_TOPIC: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.MESSAGINGDESTINATIONKINDVALUES_TOPIC),\n/* harmony export */   MESSAGINGOPERATIONVALUES_PROCESS: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.MESSAGINGOPERATIONVALUES_PROCESS),\n/* harmony export */   MESSAGINGOPERATIONVALUES_RECEIVE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.MESSAGINGOPERATIONVALUES_RECEIVE),\n/* harmony export */   MessageTypeValues: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.MessageTypeValues),\n/* harmony export */   MessagingDestinationKindValues: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.MessagingDestinationKindValues),\n/* harmony export */   MessagingOperationValues: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.MessagingOperationValues),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_CDMA: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONSUBTYPEVALUES_CDMA),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_EDGE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONSUBTYPEVALUES_EDGE),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_GPRS: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONSUBTYPEVALUES_GPRS),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_GSM: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONSUBTYPEVALUES_GSM),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_HSPA: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONSUBTYPEVALUES_HSPA),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_IDEN: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONSUBTYPEVALUES_IDEN),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_LTE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONSUBTYPEVALUES_LTE),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_NR: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONSUBTYPEVALUES_NR),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_UMTS: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONSUBTYPEVALUES_UMTS),\n/* harmony export */   NETHOSTCONNECTIONTYPEVALUES_CELL: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONTYPEVALUES_CELL),\n/* harmony export */   NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE),\n/* harmony export */   NETHOSTCONNECTIONTYPEVALUES_UNKNOWN: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONTYPEVALUES_UNKNOWN),\n/* harmony export */   NETHOSTCONNECTIONTYPEVALUES_WIFI: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONTYPEVALUES_WIFI),\n/* harmony export */   NETHOSTCONNECTIONTYPEVALUES_WIRED: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.NETHOSTCONNECTIONTYPEVALUES_WIRED),\n/* harmony export */   NETTRANSPORTVALUES_INPROC: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.NETTRANSPORTVALUES_INPROC),\n/* harmony export */   NETTRANSPORTVALUES_IP: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.NETTRANSPORTVALUES_IP),\n/* harmony export */   NETTRANSPORTVALUES_IP_TCP: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.NETTRANSPORTVALUES_IP_TCP),\n/* harmony export */   NETTRANSPORTVALUES_IP_UDP: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.NETTRANSPORTVALUES_IP_UDP),\n/* harmony export */   NETTRANSPORTVALUES_OTHER: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.NETTRANSPORTVALUES_OTHER),\n/* harmony export */   NETTRANSPORTVALUES_PIPE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.NETTRANSPORTVALUES_PIPE),\n/* harmony export */   NETTRANSPORTVALUES_UNIX: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.NETTRANSPORTVALUES_UNIX),\n/* harmony export */   NetHostConnectionSubtypeValues: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.NetHostConnectionSubtypeValues),\n/* harmony export */   NetHostConnectionTypeValues: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.NetHostConnectionTypeValues),\n/* harmony export */   NetTransportValues: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.NetTransportValues),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_ABORTED: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.RPCGRPCSTATUSCODEVALUES_ABORTED),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_CANCELLED: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.RPCGRPCSTATUSCODEVALUES_CANCELLED),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_DATA_LOSS: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.RPCGRPCSTATUSCODEVALUES_DATA_LOSS),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_INTERNAL: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.RPCGRPCSTATUSCODEVALUES_INTERNAL),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_NOT_FOUND: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.RPCGRPCSTATUSCODEVALUES_NOT_FOUND),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_OK: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.RPCGRPCSTATUSCODEVALUES_OK),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_UNAVAILABLE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.RPCGRPCSTATUSCODEVALUES_UNAVAILABLE),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_UNKNOWN: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.RPCGRPCSTATUSCODEVALUES_UNKNOWN),\n/* harmony export */   RpcGrpcStatusCodeValues: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.RpcGrpcStatusCodeValues),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_ATTRIBUTES_TO_GET: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_AWS_DYNAMODB_ATTRIBUTES_TO_GET),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_CONSISTENT_READ: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_AWS_DYNAMODB_CONSISTENT_READ),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_CONSUMED_CAPACITY: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_AWS_DYNAMODB_CONSUMED_CAPACITY),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_COUNT: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_AWS_DYNAMODB_COUNT),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_EXCLUSIVE_START_TABLE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_AWS_DYNAMODB_EXCLUSIVE_START_TABLE),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_INDEX_NAME: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_AWS_DYNAMODB_INDEX_NAME),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_ITEM_COLLECTION_METRICS: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_AWS_DYNAMODB_ITEM_COLLECTION_METRICS),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_LIMIT: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_AWS_DYNAMODB_LIMIT),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_PROJECTION: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_AWS_DYNAMODB_PROJECTION),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_SCANNED_COUNT: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_AWS_DYNAMODB_SCANNED_COUNT),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_SCAN_FORWARD: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_AWS_DYNAMODB_SCAN_FORWARD),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_SEGMENT: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_AWS_DYNAMODB_SEGMENT),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_SELECT: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_AWS_DYNAMODB_SELECT),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_TABLE_COUNT: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_AWS_DYNAMODB_TABLE_COUNT),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_TABLE_NAMES: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_AWS_DYNAMODB_TABLE_NAMES),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_TOTAL_SEGMENTS: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_AWS_DYNAMODB_TOTAL_SEGMENTS),\n/* harmony export */   SEMATTRS_AWS_LAMBDA_INVOKED_ARN: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_AWS_LAMBDA_INVOKED_ARN),\n/* harmony export */   SEMATTRS_CODE_FILEPATH: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_CODE_FILEPATH),\n/* harmony export */   SEMATTRS_CODE_FUNCTION: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_CODE_FUNCTION),\n/* harmony export */   SEMATTRS_CODE_LINENO: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_CODE_LINENO),\n/* harmony export */   SEMATTRS_CODE_NAMESPACE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_CODE_NAMESPACE),\n/* harmony export */   SEMATTRS_DB_CASSANDRA_CONSISTENCY_LEVEL: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_DB_CASSANDRA_CONSISTENCY_LEVEL),\n/* harmony export */   SEMATTRS_DB_CASSANDRA_COORDINATOR_DC: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_DB_CASSANDRA_COORDINATOR_DC),\n/* harmony export */   SEMATTRS_DB_CASSANDRA_COORDINATOR_ID: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_DB_CASSANDRA_COORDINATOR_ID),\n/* harmony export */   SEMATTRS_DB_CASSANDRA_IDEMPOTENCE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_DB_CASSANDRA_IDEMPOTENCE),\n/* harmony export */   SEMATTRS_DB_CASSANDRA_KEYSPACE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_DB_CASSANDRA_KEYSPACE),\n/* harmony export */   SEMATTRS_DB_CASSANDRA_PAGE_SIZE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_DB_CASSANDRA_PAGE_SIZE),\n/* harmony export */   SEMATTRS_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT),\n/* harmony export */   SEMATTRS_DB_CASSANDRA_TABLE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_DB_CASSANDRA_TABLE),\n/* harmony export */   SEMATTRS_DB_CONNECTION_STRING: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_DB_CONNECTION_STRING),\n/* harmony export */   SEMATTRS_DB_HBASE_NAMESPACE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_DB_HBASE_NAMESPACE),\n/* harmony export */   SEMATTRS_DB_JDBC_DRIVER_CLASSNAME: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_DB_JDBC_DRIVER_CLASSNAME),\n/* harmony export */   SEMATTRS_DB_MONGODB_COLLECTION: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_DB_MONGODB_COLLECTION),\n/* harmony export */   SEMATTRS_DB_MSSQL_INSTANCE_NAME: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_DB_MSSQL_INSTANCE_NAME),\n/* harmony export */   SEMATTRS_DB_NAME: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_DB_NAME),\n/* harmony export */   SEMATTRS_DB_OPERATION: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_DB_OPERATION),\n/* harmony export */   SEMATTRS_DB_REDIS_DATABASE_INDEX: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_DB_REDIS_DATABASE_INDEX),\n/* harmony export */   SEMATTRS_DB_SQL_TABLE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_DB_SQL_TABLE),\n/* harmony export */   SEMATTRS_DB_STATEMENT: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_DB_STATEMENT),\n/* harmony export */   SEMATTRS_DB_SYSTEM: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_DB_SYSTEM),\n/* harmony export */   SEMATTRS_DB_USER: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_DB_USER),\n/* harmony export */   SEMATTRS_ENDUSER_ID: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_ENDUSER_ID),\n/* harmony export */   SEMATTRS_ENDUSER_ROLE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_ENDUSER_ROLE),\n/* harmony export */   SEMATTRS_ENDUSER_SCOPE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_ENDUSER_SCOPE),\n/* harmony export */   SEMATTRS_EXCEPTION_ESCAPED: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_EXCEPTION_ESCAPED),\n/* harmony export */   SEMATTRS_EXCEPTION_MESSAGE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_EXCEPTION_MESSAGE),\n/* harmony export */   SEMATTRS_EXCEPTION_STACKTRACE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_EXCEPTION_STACKTRACE),\n/* harmony export */   SEMATTRS_EXCEPTION_TYPE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_EXCEPTION_TYPE),\n/* harmony export */   SEMATTRS_FAAS_COLDSTART: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_FAAS_COLDSTART),\n/* harmony export */   SEMATTRS_FAAS_CRON: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_FAAS_CRON),\n/* harmony export */   SEMATTRS_FAAS_DOCUMENT_COLLECTION: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_FAAS_DOCUMENT_COLLECTION),\n/* harmony export */   SEMATTRS_FAAS_DOCUMENT_NAME: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_FAAS_DOCUMENT_NAME),\n/* harmony export */   SEMATTRS_FAAS_DOCUMENT_OPERATION: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_FAAS_DOCUMENT_OPERATION),\n/* harmony export */   SEMATTRS_FAAS_DOCUMENT_TIME: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_FAAS_DOCUMENT_TIME),\n/* harmony export */   SEMATTRS_FAAS_EXECUTION: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_FAAS_EXECUTION),\n/* harmony export */   SEMATTRS_FAAS_INVOKED_NAME: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_FAAS_INVOKED_NAME),\n/* harmony export */   SEMATTRS_FAAS_INVOKED_PROVIDER: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_FAAS_INVOKED_PROVIDER),\n/* harmony export */   SEMATTRS_FAAS_INVOKED_REGION: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_FAAS_INVOKED_REGION),\n/* harmony export */   SEMATTRS_FAAS_TIME: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_FAAS_TIME),\n/* harmony export */   SEMATTRS_FAAS_TRIGGER: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_FAAS_TRIGGER),\n/* harmony export */   SEMATTRS_HTTP_CLIENT_IP: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_HTTP_CLIENT_IP),\n/* harmony export */   SEMATTRS_HTTP_FLAVOR: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_HTTP_FLAVOR),\n/* harmony export */   SEMATTRS_HTTP_HOST: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_HTTP_HOST),\n/* harmony export */   SEMATTRS_HTTP_METHOD: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_HTTP_METHOD),\n/* harmony export */   SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH),\n/* harmony export */   SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED),\n/* harmony export */   SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH),\n/* harmony export */   SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED),\n/* harmony export */   SEMATTRS_HTTP_ROUTE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_HTTP_ROUTE),\n/* harmony export */   SEMATTRS_HTTP_SCHEME: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_HTTP_SCHEME),\n/* harmony export */   SEMATTRS_HTTP_SERVER_NAME: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_HTTP_SERVER_NAME),\n/* harmony export */   SEMATTRS_HTTP_STATUS_CODE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_HTTP_STATUS_CODE),\n/* harmony export */   SEMATTRS_HTTP_TARGET: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_HTTP_TARGET),\n/* harmony export */   SEMATTRS_HTTP_URL: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_HTTP_URL),\n/* harmony export */   SEMATTRS_HTTP_USER_AGENT: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_HTTP_USER_AGENT),\n/* harmony export */   SEMATTRS_MESSAGE_COMPRESSED_SIZE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_MESSAGE_COMPRESSED_SIZE),\n/* harmony export */   SEMATTRS_MESSAGE_ID: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_MESSAGE_ID),\n/* harmony export */   SEMATTRS_MESSAGE_TYPE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_MESSAGE_TYPE),\n/* harmony export */   SEMATTRS_MESSAGE_UNCOMPRESSED_SIZE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_MESSAGE_UNCOMPRESSED_SIZE),\n/* harmony export */   SEMATTRS_MESSAGING_CONSUMER_ID: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_MESSAGING_CONSUMER_ID),\n/* harmony export */   SEMATTRS_MESSAGING_CONVERSATION_ID: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_MESSAGING_CONVERSATION_ID),\n/* harmony export */   SEMATTRS_MESSAGING_DESTINATION: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_MESSAGING_DESTINATION),\n/* harmony export */   SEMATTRS_MESSAGING_DESTINATION_KIND: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_MESSAGING_DESTINATION_KIND),\n/* harmony export */   SEMATTRS_MESSAGING_KAFKA_CLIENT_ID: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_MESSAGING_KAFKA_CLIENT_ID),\n/* harmony export */   SEMATTRS_MESSAGING_KAFKA_CONSUMER_GROUP: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_MESSAGING_KAFKA_CONSUMER_GROUP),\n/* harmony export */   SEMATTRS_MESSAGING_KAFKA_MESSAGE_KEY: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_MESSAGING_KAFKA_MESSAGE_KEY),\n/* harmony export */   SEMATTRS_MESSAGING_KAFKA_PARTITION: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_MESSAGING_KAFKA_PARTITION),\n/* harmony export */   SEMATTRS_MESSAGING_KAFKA_TOMBSTONE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_MESSAGING_KAFKA_TOMBSTONE),\n/* harmony export */   SEMATTRS_MESSAGING_MESSAGE_ID: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_MESSAGING_MESSAGE_ID),\n/* harmony export */   SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES),\n/* harmony export */   SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES),\n/* harmony export */   SEMATTRS_MESSAGING_OPERATION: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_MESSAGING_OPERATION),\n/* harmony export */   SEMATTRS_MESSAGING_PROTOCOL: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_MESSAGING_PROTOCOL),\n/* harmony export */   SEMATTRS_MESSAGING_PROTOCOL_VERSION: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_MESSAGING_PROTOCOL_VERSION),\n/* harmony export */   SEMATTRS_MESSAGING_RABBITMQ_ROUTING_KEY: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_MESSAGING_RABBITMQ_ROUTING_KEY),\n/* harmony export */   SEMATTRS_MESSAGING_SYSTEM: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_MESSAGING_SYSTEM),\n/* harmony export */   SEMATTRS_MESSAGING_TEMP_DESTINATION: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_MESSAGING_TEMP_DESTINATION),\n/* harmony export */   SEMATTRS_MESSAGING_URL: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_MESSAGING_URL),\n/* harmony export */   SEMATTRS_NET_HOST_CARRIER_ICC: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_NET_HOST_CARRIER_ICC),\n/* harmony export */   SEMATTRS_NET_HOST_CARRIER_MCC: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_NET_HOST_CARRIER_MCC),\n/* harmony export */   SEMATTRS_NET_HOST_CARRIER_MNC: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_NET_HOST_CARRIER_MNC),\n/* harmony export */   SEMATTRS_NET_HOST_CARRIER_NAME: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_NET_HOST_CARRIER_NAME),\n/* harmony export */   SEMATTRS_NET_HOST_CONNECTION_SUBTYPE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_NET_HOST_CONNECTION_SUBTYPE),\n/* harmony export */   SEMATTRS_NET_HOST_CONNECTION_TYPE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_NET_HOST_CONNECTION_TYPE),\n/* harmony export */   SEMATTRS_NET_HOST_IP: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_NET_HOST_IP),\n/* harmony export */   SEMATTRS_NET_HOST_NAME: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_NET_HOST_NAME),\n/* harmony export */   SEMATTRS_NET_HOST_PORT: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_NET_HOST_PORT),\n/* harmony export */   SEMATTRS_NET_PEER_IP: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_NET_PEER_IP),\n/* harmony export */   SEMATTRS_NET_PEER_NAME: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_NET_PEER_NAME),\n/* harmony export */   SEMATTRS_NET_PEER_PORT: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_NET_PEER_PORT),\n/* harmony export */   SEMATTRS_NET_TRANSPORT: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_NET_TRANSPORT),\n/* harmony export */   SEMATTRS_PEER_SERVICE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_PEER_SERVICE),\n/* harmony export */   SEMATTRS_RPC_GRPC_STATUS_CODE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_RPC_GRPC_STATUS_CODE),\n/* harmony export */   SEMATTRS_RPC_JSONRPC_ERROR_CODE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_RPC_JSONRPC_ERROR_CODE),\n/* harmony export */   SEMATTRS_RPC_JSONRPC_ERROR_MESSAGE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_RPC_JSONRPC_ERROR_MESSAGE),\n/* harmony export */   SEMATTRS_RPC_JSONRPC_REQUEST_ID: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_RPC_JSONRPC_REQUEST_ID),\n/* harmony export */   SEMATTRS_RPC_JSONRPC_VERSION: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_RPC_JSONRPC_VERSION),\n/* harmony export */   SEMATTRS_RPC_METHOD: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_RPC_METHOD),\n/* harmony export */   SEMATTRS_RPC_SERVICE: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_RPC_SERVICE),\n/* harmony export */   SEMATTRS_RPC_SYSTEM: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_RPC_SYSTEM),\n/* harmony export */   SEMATTRS_THREAD_ID: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_THREAD_ID),\n/* harmony export */   SEMATTRS_THREAD_NAME: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SEMATTRS_THREAD_NAME),\n/* harmony export */   SemanticAttributes: () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SemanticAttributes)\n/* harmony export */ });\n/* harmony import */ var _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SemanticAttributes */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/trace/SemanticAttributes.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable no-restricted-syntax --\n * These re-exports are only of constants, only one-level deep at this point,\n * and should not cause problems for tree-shakers.\n */\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3NlbWFudGljLWNvbnZlbnRpb25zL2J1aWxkL2VzbS90cmFjZS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDcUM7QUFDckMiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0ZpbmZsb3ctRW50ZXJwcmlzZS9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvc2VtYW50aWMtY29udmVudGlvbnMvYnVpbGQvZXNtL3RyYWNlL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1yZXN0cmljdGVkLXN5bnRheCAtLVxuICogVGhlc2UgcmUtZXhwb3J0cyBhcmUgb25seSBvZiBjb25zdGFudHMsIG9ubHkgb25lLWxldmVsIGRlZXAgYXQgdGhpcyBwb2ludCxcbiAqIGFuZCBzaG91bGQgbm90IGNhdXNlIHByb2JsZW1zIGZvciB0cmVlLXNoYWtlcnMuXG4gKi9cbmV4cG9ydCAqIGZyb20gJy4vU2VtYW50aWNBdHRyaWJ1dGVzJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/trace/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/sql-common/build/src/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@opentelemetry/sql-common/build/src/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.addSqlCommenterComment = void 0;\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst core_1 = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/index.js\");\n// NOTE: This function currently is returning false-positives\n// in cases where comment characters appear in string literals\n// (\"SELECT '-- not a comment';\" would return true, although has no comment)\nfunction hasValidSqlComment(query) {\n    const indexOpeningDashDashComment = query.indexOf('--');\n    if (indexOpeningDashDashComment >= 0) {\n        return true;\n    }\n    const indexOpeningSlashComment = query.indexOf('/*');\n    if (indexOpeningSlashComment < 0) {\n        return false;\n    }\n    const indexClosingSlashComment = query.indexOf('*/');\n    return indexOpeningDashDashComment < indexClosingSlashComment;\n}\n// sqlcommenter specification (https://google.github.io/sqlcommenter/spec/#value-serialization)\n// expects us to URL encode based on the RFC 3986 spec (https://en.wikipedia.org/wiki/Percent-encoding),\n// but encodeURIComponent does not handle some characters correctly (! ' ( ) *),\n// which means we need special handling for this\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\nfunction fixedEncodeURIComponent(str) {\n    return encodeURIComponent(str).replace(/[!'()*]/g, c => `%${c.charCodeAt(0).toString(16).toUpperCase()}`);\n}\nfunction addSqlCommenterComment(span, query) {\n    if (typeof query !== 'string' || query.length === 0) {\n        return query;\n    }\n    // As per sqlcommenter spec we shall not add a comment if there already is a comment\n    // in the query\n    if (hasValidSqlComment(query)) {\n        return query;\n    }\n    const propagator = new core_1.W3CTraceContextPropagator();\n    const headers = {};\n    propagator.inject(api_1.trace.setSpan(api_1.ROOT_CONTEXT, span), headers, api_1.defaultTextMapSetter);\n    // sqlcommenter spec requires keys in the comment to be sorted lexicographically\n    const sortedKeys = Object.keys(headers).sort();\n    if (sortedKeys.length === 0) {\n        return query;\n    }\n    const commentString = sortedKeys\n        .map(key => {\n        const encodedValue = fixedEncodeURIComponent(headers[key]);\n        return `${key}='${encodedValue}'`;\n    })\n        .join(',');\n    return `${query} /*${commentString}*/`;\n}\nexports.addSqlCommenterComment = addSqlCommenterComment;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3NxbC1jb21tb24vYnVpbGQvc3JjL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDhCQUE4QjtBQUM5QixjQUFjLG1CQUFPLENBQUMsNkZBQW9CO0FBQzFDLGVBQWUsbUJBQU8sQ0FBQywrRkFBcUI7QUFDNUM7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRUFBZ0UsMkNBQTJDO0FBQzNHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixJQUFJLElBQUksYUFBYTtBQUN2QyxLQUFLO0FBQ0w7QUFDQSxjQUFjLE9BQU8sSUFBSSxjQUFjO0FBQ3ZDO0FBQ0EsOEJBQThCO0FBQzlCIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9GaW5mbG93LUVudGVycHJpc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3NxbC1jb21tb24vYnVpbGQvc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYWRkU3FsQ29tbWVudGVyQ29tbWVudCA9IHZvaWQgMDtcbmNvbnN0IGFwaV8xID0gcmVxdWlyZShcIkBvcGVudGVsZW1ldHJ5L2FwaVwiKTtcbmNvbnN0IGNvcmVfMSA9IHJlcXVpcmUoXCJAb3BlbnRlbGVtZXRyeS9jb3JlXCIpO1xuLy8gTk9URTogVGhpcyBmdW5jdGlvbiBjdXJyZW50bHkgaXMgcmV0dXJuaW5nIGZhbHNlLXBvc2l0aXZlc1xuLy8gaW4gY2FzZXMgd2hlcmUgY29tbWVudCBjaGFyYWN0ZXJzIGFwcGVhciBpbiBzdHJpbmcgbGl0ZXJhbHNcbi8vIChcIlNFTEVDVCAnLS0gbm90IGEgY29tbWVudCc7XCIgd291bGQgcmV0dXJuIHRydWUsIGFsdGhvdWdoIGhhcyBubyBjb21tZW50KVxuZnVuY3Rpb24gaGFzVmFsaWRTcWxDb21tZW50KHF1ZXJ5KSB7XG4gICAgY29uc3QgaW5kZXhPcGVuaW5nRGFzaERhc2hDb21tZW50ID0gcXVlcnkuaW5kZXhPZignLS0nKTtcbiAgICBpZiAoaW5kZXhPcGVuaW5nRGFzaERhc2hDb21tZW50ID49IDApIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNvbnN0IGluZGV4T3BlbmluZ1NsYXNoQ29tbWVudCA9IHF1ZXJ5LmluZGV4T2YoJy8qJyk7XG4gICAgaWYgKGluZGV4T3BlbmluZ1NsYXNoQ29tbWVudCA8IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBpbmRleENsb3NpbmdTbGFzaENvbW1lbnQgPSBxdWVyeS5pbmRleE9mKCcqLycpO1xuICAgIHJldHVybiBpbmRleE9wZW5pbmdEYXNoRGFzaENvbW1lbnQgPCBpbmRleENsb3NpbmdTbGFzaENvbW1lbnQ7XG59XG4vLyBzcWxjb21tZW50ZXIgc3BlY2lmaWNhdGlvbiAoaHR0cHM6Ly9nb29nbGUuZ2l0aHViLmlvL3NxbGNvbW1lbnRlci9zcGVjLyN2YWx1ZS1zZXJpYWxpemF0aW9uKVxuLy8gZXhwZWN0cyB1cyB0byBVUkwgZW5jb2RlIGJhc2VkIG9uIHRoZSBSRkMgMzk4NiBzcGVjIChodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9QZXJjZW50LWVuY29kaW5nKSxcbi8vIGJ1dCBlbmNvZGVVUklDb21wb25lbnQgZG9lcyBub3QgaGFuZGxlIHNvbWUgY2hhcmFjdGVycyBjb3JyZWN0bHkgKCEgJyAoICkgKiksXG4vLyB3aGljaCBtZWFucyB3ZSBuZWVkIHNwZWNpYWwgaGFuZGxpbmcgZm9yIHRoaXNcbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL2VuY29kZVVSSUNvbXBvbmVudFxuZnVuY3Rpb24gZml4ZWRFbmNvZGVVUklDb21wb25lbnQoc3RyKSB7XG4gICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHIpLnJlcGxhY2UoL1shJygpKl0vZywgYyA9PiBgJSR7Yy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpfWApO1xufVxuZnVuY3Rpb24gYWRkU3FsQ29tbWVudGVyQ29tbWVudChzcGFuLCBxdWVyeSkge1xuICAgIGlmICh0eXBlb2YgcXVlcnkgIT09ICdzdHJpbmcnIHx8IHF1ZXJ5Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gcXVlcnk7XG4gICAgfVxuICAgIC8vIEFzIHBlciBzcWxjb21tZW50ZXIgc3BlYyB3ZSBzaGFsbCBub3QgYWRkIGEgY29tbWVudCBpZiB0aGVyZSBhbHJlYWR5IGlzIGEgY29tbWVudFxuICAgIC8vIGluIHRoZSBxdWVyeVxuICAgIGlmIChoYXNWYWxpZFNxbENvbW1lbnQocXVlcnkpKSB7XG4gICAgICAgIHJldHVybiBxdWVyeTtcbiAgICB9XG4gICAgY29uc3QgcHJvcGFnYXRvciA9IG5ldyBjb3JlXzEuVzNDVHJhY2VDb250ZXh0UHJvcGFnYXRvcigpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBwcm9wYWdhdG9yLmluamVjdChhcGlfMS50cmFjZS5zZXRTcGFuKGFwaV8xLlJPT1RfQ09OVEVYVCwgc3BhbiksIGhlYWRlcnMsIGFwaV8xLmRlZmF1bHRUZXh0TWFwU2V0dGVyKTtcbiAgICAvLyBzcWxjb21tZW50ZXIgc3BlYyByZXF1aXJlcyBrZXlzIGluIHRoZSBjb21tZW50IHRvIGJlIHNvcnRlZCBsZXhpY29ncmFwaGljYWxseVxuICAgIGNvbnN0IHNvcnRlZEtleXMgPSBPYmplY3Qua2V5cyhoZWFkZXJzKS5zb3J0KCk7XG4gICAgaWYgKHNvcnRlZEtleXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBxdWVyeTtcbiAgICB9XG4gICAgY29uc3QgY29tbWVudFN0cmluZyA9IHNvcnRlZEtleXNcbiAgICAgICAgLm1hcChrZXkgPT4ge1xuICAgICAgICBjb25zdCBlbmNvZGVkVmFsdWUgPSBmaXhlZEVuY29kZVVSSUNvbXBvbmVudChoZWFkZXJzW2tleV0pO1xuICAgICAgICByZXR1cm4gYCR7a2V5fT0nJHtlbmNvZGVkVmFsdWV9J2A7XG4gICAgfSlcbiAgICAgICAgLmpvaW4oJywnKTtcbiAgICByZXR1cm4gYCR7cXVlcnl9IC8qJHtjb21tZW50U3RyaW5nfSovYDtcbn1cbmV4cG9ydHMuYWRkU3FsQ29tbWVudGVyQ29tbWVudCA9IGFkZFNxbENvbW1lbnRlckNvbW1lbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/sql-common/build/src/index.js\n");

/***/ })

};
;